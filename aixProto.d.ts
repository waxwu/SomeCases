import * as $protobuf from 'protobufjs'
/** Namespace sprout. */
export namespace sprout {
  /** Namespace aixcourse. */
  namespace aixcourse {
    /** Properties of an Activity. */
    interface IActivity {
      /** Activity id */
      id?: number | Long | null

      /** Activity type */
      type?: core_course.ActivityType.Enum | null

      /** Activity asset */
      asset?: core_course.IPBAsset | null

      /** Activity aixVideoLayout */
      aixVideoLayout?: sprout.aixcourse.AixVideoLayout.Enum | null

      /** Activity activityParts */
      activityParts?: sprout.aixcourse.IActivityPart[] | null

      /** Activity aixVideoCollections */
      aixVideoCollections?: sprout.aixcourse.IAixVideoCollection[] | null

      /** Activity resource */
      resource?: sprout.aixcourse.Activity.IResource | null

      /** Activity sr */
      sr?: sprout.aixcourse.IStoryResponse | null

      /** Activity tr */
      tr?: sprout.aixcourse.ITeachingResponse | null

      /** Activity aixAudioCollections */
      aixAudioCollections?: sprout.aixcourse.IAixAudioCollection[] | null

      /** Activity skin */
      skin?: sprout.aixcourse.ActivitySkinType.Enum | null

      /** Activity originalMetadata */
      originalMetadata?: string | null
    }

    /** Represents an Activity. */
    class Activity implements IActivity {
      /**
       * Constructs a new Activity.
       * @param [properties] Properties to set
       */
      constructor(properties?: sprout.aixcourse.IActivity)

      /** Activity id. */
      public id: number | Long

      /** Activity type. */
      public type: core_course.ActivityType.Enum

      /** Activity asset. */
      public asset?: core_course.IPBAsset | null

      /** Activity aixVideoLayout. */
      public aixVideoLayout: sprout.aixcourse.AixVideoLayout.Enum

      /** Activity activityParts. */
      public activityParts: sprout.aixcourse.IActivityPart[]

      /** Activity aixVideoCollections. */
      public aixVideoCollections: sprout.aixcourse.IAixVideoCollection[]

      /** Activity resource. */
      public resource?: sprout.aixcourse.Activity.IResource | null

      /** Activity sr. */
      public sr?: sprout.aixcourse.IStoryResponse | null

      /** Activity tr. */
      public tr?: sprout.aixcourse.ITeachingResponse | null

      /** Activity aixAudioCollections. */
      public aixAudioCollections: sprout.aixcourse.IAixAudioCollection[]

      /** Activity skin. */
      public skin: sprout.aixcourse.ActivitySkinType.Enum

      /** Activity originalMetadata. */
      public originalMetadata: string

      /**
       * Creates a new Activity instance using the specified properties.
       * @param [properties] Properties to set
       * @returns Activity instance
       */
      public static create(
        properties?: sprout.aixcourse.IActivity,
      ): sprout.aixcourse.Activity

      /**
       * Encodes the specified Activity message. Does not implicitly {@link sprout.aixcourse.Activity.verify|verify} messages.
       * @param message Activity message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encode(
        message: sprout.aixcourse.IActivity,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Encodes the specified Activity message, length delimited. Does not implicitly {@link sprout.aixcourse.Activity.verify|verify} messages.
       * @param message Activity message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encodeDelimited(
        message: sprout.aixcourse.IActivity,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Decodes an Activity message from the specified reader or buffer.
       * @param reader Reader or buffer to decode from
       * @param [length] Message length if known beforehand
       * @returns Activity
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decode(
        reader: $protobuf.Reader | Uint8Array,
        length?: number,
      ): sprout.aixcourse.Activity

      /**
       * Decodes an Activity message from the specified reader or buffer, length delimited.
       * @param reader Reader or buffer to decode from
       * @returns Activity
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decodeDelimited(
        reader: $protobuf.Reader | Uint8Array,
      ): sprout.aixcourse.Activity

      /**
       * Verifies an Activity message.
       * @param message Plain object to verify
       * @returns `null` if valid, otherwise the reason why it is not
       */
      public static verify(message: { [k: string]: any }): string | null

      /**
       * Creates an Activity message from a plain object. Also converts values to their respective internal types.
       * @param object Plain object
       * @returns Activity
       */
      public static fromObject(object: {
        [k: string]: any
      }): sprout.aixcourse.Activity

      /**
       * Creates a plain object from an Activity message. Also converts values to other types if specified.
       * @param message Activity
       * @param [options] Conversion options
       * @returns Plain object
       */
      public static toObject(
        message: sprout.aixcourse.Activity,
        options?: $protobuf.IConversionOptions,
      ): { [k: string]: any }

      /**
       * Converts this Activity to JSON.
       * @returns JSON object
       */
      public toJSON(): { [k: string]: any }
    }

    namespace Activity {
      /** Properties of a Resource. */
      interface IResource {
        /** Resource backgroundPictureId */
        backgroundPictureId?: string | null
      }

      /** Represents a Resource. */
      class Resource implements IResource {
        /**
         * Constructs a new Resource.
         * @param [properties] Properties to set
         */
        constructor(properties?: sprout.aixcourse.Activity.IResource)

        /** Resource backgroundPictureId. */
        public backgroundPictureId: string

        /**
         * Creates a new Resource instance using the specified properties.
         * @param [properties] Properties to set
         * @returns Resource instance
         */
        public static create(
          properties?: sprout.aixcourse.Activity.IResource,
        ): sprout.aixcourse.Activity.Resource

        /**
         * Encodes the specified Resource message. Does not implicitly {@link sprout.aixcourse.Activity.Resource.verify|verify} messages.
         * @param message Resource message or plain object to encode
         * @param [writer] Writer to encode to
         * @returns Writer
         */
        public static encode(
          message: sprout.aixcourse.Activity.IResource,
          writer?: $protobuf.Writer,
        ): $protobuf.Writer

        /**
         * Encodes the specified Resource message, length delimited. Does not implicitly {@link sprout.aixcourse.Activity.Resource.verify|verify} messages.
         * @param message Resource message or plain object to encode
         * @param [writer] Writer to encode to
         * @returns Writer
         */
        public static encodeDelimited(
          message: sprout.aixcourse.Activity.IResource,
          writer?: $protobuf.Writer,
        ): $protobuf.Writer

        /**
         * Decodes a Resource message from the specified reader or buffer.
         * @param reader Reader or buffer to decode from
         * @param [length] Message length if known beforehand
         * @returns Resource
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        public static decode(
          reader: $protobuf.Reader | Uint8Array,
          length?: number,
        ): sprout.aixcourse.Activity.Resource

        /**
         * Decodes a Resource message from the specified reader or buffer, length delimited.
         * @param reader Reader or buffer to decode from
         * @returns Resource
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        public static decodeDelimited(
          reader: $protobuf.Reader | Uint8Array,
        ): sprout.aixcourse.Activity.Resource

        /**
         * Verifies a Resource message.
         * @param message Plain object to verify
         * @returns `null` if valid, otherwise the reason why it is not
         */
        public static verify(message: { [k: string]: any }): string | null

        /**
         * Creates a Resource message from a plain object. Also converts values to their respective internal types.
         * @param object Plain object
         * @returns Resource
         */
        public static fromObject(object: {
          [k: string]: any
        }): sprout.aixcourse.Activity.Resource

        /**
         * Creates a plain object from a Resource message. Also converts values to other types if specified.
         * @param message Resource
         * @param [options] Conversion options
         * @returns Plain object
         */
        public static toObject(
          message: sprout.aixcourse.Activity.Resource,
          options?: $protobuf.IConversionOptions,
        ): { [k: string]: any }

        /**
         * Converts this Resource to JSON.
         * @returns JSON object
         */
        public toJSON(): { [k: string]: any }
      }
    }

    /** Properties of a StoryResponse. */
    interface IStoryResponse {
      /** StoryResponse startPictureId */
      startPictureId?: string | null

      /** StoryResponse endPictureId */
      endPictureId?: string | null
    }

    /** Represents a StoryResponse. */
    class StoryResponse implements IStoryResponse {
      /**
       * Constructs a new StoryResponse.
       * @param [properties] Properties to set
       */
      constructor(properties?: sprout.aixcourse.IStoryResponse)

      /** StoryResponse startPictureId. */
      public startPictureId: string

      /** StoryResponse endPictureId. */
      public endPictureId: string

      /**
       * Creates a new StoryResponse instance using the specified properties.
       * @param [properties] Properties to set
       * @returns StoryResponse instance
       */
      public static create(
        properties?: sprout.aixcourse.IStoryResponse,
      ): sprout.aixcourse.StoryResponse

      /**
       * Encodes the specified StoryResponse message. Does not implicitly {@link sprout.aixcourse.StoryResponse.verify|verify} messages.
       * @param message StoryResponse message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encode(
        message: sprout.aixcourse.IStoryResponse,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Encodes the specified StoryResponse message, length delimited. Does not implicitly {@link sprout.aixcourse.StoryResponse.verify|verify} messages.
       * @param message StoryResponse message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encodeDelimited(
        message: sprout.aixcourse.IStoryResponse,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Decodes a StoryResponse message from the specified reader or buffer.
       * @param reader Reader or buffer to decode from
       * @param [length] Message length if known beforehand
       * @returns StoryResponse
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decode(
        reader: $protobuf.Reader | Uint8Array,
        length?: number,
      ): sprout.aixcourse.StoryResponse

      /**
       * Decodes a StoryResponse message from the specified reader or buffer, length delimited.
       * @param reader Reader or buffer to decode from
       * @returns StoryResponse
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decodeDelimited(
        reader: $protobuf.Reader | Uint8Array,
      ): sprout.aixcourse.StoryResponse

      /**
       * Verifies a StoryResponse message.
       * @param message Plain object to verify
       * @returns `null` if valid, otherwise the reason why it is not
       */
      public static verify(message: { [k: string]: any }): string | null

      /**
       * Creates a StoryResponse message from a plain object. Also converts values to their respective internal types.
       * @param object Plain object
       * @returns StoryResponse
       */
      public static fromObject(object: {
        [k: string]: any
      }): sprout.aixcourse.StoryResponse

      /**
       * Creates a plain object from a StoryResponse message. Also converts values to other types if specified.
       * @param message StoryResponse
       * @param [options] Conversion options
       * @returns Plain object
       */
      public static toObject(
        message: sprout.aixcourse.StoryResponse,
        options?: $protobuf.IConversionOptions,
      ): { [k: string]: any }

      /**
       * Converts this StoryResponse to JSON.
       * @returns JSON object
       */
      public toJSON(): { [k: string]: any }
    }

    /** Properties of a TeachingResponse. */
    interface ITeachingResponse {
      /** TeachingResponse coordinatePicture */
      coordinatePicture?: sprout.aixcourse.ICoordinatePicture | null
    }

    /** Represents a TeachingResponse. */
    class TeachingResponse implements ITeachingResponse {
      /**
       * Constructs a new TeachingResponse.
       * @param [properties] Properties to set
       */
      constructor(properties?: sprout.aixcourse.ITeachingResponse)

      /** TeachingResponse coordinatePicture. */
      public coordinatePicture?: sprout.aixcourse.ICoordinatePicture | null

      /**
       * Creates a new TeachingResponse instance using the specified properties.
       * @param [properties] Properties to set
       * @returns TeachingResponse instance
       */
      public static create(
        properties?: sprout.aixcourse.ITeachingResponse,
      ): sprout.aixcourse.TeachingResponse

      /**
       * Encodes the specified TeachingResponse message. Does not implicitly {@link sprout.aixcourse.TeachingResponse.verify|verify} messages.
       * @param message TeachingResponse message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encode(
        message: sprout.aixcourse.ITeachingResponse,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Encodes the specified TeachingResponse message, length delimited. Does not implicitly {@link sprout.aixcourse.TeachingResponse.verify|verify} messages.
       * @param message TeachingResponse message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encodeDelimited(
        message: sprout.aixcourse.ITeachingResponse,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Decodes a TeachingResponse message from the specified reader or buffer.
       * @param reader Reader or buffer to decode from
       * @param [length] Message length if known beforehand
       * @returns TeachingResponse
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decode(
        reader: $protobuf.Reader | Uint8Array,
        length?: number,
      ): sprout.aixcourse.TeachingResponse

      /**
       * Decodes a TeachingResponse message from the specified reader or buffer, length delimited.
       * @param reader Reader or buffer to decode from
       * @returns TeachingResponse
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decodeDelimited(
        reader: $protobuf.Reader | Uint8Array,
      ): sprout.aixcourse.TeachingResponse

      /**
       * Verifies a TeachingResponse message.
       * @param message Plain object to verify
       * @returns `null` if valid, otherwise the reason why it is not
       */
      public static verify(message: { [k: string]: any }): string | null

      /**
       * Creates a TeachingResponse message from a plain object. Also converts values to their respective internal types.
       * @param object Plain object
       * @returns TeachingResponse
       */
      public static fromObject(object: {
        [k: string]: any
      }): sprout.aixcourse.TeachingResponse

      /**
       * Creates a plain object from a TeachingResponse message. Also converts values to other types if specified.
       * @param message TeachingResponse
       * @param [options] Conversion options
       * @returns Plain object
       */
      public static toObject(
        message: sprout.aixcourse.TeachingResponse,
        options?: $protobuf.IConversionOptions,
      ): { [k: string]: any }

      /**
       * Converts this TeachingResponse to JSON.
       * @returns JSON object
       */
      public toJSON(): { [k: string]: any }
    }

    /** Properties of an ActivityPart. */
    interface IActivityPart {
      /** ActivityPart presentationTeaching */
      presentationTeaching?: sprout.aixcourse.IPresentationTeaching | null

      /** ActivityPart presentationAward */
      presentationAward?: sprout.aixcourse.IPresentationAward | null

      /** ActivityPart presentationExchange */
      presentationExchange?: sprout.aixcourse.IPresentationExchange | null

      /** ActivityPart a2a */
      a2a?: sprout.aixcourse.IA2A | null

      /** ActivityPart a2aFree */
      a2aFree?: sprout.aixcourse.IA2AFree | null

      /** ActivityPart a2pPuzzle */
      a2pPuzzle?: sprout.aixcourse.IA2PPuzzle | null

      /** ActivityPart a2pTool */
      a2pTool?: sprout.aixcourse.IA2PTool | null

      /** ActivityPart a2pDrag_2 */
      a2pDrag_2?: sprout.aixcourse.IA2PDrag2 | null

      /** ActivityPart a2pTap_1 */
      a2pTap_1?: sprout.aixcourse.IA2PTap | null

      /** ActivityPart pa2aBuild_1 */
      pa2aBuild_1?: sprout.aixcourse.IPA2ABuild | null

      /** ActivityPart a2pDrag_1 */
      a2pDrag_1?: sprout.aixcourse.IA2PDrag1 | null

      /** ActivityPart pa2aFree */
      pa2aFree?: sprout.aixcourse.IPA2AFree | null

      /** ActivityPart pa2aTrigger */
      pa2aTrigger?: sprout.aixcourse.IPA2ATrigger | null

      /** ActivityPart pa2aJet_1 */
      pa2aJet_1?: sprout.aixcourse.IPA2AJet | null

      /** ActivityPart pa2aJet_2 */
      pa2aJet_2?: sprout.aixcourse.IPA2AJet | null

      /** ActivityPart pat2pFall */
      pat2pFall?: sprout.aixcourse.IPAT2PFall | null

      /** ActivityPart a2pDrag_3 */
      a2pDrag_3?: sprout.aixcourse.IA2PDrag2 | null

      /** ActivityPart a2pTap_2 */
      a2pTap_2?: sprout.aixcourse.IA2PTap | null

      /** ActivityPart pa2aBuild_2 */
      pa2aBuild_2?: sprout.aixcourse.IPA2ABuild | null

      /** ActivityPart pa2pReveal */
      pa2pReveal?: sprout.aixcourse.IPA2PReveal | null

      /** ActivityPart a2pMole */
      a2pMole?: sprout.aixcourse.IA2PMole | null

      /** ActivityPart t2pMole */
      t2pMole?: sprout.aixcourse.IT2PMole | null

      /** ActivityPart pa2aRolePlay_1 */
      pa2aRolePlay_1?: sprout.aixcourse.IPA2ARolePlay | null

      /** ActivityPart pa2aRolePlay_2 */
      pa2aRolePlay_2?: sprout.aixcourse.IPA2ARolePlay | null

      /** ActivityPart a2pFree */
      a2pFree?: sprout.aixcourse.IA2PFree | null

      /** ActivityPart videoPlay */
      videoPlay?: sprout.aixcourse.IVideoPlay | null

      /** ActivityPart pat2aX */
      pat2aX?: sprout.aixcourse.IPAT2AX | null

      /** ActivityPart at2pX */
      at2pX?: sprout.aixcourse.IAT2PX | null

      /** ActivityPart videoPlayX */
      videoPlayX?: sprout.aixcourse.IVideoPlayX | null

      /** ActivityPart a2pDrag_2X */
      a2pDrag_2X?: sprout.aixcourse.IA2PDrag2X | null

      /** ActivityPart a2pDrag_3X */
      a2pDrag_3X?: sprout.aixcourse.IA2PDrag2X | null

      /** ActivityPart pa2aBuild_1X */
      pa2aBuild_1X?: sprout.aixcourse.IPA2ABuildX | null

      /** ActivityPart pa2aBuild_2X */
      pa2aBuild_2X?: sprout.aixcourse.IPA2ABuildX | null

      /** ActivityPart pa2aWheel_1 */
      pa2aWheel_1?: sprout.aixcourse.IPA2AWheel | null

      /** ActivityPart pa2aWheel_2 */
      pa2aWheel_2?: sprout.aixcourse.IPA2AWheel | null

      /** ActivityPart at2pBump */
      at2pBump?: sprout.aixcourse.IAT2PBump | null

      /** ActivityPart pat2tX */
      pat2tX?: sprout.aixcourse.IPAT2TX | null

      /** ActivityPart a2pPuzzleX */
      a2pPuzzleX?: sprout.aixcourse.IA2PPuzzleX | null

      /** ActivityPart a2pToolX */
      a2pToolX?: sprout.aixcourse.IA2PToolX | null

      /** ActivityPart a2pTap_1X */
      a2pTap_1X?: sprout.aixcourse.IA2PTapX | null

      /** ActivityPart a2pTap_2X */
      a2pTap_2X?: sprout.aixcourse.IA2PTapX | null

      /** ActivityPart pa2aJet_1X */
      pa2aJet_1X?: sprout.aixcourse.IPA2AJetX | null

      /** ActivityPart pa2aJet_2X */
      pa2aJet_2X?: sprout.aixcourse.IPA2AJetX | null

      /** ActivityPart pat2pFallX */
      pat2pFallX?: sprout.aixcourse.IPAT2PFallX | null

      /** ActivityPart pa2aWheel_1X */
      pa2aWheel_1X?: sprout.aixcourse.IPA2AWheelX | null

      /** ActivityPart pa2aWheel_2X */
      pa2aWheel_2X?: sprout.aixcourse.IPA2AWheelX | null

      /** ActivityPart at2pBumpX */
      at2pBumpX?: sprout.aixcourse.IAT2PBumpX | null

      /** ActivityPart a2pMoleX */
      a2pMoleX?: sprout.aixcourse.IA2PMoleX | null

      /** ActivityPart a2pDrag_1X */
      a2pDrag_1X?: sprout.aixcourse.IA2PDrag1X | null

      /** ActivityPart pa2pRevealX */
      pa2pRevealX?: sprout.aixcourse.IPA2PRevealX | null

      /** ActivityPart pat2tBridgeX */
      pat2tBridgeX?: sprout.aixcourse.IPAT2TBridgeX | null

      /** ActivityPart at2pPassBy */
      at2pPassBy?: sprout.aixcourse.IAT2PPassBy | null

      /** ActivityPart at2pPassByX */
      at2pPassByX?: sprout.aixcourse.IAT2PPassByX | null

      /** ActivityPart animatedPresentation */
      animatedPresentation?: sprout.aixcourse.IAnimatedPresentation | null

      /** ActivityPart pat2aRepeat_1 */
      pat2aRepeat_1?: sprout.aixcourse.IPAT2ARepeat | null

      /** ActivityPart pat2aRepeat_1X */
      pat2aRepeat_1X?: sprout.aixcourse.IPAT2ARepeatX | null

      /** ActivityPart at2pAdventure */
      at2pAdventure?: sprout.aixcourse.IAT2PAdventure | null

      /** ActivityPart a2pVoteX */
      a2pVoteX?: sprout.aixcourse.IA2PVoteX | null

      /** ActivityPart pa2aVoteX */
      pa2aVoteX?: sprout.aixcourse.IPA2AVoteX | null

      /** ActivityPart a2aRecordFreeX */
      a2aRecordFreeX?: sprout.aixcourse.IA2ARecordFreeX | null

      /** ActivityPart pa2aRolePlay_1X */
      pa2aRolePlay_1X?: sprout.aixcourse.IPA2ARolePlayX | null

      /** ActivityPart a2pFreeX */
      a2pFreeX?: sprout.aixcourse.IA2PFreeX | null

      /** ActivityPart pa2aFreeX */
      pa2aFreeX?: sprout.aixcourse.IPA2AFreeX | null

      /** ActivityPart partTr */
      partTr?: sprout.aixcourse.ActivityPart.IPartTeachingResponse | null

      /** ActivityPart partHint */
      partHint?: sprout.aixcourse.ActivityPart.IPartHint | null
    }

    /** Represents an ActivityPart. */
    class ActivityPart implements IActivityPart {
      /**
       * Constructs a new ActivityPart.
       * @param [properties] Properties to set
       */
      constructor(properties?: sprout.aixcourse.IActivityPart)

      /** ActivityPart presentationTeaching. */
      public presentationTeaching?: sprout.aixcourse.IPresentationTeaching | null

      /** ActivityPart presentationAward. */
      public presentationAward?: sprout.aixcourse.IPresentationAward | null

      /** ActivityPart presentationExchange. */
      public presentationExchange?: sprout.aixcourse.IPresentationExchange | null

      /** ActivityPart a2a. */
      public a2a?: sprout.aixcourse.IA2A | null

      /** ActivityPart a2aFree. */
      public a2aFree?: sprout.aixcourse.IA2AFree | null

      /** ActivityPart a2pPuzzle. */
      public a2pPuzzle?: sprout.aixcourse.IA2PPuzzle | null

      /** ActivityPart a2pTool. */
      public a2pTool?: sprout.aixcourse.IA2PTool | null

      /** ActivityPart a2pDrag_2. */
      public a2pDrag_2?: sprout.aixcourse.IA2PDrag2 | null

      /** ActivityPart a2pTap_1. */
      public a2pTap_1?: sprout.aixcourse.IA2PTap | null

      /** ActivityPart pa2aBuild_1. */
      public pa2aBuild_1?: sprout.aixcourse.IPA2ABuild | null

      /** ActivityPart a2pDrag_1. */
      public a2pDrag_1?: sprout.aixcourse.IA2PDrag1 | null

      /** ActivityPart pa2aFree. */
      public pa2aFree?: sprout.aixcourse.IPA2AFree | null

      /** ActivityPart pa2aTrigger. */
      public pa2aTrigger?: sprout.aixcourse.IPA2ATrigger | null

      /** ActivityPart pa2aJet_1. */
      public pa2aJet_1?: sprout.aixcourse.IPA2AJet | null

      /** ActivityPart pa2aJet_2. */
      public pa2aJet_2?: sprout.aixcourse.IPA2AJet | null

      /** ActivityPart pat2pFall. */
      public pat2pFall?: sprout.aixcourse.IPAT2PFall | null

      /** ActivityPart a2pDrag_3. */
      public a2pDrag_3?: sprout.aixcourse.IA2PDrag2 | null

      /** ActivityPart a2pTap_2. */
      public a2pTap_2?: sprout.aixcourse.IA2PTap | null

      /** ActivityPart pa2aBuild_2. */
      public pa2aBuild_2?: sprout.aixcourse.IPA2ABuild | null

      /** ActivityPart pa2pReveal. */
      public pa2pReveal?: sprout.aixcourse.IPA2PReveal | null

      /** ActivityPart a2pMole. */
      public a2pMole?: sprout.aixcourse.IA2PMole | null

      /** ActivityPart t2pMole. */
      public t2pMole?: sprout.aixcourse.IT2PMole | null

      /** ActivityPart pa2aRolePlay_1. */
      public pa2aRolePlay_1?: sprout.aixcourse.IPA2ARolePlay | null

      /** ActivityPart pa2aRolePlay_2. */
      public pa2aRolePlay_2?: sprout.aixcourse.IPA2ARolePlay | null

      /** ActivityPart a2pFree. */
      public a2pFree?: sprout.aixcourse.IA2PFree | null

      /** ActivityPart videoPlay. */
      public videoPlay?: sprout.aixcourse.IVideoPlay | null

      /** ActivityPart pat2aX. */
      public pat2aX?: sprout.aixcourse.IPAT2AX | null

      /** ActivityPart at2pX. */
      public at2pX?: sprout.aixcourse.IAT2PX | null

      /** ActivityPart videoPlayX. */
      public videoPlayX?: sprout.aixcourse.IVideoPlayX | null

      /** ActivityPart a2pDrag_2X. */
      public a2pDrag_2X?: sprout.aixcourse.IA2PDrag2X | null

      /** ActivityPart a2pDrag_3X. */
      public a2pDrag_3X?: sprout.aixcourse.IA2PDrag2X | null

      /** ActivityPart pa2aBuild_1X. */
      public pa2aBuild_1X?: sprout.aixcourse.IPA2ABuildX | null

      /** ActivityPart pa2aBuild_2X. */
      public pa2aBuild_2X?: sprout.aixcourse.IPA2ABuildX | null

      /** ActivityPart pa2aWheel_1. */
      public pa2aWheel_1?: sprout.aixcourse.IPA2AWheel | null

      /** ActivityPart pa2aWheel_2. */
      public pa2aWheel_2?: sprout.aixcourse.IPA2AWheel | null

      /** ActivityPart at2pBump. */
      public at2pBump?: sprout.aixcourse.IAT2PBump | null

      /** ActivityPart pat2tX. */
      public pat2tX?: sprout.aixcourse.IPAT2TX | null

      /** ActivityPart a2pPuzzleX. */
      public a2pPuzzleX?: sprout.aixcourse.IA2PPuzzleX | null

      /** ActivityPart a2pToolX. */
      public a2pToolX?: sprout.aixcourse.IA2PToolX | null

      /** ActivityPart a2pTap_1X. */
      public a2pTap_1X?: sprout.aixcourse.IA2PTapX | null

      /** ActivityPart a2pTap_2X. */
      public a2pTap_2X?: sprout.aixcourse.IA2PTapX | null

      /** ActivityPart pa2aJet_1X. */
      public pa2aJet_1X?: sprout.aixcourse.IPA2AJetX | null

      /** ActivityPart pa2aJet_2X. */
      public pa2aJet_2X?: sprout.aixcourse.IPA2AJetX | null

      /** ActivityPart pat2pFallX. */
      public pat2pFallX?: sprout.aixcourse.IPAT2PFallX | null

      /** ActivityPart pa2aWheel_1X. */
      public pa2aWheel_1X?: sprout.aixcourse.IPA2AWheelX | null

      /** ActivityPart pa2aWheel_2X. */
      public pa2aWheel_2X?: sprout.aixcourse.IPA2AWheelX | null

      /** ActivityPart at2pBumpX. */
      public at2pBumpX?: sprout.aixcourse.IAT2PBumpX | null

      /** ActivityPart a2pMoleX. */
      public a2pMoleX?: sprout.aixcourse.IA2PMoleX | null

      /** ActivityPart a2pDrag_1X. */
      public a2pDrag_1X?: sprout.aixcourse.IA2PDrag1X | null

      /** ActivityPart pa2pRevealX. */
      public pa2pRevealX?: sprout.aixcourse.IPA2PRevealX | null

      /** ActivityPart pat2tBridgeX. */
      public pat2tBridgeX?: sprout.aixcourse.IPAT2TBridgeX | null

      /** ActivityPart at2pPassBy. */
      public at2pPassBy?: sprout.aixcourse.IAT2PPassBy | null

      /** ActivityPart at2pPassByX. */
      public at2pPassByX?: sprout.aixcourse.IAT2PPassByX | null

      /** ActivityPart animatedPresentation. */
      public animatedPresentation?: sprout.aixcourse.IAnimatedPresentation | null

      /** ActivityPart pat2aRepeat_1. */
      public pat2aRepeat_1?: sprout.aixcourse.IPAT2ARepeat | null

      /** ActivityPart pat2aRepeat_1X. */
      public pat2aRepeat_1X?: sprout.aixcourse.IPAT2ARepeatX | null

      /** ActivityPart at2pAdventure. */
      public at2pAdventure?: sprout.aixcourse.IAT2PAdventure | null

      /** ActivityPart a2pVoteX. */
      public a2pVoteX?: sprout.aixcourse.IA2PVoteX | null

      /** ActivityPart pa2aVoteX. */
      public pa2aVoteX?: sprout.aixcourse.IPA2AVoteX | null

      /** ActivityPart a2aRecordFreeX. */
      public a2aRecordFreeX?: sprout.aixcourse.IA2ARecordFreeX | null

      /** ActivityPart pa2aRolePlay_1X. */
      public pa2aRolePlay_1X?: sprout.aixcourse.IPA2ARolePlayX | null

      /** ActivityPart a2pFreeX. */
      public a2pFreeX?: sprout.aixcourse.IA2PFreeX | null

      /** ActivityPart pa2aFreeX. */
      public pa2aFreeX?: sprout.aixcourse.IPA2AFreeX | null

      /** ActivityPart partTr. */
      public partTr?: sprout.aixcourse.ActivityPart.IPartTeachingResponse | null

      /** ActivityPart partHint. */
      public partHint?: sprout.aixcourse.ActivityPart.IPartHint | null

      /** ActivityPart contentOneof. */
      public contentOneof?:
        | 'presentationTeaching'
        | 'presentationAward'
        | 'presentationExchange'
        | 'a2a'
        | 'a2aFree'
        | 'a2pPuzzle'
        | 'a2pTool'
        | 'a2pDrag_2'
        | 'a2pTap_1'
        | 'pa2aBuild_1'
        | 'a2pDrag_1'
        | 'pa2aFree'
        | 'pa2aTrigger'
        | 'pa2aJet_1'
        | 'pa2aJet_2'
        | 'pat2pFall'
        | 'a2pDrag_3'
        | 'a2pTap_2'
        | 'pa2aBuild_2'
        | 'pa2pReveal'
        | 'a2pMole'
        | 't2pMole'
        | 'pa2aRolePlay_1'
        | 'pa2aRolePlay_2'
        | 'a2pFree'
        | 'videoPlay'
        | 'pat2aX'
        | 'at2pX'
        | 'videoPlayX'
        | 'a2pDrag_2X'
        | 'a2pDrag_3X'
        | 'pa2aBuild_1X'
        | 'pa2aBuild_2X'
        | 'pa2aWheel_1'
        | 'pa2aWheel_2'
        | 'at2pBump'
        | 'pat2tX'
        | 'a2pPuzzleX'
        | 'a2pToolX'
        | 'a2pTap_1X'
        | 'a2pTap_2X'
        | 'pa2aJet_1X'
        | 'pa2aJet_2X'
        | 'pat2pFallX'
        | 'pa2aWheel_1X'
        | 'pa2aWheel_2X'
        | 'at2pBumpX'
        | 'a2pMoleX'
        | 'a2pDrag_1X'
        | 'pa2pRevealX'
        | 'pat2tBridgeX'
        | 'at2pPassBy'
        | 'at2pPassByX'
        | 'animatedPresentation'
        | 'pat2aRepeat_1'
        | 'pat2aRepeat_1X'
        | 'at2pAdventure'
        | 'a2pVoteX'
        | 'pa2aVoteX'
        | 'a2aRecordFreeX'
        | 'pa2aRolePlay_1X'
        | 'a2pFreeX'
        | 'pa2aFreeX'

      /**
       * Creates a new ActivityPart instance using the specified properties.
       * @param [properties] Properties to set
       * @returns ActivityPart instance
       */
      public static create(
        properties?: sprout.aixcourse.IActivityPart,
      ): sprout.aixcourse.ActivityPart

      /**
       * Encodes the specified ActivityPart message. Does not implicitly {@link sprout.aixcourse.ActivityPart.verify|verify} messages.
       * @param message ActivityPart message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encode(
        message: sprout.aixcourse.IActivityPart,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Encodes the specified ActivityPart message, length delimited. Does not implicitly {@link sprout.aixcourse.ActivityPart.verify|verify} messages.
       * @param message ActivityPart message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encodeDelimited(
        message: sprout.aixcourse.IActivityPart,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Decodes an ActivityPart message from the specified reader or buffer.
       * @param reader Reader or buffer to decode from
       * @param [length] Message length if known beforehand
       * @returns ActivityPart
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decode(
        reader: $protobuf.Reader | Uint8Array,
        length?: number,
      ): sprout.aixcourse.ActivityPart

      /**
       * Decodes an ActivityPart message from the specified reader or buffer, length delimited.
       * @param reader Reader or buffer to decode from
       * @returns ActivityPart
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decodeDelimited(
        reader: $protobuf.Reader | Uint8Array,
      ): sprout.aixcourse.ActivityPart

      /**
       * Verifies an ActivityPart message.
       * @param message Plain object to verify
       * @returns `null` if valid, otherwise the reason why it is not
       */
      public static verify(message: { [k: string]: any }): string | null

      /**
       * Creates an ActivityPart message from a plain object. Also converts values to their respective internal types.
       * @param object Plain object
       * @returns ActivityPart
       */
      public static fromObject(object: {
        [k: string]: any
      }): sprout.aixcourse.ActivityPart

      /**
       * Creates a plain object from an ActivityPart message. Also converts values to other types if specified.
       * @param message ActivityPart
       * @param [options] Conversion options
       * @returns Plain object
       */
      public static toObject(
        message: sprout.aixcourse.ActivityPart,
        options?: $protobuf.IConversionOptions,
      ): { [k: string]: any }

      /**
       * Converts this ActivityPart to JSON.
       * @returns JSON object
       */
      public toJSON(): { [k: string]: any }
    }

    namespace ActivityPart {
      /** Properties of a PartTeachingResponse. */
      interface IPartTeachingResponse {
        /** PartTeachingResponse pictureId */
        pictureId?: string | null

        /** PartTeachingResponse text */
        text?: string | null

        /** PartTeachingResponse audioId */
        audioId?: string | null

        /** PartTeachingResponse videoId */
        videoId?: string | null

        /** PartTeachingResponse correctHidden */
        correctHidden?: boolean | null
      }

      /** Represents a PartTeachingResponse. */
      class PartTeachingResponse implements IPartTeachingResponse {
        /**
         * Constructs a new PartTeachingResponse.
         * @param [properties] Properties to set
         */
        constructor(
          properties?: sprout.aixcourse.ActivityPart.IPartTeachingResponse,
        )

        /** PartTeachingResponse pictureId. */
        public pictureId: string

        /** PartTeachingResponse text. */
        public text: string

        /** PartTeachingResponse audioId. */
        public audioId: string

        /** PartTeachingResponse videoId. */
        public videoId: string

        /** PartTeachingResponse correctHidden. */
        public correctHidden: boolean

        /**
         * Creates a new PartTeachingResponse instance using the specified properties.
         * @param [properties] Properties to set
         * @returns PartTeachingResponse instance
         */
        public static create(
          properties?: sprout.aixcourse.ActivityPart.IPartTeachingResponse,
        ): sprout.aixcourse.ActivityPart.PartTeachingResponse

        /**
         * Encodes the specified PartTeachingResponse message. Does not implicitly {@link sprout.aixcourse.ActivityPart.PartTeachingResponse.verify|verify} messages.
         * @param message PartTeachingResponse message or plain object to encode
         * @param [writer] Writer to encode to
         * @returns Writer
         */
        public static encode(
          message: sprout.aixcourse.ActivityPart.IPartTeachingResponse,
          writer?: $protobuf.Writer,
        ): $protobuf.Writer

        /**
         * Encodes the specified PartTeachingResponse message, length delimited. Does not implicitly {@link sprout.aixcourse.ActivityPart.PartTeachingResponse.verify|verify} messages.
         * @param message PartTeachingResponse message or plain object to encode
         * @param [writer] Writer to encode to
         * @returns Writer
         */
        public static encodeDelimited(
          message: sprout.aixcourse.ActivityPart.IPartTeachingResponse,
          writer?: $protobuf.Writer,
        ): $protobuf.Writer

        /**
         * Decodes a PartTeachingResponse message from the specified reader or buffer.
         * @param reader Reader or buffer to decode from
         * @param [length] Message length if known beforehand
         * @returns PartTeachingResponse
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        public static decode(
          reader: $protobuf.Reader | Uint8Array,
          length?: number,
        ): sprout.aixcourse.ActivityPart.PartTeachingResponse

        /**
         * Decodes a PartTeachingResponse message from the specified reader or buffer, length delimited.
         * @param reader Reader or buffer to decode from
         * @returns PartTeachingResponse
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        public static decodeDelimited(
          reader: $protobuf.Reader | Uint8Array,
        ): sprout.aixcourse.ActivityPart.PartTeachingResponse

        /**
         * Verifies a PartTeachingResponse message.
         * @param message Plain object to verify
         * @returns `null` if valid, otherwise the reason why it is not
         */
        public static verify(message: { [k: string]: any }): string | null

        /**
         * Creates a PartTeachingResponse message from a plain object. Also converts values to their respective internal types.
         * @param object Plain object
         * @returns PartTeachingResponse
         */
        public static fromObject(object: {
          [k: string]: any
        }): sprout.aixcourse.ActivityPart.PartTeachingResponse

        /**
         * Creates a plain object from a PartTeachingResponse message. Also converts values to other types if specified.
         * @param message PartTeachingResponse
         * @param [options] Conversion options
         * @returns Plain object
         */
        public static toObject(
          message: sprout.aixcourse.ActivityPart.PartTeachingResponse,
          options?: $protobuf.IConversionOptions,
        ): { [k: string]: any }

        /**
         * Converts this PartTeachingResponse to JSON.
         * @returns JSON object
         */
        public toJSON(): { [k: string]: any }
      }

      /** Properties of a PartHint. */
      interface IPartHint {
        /** PartHint pictureId */
        pictureId?: string | null

        /** PartHint text */
        text?: string | null

        /** PartHint audioId */
        audioId?: string | null

        /** PartHint videoId */
        videoId?: string | null
      }

      /** Represents a PartHint. */
      class PartHint implements IPartHint {
        /**
         * Constructs a new PartHint.
         * @param [properties] Properties to set
         */
        constructor(properties?: sprout.aixcourse.ActivityPart.IPartHint)

        /** PartHint pictureId. */
        public pictureId: string

        /** PartHint text. */
        public text: string

        /** PartHint audioId. */
        public audioId: string

        /** PartHint videoId. */
        public videoId: string

        /**
         * Creates a new PartHint instance using the specified properties.
         * @param [properties] Properties to set
         * @returns PartHint instance
         */
        public static create(
          properties?: sprout.aixcourse.ActivityPart.IPartHint,
        ): sprout.aixcourse.ActivityPart.PartHint

        /**
         * Encodes the specified PartHint message. Does not implicitly {@link sprout.aixcourse.ActivityPart.PartHint.verify|verify} messages.
         * @param message PartHint message or plain object to encode
         * @param [writer] Writer to encode to
         * @returns Writer
         */
        public static encode(
          message: sprout.aixcourse.ActivityPart.IPartHint,
          writer?: $protobuf.Writer,
        ): $protobuf.Writer

        /**
         * Encodes the specified PartHint message, length delimited. Does not implicitly {@link sprout.aixcourse.ActivityPart.PartHint.verify|verify} messages.
         * @param message PartHint message or plain object to encode
         * @param [writer] Writer to encode to
         * @returns Writer
         */
        public static encodeDelimited(
          message: sprout.aixcourse.ActivityPart.IPartHint,
          writer?: $protobuf.Writer,
        ): $protobuf.Writer

        /**
         * Decodes a PartHint message from the specified reader or buffer.
         * @param reader Reader or buffer to decode from
         * @param [length] Message length if known beforehand
         * @returns PartHint
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        public static decode(
          reader: $protobuf.Reader | Uint8Array,
          length?: number,
        ): sprout.aixcourse.ActivityPart.PartHint

        /**
         * Decodes a PartHint message from the specified reader or buffer, length delimited.
         * @param reader Reader or buffer to decode from
         * @returns PartHint
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        public static decodeDelimited(
          reader: $protobuf.Reader | Uint8Array,
        ): sprout.aixcourse.ActivityPart.PartHint

        /**
         * Verifies a PartHint message.
         * @param message Plain object to verify
         * @returns `null` if valid, otherwise the reason why it is not
         */
        public static verify(message: { [k: string]: any }): string | null

        /**
         * Creates a PartHint message from a plain object. Also converts values to their respective internal types.
         * @param object Plain object
         * @returns PartHint
         */
        public static fromObject(object: {
          [k: string]: any
        }): sprout.aixcourse.ActivityPart.PartHint

        /**
         * Creates a plain object from a PartHint message. Also converts values to other types if specified.
         * @param message PartHint
         * @param [options] Conversion options
         * @returns Plain object
         */
        public static toObject(
          message: sprout.aixcourse.ActivityPart.PartHint,
          options?: $protobuf.IConversionOptions,
        ): { [k: string]: any }

        /**
         * Converts this PartHint to JSON.
         * @returns JSON object
         */
        public toJSON(): { [k: string]: any }
      }
    }

    /** Properties of an AixVideoPoint. */
    interface IAixVideoPoint {
      /** AixVideoPoint pointInTimeMsec */
      pointInTimeMsec?: number | null

      /** AixVideoPoint tts */
      tts?: sprout.aixcourse.AixVideoPoint.ITTS | null

      /** AixVideoPoint leo */
      leo?: sprout.aixcourse.AixVideoPoint.ILEO | null

      /** AixVideoPoint video */
      video?: sprout.aixcourse.AixVideoPoint.IVideo | null

      /** AixVideoPoint award */
      award?: sprout.aixcourse.AixVideoPoint.IAward | null

      /** AixVideoPoint exchange */
      exchange?: sprout.aixcourse.AixVideoPoint.IExchange | null

      /** AixVideoPoint music */
      music?: sprout.aixcourse.AixVideoPoint.IMusic | null

      /** AixVideoPoint action */
      action?: sprout.aixcourse.AixVideoPoint.IAction | null
    }

    /** Represents an AixVideoPoint. */
    class AixVideoPoint implements IAixVideoPoint {
      /**
       * Constructs a new AixVideoPoint.
       * @param [properties] Properties to set
       */
      constructor(properties?: sprout.aixcourse.IAixVideoPoint)

      /** AixVideoPoint pointInTimeMsec. */
      public pointInTimeMsec: number

      /** AixVideoPoint tts. */
      public tts?: sprout.aixcourse.AixVideoPoint.ITTS | null

      /** AixVideoPoint leo. */
      public leo?: sprout.aixcourse.AixVideoPoint.ILEO | null

      /** AixVideoPoint video. */
      public video?: sprout.aixcourse.AixVideoPoint.IVideo | null

      /** AixVideoPoint award. */
      public award?: sprout.aixcourse.AixVideoPoint.IAward | null

      /** AixVideoPoint exchange. */
      public exchange?: sprout.aixcourse.AixVideoPoint.IExchange | null

      /** AixVideoPoint music. */
      public music?: sprout.aixcourse.AixVideoPoint.IMusic | null

      /** AixVideoPoint action. */
      public action?: sprout.aixcourse.AixVideoPoint.IAction | null

      /** AixVideoPoint contentOneof. */
      public contentOneof?:
        | 'tts'
        | 'leo'
        | 'video'
        | 'award'
        | 'exchange'
        | 'music'
        | 'action'

      /**
       * Creates a new AixVideoPoint instance using the specified properties.
       * @param [properties] Properties to set
       * @returns AixVideoPoint instance
       */
      public static create(
        properties?: sprout.aixcourse.IAixVideoPoint,
      ): sprout.aixcourse.AixVideoPoint

      /**
       * Encodes the specified AixVideoPoint message. Does not implicitly {@link sprout.aixcourse.AixVideoPoint.verify|verify} messages.
       * @param message AixVideoPoint message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encode(
        message: sprout.aixcourse.IAixVideoPoint,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Encodes the specified AixVideoPoint message, length delimited. Does not implicitly {@link sprout.aixcourse.AixVideoPoint.verify|verify} messages.
       * @param message AixVideoPoint message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encodeDelimited(
        message: sprout.aixcourse.IAixVideoPoint,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Decodes an AixVideoPoint message from the specified reader or buffer.
       * @param reader Reader or buffer to decode from
       * @param [length] Message length if known beforehand
       * @returns AixVideoPoint
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decode(
        reader: $protobuf.Reader | Uint8Array,
        length?: number,
      ): sprout.aixcourse.AixVideoPoint

      /**
       * Decodes an AixVideoPoint message from the specified reader or buffer, length delimited.
       * @param reader Reader or buffer to decode from
       * @returns AixVideoPoint
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decodeDelimited(
        reader: $protobuf.Reader | Uint8Array,
      ): sprout.aixcourse.AixVideoPoint

      /**
       * Verifies an AixVideoPoint message.
       * @param message Plain object to verify
       * @returns `null` if valid, otherwise the reason why it is not
       */
      public static verify(message: { [k: string]: any }): string | null

      /**
       * Creates an AixVideoPoint message from a plain object. Also converts values to their respective internal types.
       * @param object Plain object
       * @returns AixVideoPoint
       */
      public static fromObject(object: {
        [k: string]: any
      }): sprout.aixcourse.AixVideoPoint

      /**
       * Creates a plain object from an AixVideoPoint message. Also converts values to other types if specified.
       * @param message AixVideoPoint
       * @param [options] Conversion options
       * @returns Plain object
       */
      public static toObject(
        message: sprout.aixcourse.AixVideoPoint,
        options?: $protobuf.IConversionOptions,
      ): { [k: string]: any }

      /**
       * Converts this AixVideoPoint to JSON.
       * @returns JSON object
       */
      public toJSON(): { [k: string]: any }
    }

    namespace AixVideoPoint {
      /** Properties of a TTS. */
      interface ITTS {
        /** TTS textFormat */
        textFormat?: string | null

        /** TTS defaultAudioId */
        defaultAudioId?: string | null
      }

      /** Represents a TTS. */
      class TTS implements ITTS {
        /**
         * Constructs a new TTS.
         * @param [properties] Properties to set
         */
        constructor(properties?: sprout.aixcourse.AixVideoPoint.ITTS)

        /** TTS textFormat. */
        public textFormat: string

        /** TTS defaultAudioId. */
        public defaultAudioId: string

        /**
         * Creates a new TTS instance using the specified properties.
         * @param [properties] Properties to set
         * @returns TTS instance
         */
        public static create(
          properties?: sprout.aixcourse.AixVideoPoint.ITTS,
        ): sprout.aixcourse.AixVideoPoint.TTS

        /**
         * Encodes the specified TTS message. Does not implicitly {@link sprout.aixcourse.AixVideoPoint.TTS.verify|verify} messages.
         * @param message TTS message or plain object to encode
         * @param [writer] Writer to encode to
         * @returns Writer
         */
        public static encode(
          message: sprout.aixcourse.AixVideoPoint.ITTS,
          writer?: $protobuf.Writer,
        ): $protobuf.Writer

        /**
         * Encodes the specified TTS message, length delimited. Does not implicitly {@link sprout.aixcourse.AixVideoPoint.TTS.verify|verify} messages.
         * @param message TTS message or plain object to encode
         * @param [writer] Writer to encode to
         * @returns Writer
         */
        public static encodeDelimited(
          message: sprout.aixcourse.AixVideoPoint.ITTS,
          writer?: $protobuf.Writer,
        ): $protobuf.Writer

        /**
         * Decodes a TTS message from the specified reader or buffer.
         * @param reader Reader or buffer to decode from
         * @param [length] Message length if known beforehand
         * @returns TTS
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        public static decode(
          reader: $protobuf.Reader | Uint8Array,
          length?: number,
        ): sprout.aixcourse.AixVideoPoint.TTS

        /**
         * Decodes a TTS message from the specified reader or buffer, length delimited.
         * @param reader Reader or buffer to decode from
         * @returns TTS
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        public static decodeDelimited(
          reader: $protobuf.Reader | Uint8Array,
        ): sprout.aixcourse.AixVideoPoint.TTS

        /**
         * Verifies a TTS message.
         * @param message Plain object to verify
         * @returns `null` if valid, otherwise the reason why it is not
         */
        public static verify(message: { [k: string]: any }): string | null

        /**
         * Creates a TTS message from a plain object. Also converts values to their respective internal types.
         * @param object Plain object
         * @returns TTS
         */
        public static fromObject(object: {
          [k: string]: any
        }): sprout.aixcourse.AixVideoPoint.TTS

        /**
         * Creates a plain object from a TTS message. Also converts values to other types if specified.
         * @param message TTS
         * @param [options] Conversion options
         * @returns Plain object
         */
        public static toObject(
          message: sprout.aixcourse.AixVideoPoint.TTS,
          options?: $protobuf.IConversionOptions,
        ): { [k: string]: any }

        /**
         * Converts this TTS to JSON.
         * @returns JSON object
         */
        public toJSON(): { [k: string]: any }
      }

      /** Properties of a LEO. */
      interface ILEO {
        /** LEO audioId */
        audioId?: string | null
      }

      /** Represents a LEO. */
      class LEO implements ILEO {
        /**
         * Constructs a new LEO.
         * @param [properties] Properties to set
         */
        constructor(properties?: sprout.aixcourse.AixVideoPoint.ILEO)

        /** LEO audioId. */
        public audioId: string

        /**
         * Creates a new LEO instance using the specified properties.
         * @param [properties] Properties to set
         * @returns LEO instance
         */
        public static create(
          properties?: sprout.aixcourse.AixVideoPoint.ILEO,
        ): sprout.aixcourse.AixVideoPoint.LEO

        /**
         * Encodes the specified LEO message. Does not implicitly {@link sprout.aixcourse.AixVideoPoint.LEO.verify|verify} messages.
         * @param message LEO message or plain object to encode
         * @param [writer] Writer to encode to
         * @returns Writer
         */
        public static encode(
          message: sprout.aixcourse.AixVideoPoint.ILEO,
          writer?: $protobuf.Writer,
        ): $protobuf.Writer

        /**
         * Encodes the specified LEO message, length delimited. Does not implicitly {@link sprout.aixcourse.AixVideoPoint.LEO.verify|verify} messages.
         * @param message LEO message or plain object to encode
         * @param [writer] Writer to encode to
         * @returns Writer
         */
        public static encodeDelimited(
          message: sprout.aixcourse.AixVideoPoint.ILEO,
          writer?: $protobuf.Writer,
        ): $protobuf.Writer

        /**
         * Decodes a LEO message from the specified reader or buffer.
         * @param reader Reader or buffer to decode from
         * @param [length] Message length if known beforehand
         * @returns LEO
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        public static decode(
          reader: $protobuf.Reader | Uint8Array,
          length?: number,
        ): sprout.aixcourse.AixVideoPoint.LEO

        /**
         * Decodes a LEO message from the specified reader or buffer, length delimited.
         * @param reader Reader or buffer to decode from
         * @returns LEO
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        public static decodeDelimited(
          reader: $protobuf.Reader | Uint8Array,
        ): sprout.aixcourse.AixVideoPoint.LEO

        /**
         * Verifies a LEO message.
         * @param message Plain object to verify
         * @returns `null` if valid, otherwise the reason why it is not
         */
        public static verify(message: { [k: string]: any }): string | null

        /**
         * Creates a LEO message from a plain object. Also converts values to their respective internal types.
         * @param object Plain object
         * @returns LEO
         */
        public static fromObject(object: {
          [k: string]: any
        }): sprout.aixcourse.AixVideoPoint.LEO

        /**
         * Creates a plain object from a LEO message. Also converts values to other types if specified.
         * @param message LEO
         * @param [options] Conversion options
         * @returns Plain object
         */
        public static toObject(
          message: sprout.aixcourse.AixVideoPoint.LEO,
          options?: $protobuf.IConversionOptions,
        ): { [k: string]: any }

        /**
         * Converts this LEO to JSON.
         * @returns JSON object
         */
        public toJSON(): { [k: string]: any }
      }

      /** Properties of a Video. */
      interface IVideo {
        /** Video videoId */
        videoId?: string | null
      }

      /** Represents a Video. */
      class Video implements IVideo {
        /**
         * Constructs a new Video.
         * @param [properties] Properties to set
         */
        constructor(properties?: sprout.aixcourse.AixVideoPoint.IVideo)

        /** Video videoId. */
        public videoId: string

        /**
         * Creates a new Video instance using the specified properties.
         * @param [properties] Properties to set
         * @returns Video instance
         */
        public static create(
          properties?: sprout.aixcourse.AixVideoPoint.IVideo,
        ): sprout.aixcourse.AixVideoPoint.Video

        /**
         * Encodes the specified Video message. Does not implicitly {@link sprout.aixcourse.AixVideoPoint.Video.verify|verify} messages.
         * @param message Video message or plain object to encode
         * @param [writer] Writer to encode to
         * @returns Writer
         */
        public static encode(
          message: sprout.aixcourse.AixVideoPoint.IVideo,
          writer?: $protobuf.Writer,
        ): $protobuf.Writer

        /**
         * Encodes the specified Video message, length delimited. Does not implicitly {@link sprout.aixcourse.AixVideoPoint.Video.verify|verify} messages.
         * @param message Video message or plain object to encode
         * @param [writer] Writer to encode to
         * @returns Writer
         */
        public static encodeDelimited(
          message: sprout.aixcourse.AixVideoPoint.IVideo,
          writer?: $protobuf.Writer,
        ): $protobuf.Writer

        /**
         * Decodes a Video message from the specified reader or buffer.
         * @param reader Reader or buffer to decode from
         * @param [length] Message length if known beforehand
         * @returns Video
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        public static decode(
          reader: $protobuf.Reader | Uint8Array,
          length?: number,
        ): sprout.aixcourse.AixVideoPoint.Video

        /**
         * Decodes a Video message from the specified reader or buffer, length delimited.
         * @param reader Reader or buffer to decode from
         * @returns Video
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        public static decodeDelimited(
          reader: $protobuf.Reader | Uint8Array,
        ): sprout.aixcourse.AixVideoPoint.Video

        /**
         * Verifies a Video message.
         * @param message Plain object to verify
         * @returns `null` if valid, otherwise the reason why it is not
         */
        public static verify(message: { [k: string]: any }): string | null

        /**
         * Creates a Video message from a plain object. Also converts values to their respective internal types.
         * @param object Plain object
         * @returns Video
         */
        public static fromObject(object: {
          [k: string]: any
        }): sprout.aixcourse.AixVideoPoint.Video

        /**
         * Creates a plain object from a Video message. Also converts values to other types if specified.
         * @param message Video
         * @param [options] Conversion options
         * @returns Plain object
         */
        public static toObject(
          message: sprout.aixcourse.AixVideoPoint.Video,
          options?: $protobuf.IConversionOptions,
        ): { [k: string]: any }

        /**
         * Converts this Video to JSON.
         * @returns JSON object
         */
        public toJSON(): { [k: string]: any }
      }

      /** Properties of an Award. */
      interface IAward {}

      /** Represents an Award. */
      class Award implements IAward {
        /**
         * Constructs a new Award.
         * @param [properties] Properties to set
         */
        constructor(properties?: sprout.aixcourse.AixVideoPoint.IAward)

        /**
         * Creates a new Award instance using the specified properties.
         * @param [properties] Properties to set
         * @returns Award instance
         */
        public static create(
          properties?: sprout.aixcourse.AixVideoPoint.IAward,
        ): sprout.aixcourse.AixVideoPoint.Award

        /**
         * Encodes the specified Award message. Does not implicitly {@link sprout.aixcourse.AixVideoPoint.Award.verify|verify} messages.
         * @param message Award message or plain object to encode
         * @param [writer] Writer to encode to
         * @returns Writer
         */
        public static encode(
          message: sprout.aixcourse.AixVideoPoint.IAward,
          writer?: $protobuf.Writer,
        ): $protobuf.Writer

        /**
         * Encodes the specified Award message, length delimited. Does not implicitly {@link sprout.aixcourse.AixVideoPoint.Award.verify|verify} messages.
         * @param message Award message or plain object to encode
         * @param [writer] Writer to encode to
         * @returns Writer
         */
        public static encodeDelimited(
          message: sprout.aixcourse.AixVideoPoint.IAward,
          writer?: $protobuf.Writer,
        ): $protobuf.Writer

        /**
         * Decodes an Award message from the specified reader or buffer.
         * @param reader Reader or buffer to decode from
         * @param [length] Message length if known beforehand
         * @returns Award
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        public static decode(
          reader: $protobuf.Reader | Uint8Array,
          length?: number,
        ): sprout.aixcourse.AixVideoPoint.Award

        /**
         * Decodes an Award message from the specified reader or buffer, length delimited.
         * @param reader Reader or buffer to decode from
         * @returns Award
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        public static decodeDelimited(
          reader: $protobuf.Reader | Uint8Array,
        ): sprout.aixcourse.AixVideoPoint.Award

        /**
         * Verifies an Award message.
         * @param message Plain object to verify
         * @returns `null` if valid, otherwise the reason why it is not
         */
        public static verify(message: { [k: string]: any }): string | null

        /**
         * Creates an Award message from a plain object. Also converts values to their respective internal types.
         * @param object Plain object
         * @returns Award
         */
        public static fromObject(object: {
          [k: string]: any
        }): sprout.aixcourse.AixVideoPoint.Award

        /**
         * Creates a plain object from an Award message. Also converts values to other types if specified.
         * @param message Award
         * @param [options] Conversion options
         * @returns Plain object
         */
        public static toObject(
          message: sprout.aixcourse.AixVideoPoint.Award,
          options?: $protobuf.IConversionOptions,
        ): { [k: string]: any }

        /**
         * Converts this Award to JSON.
         * @returns JSON object
         */
        public toJSON(): { [k: string]: any }
      }

      /** Properties of an Exchange. */
      interface IExchange {}

      /** Represents an Exchange. */
      class Exchange implements IExchange {
        /**
         * Constructs a new Exchange.
         * @param [properties] Properties to set
         */
        constructor(properties?: sprout.aixcourse.AixVideoPoint.IExchange)

        /**
         * Creates a new Exchange instance using the specified properties.
         * @param [properties] Properties to set
         * @returns Exchange instance
         */
        public static create(
          properties?: sprout.aixcourse.AixVideoPoint.IExchange,
        ): sprout.aixcourse.AixVideoPoint.Exchange

        /**
         * Encodes the specified Exchange message. Does not implicitly {@link sprout.aixcourse.AixVideoPoint.Exchange.verify|verify} messages.
         * @param message Exchange message or plain object to encode
         * @param [writer] Writer to encode to
         * @returns Writer
         */
        public static encode(
          message: sprout.aixcourse.AixVideoPoint.IExchange,
          writer?: $protobuf.Writer,
        ): $protobuf.Writer

        /**
         * Encodes the specified Exchange message, length delimited. Does not implicitly {@link sprout.aixcourse.AixVideoPoint.Exchange.verify|verify} messages.
         * @param message Exchange message or plain object to encode
         * @param [writer] Writer to encode to
         * @returns Writer
         */
        public static encodeDelimited(
          message: sprout.aixcourse.AixVideoPoint.IExchange,
          writer?: $protobuf.Writer,
        ): $protobuf.Writer

        /**
         * Decodes an Exchange message from the specified reader or buffer.
         * @param reader Reader or buffer to decode from
         * @param [length] Message length if known beforehand
         * @returns Exchange
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        public static decode(
          reader: $protobuf.Reader | Uint8Array,
          length?: number,
        ): sprout.aixcourse.AixVideoPoint.Exchange

        /**
         * Decodes an Exchange message from the specified reader or buffer, length delimited.
         * @param reader Reader or buffer to decode from
         * @returns Exchange
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        public static decodeDelimited(
          reader: $protobuf.Reader | Uint8Array,
        ): sprout.aixcourse.AixVideoPoint.Exchange

        /**
         * Verifies an Exchange message.
         * @param message Plain object to verify
         * @returns `null` if valid, otherwise the reason why it is not
         */
        public static verify(message: { [k: string]: any }): string | null

        /**
         * Creates an Exchange message from a plain object. Also converts values to their respective internal types.
         * @param object Plain object
         * @returns Exchange
         */
        public static fromObject(object: {
          [k: string]: any
        }): sprout.aixcourse.AixVideoPoint.Exchange

        /**
         * Creates a plain object from an Exchange message. Also converts values to other types if specified.
         * @param message Exchange
         * @param [options] Conversion options
         * @returns Plain object
         */
        public static toObject(
          message: sprout.aixcourse.AixVideoPoint.Exchange,
          options?: $protobuf.IConversionOptions,
        ): { [k: string]: any }

        /**
         * Converts this Exchange to JSON.
         * @returns JSON object
         */
        public toJSON(): { [k: string]: any }
      }

      /** Properties of a Music. */
      interface IMusic {
        /** Music audioId */
        audioId?: string | null
      }

      /** Represents a Music. */
      class Music implements IMusic {
        /**
         * Constructs a new Music.
         * @param [properties] Properties to set
         */
        constructor(properties?: sprout.aixcourse.AixVideoPoint.IMusic)

        /** Music audioId. */
        public audioId: string

        /**
         * Creates a new Music instance using the specified properties.
         * @param [properties] Properties to set
         * @returns Music instance
         */
        public static create(
          properties?: sprout.aixcourse.AixVideoPoint.IMusic,
        ): sprout.aixcourse.AixVideoPoint.Music

        /**
         * Encodes the specified Music message. Does not implicitly {@link sprout.aixcourse.AixVideoPoint.Music.verify|verify} messages.
         * @param message Music message or plain object to encode
         * @param [writer] Writer to encode to
         * @returns Writer
         */
        public static encode(
          message: sprout.aixcourse.AixVideoPoint.IMusic,
          writer?: $protobuf.Writer,
        ): $protobuf.Writer

        /**
         * Encodes the specified Music message, length delimited. Does not implicitly {@link sprout.aixcourse.AixVideoPoint.Music.verify|verify} messages.
         * @param message Music message or plain object to encode
         * @param [writer] Writer to encode to
         * @returns Writer
         */
        public static encodeDelimited(
          message: sprout.aixcourse.AixVideoPoint.IMusic,
          writer?: $protobuf.Writer,
        ): $protobuf.Writer

        /**
         * Decodes a Music message from the specified reader or buffer.
         * @param reader Reader or buffer to decode from
         * @param [length] Message length if known beforehand
         * @returns Music
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        public static decode(
          reader: $protobuf.Reader | Uint8Array,
          length?: number,
        ): sprout.aixcourse.AixVideoPoint.Music

        /**
         * Decodes a Music message from the specified reader or buffer, length delimited.
         * @param reader Reader or buffer to decode from
         * @returns Music
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        public static decodeDelimited(
          reader: $protobuf.Reader | Uint8Array,
        ): sprout.aixcourse.AixVideoPoint.Music

        /**
         * Verifies a Music message.
         * @param message Plain object to verify
         * @returns `null` if valid, otherwise the reason why it is not
         */
        public static verify(message: { [k: string]: any }): string | null

        /**
         * Creates a Music message from a plain object. Also converts values to their respective internal types.
         * @param object Plain object
         * @returns Music
         */
        public static fromObject(object: {
          [k: string]: any
        }): sprout.aixcourse.AixVideoPoint.Music

        /**
         * Creates a plain object from a Music message. Also converts values to other types if specified.
         * @param message Music
         * @param [options] Conversion options
         * @returns Plain object
         */
        public static toObject(
          message: sprout.aixcourse.AixVideoPoint.Music,
          options?: $protobuf.IConversionOptions,
        ): { [k: string]: any }

        /**
         * Converts this Music to JSON.
         * @returns JSON object
         */
        public toJSON(): { [k: string]: any }
      }

      /** ActionType enum. */
      enum ActionType {
        UNKNOWN = 0,
        APPEAR = 1,
        HIGHLIGHT = 2,
        DISAPPEAR = 3,
      }

      /** Properties of an Action. */
      interface IAction {
        /** Action tag */
        tag?: string | null

        /** Action actionType */
        actionType?: sprout.aixcourse.AixVideoPoint.ActionType | null
      }

      /** Represents an Action. */
      class Action implements IAction {
        /**
         * Constructs a new Action.
         * @param [properties] Properties to set
         */
        constructor(properties?: sprout.aixcourse.AixVideoPoint.IAction)

        /** Action tag. */
        public tag: string

        /** Action actionType. */
        public actionType: sprout.aixcourse.AixVideoPoint.ActionType

        /**
         * Creates a new Action instance using the specified properties.
         * @param [properties] Properties to set
         * @returns Action instance
         */
        public static create(
          properties?: sprout.aixcourse.AixVideoPoint.IAction,
        ): sprout.aixcourse.AixVideoPoint.Action

        /**
         * Encodes the specified Action message. Does not implicitly {@link sprout.aixcourse.AixVideoPoint.Action.verify|verify} messages.
         * @param message Action message or plain object to encode
         * @param [writer] Writer to encode to
         * @returns Writer
         */
        public static encode(
          message: sprout.aixcourse.AixVideoPoint.IAction,
          writer?: $protobuf.Writer,
        ): $protobuf.Writer

        /**
         * Encodes the specified Action message, length delimited. Does not implicitly {@link sprout.aixcourse.AixVideoPoint.Action.verify|verify} messages.
         * @param message Action message or plain object to encode
         * @param [writer] Writer to encode to
         * @returns Writer
         */
        public static encodeDelimited(
          message: sprout.aixcourse.AixVideoPoint.IAction,
          writer?: $protobuf.Writer,
        ): $protobuf.Writer

        /**
         * Decodes an Action message from the specified reader or buffer.
         * @param reader Reader or buffer to decode from
         * @param [length] Message length if known beforehand
         * @returns Action
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        public static decode(
          reader: $protobuf.Reader | Uint8Array,
          length?: number,
        ): sprout.aixcourse.AixVideoPoint.Action

        /**
         * Decodes an Action message from the specified reader or buffer, length delimited.
         * @param reader Reader or buffer to decode from
         * @returns Action
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        public static decodeDelimited(
          reader: $protobuf.Reader | Uint8Array,
        ): sprout.aixcourse.AixVideoPoint.Action

        /**
         * Verifies an Action message.
         * @param message Plain object to verify
         * @returns `null` if valid, otherwise the reason why it is not
         */
        public static verify(message: { [k: string]: any }): string | null

        /**
         * Creates an Action message from a plain object. Also converts values to their respective internal types.
         * @param object Plain object
         * @returns Action
         */
        public static fromObject(object: {
          [k: string]: any
        }): sprout.aixcourse.AixVideoPoint.Action

        /**
         * Creates a plain object from an Action message. Also converts values to other types if specified.
         * @param message Action
         * @param [options] Conversion options
         * @returns Plain object
         */
        public static toObject(
          message: sprout.aixcourse.AixVideoPoint.Action,
          options?: $protobuf.IConversionOptions,
        ): { [k: string]: any }

        /**
         * Converts this Action to JSON.
         * @returns JSON object
         */
        public toJSON(): { [k: string]: any }
      }
    }

    /** Properties of an AixVideo. */
    interface IAixVideo {
      /** AixVideo videoId */
      videoId?: string | null

      /** AixVideo videoPoints */
      videoPoints?: sprout.aixcourse.IAixVideoPoint[] | null
    }

    /** Represents an AixVideo. */
    class AixVideo implements IAixVideo {
      /**
       * Constructs a new AixVideo.
       * @param [properties] Properties to set
       */
      constructor(properties?: sprout.aixcourse.IAixVideo)

      /** AixVideo videoId. */
      public videoId: string

      /** AixVideo videoPoints. */
      public videoPoints: sprout.aixcourse.IAixVideoPoint[]

      /**
       * Creates a new AixVideo instance using the specified properties.
       * @param [properties] Properties to set
       * @returns AixVideo instance
       */
      public static create(
        properties?: sprout.aixcourse.IAixVideo,
      ): sprout.aixcourse.AixVideo

      /**
       * Encodes the specified AixVideo message. Does not implicitly {@link sprout.aixcourse.AixVideo.verify|verify} messages.
       * @param message AixVideo message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encode(
        message: sprout.aixcourse.IAixVideo,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Encodes the specified AixVideo message, length delimited. Does not implicitly {@link sprout.aixcourse.AixVideo.verify|verify} messages.
       * @param message AixVideo message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encodeDelimited(
        message: sprout.aixcourse.IAixVideo,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Decodes an AixVideo message from the specified reader or buffer.
       * @param reader Reader or buffer to decode from
       * @param [length] Message length if known beforehand
       * @returns AixVideo
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decode(
        reader: $protobuf.Reader | Uint8Array,
        length?: number,
      ): sprout.aixcourse.AixVideo

      /**
       * Decodes an AixVideo message from the specified reader or buffer, length delimited.
       * @param reader Reader or buffer to decode from
       * @returns AixVideo
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decodeDelimited(
        reader: $protobuf.Reader | Uint8Array,
      ): sprout.aixcourse.AixVideo

      /**
       * Verifies an AixVideo message.
       * @param message Plain object to verify
       * @returns `null` if valid, otherwise the reason why it is not
       */
      public static verify(message: { [k: string]: any }): string | null

      /**
       * Creates an AixVideo message from a plain object. Also converts values to their respective internal types.
       * @param object Plain object
       * @returns AixVideo
       */
      public static fromObject(object: {
        [k: string]: any
      }): sprout.aixcourse.AixVideo

      /**
       * Creates a plain object from an AixVideo message. Also converts values to other types if specified.
       * @param message AixVideo
       * @param [options] Conversion options
       * @returns Plain object
       */
      public static toObject(
        message: sprout.aixcourse.AixVideo,
        options?: $protobuf.IConversionOptions,
      ): { [k: string]: any }

      /**
       * Converts this AixVideo to JSON.
       * @returns JSON object
       */
      public toJSON(): { [k: string]: any }
    }

    /** Properties of an AixVideoCollection. */
    interface IAixVideoCollection {
      /** AixVideoCollection roundAixVideoCollection */
      roundAixVideoCollection?: sprout.aixcourse.IRoundAixVideoCollection | null

      /** AixVideoCollection freeAixVideoCollection */
      freeAixVideoCollection?: sprout.aixcourse.IFreeAixVideoCollection | null

      /** AixVideoCollection teachingAixVideoCollection */
      teachingAixVideoCollection?: sprout.aixcourse.ITeachingAixVideoCollection | null

      /** AixVideoCollection nonInteractiveAixVideoCollection */
      nonInteractiveAixVideoCollection?: sprout.aixcourse.INonInteractiveAixVideoCollection | null
    }

    /** Represents an AixVideoCollection. */
    class AixVideoCollection implements IAixVideoCollection {
      /**
       * Constructs a new AixVideoCollection.
       * @param [properties] Properties to set
       */
      constructor(properties?: sprout.aixcourse.IAixVideoCollection)

      /** AixVideoCollection roundAixVideoCollection. */
      public roundAixVideoCollection?: sprout.aixcourse.IRoundAixVideoCollection | null

      /** AixVideoCollection freeAixVideoCollection. */
      public freeAixVideoCollection?: sprout.aixcourse.IFreeAixVideoCollection | null

      /** AixVideoCollection teachingAixVideoCollection. */
      public teachingAixVideoCollection?: sprout.aixcourse.ITeachingAixVideoCollection | null

      /** AixVideoCollection nonInteractiveAixVideoCollection. */
      public nonInteractiveAixVideoCollection?: sprout.aixcourse.INonInteractiveAixVideoCollection | null

      /** AixVideoCollection contentOneof. */
      public contentOneof?:
        | 'roundAixVideoCollection'
        | 'freeAixVideoCollection'
        | 'teachingAixVideoCollection'
        | 'nonInteractiveAixVideoCollection'

      /**
       * Creates a new AixVideoCollection instance using the specified properties.
       * @param [properties] Properties to set
       * @returns AixVideoCollection instance
       */
      public static create(
        properties?: sprout.aixcourse.IAixVideoCollection,
      ): sprout.aixcourse.AixVideoCollection

      /**
       * Encodes the specified AixVideoCollection message. Does not implicitly {@link sprout.aixcourse.AixVideoCollection.verify|verify} messages.
       * @param message AixVideoCollection message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encode(
        message: sprout.aixcourse.IAixVideoCollection,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Encodes the specified AixVideoCollection message, length delimited. Does not implicitly {@link sprout.aixcourse.AixVideoCollection.verify|verify} messages.
       * @param message AixVideoCollection message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encodeDelimited(
        message: sprout.aixcourse.IAixVideoCollection,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Decodes an AixVideoCollection message from the specified reader or buffer.
       * @param reader Reader or buffer to decode from
       * @param [length] Message length if known beforehand
       * @returns AixVideoCollection
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decode(
        reader: $protobuf.Reader | Uint8Array,
        length?: number,
      ): sprout.aixcourse.AixVideoCollection

      /**
       * Decodes an AixVideoCollection message from the specified reader or buffer, length delimited.
       * @param reader Reader or buffer to decode from
       * @returns AixVideoCollection
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decodeDelimited(
        reader: $protobuf.Reader | Uint8Array,
      ): sprout.aixcourse.AixVideoCollection

      /**
       * Verifies an AixVideoCollection message.
       * @param message Plain object to verify
       * @returns `null` if valid, otherwise the reason why it is not
       */
      public static verify(message: { [k: string]: any }): string | null

      /**
       * Creates an AixVideoCollection message from a plain object. Also converts values to their respective internal types.
       * @param object Plain object
       * @returns AixVideoCollection
       */
      public static fromObject(object: {
        [k: string]: any
      }): sprout.aixcourse.AixVideoCollection

      /**
       * Creates a plain object from an AixVideoCollection message. Also converts values to other types if specified.
       * @param message AixVideoCollection
       * @param [options] Conversion options
       * @returns Plain object
       */
      public static toObject(
        message: sprout.aixcourse.AixVideoCollection,
        options?: $protobuf.IConversionOptions,
      ): { [k: string]: any }

      /**
       * Converts this AixVideoCollection to JSON.
       * @returns JSON object
       */
      public toJSON(): { [k: string]: any }
    }

    /** Properties of a NonInteractiveAixVideoCollection. */
    interface INonInteractiveAixVideoCollection {
      /** NonInteractiveAixVideoCollection presentationVideo_1 */
      presentationVideo_1?: sprout.aixcourse.IAixVideo | null

      /** NonInteractiveAixVideoCollection waitingVideo */
      waitingVideo?: sprout.aixcourse.IAixVideo | null

      /** NonInteractiveAixVideoCollection presentationVideo_2 */
      presentationVideo_2?: sprout.aixcourse.IAixVideo | null
    }

    /** Represents a NonInteractiveAixVideoCollection. */
    class NonInteractiveAixVideoCollection
      implements INonInteractiveAixVideoCollection {
      /**
       * Constructs a new NonInteractiveAixVideoCollection.
       * @param [properties] Properties to set
       */
      constructor(
        properties?: sprout.aixcourse.INonInteractiveAixVideoCollection,
      )

      /** NonInteractiveAixVideoCollection presentationVideo_1. */
      public presentationVideo_1?: sprout.aixcourse.IAixVideo | null

      /** NonInteractiveAixVideoCollection waitingVideo. */
      public waitingVideo?: sprout.aixcourse.IAixVideo | null

      /** NonInteractiveAixVideoCollection presentationVideo_2. */
      public presentationVideo_2?: sprout.aixcourse.IAixVideo | null

      /**
       * Creates a new NonInteractiveAixVideoCollection instance using the specified properties.
       * @param [properties] Properties to set
       * @returns NonInteractiveAixVideoCollection instance
       */
      public static create(
        properties?: sprout.aixcourse.INonInteractiveAixVideoCollection,
      ): sprout.aixcourse.NonInteractiveAixVideoCollection

      /**
       * Encodes the specified NonInteractiveAixVideoCollection message. Does not implicitly {@link sprout.aixcourse.NonInteractiveAixVideoCollection.verify|verify} messages.
       * @param message NonInteractiveAixVideoCollection message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encode(
        message: sprout.aixcourse.INonInteractiveAixVideoCollection,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Encodes the specified NonInteractiveAixVideoCollection message, length delimited. Does not implicitly {@link sprout.aixcourse.NonInteractiveAixVideoCollection.verify|verify} messages.
       * @param message NonInteractiveAixVideoCollection message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encodeDelimited(
        message: sprout.aixcourse.INonInteractiveAixVideoCollection,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Decodes a NonInteractiveAixVideoCollection message from the specified reader or buffer.
       * @param reader Reader or buffer to decode from
       * @param [length] Message length if known beforehand
       * @returns NonInteractiveAixVideoCollection
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decode(
        reader: $protobuf.Reader | Uint8Array,
        length?: number,
      ): sprout.aixcourse.NonInteractiveAixVideoCollection

      /**
       * Decodes a NonInteractiveAixVideoCollection message from the specified reader or buffer, length delimited.
       * @param reader Reader or buffer to decode from
       * @returns NonInteractiveAixVideoCollection
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decodeDelimited(
        reader: $protobuf.Reader | Uint8Array,
      ): sprout.aixcourse.NonInteractiveAixVideoCollection

      /**
       * Verifies a NonInteractiveAixVideoCollection message.
       * @param message Plain object to verify
       * @returns `null` if valid, otherwise the reason why it is not
       */
      public static verify(message: { [k: string]: any }): string | null

      /**
       * Creates a NonInteractiveAixVideoCollection message from a plain object. Also converts values to their respective internal types.
       * @param object Plain object
       * @returns NonInteractiveAixVideoCollection
       */
      public static fromObject(object: {
        [k: string]: any
      }): sprout.aixcourse.NonInteractiveAixVideoCollection

      /**
       * Creates a plain object from a NonInteractiveAixVideoCollection message. Also converts values to other types if specified.
       * @param message NonInteractiveAixVideoCollection
       * @param [options] Conversion options
       * @returns Plain object
       */
      public static toObject(
        message: sprout.aixcourse.NonInteractiveAixVideoCollection,
        options?: $protobuf.IConversionOptions,
      ): { [k: string]: any }

      /**
       * Converts this NonInteractiveAixVideoCollection to JSON.
       * @returns JSON object
       */
      public toJSON(): { [k: string]: any }
    }

    /** Properties of a RoundAixVideoCollection. */
    interface IRoundAixVideoCollection {
      /** RoundAixVideoCollection roundAixVideos */
      roundAixVideos?:
        | sprout.aixcourse.RoundAixVideoCollection.IRoundAixVideo[]
        | null

      /** RoundAixVideoCollection goodTrVideo */
      goodTrVideo?: sprout.aixcourse.IAixVideo | null

      /** RoundAixVideoCollection badTrVideo */
      badTrVideo?: sprout.aixcourse.IAixVideo | null
    }

    /** Represents a RoundAixVideoCollection. */
    class RoundAixVideoCollection implements IRoundAixVideoCollection {
      /**
       * Constructs a new RoundAixVideoCollection.
       * @param [properties] Properties to set
       */
      constructor(properties?: sprout.aixcourse.IRoundAixVideoCollection)

      /** RoundAixVideoCollection roundAixVideos. */
      public roundAixVideos: sprout.aixcourse.RoundAixVideoCollection.IRoundAixVideo[]

      /** RoundAixVideoCollection goodTrVideo. */
      public goodTrVideo?: sprout.aixcourse.IAixVideo | null

      /** RoundAixVideoCollection badTrVideo. */
      public badTrVideo?: sprout.aixcourse.IAixVideo | null

      /**
       * Creates a new RoundAixVideoCollection instance using the specified properties.
       * @param [properties] Properties to set
       * @returns RoundAixVideoCollection instance
       */
      public static create(
        properties?: sprout.aixcourse.IRoundAixVideoCollection,
      ): sprout.aixcourse.RoundAixVideoCollection

      /**
       * Encodes the specified RoundAixVideoCollection message. Does not implicitly {@link sprout.aixcourse.RoundAixVideoCollection.verify|verify} messages.
       * @param message RoundAixVideoCollection message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encode(
        message: sprout.aixcourse.IRoundAixVideoCollection,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Encodes the specified RoundAixVideoCollection message, length delimited. Does not implicitly {@link sprout.aixcourse.RoundAixVideoCollection.verify|verify} messages.
       * @param message RoundAixVideoCollection message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encodeDelimited(
        message: sprout.aixcourse.IRoundAixVideoCollection,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Decodes a RoundAixVideoCollection message from the specified reader or buffer.
       * @param reader Reader or buffer to decode from
       * @param [length] Message length if known beforehand
       * @returns RoundAixVideoCollection
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decode(
        reader: $protobuf.Reader | Uint8Array,
        length?: number,
      ): sprout.aixcourse.RoundAixVideoCollection

      /**
       * Decodes a RoundAixVideoCollection message from the specified reader or buffer, length delimited.
       * @param reader Reader or buffer to decode from
       * @returns RoundAixVideoCollection
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decodeDelimited(
        reader: $protobuf.Reader | Uint8Array,
      ): sprout.aixcourse.RoundAixVideoCollection

      /**
       * Verifies a RoundAixVideoCollection message.
       * @param message Plain object to verify
       * @returns `null` if valid, otherwise the reason why it is not
       */
      public static verify(message: { [k: string]: any }): string | null

      /**
       * Creates a RoundAixVideoCollection message from a plain object. Also converts values to their respective internal types.
       * @param object Plain object
       * @returns RoundAixVideoCollection
       */
      public static fromObject(object: {
        [k: string]: any
      }): sprout.aixcourse.RoundAixVideoCollection

      /**
       * Creates a plain object from a RoundAixVideoCollection message. Also converts values to other types if specified.
       * @param message RoundAixVideoCollection
       * @param [options] Conversion options
       * @returns Plain object
       */
      public static toObject(
        message: sprout.aixcourse.RoundAixVideoCollection,
        options?: $protobuf.IConversionOptions,
      ): { [k: string]: any }

      /**
       * Converts this RoundAixVideoCollection to JSON.
       * @returns JSON object
       */
      public toJSON(): { [k: string]: any }
    }

    namespace RoundAixVideoCollection {
      /** Properties of a RoundAixVideo. */
      interface IRoundAixVideo {
        /** RoundAixVideo promptVideo */
        promptVideo?: sprout.aixcourse.IAixVideo | null

        /** RoundAixVideo waitingVideo */
        waitingVideo?: sprout.aixcourse.IAixVideo | null

        /** RoundAixVideo okTrVideo */
        okTrVideo?: sprout.aixcourse.IAixVideo | null
      }

      /** Represents a RoundAixVideo. */
      class RoundAixVideo implements IRoundAixVideo {
        /**
         * Constructs a new RoundAixVideo.
         * @param [properties] Properties to set
         */
        constructor(
          properties?: sprout.aixcourse.RoundAixVideoCollection.IRoundAixVideo,
        )

        /** RoundAixVideo promptVideo. */
        public promptVideo?: sprout.aixcourse.IAixVideo | null

        /** RoundAixVideo waitingVideo. */
        public waitingVideo?: sprout.aixcourse.IAixVideo | null

        /** RoundAixVideo okTrVideo. */
        public okTrVideo?: sprout.aixcourse.IAixVideo | null

        /**
         * Creates a new RoundAixVideo instance using the specified properties.
         * @param [properties] Properties to set
         * @returns RoundAixVideo instance
         */
        public static create(
          properties?: sprout.aixcourse.RoundAixVideoCollection.IRoundAixVideo,
        ): sprout.aixcourse.RoundAixVideoCollection.RoundAixVideo

        /**
         * Encodes the specified RoundAixVideo message. Does not implicitly {@link sprout.aixcourse.RoundAixVideoCollection.RoundAixVideo.verify|verify} messages.
         * @param message RoundAixVideo message or plain object to encode
         * @param [writer] Writer to encode to
         * @returns Writer
         */
        public static encode(
          message: sprout.aixcourse.RoundAixVideoCollection.IRoundAixVideo,
          writer?: $protobuf.Writer,
        ): $protobuf.Writer

        /**
         * Encodes the specified RoundAixVideo message, length delimited. Does not implicitly {@link sprout.aixcourse.RoundAixVideoCollection.RoundAixVideo.verify|verify} messages.
         * @param message RoundAixVideo message or plain object to encode
         * @param [writer] Writer to encode to
         * @returns Writer
         */
        public static encodeDelimited(
          message: sprout.aixcourse.RoundAixVideoCollection.IRoundAixVideo,
          writer?: $protobuf.Writer,
        ): $protobuf.Writer

        /**
         * Decodes a RoundAixVideo message from the specified reader or buffer.
         * @param reader Reader or buffer to decode from
         * @param [length] Message length if known beforehand
         * @returns RoundAixVideo
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        public static decode(
          reader: $protobuf.Reader | Uint8Array,
          length?: number,
        ): sprout.aixcourse.RoundAixVideoCollection.RoundAixVideo

        /**
         * Decodes a RoundAixVideo message from the specified reader or buffer, length delimited.
         * @param reader Reader or buffer to decode from
         * @returns RoundAixVideo
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        public static decodeDelimited(
          reader: $protobuf.Reader | Uint8Array,
        ): sprout.aixcourse.RoundAixVideoCollection.RoundAixVideo

        /**
         * Verifies a RoundAixVideo message.
         * @param message Plain object to verify
         * @returns `null` if valid, otherwise the reason why it is not
         */
        public static verify(message: { [k: string]: any }): string | null

        /**
         * Creates a RoundAixVideo message from a plain object. Also converts values to their respective internal types.
         * @param object Plain object
         * @returns RoundAixVideo
         */
        public static fromObject(object: {
          [k: string]: any
        }): sprout.aixcourse.RoundAixVideoCollection.RoundAixVideo

        /**
         * Creates a plain object from a RoundAixVideo message. Also converts values to other types if specified.
         * @param message RoundAixVideo
         * @param [options] Conversion options
         * @returns Plain object
         */
        public static toObject(
          message: sprout.aixcourse.RoundAixVideoCollection.RoundAixVideo,
          options?: $protobuf.IConversionOptions,
        ): { [k: string]: any }

        /**
         * Converts this RoundAixVideo to JSON.
         * @returns JSON object
         */
        public toJSON(): { [k: string]: any }
      }
    }

    /** Properties of a FreeAixVideoCollection. */
    interface IFreeAixVideoCollection {
      /** FreeAixVideoCollection promptVideo */
      promptVideo?: sprout.aixcourse.IAixVideo | null

      /** FreeAixVideoCollection waitingVideo */
      waitingVideo?: sprout.aixcourse.IAixVideo | null

      /** FreeAixVideoCollection freeTrVideos */
      freeTrVideos?:
        | sprout.aixcourse.FreeAixVideoCollection.IFreeTRAixVideo[]
        | null

      /** FreeAixVideoCollection badTrVideo */
      badTrVideo?: sprout.aixcourse.IAixVideo | null
    }

    /** Represents a FreeAixVideoCollection. */
    class FreeAixVideoCollection implements IFreeAixVideoCollection {
      /**
       * Constructs a new FreeAixVideoCollection.
       * @param [properties] Properties to set
       */
      constructor(properties?: sprout.aixcourse.IFreeAixVideoCollection)

      /** FreeAixVideoCollection promptVideo. */
      public promptVideo?: sprout.aixcourse.IAixVideo | null

      /** FreeAixVideoCollection waitingVideo. */
      public waitingVideo?: sprout.aixcourse.IAixVideo | null

      /** FreeAixVideoCollection freeTrVideos. */
      public freeTrVideos: sprout.aixcourse.FreeAixVideoCollection.IFreeTRAixVideo[]

      /** FreeAixVideoCollection badTrVideo. */
      public badTrVideo?: sprout.aixcourse.IAixVideo | null

      /**
       * Creates a new FreeAixVideoCollection instance using the specified properties.
       * @param [properties] Properties to set
       * @returns FreeAixVideoCollection instance
       */
      public static create(
        properties?: sprout.aixcourse.IFreeAixVideoCollection,
      ): sprout.aixcourse.FreeAixVideoCollection

      /**
       * Encodes the specified FreeAixVideoCollection message. Does not implicitly {@link sprout.aixcourse.FreeAixVideoCollection.verify|verify} messages.
       * @param message FreeAixVideoCollection message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encode(
        message: sprout.aixcourse.IFreeAixVideoCollection,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Encodes the specified FreeAixVideoCollection message, length delimited. Does not implicitly {@link sprout.aixcourse.FreeAixVideoCollection.verify|verify} messages.
       * @param message FreeAixVideoCollection message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encodeDelimited(
        message: sprout.aixcourse.IFreeAixVideoCollection,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Decodes a FreeAixVideoCollection message from the specified reader or buffer.
       * @param reader Reader or buffer to decode from
       * @param [length] Message length if known beforehand
       * @returns FreeAixVideoCollection
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decode(
        reader: $protobuf.Reader | Uint8Array,
        length?: number,
      ): sprout.aixcourse.FreeAixVideoCollection

      /**
       * Decodes a FreeAixVideoCollection message from the specified reader or buffer, length delimited.
       * @param reader Reader or buffer to decode from
       * @returns FreeAixVideoCollection
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decodeDelimited(
        reader: $protobuf.Reader | Uint8Array,
      ): sprout.aixcourse.FreeAixVideoCollection

      /**
       * Verifies a FreeAixVideoCollection message.
       * @param message Plain object to verify
       * @returns `null` if valid, otherwise the reason why it is not
       */
      public static verify(message: { [k: string]: any }): string | null

      /**
       * Creates a FreeAixVideoCollection message from a plain object. Also converts values to their respective internal types.
       * @param object Plain object
       * @returns FreeAixVideoCollection
       */
      public static fromObject(object: {
        [k: string]: any
      }): sprout.aixcourse.FreeAixVideoCollection

      /**
       * Creates a plain object from a FreeAixVideoCollection message. Also converts values to other types if specified.
       * @param message FreeAixVideoCollection
       * @param [options] Conversion options
       * @returns Plain object
       */
      public static toObject(
        message: sprout.aixcourse.FreeAixVideoCollection,
        options?: $protobuf.IConversionOptions,
      ): { [k: string]: any }

      /**
       * Converts this FreeAixVideoCollection to JSON.
       * @returns JSON object
       */
      public toJSON(): { [k: string]: any }
    }

    namespace FreeAixVideoCollection {
      /** Properties of a FreeTRAixVideo. */
      interface IFreeTRAixVideo {
        /** FreeTRAixVideo video */
        video?: sprout.aixcourse.IAixVideo | null

        /** FreeTRAixVideo text */
        text?: string | null
      }

      /** Represents a FreeTRAixVideo. */
      class FreeTRAixVideo implements IFreeTRAixVideo {
        /**
         * Constructs a new FreeTRAixVideo.
         * @param [properties] Properties to set
         */
        constructor(
          properties?: sprout.aixcourse.FreeAixVideoCollection.IFreeTRAixVideo,
        )

        /** FreeTRAixVideo video. */
        public video?: sprout.aixcourse.IAixVideo | null

        /** FreeTRAixVideo text. */
        public text: string

        /**
         * Creates a new FreeTRAixVideo instance using the specified properties.
         * @param [properties] Properties to set
         * @returns FreeTRAixVideo instance
         */
        public static create(
          properties?: sprout.aixcourse.FreeAixVideoCollection.IFreeTRAixVideo,
        ): sprout.aixcourse.FreeAixVideoCollection.FreeTRAixVideo

        /**
         * Encodes the specified FreeTRAixVideo message. Does not implicitly {@link sprout.aixcourse.FreeAixVideoCollection.FreeTRAixVideo.verify|verify} messages.
         * @param message FreeTRAixVideo message or plain object to encode
         * @param [writer] Writer to encode to
         * @returns Writer
         */
        public static encode(
          message: sprout.aixcourse.FreeAixVideoCollection.IFreeTRAixVideo,
          writer?: $protobuf.Writer,
        ): $protobuf.Writer

        /**
         * Encodes the specified FreeTRAixVideo message, length delimited. Does not implicitly {@link sprout.aixcourse.FreeAixVideoCollection.FreeTRAixVideo.verify|verify} messages.
         * @param message FreeTRAixVideo message or plain object to encode
         * @param [writer] Writer to encode to
         * @returns Writer
         */
        public static encodeDelimited(
          message: sprout.aixcourse.FreeAixVideoCollection.IFreeTRAixVideo,
          writer?: $protobuf.Writer,
        ): $protobuf.Writer

        /**
         * Decodes a FreeTRAixVideo message from the specified reader or buffer.
         * @param reader Reader or buffer to decode from
         * @param [length] Message length if known beforehand
         * @returns FreeTRAixVideo
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        public static decode(
          reader: $protobuf.Reader | Uint8Array,
          length?: number,
        ): sprout.aixcourse.FreeAixVideoCollection.FreeTRAixVideo

        /**
         * Decodes a FreeTRAixVideo message from the specified reader or buffer, length delimited.
         * @param reader Reader or buffer to decode from
         * @returns FreeTRAixVideo
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        public static decodeDelimited(
          reader: $protobuf.Reader | Uint8Array,
        ): sprout.aixcourse.FreeAixVideoCollection.FreeTRAixVideo

        /**
         * Verifies a FreeTRAixVideo message.
         * @param message Plain object to verify
         * @returns `null` if valid, otherwise the reason why it is not
         */
        public static verify(message: { [k: string]: any }): string | null

        /**
         * Creates a FreeTRAixVideo message from a plain object. Also converts values to their respective internal types.
         * @param object Plain object
         * @returns FreeTRAixVideo
         */
        public static fromObject(object: {
          [k: string]: any
        }): sprout.aixcourse.FreeAixVideoCollection.FreeTRAixVideo

        /**
         * Creates a plain object from a FreeTRAixVideo message. Also converts values to other types if specified.
         * @param message FreeTRAixVideo
         * @param [options] Conversion options
         * @returns Plain object
         */
        public static toObject(
          message: sprout.aixcourse.FreeAixVideoCollection.FreeTRAixVideo,
          options?: $protobuf.IConversionOptions,
        ): { [k: string]: any }

        /**
         * Converts this FreeTRAixVideo to JSON.
         * @returns JSON object
         */
        public toJSON(): { [k: string]: any }
      }
    }

    /** Properties of a FreeAixAudioCollection. */
    interface IFreeAixAudioCollection {
      /** FreeAixAudioCollection promptAudioId */
      promptAudioId?: string | null

      /** FreeAixAudioCollection freeTrAudios */
      freeTrAudios?:
        | sprout.aixcourse.FreeAixAudioCollection.IFreeTRAixAudio[]
        | null

      /** FreeAixAudioCollection badTrAudioId */
      badTrAudioId?: string | null
    }

    /** Represents a FreeAixAudioCollection. */
    class FreeAixAudioCollection implements IFreeAixAudioCollection {
      /**
       * Constructs a new FreeAixAudioCollection.
       * @param [properties] Properties to set
       */
      constructor(properties?: sprout.aixcourse.IFreeAixAudioCollection)

      /** FreeAixAudioCollection promptAudioId. */
      public promptAudioId: string

      /** FreeAixAudioCollection freeTrAudios. */
      public freeTrAudios: sprout.aixcourse.FreeAixAudioCollection.IFreeTRAixAudio[]

      /** FreeAixAudioCollection badTrAudioId. */
      public badTrAudioId: string

      /**
       * Creates a new FreeAixAudioCollection instance using the specified properties.
       * @param [properties] Properties to set
       * @returns FreeAixAudioCollection instance
       */
      public static create(
        properties?: sprout.aixcourse.IFreeAixAudioCollection,
      ): sprout.aixcourse.FreeAixAudioCollection

      /**
       * Encodes the specified FreeAixAudioCollection message. Does not implicitly {@link sprout.aixcourse.FreeAixAudioCollection.verify|verify} messages.
       * @param message FreeAixAudioCollection message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encode(
        message: sprout.aixcourse.IFreeAixAudioCollection,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Encodes the specified FreeAixAudioCollection message, length delimited. Does not implicitly {@link sprout.aixcourse.FreeAixAudioCollection.verify|verify} messages.
       * @param message FreeAixAudioCollection message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encodeDelimited(
        message: sprout.aixcourse.IFreeAixAudioCollection,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Decodes a FreeAixAudioCollection message from the specified reader or buffer.
       * @param reader Reader or buffer to decode from
       * @param [length] Message length if known beforehand
       * @returns FreeAixAudioCollection
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decode(
        reader: $protobuf.Reader | Uint8Array,
        length?: number,
      ): sprout.aixcourse.FreeAixAudioCollection

      /**
       * Decodes a FreeAixAudioCollection message from the specified reader or buffer, length delimited.
       * @param reader Reader or buffer to decode from
       * @returns FreeAixAudioCollection
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decodeDelimited(
        reader: $protobuf.Reader | Uint8Array,
      ): sprout.aixcourse.FreeAixAudioCollection

      /**
       * Verifies a FreeAixAudioCollection message.
       * @param message Plain object to verify
       * @returns `null` if valid, otherwise the reason why it is not
       */
      public static verify(message: { [k: string]: any }): string | null

      /**
       * Creates a FreeAixAudioCollection message from a plain object. Also converts values to their respective internal types.
       * @param object Plain object
       * @returns FreeAixAudioCollection
       */
      public static fromObject(object: {
        [k: string]: any
      }): sprout.aixcourse.FreeAixAudioCollection

      /**
       * Creates a plain object from a FreeAixAudioCollection message. Also converts values to other types if specified.
       * @param message FreeAixAudioCollection
       * @param [options] Conversion options
       * @returns Plain object
       */
      public static toObject(
        message: sprout.aixcourse.FreeAixAudioCollection,
        options?: $protobuf.IConversionOptions,
      ): { [k: string]: any }

      /**
       * Converts this FreeAixAudioCollection to JSON.
       * @returns JSON object
       */
      public toJSON(): { [k: string]: any }
    }

    namespace FreeAixAudioCollection {
      /** Properties of a FreeTRAixAudio. */
      interface IFreeTRAixAudio {
        /** FreeTRAixAudio audioId */
        audioId?: string | null

        /** FreeTRAixAudio text */
        text?: string | null
      }

      /** Represents a FreeTRAixAudio. */
      class FreeTRAixAudio implements IFreeTRAixAudio {
        /**
         * Constructs a new FreeTRAixAudio.
         * @param [properties] Properties to set
         */
        constructor(
          properties?: sprout.aixcourse.FreeAixAudioCollection.IFreeTRAixAudio,
        )

        /** FreeTRAixAudio audioId. */
        public audioId: string

        /** FreeTRAixAudio text. */
        public text: string

        /**
         * Creates a new FreeTRAixAudio instance using the specified properties.
         * @param [properties] Properties to set
         * @returns FreeTRAixAudio instance
         */
        public static create(
          properties?: sprout.aixcourse.FreeAixAudioCollection.IFreeTRAixAudio,
        ): sprout.aixcourse.FreeAixAudioCollection.FreeTRAixAudio

        /**
         * Encodes the specified FreeTRAixAudio message. Does not implicitly {@link sprout.aixcourse.FreeAixAudioCollection.FreeTRAixAudio.verify|verify} messages.
         * @param message FreeTRAixAudio message or plain object to encode
         * @param [writer] Writer to encode to
         * @returns Writer
         */
        public static encode(
          message: sprout.aixcourse.FreeAixAudioCollection.IFreeTRAixAudio,
          writer?: $protobuf.Writer,
        ): $protobuf.Writer

        /**
         * Encodes the specified FreeTRAixAudio message, length delimited. Does not implicitly {@link sprout.aixcourse.FreeAixAudioCollection.FreeTRAixAudio.verify|verify} messages.
         * @param message FreeTRAixAudio message or plain object to encode
         * @param [writer] Writer to encode to
         * @returns Writer
         */
        public static encodeDelimited(
          message: sprout.aixcourse.FreeAixAudioCollection.IFreeTRAixAudio,
          writer?: $protobuf.Writer,
        ): $protobuf.Writer

        /**
         * Decodes a FreeTRAixAudio message from the specified reader or buffer.
         * @param reader Reader or buffer to decode from
         * @param [length] Message length if known beforehand
         * @returns FreeTRAixAudio
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        public static decode(
          reader: $protobuf.Reader | Uint8Array,
          length?: number,
        ): sprout.aixcourse.FreeAixAudioCollection.FreeTRAixAudio

        /**
         * Decodes a FreeTRAixAudio message from the specified reader or buffer, length delimited.
         * @param reader Reader or buffer to decode from
         * @returns FreeTRAixAudio
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        public static decodeDelimited(
          reader: $protobuf.Reader | Uint8Array,
        ): sprout.aixcourse.FreeAixAudioCollection.FreeTRAixAudio

        /**
         * Verifies a FreeTRAixAudio message.
         * @param message Plain object to verify
         * @returns `null` if valid, otherwise the reason why it is not
         */
        public static verify(message: { [k: string]: any }): string | null

        /**
         * Creates a FreeTRAixAudio message from a plain object. Also converts values to their respective internal types.
         * @param object Plain object
         * @returns FreeTRAixAudio
         */
        public static fromObject(object: {
          [k: string]: any
        }): sprout.aixcourse.FreeAixAudioCollection.FreeTRAixAudio

        /**
         * Creates a plain object from a FreeTRAixAudio message. Also converts values to other types if specified.
         * @param message FreeTRAixAudio
         * @param [options] Conversion options
         * @returns Plain object
         */
        public static toObject(
          message: sprout.aixcourse.FreeAixAudioCollection.FreeTRAixAudio,
          options?: $protobuf.IConversionOptions,
        ): { [k: string]: any }

        /**
         * Converts this FreeTRAixAudio to JSON.
         * @returns JSON object
         */
        public toJSON(): { [k: string]: any }
      }
    }

    /** Properties of a TeachingAixVideoCollection. */
    interface ITeachingAixVideoCollection {
      /** TeachingAixVideoCollection video */
      video?: sprout.aixcourse.IAixVideo | null
    }

    /** Represents a TeachingAixVideoCollection. */
    class TeachingAixVideoCollection implements ITeachingAixVideoCollection {
      /**
       * Constructs a new TeachingAixVideoCollection.
       * @param [properties] Properties to set
       */
      constructor(properties?: sprout.aixcourse.ITeachingAixVideoCollection)

      /** TeachingAixVideoCollection video. */
      public video?: sprout.aixcourse.IAixVideo | null

      /**
       * Creates a new TeachingAixVideoCollection instance using the specified properties.
       * @param [properties] Properties to set
       * @returns TeachingAixVideoCollection instance
       */
      public static create(
        properties?: sprout.aixcourse.ITeachingAixVideoCollection,
      ): sprout.aixcourse.TeachingAixVideoCollection

      /**
       * Encodes the specified TeachingAixVideoCollection message. Does not implicitly {@link sprout.aixcourse.TeachingAixVideoCollection.verify|verify} messages.
       * @param message TeachingAixVideoCollection message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encode(
        message: sprout.aixcourse.ITeachingAixVideoCollection,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Encodes the specified TeachingAixVideoCollection message, length delimited. Does not implicitly {@link sprout.aixcourse.TeachingAixVideoCollection.verify|verify} messages.
       * @param message TeachingAixVideoCollection message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encodeDelimited(
        message: sprout.aixcourse.ITeachingAixVideoCollection,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Decodes a TeachingAixVideoCollection message from the specified reader or buffer.
       * @param reader Reader or buffer to decode from
       * @param [length] Message length if known beforehand
       * @returns TeachingAixVideoCollection
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decode(
        reader: $protobuf.Reader | Uint8Array,
        length?: number,
      ): sprout.aixcourse.TeachingAixVideoCollection

      /**
       * Decodes a TeachingAixVideoCollection message from the specified reader or buffer, length delimited.
       * @param reader Reader or buffer to decode from
       * @returns TeachingAixVideoCollection
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decodeDelimited(
        reader: $protobuf.Reader | Uint8Array,
      ): sprout.aixcourse.TeachingAixVideoCollection

      /**
       * Verifies a TeachingAixVideoCollection message.
       * @param message Plain object to verify
       * @returns `null` if valid, otherwise the reason why it is not
       */
      public static verify(message: { [k: string]: any }): string | null

      /**
       * Creates a TeachingAixVideoCollection message from a plain object. Also converts values to their respective internal types.
       * @param object Plain object
       * @returns TeachingAixVideoCollection
       */
      public static fromObject(object: {
        [k: string]: any
      }): sprout.aixcourse.TeachingAixVideoCollection

      /**
       * Creates a plain object from a TeachingAixVideoCollection message. Also converts values to other types if specified.
       * @param message TeachingAixVideoCollection
       * @param [options] Conversion options
       * @returns Plain object
       */
      public static toObject(
        message: sprout.aixcourse.TeachingAixVideoCollection,
        options?: $protobuf.IConversionOptions,
      ): { [k: string]: any }

      /**
       * Converts this TeachingAixVideoCollection to JSON.
       * @returns JSON object
       */
      public toJSON(): { [k: string]: any }
    }

    /** Properties of an AixAudioCollection. */
    interface IAixAudioCollection {
      /** AixAudioCollection roundAixAudioCollection */
      roundAixAudioCollection?: sprout.aixcourse.IRoundAixAudioCollection | null

      /** AixAudioCollection freeAixAudioCollection */
      freeAixAudioCollection?: sprout.aixcourse.IFreeAixAudioCollection | null
    }

    /** Represents an AixAudioCollection. */
    class AixAudioCollection implements IAixAudioCollection {
      /**
       * Constructs a new AixAudioCollection.
       * @param [properties] Properties to set
       */
      constructor(properties?: sprout.aixcourse.IAixAudioCollection)

      /** AixAudioCollection roundAixAudioCollection. */
      public roundAixAudioCollection?: sprout.aixcourse.IRoundAixAudioCollection | null

      /** AixAudioCollection freeAixAudioCollection. */
      public freeAixAudioCollection?: sprout.aixcourse.IFreeAixAudioCollection | null

      /** AixAudioCollection contentOneof. */
      public contentOneof?: 'roundAixAudioCollection' | 'freeAixAudioCollection'

      /**
       * Creates a new AixAudioCollection instance using the specified properties.
       * @param [properties] Properties to set
       * @returns AixAudioCollection instance
       */
      public static create(
        properties?: sprout.aixcourse.IAixAudioCollection,
      ): sprout.aixcourse.AixAudioCollection

      /**
       * Encodes the specified AixAudioCollection message. Does not implicitly {@link sprout.aixcourse.AixAudioCollection.verify|verify} messages.
       * @param message AixAudioCollection message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encode(
        message: sprout.aixcourse.IAixAudioCollection,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Encodes the specified AixAudioCollection message, length delimited. Does not implicitly {@link sprout.aixcourse.AixAudioCollection.verify|verify} messages.
       * @param message AixAudioCollection message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encodeDelimited(
        message: sprout.aixcourse.IAixAudioCollection,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Decodes an AixAudioCollection message from the specified reader or buffer.
       * @param reader Reader or buffer to decode from
       * @param [length] Message length if known beforehand
       * @returns AixAudioCollection
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decode(
        reader: $protobuf.Reader | Uint8Array,
        length?: number,
      ): sprout.aixcourse.AixAudioCollection

      /**
       * Decodes an AixAudioCollection message from the specified reader or buffer, length delimited.
       * @param reader Reader or buffer to decode from
       * @returns AixAudioCollection
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decodeDelimited(
        reader: $protobuf.Reader | Uint8Array,
      ): sprout.aixcourse.AixAudioCollection

      /**
       * Verifies an AixAudioCollection message.
       * @param message Plain object to verify
       * @returns `null` if valid, otherwise the reason why it is not
       */
      public static verify(message: { [k: string]: any }): string | null

      /**
       * Creates an AixAudioCollection message from a plain object. Also converts values to their respective internal types.
       * @param object Plain object
       * @returns AixAudioCollection
       */
      public static fromObject(object: {
        [k: string]: any
      }): sprout.aixcourse.AixAudioCollection

      /**
       * Creates a plain object from an AixAudioCollection message. Also converts values to other types if specified.
       * @param message AixAudioCollection
       * @param [options] Conversion options
       * @returns Plain object
       */
      public static toObject(
        message: sprout.aixcourse.AixAudioCollection,
        options?: $protobuf.IConversionOptions,
      ): { [k: string]: any }

      /**
       * Converts this AixAudioCollection to JSON.
       * @returns JSON object
       */
      public toJSON(): { [k: string]: any }
    }

    /** Properties of a RoundAixAudioCollection. */
    interface IRoundAixAudioCollection {
      /** RoundAixAudioCollection roundAixAudios */
      roundAixAudios?:
        | sprout.aixcourse.RoundAixAudioCollection.IRoundAixAudio[]
        | null

      /** RoundAixAudioCollection goodTrAudioId */
      goodTrAudioId?: string | null

      /** RoundAixAudioCollection badTrAudioId */
      badTrAudioId?: string | null
    }

    /** Represents a RoundAixAudioCollection. */
    class RoundAixAudioCollection implements IRoundAixAudioCollection {
      /**
       * Constructs a new RoundAixAudioCollection.
       * @param [properties] Properties to set
       */
      constructor(properties?: sprout.aixcourse.IRoundAixAudioCollection)

      /** RoundAixAudioCollection roundAixAudios. */
      public roundAixAudios: sprout.aixcourse.RoundAixAudioCollection.IRoundAixAudio[]

      /** RoundAixAudioCollection goodTrAudioId. */
      public goodTrAudioId: string

      /** RoundAixAudioCollection badTrAudioId. */
      public badTrAudioId: string

      /**
       * Creates a new RoundAixAudioCollection instance using the specified properties.
       * @param [properties] Properties to set
       * @returns RoundAixAudioCollection instance
       */
      public static create(
        properties?: sprout.aixcourse.IRoundAixAudioCollection,
      ): sprout.aixcourse.RoundAixAudioCollection

      /**
       * Encodes the specified RoundAixAudioCollection message. Does not implicitly {@link sprout.aixcourse.RoundAixAudioCollection.verify|verify} messages.
       * @param message RoundAixAudioCollection message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encode(
        message: sprout.aixcourse.IRoundAixAudioCollection,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Encodes the specified RoundAixAudioCollection message, length delimited. Does not implicitly {@link sprout.aixcourse.RoundAixAudioCollection.verify|verify} messages.
       * @param message RoundAixAudioCollection message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encodeDelimited(
        message: sprout.aixcourse.IRoundAixAudioCollection,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Decodes a RoundAixAudioCollection message from the specified reader or buffer.
       * @param reader Reader or buffer to decode from
       * @param [length] Message length if known beforehand
       * @returns RoundAixAudioCollection
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decode(
        reader: $protobuf.Reader | Uint8Array,
        length?: number,
      ): sprout.aixcourse.RoundAixAudioCollection

      /**
       * Decodes a RoundAixAudioCollection message from the specified reader or buffer, length delimited.
       * @param reader Reader or buffer to decode from
       * @returns RoundAixAudioCollection
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decodeDelimited(
        reader: $protobuf.Reader | Uint8Array,
      ): sprout.aixcourse.RoundAixAudioCollection

      /**
       * Verifies a RoundAixAudioCollection message.
       * @param message Plain object to verify
       * @returns `null` if valid, otherwise the reason why it is not
       */
      public static verify(message: { [k: string]: any }): string | null

      /**
       * Creates a RoundAixAudioCollection message from a plain object. Also converts values to their respective internal types.
       * @param object Plain object
       * @returns RoundAixAudioCollection
       */
      public static fromObject(object: {
        [k: string]: any
      }): sprout.aixcourse.RoundAixAudioCollection

      /**
       * Creates a plain object from a RoundAixAudioCollection message. Also converts values to other types if specified.
       * @param message RoundAixAudioCollection
       * @param [options] Conversion options
       * @returns Plain object
       */
      public static toObject(
        message: sprout.aixcourse.RoundAixAudioCollection,
        options?: $protobuf.IConversionOptions,
      ): { [k: string]: any }

      /**
       * Converts this RoundAixAudioCollection to JSON.
       * @returns JSON object
       */
      public toJSON(): { [k: string]: any }
    }

    namespace RoundAixAudioCollection {
      /** Properties of a RoundAixAudio. */
      interface IRoundAixAudio {
        /** RoundAixAudio promptAudioId */
        promptAudioId?: string | null

        /** RoundAixAudio okTrAudioId */
        okTrAudioId?: string | null
      }

      /** Represents a RoundAixAudio. */
      class RoundAixAudio implements IRoundAixAudio {
        /**
         * Constructs a new RoundAixAudio.
         * @param [properties] Properties to set
         */
        constructor(
          properties?: sprout.aixcourse.RoundAixAudioCollection.IRoundAixAudio,
        )

        /** RoundAixAudio promptAudioId. */
        public promptAudioId: string

        /** RoundAixAudio okTrAudioId. */
        public okTrAudioId: string

        /**
         * Creates a new RoundAixAudio instance using the specified properties.
         * @param [properties] Properties to set
         * @returns RoundAixAudio instance
         */
        public static create(
          properties?: sprout.aixcourse.RoundAixAudioCollection.IRoundAixAudio,
        ): sprout.aixcourse.RoundAixAudioCollection.RoundAixAudio

        /**
         * Encodes the specified RoundAixAudio message. Does not implicitly {@link sprout.aixcourse.RoundAixAudioCollection.RoundAixAudio.verify|verify} messages.
         * @param message RoundAixAudio message or plain object to encode
         * @param [writer] Writer to encode to
         * @returns Writer
         */
        public static encode(
          message: sprout.aixcourse.RoundAixAudioCollection.IRoundAixAudio,
          writer?: $protobuf.Writer,
        ): $protobuf.Writer

        /**
         * Encodes the specified RoundAixAudio message, length delimited. Does not implicitly {@link sprout.aixcourse.RoundAixAudioCollection.RoundAixAudio.verify|verify} messages.
         * @param message RoundAixAudio message or plain object to encode
         * @param [writer] Writer to encode to
         * @returns Writer
         */
        public static encodeDelimited(
          message: sprout.aixcourse.RoundAixAudioCollection.IRoundAixAudio,
          writer?: $protobuf.Writer,
        ): $protobuf.Writer

        /**
         * Decodes a RoundAixAudio message from the specified reader or buffer.
         * @param reader Reader or buffer to decode from
         * @param [length] Message length if known beforehand
         * @returns RoundAixAudio
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        public static decode(
          reader: $protobuf.Reader | Uint8Array,
          length?: number,
        ): sprout.aixcourse.RoundAixAudioCollection.RoundAixAudio

        /**
         * Decodes a RoundAixAudio message from the specified reader or buffer, length delimited.
         * @param reader Reader or buffer to decode from
         * @returns RoundAixAudio
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        public static decodeDelimited(
          reader: $protobuf.Reader | Uint8Array,
        ): sprout.aixcourse.RoundAixAudioCollection.RoundAixAudio

        /**
         * Verifies a RoundAixAudio message.
         * @param message Plain object to verify
         * @returns `null` if valid, otherwise the reason why it is not
         */
        public static verify(message: { [k: string]: any }): string | null

        /**
         * Creates a RoundAixAudio message from a plain object. Also converts values to their respective internal types.
         * @param object Plain object
         * @returns RoundAixAudio
         */
        public static fromObject(object: {
          [k: string]: any
        }): sprout.aixcourse.RoundAixAudioCollection.RoundAixAudio

        /**
         * Creates a plain object from a RoundAixAudio message. Also converts values to other types if specified.
         * @param message RoundAixAudio
         * @param [options] Conversion options
         * @returns Plain object
         */
        public static toObject(
          message: sprout.aixcourse.RoundAixAudioCollection.RoundAixAudio,
          options?: $protobuf.IConversionOptions,
        ): { [k: string]: any }

        /**
         * Converts this RoundAixAudio to JSON.
         * @returns JSON object
         */
        public toJSON(): { [k: string]: any }
      }
    }

    /** Properties of a A2A. */
    interface IA2A {
      /** A2A audioId */
      audioId?: string | null
    }

    /** Represents a A2A. */
    class A2A implements IA2A {
      /**
       * Constructs a new A2A.
       * @param [properties] Properties to set
       */
      constructor(properties?: sprout.aixcourse.IA2A)

      /** A2A audioId. */
      public audioId: string

      /**
       * Creates a new A2A instance using the specified properties.
       * @param [properties] Properties to set
       * @returns A2A instance
       */
      public static create(
        properties?: sprout.aixcourse.IA2A,
      ): sprout.aixcourse.A2A

      /**
       * Encodes the specified A2A message. Does not implicitly {@link sprout.aixcourse.A2A.verify|verify} messages.
       * @param message A2A message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encode(
        message: sprout.aixcourse.IA2A,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Encodes the specified A2A message, length delimited. Does not implicitly {@link sprout.aixcourse.A2A.verify|verify} messages.
       * @param message A2A message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encodeDelimited(
        message: sprout.aixcourse.IA2A,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Decodes a A2A message from the specified reader or buffer.
       * @param reader Reader or buffer to decode from
       * @param [length] Message length if known beforehand
       * @returns A2A
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decode(
        reader: $protobuf.Reader | Uint8Array,
        length?: number,
      ): sprout.aixcourse.A2A

      /**
       * Decodes a A2A message from the specified reader or buffer, length delimited.
       * @param reader Reader or buffer to decode from
       * @returns A2A
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decodeDelimited(
        reader: $protobuf.Reader | Uint8Array,
      ): sprout.aixcourse.A2A

      /**
       * Verifies a A2A message.
       * @param message Plain object to verify
       * @returns `null` if valid, otherwise the reason why it is not
       */
      public static verify(message: { [k: string]: any }): string | null

      /**
       * Creates a A2A message from a plain object. Also converts values to their respective internal types.
       * @param object Plain object
       * @returns A2A
       */
      public static fromObject(object: {
        [k: string]: any
      }): sprout.aixcourse.A2A

      /**
       * Creates a plain object from a A2A message. Also converts values to other types if specified.
       * @param message A2A
       * @param [options] Conversion options
       * @returns Plain object
       */
      public static toObject(
        message: sprout.aixcourse.A2A,
        options?: $protobuf.IConversionOptions,
      ): { [k: string]: any }

      /**
       * Converts this A2A to JSON.
       * @returns JSON object
       */
      public toJSON(): { [k: string]: any }
    }

    /** Properties of a A2AFree. */
    interface IA2AFree {
      /** A2AFree audioId */
      audioId?: string | null
    }

    /** Represents a A2AFree. */
    class A2AFree implements IA2AFree {
      /**
       * Constructs a new A2AFree.
       * @param [properties] Properties to set
       */
      constructor(properties?: sprout.aixcourse.IA2AFree)

      /** A2AFree audioId. */
      public audioId: string

      /**
       * Creates a new A2AFree instance using the specified properties.
       * @param [properties] Properties to set
       * @returns A2AFree instance
       */
      public static create(
        properties?: sprout.aixcourse.IA2AFree,
      ): sprout.aixcourse.A2AFree

      /**
       * Encodes the specified A2AFree message. Does not implicitly {@link sprout.aixcourse.A2AFree.verify|verify} messages.
       * @param message A2AFree message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encode(
        message: sprout.aixcourse.IA2AFree,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Encodes the specified A2AFree message, length delimited. Does not implicitly {@link sprout.aixcourse.A2AFree.verify|verify} messages.
       * @param message A2AFree message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encodeDelimited(
        message: sprout.aixcourse.IA2AFree,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Decodes a A2AFree message from the specified reader or buffer.
       * @param reader Reader or buffer to decode from
       * @param [length] Message length if known beforehand
       * @returns A2AFree
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decode(
        reader: $protobuf.Reader | Uint8Array,
        length?: number,
      ): sprout.aixcourse.A2AFree

      /**
       * Decodes a A2AFree message from the specified reader or buffer, length delimited.
       * @param reader Reader or buffer to decode from
       * @returns A2AFree
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decodeDelimited(
        reader: $protobuf.Reader | Uint8Array,
      ): sprout.aixcourse.A2AFree

      /**
       * Verifies a A2AFree message.
       * @param message Plain object to verify
       * @returns `null` if valid, otherwise the reason why it is not
       */
      public static verify(message: { [k: string]: any }): string | null

      /**
       * Creates a A2AFree message from a plain object. Also converts values to their respective internal types.
       * @param object Plain object
       * @returns A2AFree
       */
      public static fromObject(object: {
        [k: string]: any
      }): sprout.aixcourse.A2AFree

      /**
       * Creates a plain object from a A2AFree message. Also converts values to other types if specified.
       * @param message A2AFree
       * @param [options] Conversion options
       * @returns Plain object
       */
      public static toObject(
        message: sprout.aixcourse.A2AFree,
        options?: $protobuf.IConversionOptions,
      ): { [k: string]: any }

      /**
       * Converts this A2AFree to JSON.
       * @returns JSON object
       */
      public toJSON(): { [k: string]: any }
    }

    /** Properties of a PresentationAward. */
    interface IPresentationAward {}

    /** Represents a PresentationAward. */
    class PresentationAward implements IPresentationAward {
      /**
       * Constructs a new PresentationAward.
       * @param [properties] Properties to set
       */
      constructor(properties?: sprout.aixcourse.IPresentationAward)

      /**
       * Creates a new PresentationAward instance using the specified properties.
       * @param [properties] Properties to set
       * @returns PresentationAward instance
       */
      public static create(
        properties?: sprout.aixcourse.IPresentationAward,
      ): sprout.aixcourse.PresentationAward

      /**
       * Encodes the specified PresentationAward message. Does not implicitly {@link sprout.aixcourse.PresentationAward.verify|verify} messages.
       * @param message PresentationAward message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encode(
        message: sprout.aixcourse.IPresentationAward,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Encodes the specified PresentationAward message, length delimited. Does not implicitly {@link sprout.aixcourse.PresentationAward.verify|verify} messages.
       * @param message PresentationAward message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encodeDelimited(
        message: sprout.aixcourse.IPresentationAward,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Decodes a PresentationAward message from the specified reader or buffer.
       * @param reader Reader or buffer to decode from
       * @param [length] Message length if known beforehand
       * @returns PresentationAward
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decode(
        reader: $protobuf.Reader | Uint8Array,
        length?: number,
      ): sprout.aixcourse.PresentationAward

      /**
       * Decodes a PresentationAward message from the specified reader or buffer, length delimited.
       * @param reader Reader or buffer to decode from
       * @returns PresentationAward
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decodeDelimited(
        reader: $protobuf.Reader | Uint8Array,
      ): sprout.aixcourse.PresentationAward

      /**
       * Verifies a PresentationAward message.
       * @param message Plain object to verify
       * @returns `null` if valid, otherwise the reason why it is not
       */
      public static verify(message: { [k: string]: any }): string | null

      /**
       * Creates a PresentationAward message from a plain object. Also converts values to their respective internal types.
       * @param object Plain object
       * @returns PresentationAward
       */
      public static fromObject(object: {
        [k: string]: any
      }): sprout.aixcourse.PresentationAward

      /**
       * Creates a plain object from a PresentationAward message. Also converts values to other types if specified.
       * @param message PresentationAward
       * @param [options] Conversion options
       * @returns Plain object
       */
      public static toObject(
        message: sprout.aixcourse.PresentationAward,
        options?: $protobuf.IConversionOptions,
      ): { [k: string]: any }

      /**
       * Converts this PresentationAward to JSON.
       * @returns JSON object
       */
      public toJSON(): { [k: string]: any }
    }

    /** Properties of a PresentationExchange. */
    interface IPresentationExchange {}

    /** Represents a PresentationExchange. */
    class PresentationExchange implements IPresentationExchange {
      /**
       * Constructs a new PresentationExchange.
       * @param [properties] Properties to set
       */
      constructor(properties?: sprout.aixcourse.IPresentationExchange)

      /**
       * Creates a new PresentationExchange instance using the specified properties.
       * @param [properties] Properties to set
       * @returns PresentationExchange instance
       */
      public static create(
        properties?: sprout.aixcourse.IPresentationExchange,
      ): sprout.aixcourse.PresentationExchange

      /**
       * Encodes the specified PresentationExchange message. Does not implicitly {@link sprout.aixcourse.PresentationExchange.verify|verify} messages.
       * @param message PresentationExchange message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encode(
        message: sprout.aixcourse.IPresentationExchange,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Encodes the specified PresentationExchange message, length delimited. Does not implicitly {@link sprout.aixcourse.PresentationExchange.verify|verify} messages.
       * @param message PresentationExchange message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encodeDelimited(
        message: sprout.aixcourse.IPresentationExchange,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Decodes a PresentationExchange message from the specified reader or buffer.
       * @param reader Reader or buffer to decode from
       * @param [length] Message length if known beforehand
       * @returns PresentationExchange
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decode(
        reader: $protobuf.Reader | Uint8Array,
        length?: number,
      ): sprout.aixcourse.PresentationExchange

      /**
       * Decodes a PresentationExchange message from the specified reader or buffer, length delimited.
       * @param reader Reader or buffer to decode from
       * @returns PresentationExchange
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decodeDelimited(
        reader: $protobuf.Reader | Uint8Array,
      ): sprout.aixcourse.PresentationExchange

      /**
       * Verifies a PresentationExchange message.
       * @param message Plain object to verify
       * @returns `null` if valid, otherwise the reason why it is not
       */
      public static verify(message: { [k: string]: any }): string | null

      /**
       * Creates a PresentationExchange message from a plain object. Also converts values to their respective internal types.
       * @param object Plain object
       * @returns PresentationExchange
       */
      public static fromObject(object: {
        [k: string]: any
      }): sprout.aixcourse.PresentationExchange

      /**
       * Creates a plain object from a PresentationExchange message. Also converts values to other types if specified.
       * @param message PresentationExchange
       * @param [options] Conversion options
       * @returns Plain object
       */
      public static toObject(
        message: sprout.aixcourse.PresentationExchange,
        options?: $protobuf.IConversionOptions,
      ): { [k: string]: any }

      /**
       * Converts this PresentationExchange to JSON.
       * @returns JSON object
       */
      public toJSON(): { [k: string]: any }
    }

    /** Properties of a PresentationTeaching. */
    interface IPresentationTeaching {}

    /** Represents a PresentationTeaching. */
    class PresentationTeaching implements IPresentationTeaching {
      /**
       * Constructs a new PresentationTeaching.
       * @param [properties] Properties to set
       */
      constructor(properties?: sprout.aixcourse.IPresentationTeaching)

      /**
       * Creates a new PresentationTeaching instance using the specified properties.
       * @param [properties] Properties to set
       * @returns PresentationTeaching instance
       */
      public static create(
        properties?: sprout.aixcourse.IPresentationTeaching,
      ): sprout.aixcourse.PresentationTeaching

      /**
       * Encodes the specified PresentationTeaching message. Does not implicitly {@link sprout.aixcourse.PresentationTeaching.verify|verify} messages.
       * @param message PresentationTeaching message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encode(
        message: sprout.aixcourse.IPresentationTeaching,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Encodes the specified PresentationTeaching message, length delimited. Does not implicitly {@link sprout.aixcourse.PresentationTeaching.verify|verify} messages.
       * @param message PresentationTeaching message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encodeDelimited(
        message: sprout.aixcourse.IPresentationTeaching,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Decodes a PresentationTeaching message from the specified reader or buffer.
       * @param reader Reader or buffer to decode from
       * @param [length] Message length if known beforehand
       * @returns PresentationTeaching
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decode(
        reader: $protobuf.Reader | Uint8Array,
        length?: number,
      ): sprout.aixcourse.PresentationTeaching

      /**
       * Decodes a PresentationTeaching message from the specified reader or buffer, length delimited.
       * @param reader Reader or buffer to decode from
       * @returns PresentationTeaching
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decodeDelimited(
        reader: $protobuf.Reader | Uint8Array,
      ): sprout.aixcourse.PresentationTeaching

      /**
       * Verifies a PresentationTeaching message.
       * @param message Plain object to verify
       * @returns `null` if valid, otherwise the reason why it is not
       */
      public static verify(message: { [k: string]: any }): string | null

      /**
       * Creates a PresentationTeaching message from a plain object. Also converts values to their respective internal types.
       * @param object Plain object
       * @returns PresentationTeaching
       */
      public static fromObject(object: {
        [k: string]: any
      }): sprout.aixcourse.PresentationTeaching

      /**
       * Creates a plain object from a PresentationTeaching message. Also converts values to other types if specified.
       * @param message PresentationTeaching
       * @param [options] Conversion options
       * @returns Plain object
       */
      public static toObject(
        message: sprout.aixcourse.PresentationTeaching,
        options?: $protobuf.IConversionOptions,
      ): { [k: string]: any }

      /**
       * Converts this PresentationTeaching to JSON.
       * @returns JSON object
       */
      public toJSON(): { [k: string]: any }
    }

    /** Properties of a A2PPuzzle. */
    interface IA2PPuzzle {
      /** A2PPuzzle choices */
      choices?: sprout.aixcourse.IAnimationChoice[] | null
    }

    /** Represents a A2PPuzzle. */
    class A2PPuzzle implements IA2PPuzzle {
      /**
       * Constructs a new A2PPuzzle.
       * @param [properties] Properties to set
       */
      constructor(properties?: sprout.aixcourse.IA2PPuzzle)

      /** A2PPuzzle choices. */
      public choices: sprout.aixcourse.IAnimationChoice[]

      /**
       * Creates a new A2PPuzzle instance using the specified properties.
       * @param [properties] Properties to set
       * @returns A2PPuzzle instance
       */
      public static create(
        properties?: sprout.aixcourse.IA2PPuzzle,
      ): sprout.aixcourse.A2PPuzzle

      /**
       * Encodes the specified A2PPuzzle message. Does not implicitly {@link sprout.aixcourse.A2PPuzzle.verify|verify} messages.
       * @param message A2PPuzzle message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encode(
        message: sprout.aixcourse.IA2PPuzzle,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Encodes the specified A2PPuzzle message, length delimited. Does not implicitly {@link sprout.aixcourse.A2PPuzzle.verify|verify} messages.
       * @param message A2PPuzzle message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encodeDelimited(
        message: sprout.aixcourse.IA2PPuzzle,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Decodes a A2PPuzzle message from the specified reader or buffer.
       * @param reader Reader or buffer to decode from
       * @param [length] Message length if known beforehand
       * @returns A2PPuzzle
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decode(
        reader: $protobuf.Reader | Uint8Array,
        length?: number,
      ): sprout.aixcourse.A2PPuzzle

      /**
       * Decodes a A2PPuzzle message from the specified reader or buffer, length delimited.
       * @param reader Reader or buffer to decode from
       * @returns A2PPuzzle
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decodeDelimited(
        reader: $protobuf.Reader | Uint8Array,
      ): sprout.aixcourse.A2PPuzzle

      /**
       * Verifies a A2PPuzzle message.
       * @param message Plain object to verify
       * @returns `null` if valid, otherwise the reason why it is not
       */
      public static verify(message: { [k: string]: any }): string | null

      /**
       * Creates a A2PPuzzle message from a plain object. Also converts values to their respective internal types.
       * @param object Plain object
       * @returns A2PPuzzle
       */
      public static fromObject(object: {
        [k: string]: any
      }): sprout.aixcourse.A2PPuzzle

      /**
       * Creates a plain object from a A2PPuzzle message. Also converts values to other types if specified.
       * @param message A2PPuzzle
       * @param [options] Conversion options
       * @returns Plain object
       */
      public static toObject(
        message: sprout.aixcourse.A2PPuzzle,
        options?: $protobuf.IConversionOptions,
      ): { [k: string]: any }

      /**
       * Converts this A2PPuzzle to JSON.
       * @returns JSON object
       */
      public toJSON(): { [k: string]: any }
    }

    /** Properties of a A2PTool. */
    interface IA2PTool {
      /** A2PTool tool */
      tool?: sprout.aixcourse.ICoordinatePicture | null

      /** A2PTool choices */
      choices?: sprout.aixcourse.IAnimationChoice[] | null
    }

    /** Represents a A2PTool. */
    class A2PTool implements IA2PTool {
      /**
       * Constructs a new A2PTool.
       * @param [properties] Properties to set
       */
      constructor(properties?: sprout.aixcourse.IA2PTool)

      /** A2PTool tool. */
      public tool?: sprout.aixcourse.ICoordinatePicture | null

      /** A2PTool choices. */
      public choices: sprout.aixcourse.IAnimationChoice[]

      /**
       * Creates a new A2PTool instance using the specified properties.
       * @param [properties] Properties to set
       * @returns A2PTool instance
       */
      public static create(
        properties?: sprout.aixcourse.IA2PTool,
      ): sprout.aixcourse.A2PTool

      /**
       * Encodes the specified A2PTool message. Does not implicitly {@link sprout.aixcourse.A2PTool.verify|verify} messages.
       * @param message A2PTool message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encode(
        message: sprout.aixcourse.IA2PTool,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Encodes the specified A2PTool message, length delimited. Does not implicitly {@link sprout.aixcourse.A2PTool.verify|verify} messages.
       * @param message A2PTool message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encodeDelimited(
        message: sprout.aixcourse.IA2PTool,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Decodes a A2PTool message from the specified reader or buffer.
       * @param reader Reader or buffer to decode from
       * @param [length] Message length if known beforehand
       * @returns A2PTool
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decode(
        reader: $protobuf.Reader | Uint8Array,
        length?: number,
      ): sprout.aixcourse.A2PTool

      /**
       * Decodes a A2PTool message from the specified reader or buffer, length delimited.
       * @param reader Reader or buffer to decode from
       * @returns A2PTool
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decodeDelimited(
        reader: $protobuf.Reader | Uint8Array,
      ): sprout.aixcourse.A2PTool

      /**
       * Verifies a A2PTool message.
       * @param message Plain object to verify
       * @returns `null` if valid, otherwise the reason why it is not
       */
      public static verify(message: { [k: string]: any }): string | null

      /**
       * Creates a A2PTool message from a plain object. Also converts values to their respective internal types.
       * @param object Plain object
       * @returns A2PTool
       */
      public static fromObject(object: {
        [k: string]: any
      }): sprout.aixcourse.A2PTool

      /**
       * Creates a plain object from a A2PTool message. Also converts values to other types if specified.
       * @param message A2PTool
       * @param [options] Conversion options
       * @returns Plain object
       */
      public static toObject(
        message: sprout.aixcourse.A2PTool,
        options?: $protobuf.IConversionOptions,
      ): { [k: string]: any }

      /**
       * Converts this A2PTool to JSON.
       * @returns JSON object
       */
      public toJSON(): { [k: string]: any }
    }

    /** Properties of a A2PDrag2. */
    interface IA2PDrag2 {
      /** A2PDrag2 questions */
      questions?: sprout.aixcourse.IAnimationElement[] | null

      /** A2PDrag2 choices */
      choices?: sprout.aixcourse.IAnimationChoice[] | null
    }

    /** Represents a A2PDrag2. */
    class A2PDrag2 implements IA2PDrag2 {
      /**
       * Constructs a new A2PDrag2.
       * @param [properties] Properties to set
       */
      constructor(properties?: sprout.aixcourse.IA2PDrag2)

      /** A2PDrag2 questions. */
      public questions: sprout.aixcourse.IAnimationElement[]

      /** A2PDrag2 choices. */
      public choices: sprout.aixcourse.IAnimationChoice[]

      /**
       * Creates a new A2PDrag2 instance using the specified properties.
       * @param [properties] Properties to set
       * @returns A2PDrag2 instance
       */
      public static create(
        properties?: sprout.aixcourse.IA2PDrag2,
      ): sprout.aixcourse.A2PDrag2

      /**
       * Encodes the specified A2PDrag2 message. Does not implicitly {@link sprout.aixcourse.A2PDrag2.verify|verify} messages.
       * @param message A2PDrag2 message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encode(
        message: sprout.aixcourse.IA2PDrag2,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Encodes the specified A2PDrag2 message, length delimited. Does not implicitly {@link sprout.aixcourse.A2PDrag2.verify|verify} messages.
       * @param message A2PDrag2 message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encodeDelimited(
        message: sprout.aixcourse.IA2PDrag2,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Decodes a A2PDrag2 message from the specified reader or buffer.
       * @param reader Reader or buffer to decode from
       * @param [length] Message length if known beforehand
       * @returns A2PDrag2
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decode(
        reader: $protobuf.Reader | Uint8Array,
        length?: number,
      ): sprout.aixcourse.A2PDrag2

      /**
       * Decodes a A2PDrag2 message from the specified reader or buffer, length delimited.
       * @param reader Reader or buffer to decode from
       * @returns A2PDrag2
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decodeDelimited(
        reader: $protobuf.Reader | Uint8Array,
      ): sprout.aixcourse.A2PDrag2

      /**
       * Verifies a A2PDrag2 message.
       * @param message Plain object to verify
       * @returns `null` if valid, otherwise the reason why it is not
       */
      public static verify(message: { [k: string]: any }): string | null

      /**
       * Creates a A2PDrag2 message from a plain object. Also converts values to their respective internal types.
       * @param object Plain object
       * @returns A2PDrag2
       */
      public static fromObject(object: {
        [k: string]: any
      }): sprout.aixcourse.A2PDrag2

      /**
       * Creates a plain object from a A2PDrag2 message. Also converts values to other types if specified.
       * @param message A2PDrag2
       * @param [options] Conversion options
       * @returns Plain object
       */
      public static toObject(
        message: sprout.aixcourse.A2PDrag2,
        options?: $protobuf.IConversionOptions,
      ): { [k: string]: any }

      /**
       * Converts this A2PDrag2 to JSON.
       * @returns JSON object
       */
      public toJSON(): { [k: string]: any }
    }

    /** Properties of a A2PDrag2X. */
    interface IA2PDrag2X {
      /** A2PDrag2X a2pDrag_2 */
      a2pDrag_2?: sprout.aixcourse.IA2PDrag2 | null
    }

    /** Represents a A2PDrag2X. */
    class A2PDrag2X implements IA2PDrag2X {
      /**
       * Constructs a new A2PDrag2X.
       * @param [properties] Properties to set
       */
      constructor(properties?: sprout.aixcourse.IA2PDrag2X)

      /** A2PDrag2X a2pDrag_2. */
      public a2pDrag_2?: sprout.aixcourse.IA2PDrag2 | null

      /**
       * Creates a new A2PDrag2X instance using the specified properties.
       * @param [properties] Properties to set
       * @returns A2PDrag2X instance
       */
      public static create(
        properties?: sprout.aixcourse.IA2PDrag2X,
      ): sprout.aixcourse.A2PDrag2X

      /**
       * Encodes the specified A2PDrag2X message. Does not implicitly {@link sprout.aixcourse.A2PDrag2X.verify|verify} messages.
       * @param message A2PDrag2X message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encode(
        message: sprout.aixcourse.IA2PDrag2X,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Encodes the specified A2PDrag2X message, length delimited. Does not implicitly {@link sprout.aixcourse.A2PDrag2X.verify|verify} messages.
       * @param message A2PDrag2X message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encodeDelimited(
        message: sprout.aixcourse.IA2PDrag2X,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Decodes a A2PDrag2X message from the specified reader or buffer.
       * @param reader Reader or buffer to decode from
       * @param [length] Message length if known beforehand
       * @returns A2PDrag2X
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decode(
        reader: $protobuf.Reader | Uint8Array,
        length?: number,
      ): sprout.aixcourse.A2PDrag2X

      /**
       * Decodes a A2PDrag2X message from the specified reader or buffer, length delimited.
       * @param reader Reader or buffer to decode from
       * @returns A2PDrag2X
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decodeDelimited(
        reader: $protobuf.Reader | Uint8Array,
      ): sprout.aixcourse.A2PDrag2X

      /**
       * Verifies a A2PDrag2X message.
       * @param message Plain object to verify
       * @returns `null` if valid, otherwise the reason why it is not
       */
      public static verify(message: { [k: string]: any }): string | null

      /**
       * Creates a A2PDrag2X message from a plain object. Also converts values to their respective internal types.
       * @param object Plain object
       * @returns A2PDrag2X
       */
      public static fromObject(object: {
        [k: string]: any
      }): sprout.aixcourse.A2PDrag2X

      /**
       * Creates a plain object from a A2PDrag2X message. Also converts values to other types if specified.
       * @param message A2PDrag2X
       * @param [options] Conversion options
       * @returns Plain object
       */
      public static toObject(
        message: sprout.aixcourse.A2PDrag2X,
        options?: $protobuf.IConversionOptions,
      ): { [k: string]: any }

      /**
       * Converts this A2PDrag2X to JSON.
       * @returns JSON object
       */
      public toJSON(): { [k: string]: any }
    }

    /** Properties of a A2PTap. */
    interface IA2PTap {
      /** A2PTap choices */
      choices?: sprout.aixcourse.IAnimationChoice[] | null
    }

    /** Represents a A2PTap. */
    class A2PTap implements IA2PTap {
      /**
       * Constructs a new A2PTap.
       * @param [properties] Properties to set
       */
      constructor(properties?: sprout.aixcourse.IA2PTap)

      /** A2PTap choices. */
      public choices: sprout.aixcourse.IAnimationChoice[]

      /**
       * Creates a new A2PTap instance using the specified properties.
       * @param [properties] Properties to set
       * @returns A2PTap instance
       */
      public static create(
        properties?: sprout.aixcourse.IA2PTap,
      ): sprout.aixcourse.A2PTap

      /**
       * Encodes the specified A2PTap message. Does not implicitly {@link sprout.aixcourse.A2PTap.verify|verify} messages.
       * @param message A2PTap message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encode(
        message: sprout.aixcourse.IA2PTap,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Encodes the specified A2PTap message, length delimited. Does not implicitly {@link sprout.aixcourse.A2PTap.verify|verify} messages.
       * @param message A2PTap message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encodeDelimited(
        message: sprout.aixcourse.IA2PTap,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Decodes a A2PTap message from the specified reader or buffer.
       * @param reader Reader or buffer to decode from
       * @param [length] Message length if known beforehand
       * @returns A2PTap
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decode(
        reader: $protobuf.Reader | Uint8Array,
        length?: number,
      ): sprout.aixcourse.A2PTap

      /**
       * Decodes a A2PTap message from the specified reader or buffer, length delimited.
       * @param reader Reader or buffer to decode from
       * @returns A2PTap
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decodeDelimited(
        reader: $protobuf.Reader | Uint8Array,
      ): sprout.aixcourse.A2PTap

      /**
       * Verifies a A2PTap message.
       * @param message Plain object to verify
       * @returns `null` if valid, otherwise the reason why it is not
       */
      public static verify(message: { [k: string]: any }): string | null

      /**
       * Creates a A2PTap message from a plain object. Also converts values to their respective internal types.
       * @param object Plain object
       * @returns A2PTap
       */
      public static fromObject(object: {
        [k: string]: any
      }): sprout.aixcourse.A2PTap

      /**
       * Creates a plain object from a A2PTap message. Also converts values to other types if specified.
       * @param message A2PTap
       * @param [options] Conversion options
       * @returns Plain object
       */
      public static toObject(
        message: sprout.aixcourse.A2PTap,
        options?: $protobuf.IConversionOptions,
      ): { [k: string]: any }

      /**
       * Converts this A2PTap to JSON.
       * @returns JSON object
       */
      public toJSON(): { [k: string]: any }
    }

    /** Properties of a PA2ABuild. */
    interface IPA2ABuild {
      /** PA2ABuild audioId */
      audioId?: string | null

      /** PA2ABuild element */
      element?: sprout.aixcourse.IAnimationChoice | null
    }

    /** Represents a PA2ABuild. */
    class PA2ABuild implements IPA2ABuild {
      /**
       * Constructs a new PA2ABuild.
       * @param [properties] Properties to set
       */
      constructor(properties?: sprout.aixcourse.IPA2ABuild)

      /** PA2ABuild audioId. */
      public audioId: string

      /** PA2ABuild element. */
      public element?: sprout.aixcourse.IAnimationChoice | null

      /**
       * Creates a new PA2ABuild instance using the specified properties.
       * @param [properties] Properties to set
       * @returns PA2ABuild instance
       */
      public static create(
        properties?: sprout.aixcourse.IPA2ABuild,
      ): sprout.aixcourse.PA2ABuild

      /**
       * Encodes the specified PA2ABuild message. Does not implicitly {@link sprout.aixcourse.PA2ABuild.verify|verify} messages.
       * @param message PA2ABuild message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encode(
        message: sprout.aixcourse.IPA2ABuild,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Encodes the specified PA2ABuild message, length delimited. Does not implicitly {@link sprout.aixcourse.PA2ABuild.verify|verify} messages.
       * @param message PA2ABuild message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encodeDelimited(
        message: sprout.aixcourse.IPA2ABuild,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Decodes a PA2ABuild message from the specified reader or buffer.
       * @param reader Reader or buffer to decode from
       * @param [length] Message length if known beforehand
       * @returns PA2ABuild
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decode(
        reader: $protobuf.Reader | Uint8Array,
        length?: number,
      ): sprout.aixcourse.PA2ABuild

      /**
       * Decodes a PA2ABuild message from the specified reader or buffer, length delimited.
       * @param reader Reader or buffer to decode from
       * @returns PA2ABuild
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decodeDelimited(
        reader: $protobuf.Reader | Uint8Array,
      ): sprout.aixcourse.PA2ABuild

      /**
       * Verifies a PA2ABuild message.
       * @param message Plain object to verify
       * @returns `null` if valid, otherwise the reason why it is not
       */
      public static verify(message: { [k: string]: any }): string | null

      /**
       * Creates a PA2ABuild message from a plain object. Also converts values to their respective internal types.
       * @param object Plain object
       * @returns PA2ABuild
       */
      public static fromObject(object: {
        [k: string]: any
      }): sprout.aixcourse.PA2ABuild

      /**
       * Creates a plain object from a PA2ABuild message. Also converts values to other types if specified.
       * @param message PA2ABuild
       * @param [options] Conversion options
       * @returns Plain object
       */
      public static toObject(
        message: sprout.aixcourse.PA2ABuild,
        options?: $protobuf.IConversionOptions,
      ): { [k: string]: any }

      /**
       * Converts this PA2ABuild to JSON.
       * @returns JSON object
       */
      public toJSON(): { [k: string]: any }
    }

    /** Properties of a PA2ABuildX. */
    interface IPA2ABuildX {
      /** PA2ABuildX pa2aBuild */
      pa2aBuild?: sprout.aixcourse.IPA2ABuild | null
    }

    /** Represents a PA2ABuildX. */
    class PA2ABuildX implements IPA2ABuildX {
      /**
       * Constructs a new PA2ABuildX.
       * @param [properties] Properties to set
       */
      constructor(properties?: sprout.aixcourse.IPA2ABuildX)

      /** PA2ABuildX pa2aBuild. */
      public pa2aBuild?: sprout.aixcourse.IPA2ABuild | null

      /**
       * Creates a new PA2ABuildX instance using the specified properties.
       * @param [properties] Properties to set
       * @returns PA2ABuildX instance
       */
      public static create(
        properties?: sprout.aixcourse.IPA2ABuildX,
      ): sprout.aixcourse.PA2ABuildX

      /**
       * Encodes the specified PA2ABuildX message. Does not implicitly {@link sprout.aixcourse.PA2ABuildX.verify|verify} messages.
       * @param message PA2ABuildX message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encode(
        message: sprout.aixcourse.IPA2ABuildX,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Encodes the specified PA2ABuildX message, length delimited. Does not implicitly {@link sprout.aixcourse.PA2ABuildX.verify|verify} messages.
       * @param message PA2ABuildX message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encodeDelimited(
        message: sprout.aixcourse.IPA2ABuildX,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Decodes a PA2ABuildX message from the specified reader or buffer.
       * @param reader Reader or buffer to decode from
       * @param [length] Message length if known beforehand
       * @returns PA2ABuildX
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decode(
        reader: $protobuf.Reader | Uint8Array,
        length?: number,
      ): sprout.aixcourse.PA2ABuildX

      /**
       * Decodes a PA2ABuildX message from the specified reader or buffer, length delimited.
       * @param reader Reader or buffer to decode from
       * @returns PA2ABuildX
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decodeDelimited(
        reader: $protobuf.Reader | Uint8Array,
      ): sprout.aixcourse.PA2ABuildX

      /**
       * Verifies a PA2ABuildX message.
       * @param message Plain object to verify
       * @returns `null` if valid, otherwise the reason why it is not
       */
      public static verify(message: { [k: string]: any }): string | null

      /**
       * Creates a PA2ABuildX message from a plain object. Also converts values to their respective internal types.
       * @param object Plain object
       * @returns PA2ABuildX
       */
      public static fromObject(object: {
        [k: string]: any
      }): sprout.aixcourse.PA2ABuildX

      /**
       * Creates a plain object from a PA2ABuildX message. Also converts values to other types if specified.
       * @param message PA2ABuildX
       * @param [options] Conversion options
       * @returns Plain object
       */
      public static toObject(
        message: sprout.aixcourse.PA2ABuildX,
        options?: $protobuf.IConversionOptions,
      ): { [k: string]: any }

      /**
       * Converts this PA2ABuildX to JSON.
       * @returns JSON object
       */
      public toJSON(): { [k: string]: any }
    }

    /** Properties of a A2PDrag1. */
    interface IA2PDrag1 {
      /** A2PDrag1 elements */
      elements?: sprout.aixcourse.A2PDrag1.IElement[] | null
    }

    /** Represents a A2PDrag1. */
    class A2PDrag1 implements IA2PDrag1 {
      /**
       * Constructs a new A2PDrag1.
       * @param [properties] Properties to set
       */
      constructor(properties?: sprout.aixcourse.IA2PDrag1)

      /** A2PDrag1 elements. */
      public elements: sprout.aixcourse.A2PDrag1.IElement[]

      /**
       * Creates a new A2PDrag1 instance using the specified properties.
       * @param [properties] Properties to set
       * @returns A2PDrag1 instance
       */
      public static create(
        properties?: sprout.aixcourse.IA2PDrag1,
      ): sprout.aixcourse.A2PDrag1

      /**
       * Encodes the specified A2PDrag1 message. Does not implicitly {@link sprout.aixcourse.A2PDrag1.verify|verify} messages.
       * @param message A2PDrag1 message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encode(
        message: sprout.aixcourse.IA2PDrag1,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Encodes the specified A2PDrag1 message, length delimited. Does not implicitly {@link sprout.aixcourse.A2PDrag1.verify|verify} messages.
       * @param message A2PDrag1 message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encodeDelimited(
        message: sprout.aixcourse.IA2PDrag1,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Decodes a A2PDrag1 message from the specified reader or buffer.
       * @param reader Reader or buffer to decode from
       * @param [length] Message length if known beforehand
       * @returns A2PDrag1
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decode(
        reader: $protobuf.Reader | Uint8Array,
        length?: number,
      ): sprout.aixcourse.A2PDrag1

      /**
       * Decodes a A2PDrag1 message from the specified reader or buffer, length delimited.
       * @param reader Reader or buffer to decode from
       * @returns A2PDrag1
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decodeDelimited(
        reader: $protobuf.Reader | Uint8Array,
      ): sprout.aixcourse.A2PDrag1

      /**
       * Verifies a A2PDrag1 message.
       * @param message Plain object to verify
       * @returns `null` if valid, otherwise the reason why it is not
       */
      public static verify(message: { [k: string]: any }): string | null

      /**
       * Creates a A2PDrag1 message from a plain object. Also converts values to their respective internal types.
       * @param object Plain object
       * @returns A2PDrag1
       */
      public static fromObject(object: {
        [k: string]: any
      }): sprout.aixcourse.A2PDrag1

      /**
       * Creates a plain object from a A2PDrag1 message. Also converts values to other types if specified.
       * @param message A2PDrag1
       * @param [options] Conversion options
       * @returns Plain object
       */
      public static toObject(
        message: sprout.aixcourse.A2PDrag1,
        options?: $protobuf.IConversionOptions,
      ): { [k: string]: any }

      /**
       * Converts this A2PDrag1 to JSON.
       * @returns JSON object
       */
      public toJSON(): { [k: string]: any }
    }

    namespace A2PDrag1 {
      /** Properties of an Element. */
      interface IElement {
        /** Element startPictureId */
        startPictureId?: string | null

        /** Element endPictureId */
        endPictureId?: string | null

        /** Element soundEffectAudioId */
        soundEffectAudioId?: string | null

        /** Element checked */
        checked?: boolean | null
      }

      /** Represents an Element. */
      class Element implements IElement {
        /**
         * Constructs a new Element.
         * @param [properties] Properties to set
         */
        constructor(properties?: sprout.aixcourse.A2PDrag1.IElement)

        /** Element startPictureId. */
        public startPictureId: string

        /** Element endPictureId. */
        public endPictureId: string

        /** Element soundEffectAudioId. */
        public soundEffectAudioId: string

        /** Element checked. */
        public checked: boolean

        /**
         * Creates a new Element instance using the specified properties.
         * @param [properties] Properties to set
         * @returns Element instance
         */
        public static create(
          properties?: sprout.aixcourse.A2PDrag1.IElement,
        ): sprout.aixcourse.A2PDrag1.Element

        /**
         * Encodes the specified Element message. Does not implicitly {@link sprout.aixcourse.A2PDrag1.Element.verify|verify} messages.
         * @param message Element message or plain object to encode
         * @param [writer] Writer to encode to
         * @returns Writer
         */
        public static encode(
          message: sprout.aixcourse.A2PDrag1.IElement,
          writer?: $protobuf.Writer,
        ): $protobuf.Writer

        /**
         * Encodes the specified Element message, length delimited. Does not implicitly {@link sprout.aixcourse.A2PDrag1.Element.verify|verify} messages.
         * @param message Element message or plain object to encode
         * @param [writer] Writer to encode to
         * @returns Writer
         */
        public static encodeDelimited(
          message: sprout.aixcourse.A2PDrag1.IElement,
          writer?: $protobuf.Writer,
        ): $protobuf.Writer

        /**
         * Decodes an Element message from the specified reader or buffer.
         * @param reader Reader or buffer to decode from
         * @param [length] Message length if known beforehand
         * @returns Element
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        public static decode(
          reader: $protobuf.Reader | Uint8Array,
          length?: number,
        ): sprout.aixcourse.A2PDrag1.Element

        /**
         * Decodes an Element message from the specified reader or buffer, length delimited.
         * @param reader Reader or buffer to decode from
         * @returns Element
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        public static decodeDelimited(
          reader: $protobuf.Reader | Uint8Array,
        ): sprout.aixcourse.A2PDrag1.Element

        /**
         * Verifies an Element message.
         * @param message Plain object to verify
         * @returns `null` if valid, otherwise the reason why it is not
         */
        public static verify(message: { [k: string]: any }): string | null

        /**
         * Creates an Element message from a plain object. Also converts values to their respective internal types.
         * @param object Plain object
         * @returns Element
         */
        public static fromObject(object: {
          [k: string]: any
        }): sprout.aixcourse.A2PDrag1.Element

        /**
         * Creates a plain object from an Element message. Also converts values to other types if specified.
         * @param message Element
         * @param [options] Conversion options
         * @returns Plain object
         */
        public static toObject(
          message: sprout.aixcourse.A2PDrag1.Element,
          options?: $protobuf.IConversionOptions,
        ): { [k: string]: any }

        /**
         * Converts this Element to JSON.
         * @returns JSON object
         */
        public toJSON(): { [k: string]: any }
      }
    }

    /** Properties of a PA2AFree. */
    interface IPA2AFree {
      /** PA2AFree audioId */
      audioId?: string | null

      /** PA2AFree elements */
      elements?: sprout.aixcourse.PA2AFree.IElement[] | null
    }

    /** Represents a PA2AFree. */
    class PA2AFree implements IPA2AFree {
      /**
       * Constructs a new PA2AFree.
       * @param [properties] Properties to set
       */
      constructor(properties?: sprout.aixcourse.IPA2AFree)

      /** PA2AFree audioId. */
      public audioId: string

      /** PA2AFree elements. */
      public elements: sprout.aixcourse.PA2AFree.IElement[]

      /**
       * Creates a new PA2AFree instance using the specified properties.
       * @param [properties] Properties to set
       * @returns PA2AFree instance
       */
      public static create(
        properties?: sprout.aixcourse.IPA2AFree,
      ): sprout.aixcourse.PA2AFree

      /**
       * Encodes the specified PA2AFree message. Does not implicitly {@link sprout.aixcourse.PA2AFree.verify|verify} messages.
       * @param message PA2AFree message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encode(
        message: sprout.aixcourse.IPA2AFree,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Encodes the specified PA2AFree message, length delimited. Does not implicitly {@link sprout.aixcourse.PA2AFree.verify|verify} messages.
       * @param message PA2AFree message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encodeDelimited(
        message: sprout.aixcourse.IPA2AFree,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Decodes a PA2AFree message from the specified reader or buffer.
       * @param reader Reader or buffer to decode from
       * @param [length] Message length if known beforehand
       * @returns PA2AFree
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decode(
        reader: $protobuf.Reader | Uint8Array,
        length?: number,
      ): sprout.aixcourse.PA2AFree

      /**
       * Decodes a PA2AFree message from the specified reader or buffer, length delimited.
       * @param reader Reader or buffer to decode from
       * @returns PA2AFree
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decodeDelimited(
        reader: $protobuf.Reader | Uint8Array,
      ): sprout.aixcourse.PA2AFree

      /**
       * Verifies a PA2AFree message.
       * @param message Plain object to verify
       * @returns `null` if valid, otherwise the reason why it is not
       */
      public static verify(message: { [k: string]: any }): string | null

      /**
       * Creates a PA2AFree message from a plain object. Also converts values to their respective internal types.
       * @param object Plain object
       * @returns PA2AFree
       */
      public static fromObject(object: {
        [k: string]: any
      }): sprout.aixcourse.PA2AFree

      /**
       * Creates a plain object from a PA2AFree message. Also converts values to other types if specified.
       * @param message PA2AFree
       * @param [options] Conversion options
       * @returns Plain object
       */
      public static toObject(
        message: sprout.aixcourse.PA2AFree,
        options?: $protobuf.IConversionOptions,
      ): { [k: string]: any }

      /**
       * Converts this PA2AFree to JSON.
       * @returns JSON object
       */
      public toJSON(): { [k: string]: any }
    }

    namespace PA2AFree {
      /** Properties of an Element. */
      interface IElement {
        /** Element animationElement */
        animationElement?: sprout.aixcourse.IAnimationElement | null

        /** Element text */
        text?: string | null
      }

      /** Represents an Element. */
      class Element implements IElement {
        /**
         * Constructs a new Element.
         * @param [properties] Properties to set
         */
        constructor(properties?: sprout.aixcourse.PA2AFree.IElement)

        /** Element animationElement. */
        public animationElement?: sprout.aixcourse.IAnimationElement | null

        /** Element text. */
        public text: string

        /**
         * Creates a new Element instance using the specified properties.
         * @param [properties] Properties to set
         * @returns Element instance
         */
        public static create(
          properties?: sprout.aixcourse.PA2AFree.IElement,
        ): sprout.aixcourse.PA2AFree.Element

        /**
         * Encodes the specified Element message. Does not implicitly {@link sprout.aixcourse.PA2AFree.Element.verify|verify} messages.
         * @param message Element message or plain object to encode
         * @param [writer] Writer to encode to
         * @returns Writer
         */
        public static encode(
          message: sprout.aixcourse.PA2AFree.IElement,
          writer?: $protobuf.Writer,
        ): $protobuf.Writer

        /**
         * Encodes the specified Element message, length delimited. Does not implicitly {@link sprout.aixcourse.PA2AFree.Element.verify|verify} messages.
         * @param message Element message or plain object to encode
         * @param [writer] Writer to encode to
         * @returns Writer
         */
        public static encodeDelimited(
          message: sprout.aixcourse.PA2AFree.IElement,
          writer?: $protobuf.Writer,
        ): $protobuf.Writer

        /**
         * Decodes an Element message from the specified reader or buffer.
         * @param reader Reader or buffer to decode from
         * @param [length] Message length if known beforehand
         * @returns Element
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        public static decode(
          reader: $protobuf.Reader | Uint8Array,
          length?: number,
        ): sprout.aixcourse.PA2AFree.Element

        /**
         * Decodes an Element message from the specified reader or buffer, length delimited.
         * @param reader Reader or buffer to decode from
         * @returns Element
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        public static decodeDelimited(
          reader: $protobuf.Reader | Uint8Array,
        ): sprout.aixcourse.PA2AFree.Element

        /**
         * Verifies an Element message.
         * @param message Plain object to verify
         * @returns `null` if valid, otherwise the reason why it is not
         */
        public static verify(message: { [k: string]: any }): string | null

        /**
         * Creates an Element message from a plain object. Also converts values to their respective internal types.
         * @param object Plain object
         * @returns Element
         */
        public static fromObject(object: {
          [k: string]: any
        }): sprout.aixcourse.PA2AFree.Element

        /**
         * Creates a plain object from an Element message. Also converts values to other types if specified.
         * @param message Element
         * @param [options] Conversion options
         * @returns Plain object
         */
        public static toObject(
          message: sprout.aixcourse.PA2AFree.Element,
          options?: $protobuf.IConversionOptions,
        ): { [k: string]: any }

        /**
         * Converts this Element to JSON.
         * @returns JSON object
         */
        public toJSON(): { [k: string]: any }
      }
    }

    /** Properties of a PA2ATrigger. */
    interface IPA2ATrigger {
      /** PA2ATrigger animationElement */
      animationElement?: sprout.aixcourse.IAnimationElement | null

      /** PA2ATrigger videoId */
      videoId?: string | null

      /** PA2ATrigger audioId */
      audioId?: string | null
    }

    /** Represents a PA2ATrigger. */
    class PA2ATrigger implements IPA2ATrigger {
      /**
       * Constructs a new PA2ATrigger.
       * @param [properties] Properties to set
       */
      constructor(properties?: sprout.aixcourse.IPA2ATrigger)

      /** PA2ATrigger animationElement. */
      public animationElement?: sprout.aixcourse.IAnimationElement | null

      /** PA2ATrigger videoId. */
      public videoId: string

      /** PA2ATrigger audioId. */
      public audioId: string

      /**
       * Creates a new PA2ATrigger instance using the specified properties.
       * @param [properties] Properties to set
       * @returns PA2ATrigger instance
       */
      public static create(
        properties?: sprout.aixcourse.IPA2ATrigger,
      ): sprout.aixcourse.PA2ATrigger

      /**
       * Encodes the specified PA2ATrigger message. Does not implicitly {@link sprout.aixcourse.PA2ATrigger.verify|verify} messages.
       * @param message PA2ATrigger message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encode(
        message: sprout.aixcourse.IPA2ATrigger,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Encodes the specified PA2ATrigger message, length delimited. Does not implicitly {@link sprout.aixcourse.PA2ATrigger.verify|verify} messages.
       * @param message PA2ATrigger message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encodeDelimited(
        message: sprout.aixcourse.IPA2ATrigger,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Decodes a PA2ATrigger message from the specified reader or buffer.
       * @param reader Reader or buffer to decode from
       * @param [length] Message length if known beforehand
       * @returns PA2ATrigger
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decode(
        reader: $protobuf.Reader | Uint8Array,
        length?: number,
      ): sprout.aixcourse.PA2ATrigger

      /**
       * Decodes a PA2ATrigger message from the specified reader or buffer, length delimited.
       * @param reader Reader or buffer to decode from
       * @returns PA2ATrigger
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decodeDelimited(
        reader: $protobuf.Reader | Uint8Array,
      ): sprout.aixcourse.PA2ATrigger

      /**
       * Verifies a PA2ATrigger message.
       * @param message Plain object to verify
       * @returns `null` if valid, otherwise the reason why it is not
       */
      public static verify(message: { [k: string]: any }): string | null

      /**
       * Creates a PA2ATrigger message from a plain object. Also converts values to their respective internal types.
       * @param object Plain object
       * @returns PA2ATrigger
       */
      public static fromObject(object: {
        [k: string]: any
      }): sprout.aixcourse.PA2ATrigger

      /**
       * Creates a plain object from a PA2ATrigger message. Also converts values to other types if specified.
       * @param message PA2ATrigger
       * @param [options] Conversion options
       * @returns Plain object
       */
      public static toObject(
        message: sprout.aixcourse.PA2ATrigger,
        options?: $protobuf.IConversionOptions,
      ): { [k: string]: any }

      /**
       * Converts this PA2ATrigger to JSON.
       * @returns JSON object
       */
      public toJSON(): { [k: string]: any }
    }

    /** Properties of a PA2AJet. */
    interface IPA2AJet {
      /** PA2AJet pictureId */
      pictureId?: string | null

      /** PA2AJet text */
      text?: string | null

      /** PA2AJet audioId */
      audioId?: string | null
    }

    /** Represents a PA2AJet. */
    class PA2AJet implements IPA2AJet {
      /**
       * Constructs a new PA2AJet.
       * @param [properties] Properties to set
       */
      constructor(properties?: sprout.aixcourse.IPA2AJet)

      /** PA2AJet pictureId. */
      public pictureId: string

      /** PA2AJet text. */
      public text: string

      /** PA2AJet audioId. */
      public audioId: string

      /**
       * Creates a new PA2AJet instance using the specified properties.
       * @param [properties] Properties to set
       * @returns PA2AJet instance
       */
      public static create(
        properties?: sprout.aixcourse.IPA2AJet,
      ): sprout.aixcourse.PA2AJet

      /**
       * Encodes the specified PA2AJet message. Does not implicitly {@link sprout.aixcourse.PA2AJet.verify|verify} messages.
       * @param message PA2AJet message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encode(
        message: sprout.aixcourse.IPA2AJet,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Encodes the specified PA2AJet message, length delimited. Does not implicitly {@link sprout.aixcourse.PA2AJet.verify|verify} messages.
       * @param message PA2AJet message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encodeDelimited(
        message: sprout.aixcourse.IPA2AJet,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Decodes a PA2AJet message from the specified reader or buffer.
       * @param reader Reader or buffer to decode from
       * @param [length] Message length if known beforehand
       * @returns PA2AJet
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decode(
        reader: $protobuf.Reader | Uint8Array,
        length?: number,
      ): sprout.aixcourse.PA2AJet

      /**
       * Decodes a PA2AJet message from the specified reader or buffer, length delimited.
       * @param reader Reader or buffer to decode from
       * @returns PA2AJet
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decodeDelimited(
        reader: $protobuf.Reader | Uint8Array,
      ): sprout.aixcourse.PA2AJet

      /**
       * Verifies a PA2AJet message.
       * @param message Plain object to verify
       * @returns `null` if valid, otherwise the reason why it is not
       */
      public static verify(message: { [k: string]: any }): string | null

      /**
       * Creates a PA2AJet message from a plain object. Also converts values to their respective internal types.
       * @param object Plain object
       * @returns PA2AJet
       */
      public static fromObject(object: {
        [k: string]: any
      }): sprout.aixcourse.PA2AJet

      /**
       * Creates a plain object from a PA2AJet message. Also converts values to other types if specified.
       * @param message PA2AJet
       * @param [options] Conversion options
       * @returns Plain object
       */
      public static toObject(
        message: sprout.aixcourse.PA2AJet,
        options?: $protobuf.IConversionOptions,
      ): { [k: string]: any }

      /**
       * Converts this PA2AJet to JSON.
       * @returns JSON object
       */
      public toJSON(): { [k: string]: any }
    }

    /** Properties of a PAT2PFall. */
    interface IPAT2PFall {
      /** PAT2PFall text */
      text?: string | null

      /** PAT2PFall pictureId */
      pictureId?: string | null

      /** PAT2PFall elements */
      elements?: sprout.aixcourse.PAT2PFall.IElement[] | null

      /** PAT2PFall audioId */
      audioId?: string | null
    }

    /** Represents a PAT2PFall. */
    class PAT2PFall implements IPAT2PFall {
      /**
       * Constructs a new PAT2PFall.
       * @param [properties] Properties to set
       */
      constructor(properties?: sprout.aixcourse.IPAT2PFall)

      /** PAT2PFall text. */
      public text: string

      /** PAT2PFall pictureId. */
      public pictureId: string

      /** PAT2PFall elements. */
      public elements: sprout.aixcourse.PAT2PFall.IElement[]

      /** PAT2PFall audioId. */
      public audioId: string

      /**
       * Creates a new PAT2PFall instance using the specified properties.
       * @param [properties] Properties to set
       * @returns PAT2PFall instance
       */
      public static create(
        properties?: sprout.aixcourse.IPAT2PFall,
      ): sprout.aixcourse.PAT2PFall

      /**
       * Encodes the specified PAT2PFall message. Does not implicitly {@link sprout.aixcourse.PAT2PFall.verify|verify} messages.
       * @param message PAT2PFall message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encode(
        message: sprout.aixcourse.IPAT2PFall,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Encodes the specified PAT2PFall message, length delimited. Does not implicitly {@link sprout.aixcourse.PAT2PFall.verify|verify} messages.
       * @param message PAT2PFall message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encodeDelimited(
        message: sprout.aixcourse.IPAT2PFall,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Decodes a PAT2PFall message from the specified reader or buffer.
       * @param reader Reader or buffer to decode from
       * @param [length] Message length if known beforehand
       * @returns PAT2PFall
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decode(
        reader: $protobuf.Reader | Uint8Array,
        length?: number,
      ): sprout.aixcourse.PAT2PFall

      /**
       * Decodes a PAT2PFall message from the specified reader or buffer, length delimited.
       * @param reader Reader or buffer to decode from
       * @returns PAT2PFall
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decodeDelimited(
        reader: $protobuf.Reader | Uint8Array,
      ): sprout.aixcourse.PAT2PFall

      /**
       * Verifies a PAT2PFall message.
       * @param message Plain object to verify
       * @returns `null` if valid, otherwise the reason why it is not
       */
      public static verify(message: { [k: string]: any }): string | null

      /**
       * Creates a PAT2PFall message from a plain object. Also converts values to their respective internal types.
       * @param object Plain object
       * @returns PAT2PFall
       */
      public static fromObject(object: {
        [k: string]: any
      }): sprout.aixcourse.PAT2PFall

      /**
       * Creates a plain object from a PAT2PFall message. Also converts values to other types if specified.
       * @param message PAT2PFall
       * @param [options] Conversion options
       * @returns Plain object
       */
      public static toObject(
        message: sprout.aixcourse.PAT2PFall,
        options?: $protobuf.IConversionOptions,
      ): { [k: string]: any }

      /**
       * Converts this PAT2PFall to JSON.
       * @returns JSON object
       */
      public toJSON(): { [k: string]: any }
    }

    namespace PAT2PFall {
      /** Properties of an Element. */
      interface IElement {
        /** Element pictureId */
        pictureId?: string | null

        /** Element soundEffectAudioId */
        soundEffectAudioId?: string | null

        /** Element checked */
        checked?: boolean | null
      }

      /** Represents an Element. */
      class Element implements IElement {
        /**
         * Constructs a new Element.
         * @param [properties] Properties to set
         */
        constructor(properties?: sprout.aixcourse.PAT2PFall.IElement)

        /** Element pictureId. */
        public pictureId: string

        /** Element soundEffectAudioId. */
        public soundEffectAudioId: string

        /** Element checked. */
        public checked: boolean

        /**
         * Creates a new Element instance using the specified properties.
         * @param [properties] Properties to set
         * @returns Element instance
         */
        public static create(
          properties?: sprout.aixcourse.PAT2PFall.IElement,
        ): sprout.aixcourse.PAT2PFall.Element

        /**
         * Encodes the specified Element message. Does not implicitly {@link sprout.aixcourse.PAT2PFall.Element.verify|verify} messages.
         * @param message Element message or plain object to encode
         * @param [writer] Writer to encode to
         * @returns Writer
         */
        public static encode(
          message: sprout.aixcourse.PAT2PFall.IElement,
          writer?: $protobuf.Writer,
        ): $protobuf.Writer

        /**
         * Encodes the specified Element message, length delimited. Does not implicitly {@link sprout.aixcourse.PAT2PFall.Element.verify|verify} messages.
         * @param message Element message or plain object to encode
         * @param [writer] Writer to encode to
         * @returns Writer
         */
        public static encodeDelimited(
          message: sprout.aixcourse.PAT2PFall.IElement,
          writer?: $protobuf.Writer,
        ): $protobuf.Writer

        /**
         * Decodes an Element message from the specified reader or buffer.
         * @param reader Reader or buffer to decode from
         * @param [length] Message length if known beforehand
         * @returns Element
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        public static decode(
          reader: $protobuf.Reader | Uint8Array,
          length?: number,
        ): sprout.aixcourse.PAT2PFall.Element

        /**
         * Decodes an Element message from the specified reader or buffer, length delimited.
         * @param reader Reader or buffer to decode from
         * @returns Element
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        public static decodeDelimited(
          reader: $protobuf.Reader | Uint8Array,
        ): sprout.aixcourse.PAT2PFall.Element

        /**
         * Verifies an Element message.
         * @param message Plain object to verify
         * @returns `null` if valid, otherwise the reason why it is not
         */
        public static verify(message: { [k: string]: any }): string | null

        /**
         * Creates an Element message from a plain object. Also converts values to their respective internal types.
         * @param object Plain object
         * @returns Element
         */
        public static fromObject(object: {
          [k: string]: any
        }): sprout.aixcourse.PAT2PFall.Element

        /**
         * Creates a plain object from an Element message. Also converts values to other types if specified.
         * @param message Element
         * @param [options] Conversion options
         * @returns Plain object
         */
        public static toObject(
          message: sprout.aixcourse.PAT2PFall.Element,
          options?: $protobuf.IConversionOptions,
        ): { [k: string]: any }

        /**
         * Converts this Element to JSON.
         * @returns JSON object
         */
        public toJSON(): { [k: string]: any }
      }
    }

    /** Properties of a PA2PReveal. */
    interface IPA2PReveal {
      /** PA2PReveal question */
      question?: sprout.aixcourse.ICoordinatePicture | null

      /** PA2PReveal choice */
      choice?: sprout.aixcourse.ICoordinatePicture | null

      /** PA2PReveal soundEffectAudioId */
      soundEffectAudioId?: string | null
    }

    /** Represents a PA2PReveal. */
    class PA2PReveal implements IPA2PReveal {
      /**
       * Constructs a new PA2PReveal.
       * @param [properties] Properties to set
       */
      constructor(properties?: sprout.aixcourse.IPA2PReveal)

      /** PA2PReveal question. */
      public question?: sprout.aixcourse.ICoordinatePicture | null

      /** PA2PReveal choice. */
      public choice?: sprout.aixcourse.ICoordinatePicture | null

      /** PA2PReveal soundEffectAudioId. */
      public soundEffectAudioId: string

      /**
       * Creates a new PA2PReveal instance using the specified properties.
       * @param [properties] Properties to set
       * @returns PA2PReveal instance
       */
      public static create(
        properties?: sprout.aixcourse.IPA2PReveal,
      ): sprout.aixcourse.PA2PReveal

      /**
       * Encodes the specified PA2PReveal message. Does not implicitly {@link sprout.aixcourse.PA2PReveal.verify|verify} messages.
       * @param message PA2PReveal message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encode(
        message: sprout.aixcourse.IPA2PReveal,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Encodes the specified PA2PReveal message, length delimited. Does not implicitly {@link sprout.aixcourse.PA2PReveal.verify|verify} messages.
       * @param message PA2PReveal message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encodeDelimited(
        message: sprout.aixcourse.IPA2PReveal,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Decodes a PA2PReveal message from the specified reader or buffer.
       * @param reader Reader or buffer to decode from
       * @param [length] Message length if known beforehand
       * @returns PA2PReveal
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decode(
        reader: $protobuf.Reader | Uint8Array,
        length?: number,
      ): sprout.aixcourse.PA2PReveal

      /**
       * Decodes a PA2PReveal message from the specified reader or buffer, length delimited.
       * @param reader Reader or buffer to decode from
       * @returns PA2PReveal
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decodeDelimited(
        reader: $protobuf.Reader | Uint8Array,
      ): sprout.aixcourse.PA2PReveal

      /**
       * Verifies a PA2PReveal message.
       * @param message Plain object to verify
       * @returns `null` if valid, otherwise the reason why it is not
       */
      public static verify(message: { [k: string]: any }): string | null

      /**
       * Creates a PA2PReveal message from a plain object. Also converts values to their respective internal types.
       * @param object Plain object
       * @returns PA2PReveal
       */
      public static fromObject(object: {
        [k: string]: any
      }): sprout.aixcourse.PA2PReveal

      /**
       * Creates a plain object from a PA2PReveal message. Also converts values to other types if specified.
       * @param message PA2PReveal
       * @param [options] Conversion options
       * @returns Plain object
       */
      public static toObject(
        message: sprout.aixcourse.PA2PReveal,
        options?: $protobuf.IConversionOptions,
      ): { [k: string]: any }

      /**
       * Converts this PA2PReveal to JSON.
       * @returns JSON object
       */
      public toJSON(): { [k: string]: any }
    }

    /** Properties of a A2PMole. */
    interface IA2PMole {
      /** A2PMole audioId */
      audioId?: string | null

      /** A2PMole animationChoices */
      animationChoices?: sprout.aixcourse.IAnimationChoice[] | null
    }

    /** Represents a A2PMole. */
    class A2PMole implements IA2PMole {
      /**
       * Constructs a new A2PMole.
       * @param [properties] Properties to set
       */
      constructor(properties?: sprout.aixcourse.IA2PMole)

      /** A2PMole audioId. */
      public audioId: string

      /** A2PMole animationChoices. */
      public animationChoices: sprout.aixcourse.IAnimationChoice[]

      /**
       * Creates a new A2PMole instance using the specified properties.
       * @param [properties] Properties to set
       * @returns A2PMole instance
       */
      public static create(
        properties?: sprout.aixcourse.IA2PMole,
      ): sprout.aixcourse.A2PMole

      /**
       * Encodes the specified A2PMole message. Does not implicitly {@link sprout.aixcourse.A2PMole.verify|verify} messages.
       * @param message A2PMole message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encode(
        message: sprout.aixcourse.IA2PMole,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Encodes the specified A2PMole message, length delimited. Does not implicitly {@link sprout.aixcourse.A2PMole.verify|verify} messages.
       * @param message A2PMole message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encodeDelimited(
        message: sprout.aixcourse.IA2PMole,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Decodes a A2PMole message from the specified reader or buffer.
       * @param reader Reader or buffer to decode from
       * @param [length] Message length if known beforehand
       * @returns A2PMole
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decode(
        reader: $protobuf.Reader | Uint8Array,
        length?: number,
      ): sprout.aixcourse.A2PMole

      /**
       * Decodes a A2PMole message from the specified reader or buffer, length delimited.
       * @param reader Reader or buffer to decode from
       * @returns A2PMole
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decodeDelimited(
        reader: $protobuf.Reader | Uint8Array,
      ): sprout.aixcourse.A2PMole

      /**
       * Verifies a A2PMole message.
       * @param message Plain object to verify
       * @returns `null` if valid, otherwise the reason why it is not
       */
      public static verify(message: { [k: string]: any }): string | null

      /**
       * Creates a A2PMole message from a plain object. Also converts values to their respective internal types.
       * @param object Plain object
       * @returns A2PMole
       */
      public static fromObject(object: {
        [k: string]: any
      }): sprout.aixcourse.A2PMole

      /**
       * Creates a plain object from a A2PMole message. Also converts values to other types if specified.
       * @param message A2PMole
       * @param [options] Conversion options
       * @returns Plain object
       */
      public static toObject(
        message: sprout.aixcourse.A2PMole,
        options?: $protobuf.IConversionOptions,
      ): { [k: string]: any }

      /**
       * Converts this A2PMole to JSON.
       * @returns JSON object
       */
      public toJSON(): { [k: string]: any }
    }

    /** Properties of a T2PMole. */
    interface IT2PMole {
      /** T2PMole text */
      text?: string | null

      /** T2PMole animationChoices */
      animationChoices?: sprout.aixcourse.IAnimationChoice[] | null
    }

    /** Represents a T2PMole. */
    class T2PMole implements IT2PMole {
      /**
       * Constructs a new T2PMole.
       * @param [properties] Properties to set
       */
      constructor(properties?: sprout.aixcourse.IT2PMole)

      /** T2PMole text. */
      public text: string

      /** T2PMole animationChoices. */
      public animationChoices: sprout.aixcourse.IAnimationChoice[]

      /**
       * Creates a new T2PMole instance using the specified properties.
       * @param [properties] Properties to set
       * @returns T2PMole instance
       */
      public static create(
        properties?: sprout.aixcourse.IT2PMole,
      ): sprout.aixcourse.T2PMole

      /**
       * Encodes the specified T2PMole message. Does not implicitly {@link sprout.aixcourse.T2PMole.verify|verify} messages.
       * @param message T2PMole message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encode(
        message: sprout.aixcourse.IT2PMole,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Encodes the specified T2PMole message, length delimited. Does not implicitly {@link sprout.aixcourse.T2PMole.verify|verify} messages.
       * @param message T2PMole message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encodeDelimited(
        message: sprout.aixcourse.IT2PMole,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Decodes a T2PMole message from the specified reader or buffer.
       * @param reader Reader or buffer to decode from
       * @param [length] Message length if known beforehand
       * @returns T2PMole
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decode(
        reader: $protobuf.Reader | Uint8Array,
        length?: number,
      ): sprout.aixcourse.T2PMole

      /**
       * Decodes a T2PMole message from the specified reader or buffer, length delimited.
       * @param reader Reader or buffer to decode from
       * @returns T2PMole
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decodeDelimited(
        reader: $protobuf.Reader | Uint8Array,
      ): sprout.aixcourse.T2PMole

      /**
       * Verifies a T2PMole message.
       * @param message Plain object to verify
       * @returns `null` if valid, otherwise the reason why it is not
       */
      public static verify(message: { [k: string]: any }): string | null

      /**
       * Creates a T2PMole message from a plain object. Also converts values to their respective internal types.
       * @param object Plain object
       * @returns T2PMole
       */
      public static fromObject(object: {
        [k: string]: any
      }): sprout.aixcourse.T2PMole

      /**
       * Creates a plain object from a T2PMole message. Also converts values to other types if specified.
       * @param message T2PMole
       * @param [options] Conversion options
       * @returns Plain object
       */
      public static toObject(
        message: sprout.aixcourse.T2PMole,
        options?: $protobuf.IConversionOptions,
      ): { [k: string]: any }

      /**
       * Converts this T2PMole to JSON.
       * @returns JSON object
       */
      public toJSON(): { [k: string]: any }
    }

    /** Properties of a A2PFree. */
    interface IA2PFree {
      /** A2PFree choices */
      choices?: sprout.aixcourse.IFreeAnimationChoice[] | null
    }

    /** Represents a A2PFree. */
    class A2PFree implements IA2PFree {
      /**
       * Constructs a new A2PFree.
       * @param [properties] Properties to set
       */
      constructor(properties?: sprout.aixcourse.IA2PFree)

      /** A2PFree choices. */
      public choices: sprout.aixcourse.IFreeAnimationChoice[]

      /**
       * Creates a new A2PFree instance using the specified properties.
       * @param [properties] Properties to set
       * @returns A2PFree instance
       */
      public static create(
        properties?: sprout.aixcourse.IA2PFree,
      ): sprout.aixcourse.A2PFree

      /**
       * Encodes the specified A2PFree message. Does not implicitly {@link sprout.aixcourse.A2PFree.verify|verify} messages.
       * @param message A2PFree message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encode(
        message: sprout.aixcourse.IA2PFree,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Encodes the specified A2PFree message, length delimited. Does not implicitly {@link sprout.aixcourse.A2PFree.verify|verify} messages.
       * @param message A2PFree message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encodeDelimited(
        message: sprout.aixcourse.IA2PFree,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Decodes a A2PFree message from the specified reader or buffer.
       * @param reader Reader or buffer to decode from
       * @param [length] Message length if known beforehand
       * @returns A2PFree
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decode(
        reader: $protobuf.Reader | Uint8Array,
        length?: number,
      ): sprout.aixcourse.A2PFree

      /**
       * Decodes a A2PFree message from the specified reader or buffer, length delimited.
       * @param reader Reader or buffer to decode from
       * @returns A2PFree
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decodeDelimited(
        reader: $protobuf.Reader | Uint8Array,
      ): sprout.aixcourse.A2PFree

      /**
       * Verifies a A2PFree message.
       * @param message Plain object to verify
       * @returns `null` if valid, otherwise the reason why it is not
       */
      public static verify(message: { [k: string]: any }): string | null

      /**
       * Creates a A2PFree message from a plain object. Also converts values to their respective internal types.
       * @param object Plain object
       * @returns A2PFree
       */
      public static fromObject(object: {
        [k: string]: any
      }): sprout.aixcourse.A2PFree

      /**
       * Creates a plain object from a A2PFree message. Also converts values to other types if specified.
       * @param message A2PFree
       * @param [options] Conversion options
       * @returns Plain object
       */
      public static toObject(
        message: sprout.aixcourse.A2PFree,
        options?: $protobuf.IConversionOptions,
      ): { [k: string]: any }

      /**
       * Converts this A2PFree to JSON.
       * @returns JSON object
       */
      public toJSON(): { [k: string]: any }
    }

    /** Properties of a PA2ARolePlay. */
    interface IPA2ARolePlay {
      /** PA2ARolePlay botRole */
      botRole?: sprout.aixcourse.ICoordinatePicture | null

      /** PA2ARolePlay practiceRole */
      practiceRole?: sprout.aixcourse.ICoordinatePicture | null

      /** PA2ARolePlay topics */
      topics?: sprout.aixcourse.ICoordinatePicture[] | null

      /** PA2ARolePlay rolePlayAudios */
      rolePlayAudios?: sprout.aixcourse.PA2ARolePlay.IRolePlayAudio[] | null
    }

    /** Represents a PA2ARolePlay. */
    class PA2ARolePlay implements IPA2ARolePlay {
      /**
       * Constructs a new PA2ARolePlay.
       * @param [properties] Properties to set
       */
      constructor(properties?: sprout.aixcourse.IPA2ARolePlay)

      /** PA2ARolePlay botRole. */
      public botRole?: sprout.aixcourse.ICoordinatePicture | null

      /** PA2ARolePlay practiceRole. */
      public practiceRole?: sprout.aixcourse.ICoordinatePicture | null

      /** PA2ARolePlay topics. */
      public topics: sprout.aixcourse.ICoordinatePicture[]

      /** PA2ARolePlay rolePlayAudios. */
      public rolePlayAudios: sprout.aixcourse.PA2ARolePlay.IRolePlayAudio[]

      /**
       * Creates a new PA2ARolePlay instance using the specified properties.
       * @param [properties] Properties to set
       * @returns PA2ARolePlay instance
       */
      public static create(
        properties?: sprout.aixcourse.IPA2ARolePlay,
      ): sprout.aixcourse.PA2ARolePlay

      /**
       * Encodes the specified PA2ARolePlay message. Does not implicitly {@link sprout.aixcourse.PA2ARolePlay.verify|verify} messages.
       * @param message PA2ARolePlay message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encode(
        message: sprout.aixcourse.IPA2ARolePlay,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Encodes the specified PA2ARolePlay message, length delimited. Does not implicitly {@link sprout.aixcourse.PA2ARolePlay.verify|verify} messages.
       * @param message PA2ARolePlay message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encodeDelimited(
        message: sprout.aixcourse.IPA2ARolePlay,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Decodes a PA2ARolePlay message from the specified reader or buffer.
       * @param reader Reader or buffer to decode from
       * @param [length] Message length if known beforehand
       * @returns PA2ARolePlay
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decode(
        reader: $protobuf.Reader | Uint8Array,
        length?: number,
      ): sprout.aixcourse.PA2ARolePlay

      /**
       * Decodes a PA2ARolePlay message from the specified reader or buffer, length delimited.
       * @param reader Reader or buffer to decode from
       * @returns PA2ARolePlay
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decodeDelimited(
        reader: $protobuf.Reader | Uint8Array,
      ): sprout.aixcourse.PA2ARolePlay

      /**
       * Verifies a PA2ARolePlay message.
       * @param message Plain object to verify
       * @returns `null` if valid, otherwise the reason why it is not
       */
      public static verify(message: { [k: string]: any }): string | null

      /**
       * Creates a PA2ARolePlay message from a plain object. Also converts values to their respective internal types.
       * @param object Plain object
       * @returns PA2ARolePlay
       */
      public static fromObject(object: {
        [k: string]: any
      }): sprout.aixcourse.PA2ARolePlay

      /**
       * Creates a plain object from a PA2ARolePlay message. Also converts values to other types if specified.
       * @param message PA2ARolePlay
       * @param [options] Conversion options
       * @returns Plain object
       */
      public static toObject(
        message: sprout.aixcourse.PA2ARolePlay,
        options?: $protobuf.IConversionOptions,
      ): { [k: string]: any }

      /**
       * Converts this PA2ARolePlay to JSON.
       * @returns JSON object
       */
      public toJSON(): { [k: string]: any }
    }

    namespace PA2ARolePlay {
      /** Properties of a RolePlayAudio. */
      interface IRolePlayAudio {
        /** RolePlayAudio practiceRole */
        practiceRole?: boolean | null

        /** RolePlayAudio chunkAudio */
        chunkAudio?: sprout.aixcourse.IChunkAudio | null
      }

      /** Represents a RolePlayAudio. */
      class RolePlayAudio implements IRolePlayAudio {
        /**
         * Constructs a new RolePlayAudio.
         * @param [properties] Properties to set
         */
        constructor(properties?: sprout.aixcourse.PA2ARolePlay.IRolePlayAudio)

        /** RolePlayAudio practiceRole. */
        public practiceRole: boolean

        /** RolePlayAudio chunkAudio. */
        public chunkAudio?: sprout.aixcourse.IChunkAudio | null

        /**
         * Creates a new RolePlayAudio instance using the specified properties.
         * @param [properties] Properties to set
         * @returns RolePlayAudio instance
         */
        public static create(
          properties?: sprout.aixcourse.PA2ARolePlay.IRolePlayAudio,
        ): sprout.aixcourse.PA2ARolePlay.RolePlayAudio

        /**
         * Encodes the specified RolePlayAudio message. Does not implicitly {@link sprout.aixcourse.PA2ARolePlay.RolePlayAudio.verify|verify} messages.
         * @param message RolePlayAudio message or plain object to encode
         * @param [writer] Writer to encode to
         * @returns Writer
         */
        public static encode(
          message: sprout.aixcourse.PA2ARolePlay.IRolePlayAudio,
          writer?: $protobuf.Writer,
        ): $protobuf.Writer

        /**
         * Encodes the specified RolePlayAudio message, length delimited. Does not implicitly {@link sprout.aixcourse.PA2ARolePlay.RolePlayAudio.verify|verify} messages.
         * @param message RolePlayAudio message or plain object to encode
         * @param [writer] Writer to encode to
         * @returns Writer
         */
        public static encodeDelimited(
          message: sprout.aixcourse.PA2ARolePlay.IRolePlayAudio,
          writer?: $protobuf.Writer,
        ): $protobuf.Writer

        /**
         * Decodes a RolePlayAudio message from the specified reader or buffer.
         * @param reader Reader or buffer to decode from
         * @param [length] Message length if known beforehand
         * @returns RolePlayAudio
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        public static decode(
          reader: $protobuf.Reader | Uint8Array,
          length?: number,
        ): sprout.aixcourse.PA2ARolePlay.RolePlayAudio

        /**
         * Decodes a RolePlayAudio message from the specified reader or buffer, length delimited.
         * @param reader Reader or buffer to decode from
         * @returns RolePlayAudio
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        public static decodeDelimited(
          reader: $protobuf.Reader | Uint8Array,
        ): sprout.aixcourse.PA2ARolePlay.RolePlayAudio

        /**
         * Verifies a RolePlayAudio message.
         * @param message Plain object to verify
         * @returns `null` if valid, otherwise the reason why it is not
         */
        public static verify(message: { [k: string]: any }): string | null

        /**
         * Creates a RolePlayAudio message from a plain object. Also converts values to their respective internal types.
         * @param object Plain object
         * @returns RolePlayAudio
         */
        public static fromObject(object: {
          [k: string]: any
        }): sprout.aixcourse.PA2ARolePlay.RolePlayAudio

        /**
         * Creates a plain object from a RolePlayAudio message. Also converts values to other types if specified.
         * @param message RolePlayAudio
         * @param [options] Conversion options
         * @returns Plain object
         */
        public static toObject(
          message: sprout.aixcourse.PA2ARolePlay.RolePlayAudio,
          options?: $protobuf.IConversionOptions,
        ): { [k: string]: any }

        /**
         * Converts this RolePlayAudio to JSON.
         * @returns JSON object
         */
        public toJSON(): { [k: string]: any }
      }
    }

    /** Properties of a VideoPlay. */
    interface IVideoPlay {
      /** VideoPlay videoId */
      videoId?: string | null
    }

    /** Represents a VideoPlay. */
    class VideoPlay implements IVideoPlay {
      /**
       * Constructs a new VideoPlay.
       * @param [properties] Properties to set
       */
      constructor(properties?: sprout.aixcourse.IVideoPlay)

      /** VideoPlay videoId. */
      public videoId: string

      /**
       * Creates a new VideoPlay instance using the specified properties.
       * @param [properties] Properties to set
       * @returns VideoPlay instance
       */
      public static create(
        properties?: sprout.aixcourse.IVideoPlay,
      ): sprout.aixcourse.VideoPlay

      /**
       * Encodes the specified VideoPlay message. Does not implicitly {@link sprout.aixcourse.VideoPlay.verify|verify} messages.
       * @param message VideoPlay message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encode(
        message: sprout.aixcourse.IVideoPlay,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Encodes the specified VideoPlay message, length delimited. Does not implicitly {@link sprout.aixcourse.VideoPlay.verify|verify} messages.
       * @param message VideoPlay message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encodeDelimited(
        message: sprout.aixcourse.IVideoPlay,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Decodes a VideoPlay message from the specified reader or buffer.
       * @param reader Reader or buffer to decode from
       * @param [length] Message length if known beforehand
       * @returns VideoPlay
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decode(
        reader: $protobuf.Reader | Uint8Array,
        length?: number,
      ): sprout.aixcourse.VideoPlay

      /**
       * Decodes a VideoPlay message from the specified reader or buffer, length delimited.
       * @param reader Reader or buffer to decode from
       * @returns VideoPlay
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decodeDelimited(
        reader: $protobuf.Reader | Uint8Array,
      ): sprout.aixcourse.VideoPlay

      /**
       * Verifies a VideoPlay message.
       * @param message Plain object to verify
       * @returns `null` if valid, otherwise the reason why it is not
       */
      public static verify(message: { [k: string]: any }): string | null

      /**
       * Creates a VideoPlay message from a plain object. Also converts values to their respective internal types.
       * @param object Plain object
       * @returns VideoPlay
       */
      public static fromObject(object: {
        [k: string]: any
      }): sprout.aixcourse.VideoPlay

      /**
       * Creates a plain object from a VideoPlay message. Also converts values to other types if specified.
       * @param message VideoPlay
       * @param [options] Conversion options
       * @returns Plain object
       */
      public static toObject(
        message: sprout.aixcourse.VideoPlay,
        options?: $protobuf.IConversionOptions,
      ): { [k: string]: any }

      /**
       * Converts this VideoPlay to JSON.
       * @returns JSON object
       */
      public toJSON(): { [k: string]: any }
    }

    /** Properties of a PA2AWheel. */
    interface IPA2AWheel {
      /** PA2AWheel pictureId */
      pictureId?: string | null

      /** PA2AWheel audioId */
      audioId?: string | null
    }

    /** Represents a PA2AWheel. */
    class PA2AWheel implements IPA2AWheel {
      /**
       * Constructs a new PA2AWheel.
       * @param [properties] Properties to set
       */
      constructor(properties?: sprout.aixcourse.IPA2AWheel)

      /** PA2AWheel pictureId. */
      public pictureId: string

      /** PA2AWheel audioId. */
      public audioId: string

      /**
       * Creates a new PA2AWheel instance using the specified properties.
       * @param [properties] Properties to set
       * @returns PA2AWheel instance
       */
      public static create(
        properties?: sprout.aixcourse.IPA2AWheel,
      ): sprout.aixcourse.PA2AWheel

      /**
       * Encodes the specified PA2AWheel message. Does not implicitly {@link sprout.aixcourse.PA2AWheel.verify|verify} messages.
       * @param message PA2AWheel message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encode(
        message: sprout.aixcourse.IPA2AWheel,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Encodes the specified PA2AWheel message, length delimited. Does not implicitly {@link sprout.aixcourse.PA2AWheel.verify|verify} messages.
       * @param message PA2AWheel message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encodeDelimited(
        message: sprout.aixcourse.IPA2AWheel,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Decodes a PA2AWheel message from the specified reader or buffer.
       * @param reader Reader or buffer to decode from
       * @param [length] Message length if known beforehand
       * @returns PA2AWheel
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decode(
        reader: $protobuf.Reader | Uint8Array,
        length?: number,
      ): sprout.aixcourse.PA2AWheel

      /**
       * Decodes a PA2AWheel message from the specified reader or buffer, length delimited.
       * @param reader Reader or buffer to decode from
       * @returns PA2AWheel
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decodeDelimited(
        reader: $protobuf.Reader | Uint8Array,
      ): sprout.aixcourse.PA2AWheel

      /**
       * Verifies a PA2AWheel message.
       * @param message Plain object to verify
       * @returns `null` if valid, otherwise the reason why it is not
       */
      public static verify(message: { [k: string]: any }): string | null

      /**
       * Creates a PA2AWheel message from a plain object. Also converts values to their respective internal types.
       * @param object Plain object
       * @returns PA2AWheel
       */
      public static fromObject(object: {
        [k: string]: any
      }): sprout.aixcourse.PA2AWheel

      /**
       * Creates a plain object from a PA2AWheel message. Also converts values to other types if specified.
       * @param message PA2AWheel
       * @param [options] Conversion options
       * @returns Plain object
       */
      public static toObject(
        message: sprout.aixcourse.PA2AWheel,
        options?: $protobuf.IConversionOptions,
      ): { [k: string]: any }

      /**
       * Converts this PA2AWheel to JSON.
       * @returns JSON object
       */
      public toJSON(): { [k: string]: any }
    }

    /** Properties of a AT2PBump. */
    interface IAT2PBump {
      /** AT2PBump at2pX */
      at2pX?: sprout.aixcourse.IAT2PX | null
    }

    /** Represents a AT2PBump. */
    class AT2PBump implements IAT2PBump {
      /**
       * Constructs a new AT2PBump.
       * @param [properties] Properties to set
       */
      constructor(properties?: sprout.aixcourse.IAT2PBump)

      /** AT2PBump at2pX. */
      public at2pX?: sprout.aixcourse.IAT2PX | null

      /**
       * Creates a new AT2PBump instance using the specified properties.
       * @param [properties] Properties to set
       * @returns AT2PBump instance
       */
      public static create(
        properties?: sprout.aixcourse.IAT2PBump,
      ): sprout.aixcourse.AT2PBump

      /**
       * Encodes the specified AT2PBump message. Does not implicitly {@link sprout.aixcourse.AT2PBump.verify|verify} messages.
       * @param message AT2PBump message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encode(
        message: sprout.aixcourse.IAT2PBump,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Encodes the specified AT2PBump message, length delimited. Does not implicitly {@link sprout.aixcourse.AT2PBump.verify|verify} messages.
       * @param message AT2PBump message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encodeDelimited(
        message: sprout.aixcourse.IAT2PBump,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Decodes a AT2PBump message from the specified reader or buffer.
       * @param reader Reader or buffer to decode from
       * @param [length] Message length if known beforehand
       * @returns AT2PBump
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decode(
        reader: $protobuf.Reader | Uint8Array,
        length?: number,
      ): sprout.aixcourse.AT2PBump

      /**
       * Decodes a AT2PBump message from the specified reader or buffer, length delimited.
       * @param reader Reader or buffer to decode from
       * @returns AT2PBump
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decodeDelimited(
        reader: $protobuf.Reader | Uint8Array,
      ): sprout.aixcourse.AT2PBump

      /**
       * Verifies a AT2PBump message.
       * @param message Plain object to verify
       * @returns `null` if valid, otherwise the reason why it is not
       */
      public static verify(message: { [k: string]: any }): string | null

      /**
       * Creates a AT2PBump message from a plain object. Also converts values to their respective internal types.
       * @param object Plain object
       * @returns AT2PBump
       */
      public static fromObject(object: {
        [k: string]: any
      }): sprout.aixcourse.AT2PBump

      /**
       * Creates a plain object from a AT2PBump message. Also converts values to other types if specified.
       * @param message AT2PBump
       * @param [options] Conversion options
       * @returns Plain object
       */
      public static toObject(
        message: sprout.aixcourse.AT2PBump,
        options?: $protobuf.IConversionOptions,
      ): { [k: string]: any }

      /**
       * Converts this AT2PBump to JSON.
       * @returns JSON object
       */
      public toJSON(): { [k: string]: any }
    }

    /** Properties of a ChunkAudio. */
    interface IChunkAudio {
      /** ChunkAudio originalAudio */
      originalAudio?: sprout.aixcourse.ChunkAudio.IAudioText | null

      /** ChunkAudio chunkAudios */
      chunkAudios?: sprout.aixcourse.ChunkAudio.IAudioText[] | null
    }

    /** Represents a ChunkAudio. */
    class ChunkAudio implements IChunkAudio {
      /**
       * Constructs a new ChunkAudio.
       * @param [properties] Properties to set
       */
      constructor(properties?: sprout.aixcourse.IChunkAudio)

      /** ChunkAudio originalAudio. */
      public originalAudio?: sprout.aixcourse.ChunkAudio.IAudioText | null

      /** ChunkAudio chunkAudios. */
      public chunkAudios: sprout.aixcourse.ChunkAudio.IAudioText[]

      /**
       * Creates a new ChunkAudio instance using the specified properties.
       * @param [properties] Properties to set
       * @returns ChunkAudio instance
       */
      public static create(
        properties?: sprout.aixcourse.IChunkAudio,
      ): sprout.aixcourse.ChunkAudio

      /**
       * Encodes the specified ChunkAudio message. Does not implicitly {@link sprout.aixcourse.ChunkAudio.verify|verify} messages.
       * @param message ChunkAudio message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encode(
        message: sprout.aixcourse.IChunkAudio,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Encodes the specified ChunkAudio message, length delimited. Does not implicitly {@link sprout.aixcourse.ChunkAudio.verify|verify} messages.
       * @param message ChunkAudio message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encodeDelimited(
        message: sprout.aixcourse.IChunkAudio,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Decodes a ChunkAudio message from the specified reader or buffer.
       * @param reader Reader or buffer to decode from
       * @param [length] Message length if known beforehand
       * @returns ChunkAudio
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decode(
        reader: $protobuf.Reader | Uint8Array,
        length?: number,
      ): sprout.aixcourse.ChunkAudio

      /**
       * Decodes a ChunkAudio message from the specified reader or buffer, length delimited.
       * @param reader Reader or buffer to decode from
       * @returns ChunkAudio
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decodeDelimited(
        reader: $protobuf.Reader | Uint8Array,
      ): sprout.aixcourse.ChunkAudio

      /**
       * Verifies a ChunkAudio message.
       * @param message Plain object to verify
       * @returns `null` if valid, otherwise the reason why it is not
       */
      public static verify(message: { [k: string]: any }): string | null

      /**
       * Creates a ChunkAudio message from a plain object. Also converts values to their respective internal types.
       * @param object Plain object
       * @returns ChunkAudio
       */
      public static fromObject(object: {
        [k: string]: any
      }): sprout.aixcourse.ChunkAudio

      /**
       * Creates a plain object from a ChunkAudio message. Also converts values to other types if specified.
       * @param message ChunkAudio
       * @param [options] Conversion options
       * @returns Plain object
       */
      public static toObject(
        message: sprout.aixcourse.ChunkAudio,
        options?: $protobuf.IConversionOptions,
      ): { [k: string]: any }

      /**
       * Converts this ChunkAudio to JSON.
       * @returns JSON object
       */
      public toJSON(): { [k: string]: any }
    }

    namespace ChunkAudio {
      /** Properties of an AudioText. */
      interface IAudioText {
        /** AudioText audioId */
        audioId?: string | null

        /** AudioText text */
        text?: string | null
      }

      /** Represents an AudioText. */
      class AudioText implements IAudioText {
        /**
         * Constructs a new AudioText.
         * @param [properties] Properties to set
         */
        constructor(properties?: sprout.aixcourse.ChunkAudio.IAudioText)

        /** AudioText audioId. */
        public audioId: string

        /** AudioText text. */
        public text: string

        /**
         * Creates a new AudioText instance using the specified properties.
         * @param [properties] Properties to set
         * @returns AudioText instance
         */
        public static create(
          properties?: sprout.aixcourse.ChunkAudio.IAudioText,
        ): sprout.aixcourse.ChunkAudio.AudioText

        /**
         * Encodes the specified AudioText message. Does not implicitly {@link sprout.aixcourse.ChunkAudio.AudioText.verify|verify} messages.
         * @param message AudioText message or plain object to encode
         * @param [writer] Writer to encode to
         * @returns Writer
         */
        public static encode(
          message: sprout.aixcourse.ChunkAudio.IAudioText,
          writer?: $protobuf.Writer,
        ): $protobuf.Writer

        /**
         * Encodes the specified AudioText message, length delimited. Does not implicitly {@link sprout.aixcourse.ChunkAudio.AudioText.verify|verify} messages.
         * @param message AudioText message or plain object to encode
         * @param [writer] Writer to encode to
         * @returns Writer
         */
        public static encodeDelimited(
          message: sprout.aixcourse.ChunkAudio.IAudioText,
          writer?: $protobuf.Writer,
        ): $protobuf.Writer

        /**
         * Decodes an AudioText message from the specified reader or buffer.
         * @param reader Reader or buffer to decode from
         * @param [length] Message length if known beforehand
         * @returns AudioText
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        public static decode(
          reader: $protobuf.Reader | Uint8Array,
          length?: number,
        ): sprout.aixcourse.ChunkAudio.AudioText

        /**
         * Decodes an AudioText message from the specified reader or buffer, length delimited.
         * @param reader Reader or buffer to decode from
         * @returns AudioText
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        public static decodeDelimited(
          reader: $protobuf.Reader | Uint8Array,
        ): sprout.aixcourse.ChunkAudio.AudioText

        /**
         * Verifies an AudioText message.
         * @param message Plain object to verify
         * @returns `null` if valid, otherwise the reason why it is not
         */
        public static verify(message: { [k: string]: any }): string | null

        /**
         * Creates an AudioText message from a plain object. Also converts values to their respective internal types.
         * @param object Plain object
         * @returns AudioText
         */
        public static fromObject(object: {
          [k: string]: any
        }): sprout.aixcourse.ChunkAudio.AudioText

        /**
         * Creates a plain object from an AudioText message. Also converts values to other types if specified.
         * @param message AudioText
         * @param [options] Conversion options
         * @returns Plain object
         */
        public static toObject(
          message: sprout.aixcourse.ChunkAudio.AudioText,
          options?: $protobuf.IConversionOptions,
        ): { [k: string]: any }

        /**
         * Converts this AudioText to JSON.
         * @returns JSON object
         */
        public toJSON(): { [k: string]: any }
      }
    }

    /** Properties of a Coordinate. */
    interface ICoordinate {
      /** Coordinate x */
      x?: number | null

      /** Coordinate y */
      y?: number | null
    }

    /** Represents a Coordinate. */
    class Coordinate implements ICoordinate {
      /**
       * Constructs a new Coordinate.
       * @param [properties] Properties to set
       */
      constructor(properties?: sprout.aixcourse.ICoordinate)

      /** Coordinate x. */
      public x: number

      /** Coordinate y. */
      public y: number

      /**
       * Creates a new Coordinate instance using the specified properties.
       * @param [properties] Properties to set
       * @returns Coordinate instance
       */
      public static create(
        properties?: sprout.aixcourse.ICoordinate,
      ): sprout.aixcourse.Coordinate

      /**
       * Encodes the specified Coordinate message. Does not implicitly {@link sprout.aixcourse.Coordinate.verify|verify} messages.
       * @param message Coordinate message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encode(
        message: sprout.aixcourse.ICoordinate,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Encodes the specified Coordinate message, length delimited. Does not implicitly {@link sprout.aixcourse.Coordinate.verify|verify} messages.
       * @param message Coordinate message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encodeDelimited(
        message: sprout.aixcourse.ICoordinate,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Decodes a Coordinate message from the specified reader or buffer.
       * @param reader Reader or buffer to decode from
       * @param [length] Message length if known beforehand
       * @returns Coordinate
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decode(
        reader: $protobuf.Reader | Uint8Array,
        length?: number,
      ): sprout.aixcourse.Coordinate

      /**
       * Decodes a Coordinate message from the specified reader or buffer, length delimited.
       * @param reader Reader or buffer to decode from
       * @returns Coordinate
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decodeDelimited(
        reader: $protobuf.Reader | Uint8Array,
      ): sprout.aixcourse.Coordinate

      /**
       * Verifies a Coordinate message.
       * @param message Plain object to verify
       * @returns `null` if valid, otherwise the reason why it is not
       */
      public static verify(message: { [k: string]: any }): string | null

      /**
       * Creates a Coordinate message from a plain object. Also converts values to their respective internal types.
       * @param object Plain object
       * @returns Coordinate
       */
      public static fromObject(object: {
        [k: string]: any
      }): sprout.aixcourse.Coordinate

      /**
       * Creates a plain object from a Coordinate message. Also converts values to other types if specified.
       * @param message Coordinate
       * @param [options] Conversion options
       * @returns Plain object
       */
      public static toObject(
        message: sprout.aixcourse.Coordinate,
        options?: $protobuf.IConversionOptions,
      ): { [k: string]: any }

      /**
       * Converts this Coordinate to JSON.
       * @returns JSON object
       */
      public toJSON(): { [k: string]: any }
    }

    /** Properties of a CoordinatePicture. */
    interface ICoordinatePicture {
      /** CoordinatePicture pictureId */
      pictureId?: string | null

      /** CoordinatePicture coordinate */
      coordinate?: sprout.aixcourse.ICoordinate | null
    }

    /** Represents a CoordinatePicture. */
    class CoordinatePicture implements ICoordinatePicture {
      /**
       * Constructs a new CoordinatePicture.
       * @param [properties] Properties to set
       */
      constructor(properties?: sprout.aixcourse.ICoordinatePicture)

      /** CoordinatePicture pictureId. */
      public pictureId: string

      /** CoordinatePicture coordinate. */
      public coordinate?: sprout.aixcourse.ICoordinate | null

      /**
       * Creates a new CoordinatePicture instance using the specified properties.
       * @param [properties] Properties to set
       * @returns CoordinatePicture instance
       */
      public static create(
        properties?: sprout.aixcourse.ICoordinatePicture,
      ): sprout.aixcourse.CoordinatePicture

      /**
       * Encodes the specified CoordinatePicture message. Does not implicitly {@link sprout.aixcourse.CoordinatePicture.verify|verify} messages.
       * @param message CoordinatePicture message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encode(
        message: sprout.aixcourse.ICoordinatePicture,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Encodes the specified CoordinatePicture message, length delimited. Does not implicitly {@link sprout.aixcourse.CoordinatePicture.verify|verify} messages.
       * @param message CoordinatePicture message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encodeDelimited(
        message: sprout.aixcourse.ICoordinatePicture,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Decodes a CoordinatePicture message from the specified reader or buffer.
       * @param reader Reader or buffer to decode from
       * @param [length] Message length if known beforehand
       * @returns CoordinatePicture
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decode(
        reader: $protobuf.Reader | Uint8Array,
        length?: number,
      ): sprout.aixcourse.CoordinatePicture

      /**
       * Decodes a CoordinatePicture message from the specified reader or buffer, length delimited.
       * @param reader Reader or buffer to decode from
       * @returns CoordinatePicture
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decodeDelimited(
        reader: $protobuf.Reader | Uint8Array,
      ): sprout.aixcourse.CoordinatePicture

      /**
       * Verifies a CoordinatePicture message.
       * @param message Plain object to verify
       * @returns `null` if valid, otherwise the reason why it is not
       */
      public static verify(message: { [k: string]: any }): string | null

      /**
       * Creates a CoordinatePicture message from a plain object. Also converts values to their respective internal types.
       * @param object Plain object
       * @returns CoordinatePicture
       */
      public static fromObject(object: {
        [k: string]: any
      }): sprout.aixcourse.CoordinatePicture

      /**
       * Creates a plain object from a CoordinatePicture message. Also converts values to other types if specified.
       * @param message CoordinatePicture
       * @param [options] Conversion options
       * @returns Plain object
       */
      public static toObject(
        message: sprout.aixcourse.CoordinatePicture,
        options?: $protobuf.IConversionOptions,
      ): { [k: string]: any }

      /**
       * Converts this CoordinatePicture to JSON.
       * @returns JSON object
       */
      public toJSON(): { [k: string]: any }
    }

    /** Properties of an AnimationElement. */
    interface IAnimationElement {
      /** AnimationElement startPictureId */
      startPictureId?: string | null

      /** AnimationElement startCoordinate */
      startCoordinate?: sprout.aixcourse.ICoordinate | null

      /** AnimationElement endPictureId */
      endPictureId?: string | null

      /** AnimationElement endCoordinate */
      endCoordinate?: sprout.aixcourse.ICoordinate | null
    }

    /** Represents an AnimationElement. */
    class AnimationElement implements IAnimationElement {
      /**
       * Constructs a new AnimationElement.
       * @param [properties] Properties to set
       */
      constructor(properties?: sprout.aixcourse.IAnimationElement)

      /** AnimationElement startPictureId. */
      public startPictureId: string

      /** AnimationElement startCoordinate. */
      public startCoordinate?: sprout.aixcourse.ICoordinate | null

      /** AnimationElement endPictureId. */
      public endPictureId: string

      /** AnimationElement endCoordinate. */
      public endCoordinate?: sprout.aixcourse.ICoordinate | null

      /**
       * Creates a new AnimationElement instance using the specified properties.
       * @param [properties] Properties to set
       * @returns AnimationElement instance
       */
      public static create(
        properties?: sprout.aixcourse.IAnimationElement,
      ): sprout.aixcourse.AnimationElement

      /**
       * Encodes the specified AnimationElement message. Does not implicitly {@link sprout.aixcourse.AnimationElement.verify|verify} messages.
       * @param message AnimationElement message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encode(
        message: sprout.aixcourse.IAnimationElement,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Encodes the specified AnimationElement message, length delimited. Does not implicitly {@link sprout.aixcourse.AnimationElement.verify|verify} messages.
       * @param message AnimationElement message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encodeDelimited(
        message: sprout.aixcourse.IAnimationElement,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Decodes an AnimationElement message from the specified reader or buffer.
       * @param reader Reader or buffer to decode from
       * @param [length] Message length if known beforehand
       * @returns AnimationElement
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decode(
        reader: $protobuf.Reader | Uint8Array,
        length?: number,
      ): sprout.aixcourse.AnimationElement

      /**
       * Decodes an AnimationElement message from the specified reader or buffer, length delimited.
       * @param reader Reader or buffer to decode from
       * @returns AnimationElement
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decodeDelimited(
        reader: $protobuf.Reader | Uint8Array,
      ): sprout.aixcourse.AnimationElement

      /**
       * Verifies an AnimationElement message.
       * @param message Plain object to verify
       * @returns `null` if valid, otherwise the reason why it is not
       */
      public static verify(message: { [k: string]: any }): string | null

      /**
       * Creates an AnimationElement message from a plain object. Also converts values to their respective internal types.
       * @param object Plain object
       * @returns AnimationElement
       */
      public static fromObject(object: {
        [k: string]: any
      }): sprout.aixcourse.AnimationElement

      /**
       * Creates a plain object from an AnimationElement message. Also converts values to other types if specified.
       * @param message AnimationElement
       * @param [options] Conversion options
       * @returns Plain object
       */
      public static toObject(
        message: sprout.aixcourse.AnimationElement,
        options?: $protobuf.IConversionOptions,
      ): { [k: string]: any }

      /**
       * Converts this AnimationElement to JSON.
       * @returns JSON object
       */
      public toJSON(): { [k: string]: any }
    }

    /** Properties of an AnimationChoice. */
    interface IAnimationChoice {
      /** AnimationChoice soundEffectAudioId */
      soundEffectAudioId?: string | null

      /** AnimationChoice element */
      element?: sprout.aixcourse.IAnimationElement | null

      /** AnimationChoice checked */
      checked?: boolean | null
    }

    /** Represents an AnimationChoice. */
    class AnimationChoice implements IAnimationChoice {
      /**
       * Constructs a new AnimationChoice.
       * @param [properties] Properties to set
       */
      constructor(properties?: sprout.aixcourse.IAnimationChoice)

      /** AnimationChoice soundEffectAudioId. */
      public soundEffectAudioId: string

      /** AnimationChoice element. */
      public element?: sprout.aixcourse.IAnimationElement | null

      /** AnimationChoice checked. */
      public checked: boolean

      /**
       * Creates a new AnimationChoice instance using the specified properties.
       * @param [properties] Properties to set
       * @returns AnimationChoice instance
       */
      public static create(
        properties?: sprout.aixcourse.IAnimationChoice,
      ): sprout.aixcourse.AnimationChoice

      /**
       * Encodes the specified AnimationChoice message. Does not implicitly {@link sprout.aixcourse.AnimationChoice.verify|verify} messages.
       * @param message AnimationChoice message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encode(
        message: sprout.aixcourse.IAnimationChoice,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Encodes the specified AnimationChoice message, length delimited. Does not implicitly {@link sprout.aixcourse.AnimationChoice.verify|verify} messages.
       * @param message AnimationChoice message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encodeDelimited(
        message: sprout.aixcourse.IAnimationChoice,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Decodes an AnimationChoice message from the specified reader or buffer.
       * @param reader Reader or buffer to decode from
       * @param [length] Message length if known beforehand
       * @returns AnimationChoice
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decode(
        reader: $protobuf.Reader | Uint8Array,
        length?: number,
      ): sprout.aixcourse.AnimationChoice

      /**
       * Decodes an AnimationChoice message from the specified reader or buffer, length delimited.
       * @param reader Reader or buffer to decode from
       * @returns AnimationChoice
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decodeDelimited(
        reader: $protobuf.Reader | Uint8Array,
      ): sprout.aixcourse.AnimationChoice

      /**
       * Verifies an AnimationChoice message.
       * @param message Plain object to verify
       * @returns `null` if valid, otherwise the reason why it is not
       */
      public static verify(message: { [k: string]: any }): string | null

      /**
       * Creates an AnimationChoice message from a plain object. Also converts values to their respective internal types.
       * @param object Plain object
       * @returns AnimationChoice
       */
      public static fromObject(object: {
        [k: string]: any
      }): sprout.aixcourse.AnimationChoice

      /**
       * Creates a plain object from an AnimationChoice message. Also converts values to other types if specified.
       * @param message AnimationChoice
       * @param [options] Conversion options
       * @returns Plain object
       */
      public static toObject(
        message: sprout.aixcourse.AnimationChoice,
        options?: $protobuf.IConversionOptions,
      ): { [k: string]: any }

      /**
       * Converts this AnimationChoice to JSON.
       * @returns JSON object
       */
      public toJSON(): { [k: string]: any }
    }

    /** Properties of a FreeAnimationChoice. */
    interface IFreeAnimationChoice {
      /** FreeAnimationChoice text */
      text?: string | null

      /** FreeAnimationChoice choice */
      choice?: sprout.aixcourse.IAnimationChoice | null
    }

    /** Represents a FreeAnimationChoice. */
    class FreeAnimationChoice implements IFreeAnimationChoice {
      /**
       * Constructs a new FreeAnimationChoice.
       * @param [properties] Properties to set
       */
      constructor(properties?: sprout.aixcourse.IFreeAnimationChoice)

      /** FreeAnimationChoice text. */
      public text: string

      /** FreeAnimationChoice choice. */
      public choice?: sprout.aixcourse.IAnimationChoice | null

      /**
       * Creates a new FreeAnimationChoice instance using the specified properties.
       * @param [properties] Properties to set
       * @returns FreeAnimationChoice instance
       */
      public static create(
        properties?: sprout.aixcourse.IFreeAnimationChoice,
      ): sprout.aixcourse.FreeAnimationChoice

      /**
       * Encodes the specified FreeAnimationChoice message. Does not implicitly {@link sprout.aixcourse.FreeAnimationChoice.verify|verify} messages.
       * @param message FreeAnimationChoice message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encode(
        message: sprout.aixcourse.IFreeAnimationChoice,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Encodes the specified FreeAnimationChoice message, length delimited. Does not implicitly {@link sprout.aixcourse.FreeAnimationChoice.verify|verify} messages.
       * @param message FreeAnimationChoice message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encodeDelimited(
        message: sprout.aixcourse.IFreeAnimationChoice,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Decodes a FreeAnimationChoice message from the specified reader or buffer.
       * @param reader Reader or buffer to decode from
       * @param [length] Message length if known beforehand
       * @returns FreeAnimationChoice
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decode(
        reader: $protobuf.Reader | Uint8Array,
        length?: number,
      ): sprout.aixcourse.FreeAnimationChoice

      /**
       * Decodes a FreeAnimationChoice message from the specified reader or buffer, length delimited.
       * @param reader Reader or buffer to decode from
       * @returns FreeAnimationChoice
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decodeDelimited(
        reader: $protobuf.Reader | Uint8Array,
      ): sprout.aixcourse.FreeAnimationChoice

      /**
       * Verifies a FreeAnimationChoice message.
       * @param message Plain object to verify
       * @returns `null` if valid, otherwise the reason why it is not
       */
      public static verify(message: { [k: string]: any }): string | null

      /**
       * Creates a FreeAnimationChoice message from a plain object. Also converts values to their respective internal types.
       * @param object Plain object
       * @returns FreeAnimationChoice
       */
      public static fromObject(object: {
        [k: string]: any
      }): sprout.aixcourse.FreeAnimationChoice

      /**
       * Creates a plain object from a FreeAnimationChoice message. Also converts values to other types if specified.
       * @param message FreeAnimationChoice
       * @param [options] Conversion options
       * @returns Plain object
       */
      public static toObject(
        message: sprout.aixcourse.FreeAnimationChoice,
        options?: $protobuf.IConversionOptions,
      ): { [k: string]: any }

      /**
       * Converts this FreeAnimationChoice to JSON.
       * @returns JSON object
       */
      public toJSON(): { [k: string]: any }
    }

    /** Properties of a TaggedCoordinatePicture. */
    interface ITaggedCoordinatePicture {
      /** TaggedCoordinatePicture defaultShow */
      defaultShow?: boolean | null

      /** TaggedCoordinatePicture tags */
      tags?: string[] | null

      /** TaggedCoordinatePicture picture */
      picture?: sprout.aixcourse.ICoordinatePicture | null
    }

    /** Represents a TaggedCoordinatePicture. */
    class TaggedCoordinatePicture implements ITaggedCoordinatePicture {
      /**
       * Constructs a new TaggedCoordinatePicture.
       * @param [properties] Properties to set
       */
      constructor(properties?: sprout.aixcourse.ITaggedCoordinatePicture)

      /** TaggedCoordinatePicture defaultShow. */
      public defaultShow: boolean

      /** TaggedCoordinatePicture tags. */
      public tags: string[]

      /** TaggedCoordinatePicture picture. */
      public picture?: sprout.aixcourse.ICoordinatePicture | null

      /**
       * Creates a new TaggedCoordinatePicture instance using the specified properties.
       * @param [properties] Properties to set
       * @returns TaggedCoordinatePicture instance
       */
      public static create(
        properties?: sprout.aixcourse.ITaggedCoordinatePicture,
      ): sprout.aixcourse.TaggedCoordinatePicture

      /**
       * Encodes the specified TaggedCoordinatePicture message. Does not implicitly {@link sprout.aixcourse.TaggedCoordinatePicture.verify|verify} messages.
       * @param message TaggedCoordinatePicture message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encode(
        message: sprout.aixcourse.ITaggedCoordinatePicture,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Encodes the specified TaggedCoordinatePicture message, length delimited. Does not implicitly {@link sprout.aixcourse.TaggedCoordinatePicture.verify|verify} messages.
       * @param message TaggedCoordinatePicture message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encodeDelimited(
        message: sprout.aixcourse.ITaggedCoordinatePicture,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Decodes a TaggedCoordinatePicture message from the specified reader or buffer.
       * @param reader Reader or buffer to decode from
       * @param [length] Message length if known beforehand
       * @returns TaggedCoordinatePicture
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decode(
        reader: $protobuf.Reader | Uint8Array,
        length?: number,
      ): sprout.aixcourse.TaggedCoordinatePicture

      /**
       * Decodes a TaggedCoordinatePicture message from the specified reader or buffer, length delimited.
       * @param reader Reader or buffer to decode from
       * @returns TaggedCoordinatePicture
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decodeDelimited(
        reader: $protobuf.Reader | Uint8Array,
      ): sprout.aixcourse.TaggedCoordinatePicture

      /**
       * Verifies a TaggedCoordinatePicture message.
       * @param message Plain object to verify
       * @returns `null` if valid, otherwise the reason why it is not
       */
      public static verify(message: { [k: string]: any }): string | null

      /**
       * Creates a TaggedCoordinatePicture message from a plain object. Also converts values to their respective internal types.
       * @param object Plain object
       * @returns TaggedCoordinatePicture
       */
      public static fromObject(object: {
        [k: string]: any
      }): sprout.aixcourse.TaggedCoordinatePicture

      /**
       * Creates a plain object from a TaggedCoordinatePicture message. Also converts values to other types if specified.
       * @param message TaggedCoordinatePicture
       * @param [options] Conversion options
       * @returns Plain object
       */
      public static toObject(
        message: sprout.aixcourse.TaggedCoordinatePicture,
        options?: $protobuf.IConversionOptions,
      ): { [k: string]: any }

      /**
       * Converts this TaggedCoordinatePicture to JSON.
       * @returns JSON object
       */
      public toJSON(): { [k: string]: any }
    }

    /** Properties of a PAT2AX. */
    interface IPAT2AX {
      /** PAT2AX audio */
      audio?: sprout.aixcourse.PAT2AX.IAudio | null

      /** PAT2AX text */
      text?: string | null

      /** PAT2AX pictureIds */
      pictureIds?: string[] | null
    }

    /** Represents a PAT2AX. */
    class PAT2AX implements IPAT2AX {
      /**
       * Constructs a new PAT2AX.
       * @param [properties] Properties to set
       */
      constructor(properties?: sprout.aixcourse.IPAT2AX)

      /** PAT2AX audio. */
      public audio?: sprout.aixcourse.PAT2AX.IAudio | null

      /** PAT2AX text. */
      public text: string

      /** PAT2AX pictureIds. */
      public pictureIds: string[]

      /**
       * Creates a new PAT2AX instance using the specified properties.
       * @param [properties] Properties to set
       * @returns PAT2AX instance
       */
      public static create(
        properties?: sprout.aixcourse.IPAT2AX,
      ): sprout.aixcourse.PAT2AX

      /**
       * Encodes the specified PAT2AX message. Does not implicitly {@link sprout.aixcourse.PAT2AX.verify|verify} messages.
       * @param message PAT2AX message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encode(
        message: sprout.aixcourse.IPAT2AX,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Encodes the specified PAT2AX message, length delimited. Does not implicitly {@link sprout.aixcourse.PAT2AX.verify|verify} messages.
       * @param message PAT2AX message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encodeDelimited(
        message: sprout.aixcourse.IPAT2AX,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Decodes a PAT2AX message from the specified reader or buffer.
       * @param reader Reader or buffer to decode from
       * @param [length] Message length if known beforehand
       * @returns PAT2AX
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decode(
        reader: $protobuf.Reader | Uint8Array,
        length?: number,
      ): sprout.aixcourse.PAT2AX

      /**
       * Decodes a PAT2AX message from the specified reader or buffer, length delimited.
       * @param reader Reader or buffer to decode from
       * @returns PAT2AX
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decodeDelimited(
        reader: $protobuf.Reader | Uint8Array,
      ): sprout.aixcourse.PAT2AX

      /**
       * Verifies a PAT2AX message.
       * @param message Plain object to verify
       * @returns `null` if valid, otherwise the reason why it is not
       */
      public static verify(message: { [k: string]: any }): string | null

      /**
       * Creates a PAT2AX message from a plain object. Also converts values to their respective internal types.
       * @param object Plain object
       * @returns PAT2AX
       */
      public static fromObject(object: {
        [k: string]: any
      }): sprout.aixcourse.PAT2AX

      /**
       * Creates a plain object from a PAT2AX message. Also converts values to other types if specified.
       * @param message PAT2AX
       * @param [options] Conversion options
       * @returns Plain object
       */
      public static toObject(
        message: sprout.aixcourse.PAT2AX,
        options?: $protobuf.IConversionOptions,
      ): { [k: string]: any }

      /**
       * Converts this PAT2AX to JSON.
       * @returns JSON object
       */
      public toJSON(): { [k: string]: any }
    }

    namespace PAT2AX {
      /** Properties of an Audio. */
      interface IAudio {
        /** Audio audioId */
        audioId?: string | null

        /** Audio shadowing */
        shadowing?: boolean | null
      }

      /** Represents an Audio. */
      class Audio implements IAudio {
        /**
         * Constructs a new Audio.
         * @param [properties] Properties to set
         */
        constructor(properties?: sprout.aixcourse.PAT2AX.IAudio)

        /** Audio audioId. */
        public audioId: string

        /** Audio shadowing. */
        public shadowing: boolean

        /**
         * Creates a new Audio instance using the specified properties.
         * @param [properties] Properties to set
         * @returns Audio instance
         */
        public static create(
          properties?: sprout.aixcourse.PAT2AX.IAudio,
        ): sprout.aixcourse.PAT2AX.Audio

        /**
         * Encodes the specified Audio message. Does not implicitly {@link sprout.aixcourse.PAT2AX.Audio.verify|verify} messages.
         * @param message Audio message or plain object to encode
         * @param [writer] Writer to encode to
         * @returns Writer
         */
        public static encode(
          message: sprout.aixcourse.PAT2AX.IAudio,
          writer?: $protobuf.Writer,
        ): $protobuf.Writer

        /**
         * Encodes the specified Audio message, length delimited. Does not implicitly {@link sprout.aixcourse.PAT2AX.Audio.verify|verify} messages.
         * @param message Audio message or plain object to encode
         * @param [writer] Writer to encode to
         * @returns Writer
         */
        public static encodeDelimited(
          message: sprout.aixcourse.PAT2AX.IAudio,
          writer?: $protobuf.Writer,
        ): $protobuf.Writer

        /**
         * Decodes an Audio message from the specified reader or buffer.
         * @param reader Reader or buffer to decode from
         * @param [length] Message length if known beforehand
         * @returns Audio
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        public static decode(
          reader: $protobuf.Reader | Uint8Array,
          length?: number,
        ): sprout.aixcourse.PAT2AX.Audio

        /**
         * Decodes an Audio message from the specified reader or buffer, length delimited.
         * @param reader Reader or buffer to decode from
         * @returns Audio
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        public static decodeDelimited(
          reader: $protobuf.Reader | Uint8Array,
        ): sprout.aixcourse.PAT2AX.Audio

        /**
         * Verifies an Audio message.
         * @param message Plain object to verify
         * @returns `null` if valid, otherwise the reason why it is not
         */
        public static verify(message: { [k: string]: any }): string | null

        /**
         * Creates an Audio message from a plain object. Also converts values to their respective internal types.
         * @param object Plain object
         * @returns Audio
         */
        public static fromObject(object: {
          [k: string]: any
        }): sprout.aixcourse.PAT2AX.Audio

        /**
         * Creates a plain object from an Audio message. Also converts values to other types if specified.
         * @param message Audio
         * @param [options] Conversion options
         * @returns Plain object
         */
        public static toObject(
          message: sprout.aixcourse.PAT2AX.Audio,
          options?: $protobuf.IConversionOptions,
        ): { [k: string]: any }

        /**
         * Converts this Audio to JSON.
         * @returns JSON object
         */
        public toJSON(): { [k: string]: any }
      }
    }

    /** Properties of a AT2PX. */
    interface IAT2PX {
      /** AT2PX audioId */
      audioId?: string | null

      /** AT2PX text */
      text?: string | null

      /** AT2PX choice */
      choice?: darwincourse.IChoice[] | null
    }

    /** Represents a AT2PX. */
    class AT2PX implements IAT2PX {
      /**
       * Constructs a new AT2PX.
       * @param [properties] Properties to set
       */
      constructor(properties?: sprout.aixcourse.IAT2PX)

      /** AT2PX audioId. */
      public audioId: string

      /** AT2PX text. */
      public text: string

      /** AT2PX choice. */
      public choice: darwincourse.IChoice[]

      /**
       * Creates a new AT2PX instance using the specified properties.
       * @param [properties] Properties to set
       * @returns AT2PX instance
       */
      public static create(
        properties?: sprout.aixcourse.IAT2PX,
      ): sprout.aixcourse.AT2PX

      /**
       * Encodes the specified AT2PX message. Does not implicitly {@link sprout.aixcourse.AT2PX.verify|verify} messages.
       * @param message AT2PX message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encode(
        message: sprout.aixcourse.IAT2PX,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Encodes the specified AT2PX message, length delimited. Does not implicitly {@link sprout.aixcourse.AT2PX.verify|verify} messages.
       * @param message AT2PX message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encodeDelimited(
        message: sprout.aixcourse.IAT2PX,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Decodes a AT2PX message from the specified reader or buffer.
       * @param reader Reader or buffer to decode from
       * @param [length] Message length if known beforehand
       * @returns AT2PX
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decode(
        reader: $protobuf.Reader | Uint8Array,
        length?: number,
      ): sprout.aixcourse.AT2PX

      /**
       * Decodes a AT2PX message from the specified reader or buffer, length delimited.
       * @param reader Reader or buffer to decode from
       * @returns AT2PX
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decodeDelimited(
        reader: $protobuf.Reader | Uint8Array,
      ): sprout.aixcourse.AT2PX

      /**
       * Verifies a AT2PX message.
       * @param message Plain object to verify
       * @returns `null` if valid, otherwise the reason why it is not
       */
      public static verify(message: { [k: string]: any }): string | null

      /**
       * Creates a AT2PX message from a plain object. Also converts values to their respective internal types.
       * @param object Plain object
       * @returns AT2PX
       */
      public static fromObject(object: {
        [k: string]: any
      }): sprout.aixcourse.AT2PX

      /**
       * Creates a plain object from a AT2PX message. Also converts values to other types if specified.
       * @param message AT2PX
       * @param [options] Conversion options
       * @returns Plain object
       */
      public static toObject(
        message: sprout.aixcourse.AT2PX,
        options?: $protobuf.IConversionOptions,
      ): { [k: string]: any }

      /**
       * Converts this AT2PX to JSON.
       * @returns JSON object
       */
      public toJSON(): { [k: string]: any }
    }

    /** Properties of a VideoPlayX. */
    interface IVideoPlayX {
      /** VideoPlayX videoPlay */
      videoPlay?: sprout.aixcourse.IVideoPlay | null
    }

    /** Represents a VideoPlayX. */
    class VideoPlayX implements IVideoPlayX {
      /**
       * Constructs a new VideoPlayX.
       * @param [properties] Properties to set
       */
      constructor(properties?: sprout.aixcourse.IVideoPlayX)

      /** VideoPlayX videoPlay. */
      public videoPlay?: sprout.aixcourse.IVideoPlay | null

      /**
       * Creates a new VideoPlayX instance using the specified properties.
       * @param [properties] Properties to set
       * @returns VideoPlayX instance
       */
      public static create(
        properties?: sprout.aixcourse.IVideoPlayX,
      ): sprout.aixcourse.VideoPlayX

      /**
       * Encodes the specified VideoPlayX message. Does not implicitly {@link sprout.aixcourse.VideoPlayX.verify|verify} messages.
       * @param message VideoPlayX message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encode(
        message: sprout.aixcourse.IVideoPlayX,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Encodes the specified VideoPlayX message, length delimited. Does not implicitly {@link sprout.aixcourse.VideoPlayX.verify|verify} messages.
       * @param message VideoPlayX message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encodeDelimited(
        message: sprout.aixcourse.IVideoPlayX,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Decodes a VideoPlayX message from the specified reader or buffer.
       * @param reader Reader or buffer to decode from
       * @param [length] Message length if known beforehand
       * @returns VideoPlayX
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decode(
        reader: $protobuf.Reader | Uint8Array,
        length?: number,
      ): sprout.aixcourse.VideoPlayX

      /**
       * Decodes a VideoPlayX message from the specified reader or buffer, length delimited.
       * @param reader Reader or buffer to decode from
       * @returns VideoPlayX
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decodeDelimited(
        reader: $protobuf.Reader | Uint8Array,
      ): sprout.aixcourse.VideoPlayX

      /**
       * Verifies a VideoPlayX message.
       * @param message Plain object to verify
       * @returns `null` if valid, otherwise the reason why it is not
       */
      public static verify(message: { [k: string]: any }): string | null

      /**
       * Creates a VideoPlayX message from a plain object. Also converts values to their respective internal types.
       * @param object Plain object
       * @returns VideoPlayX
       */
      public static fromObject(object: {
        [k: string]: any
      }): sprout.aixcourse.VideoPlayX

      /**
       * Creates a plain object from a VideoPlayX message. Also converts values to other types if specified.
       * @param message VideoPlayX
       * @param [options] Conversion options
       * @returns Plain object
       */
      public static toObject(
        message: sprout.aixcourse.VideoPlayX,
        options?: $protobuf.IConversionOptions,
      ): { [k: string]: any }

      /**
       * Converts this VideoPlayX to JSON.
       * @returns JSON object
       */
      public toJSON(): { [k: string]: any }
    }

    /** Properties of a PAT2TX. */
    interface IPAT2TX {
      /** PAT2TX pictureId */
      pictureId?: string | null

      /** PAT2TX audioId */
      audioId?: string | null

      /** PAT2TX text */
      text?: string | null

      /** PAT2TX choice */
      choice?: darwincourse.IChoice[] | null
    }

    /** Represents a PAT2TX. */
    class PAT2TX implements IPAT2TX {
      /**
       * Constructs a new PAT2TX.
       * @param [properties] Properties to set
       */
      constructor(properties?: sprout.aixcourse.IPAT2TX)

      /** PAT2TX pictureId. */
      public pictureId: string

      /** PAT2TX audioId. */
      public audioId: string

      /** PAT2TX text. */
      public text: string

      /** PAT2TX choice. */
      public choice: darwincourse.IChoice[]

      /**
       * Creates a new PAT2TX instance using the specified properties.
       * @param [properties] Properties to set
       * @returns PAT2TX instance
       */
      public static create(
        properties?: sprout.aixcourse.IPAT2TX,
      ): sprout.aixcourse.PAT2TX

      /**
       * Encodes the specified PAT2TX message. Does not implicitly {@link sprout.aixcourse.PAT2TX.verify|verify} messages.
       * @param message PAT2TX message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encode(
        message: sprout.aixcourse.IPAT2TX,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Encodes the specified PAT2TX message, length delimited. Does not implicitly {@link sprout.aixcourse.PAT2TX.verify|verify} messages.
       * @param message PAT2TX message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encodeDelimited(
        message: sprout.aixcourse.IPAT2TX,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Decodes a PAT2TX message from the specified reader or buffer.
       * @param reader Reader or buffer to decode from
       * @param [length] Message length if known beforehand
       * @returns PAT2TX
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decode(
        reader: $protobuf.Reader | Uint8Array,
        length?: number,
      ): sprout.aixcourse.PAT2TX

      /**
       * Decodes a PAT2TX message from the specified reader or buffer, length delimited.
       * @param reader Reader or buffer to decode from
       * @returns PAT2TX
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decodeDelimited(
        reader: $protobuf.Reader | Uint8Array,
      ): sprout.aixcourse.PAT2TX

      /**
       * Verifies a PAT2TX message.
       * @param message Plain object to verify
       * @returns `null` if valid, otherwise the reason why it is not
       */
      public static verify(message: { [k: string]: any }): string | null

      /**
       * Creates a PAT2TX message from a plain object. Also converts values to their respective internal types.
       * @param object Plain object
       * @returns PAT2TX
       */
      public static fromObject(object: {
        [k: string]: any
      }): sprout.aixcourse.PAT2TX

      /**
       * Creates a plain object from a PAT2TX message. Also converts values to other types if specified.
       * @param message PAT2TX
       * @param [options] Conversion options
       * @returns Plain object
       */
      public static toObject(
        message: sprout.aixcourse.PAT2TX,
        options?: $protobuf.IConversionOptions,
      ): { [k: string]: any }

      /**
       * Converts this PAT2TX to JSON.
       * @returns JSON object
       */
      public toJSON(): { [k: string]: any }
    }

    /** Properties of a A2PPuzzleX. */
    interface IA2PPuzzleX {
      /** A2PPuzzleX a2pPuzzle */
      a2pPuzzle?: sprout.aixcourse.IA2PPuzzle | null
    }

    /** Represents a A2PPuzzleX. */
    class A2PPuzzleX implements IA2PPuzzleX {
      /**
       * Constructs a new A2PPuzzleX.
       * @param [properties] Properties to set
       */
      constructor(properties?: sprout.aixcourse.IA2PPuzzleX)

      /** A2PPuzzleX a2pPuzzle. */
      public a2pPuzzle?: sprout.aixcourse.IA2PPuzzle | null

      /**
       * Creates a new A2PPuzzleX instance using the specified properties.
       * @param [properties] Properties to set
       * @returns A2PPuzzleX instance
       */
      public static create(
        properties?: sprout.aixcourse.IA2PPuzzleX,
      ): sprout.aixcourse.A2PPuzzleX

      /**
       * Encodes the specified A2PPuzzleX message. Does not implicitly {@link sprout.aixcourse.A2PPuzzleX.verify|verify} messages.
       * @param message A2PPuzzleX message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encode(
        message: sprout.aixcourse.IA2PPuzzleX,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Encodes the specified A2PPuzzleX message, length delimited. Does not implicitly {@link sprout.aixcourse.A2PPuzzleX.verify|verify} messages.
       * @param message A2PPuzzleX message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encodeDelimited(
        message: sprout.aixcourse.IA2PPuzzleX,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Decodes a A2PPuzzleX message from the specified reader or buffer.
       * @param reader Reader or buffer to decode from
       * @param [length] Message length if known beforehand
       * @returns A2PPuzzleX
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decode(
        reader: $protobuf.Reader | Uint8Array,
        length?: number,
      ): sprout.aixcourse.A2PPuzzleX

      /**
       * Decodes a A2PPuzzleX message from the specified reader or buffer, length delimited.
       * @param reader Reader or buffer to decode from
       * @returns A2PPuzzleX
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decodeDelimited(
        reader: $protobuf.Reader | Uint8Array,
      ): sprout.aixcourse.A2PPuzzleX

      /**
       * Verifies a A2PPuzzleX message.
       * @param message Plain object to verify
       * @returns `null` if valid, otherwise the reason why it is not
       */
      public static verify(message: { [k: string]: any }): string | null

      /**
       * Creates a A2PPuzzleX message from a plain object. Also converts values to their respective internal types.
       * @param object Plain object
       * @returns A2PPuzzleX
       */
      public static fromObject(object: {
        [k: string]: any
      }): sprout.aixcourse.A2PPuzzleX

      /**
       * Creates a plain object from a A2PPuzzleX message. Also converts values to other types if specified.
       * @param message A2PPuzzleX
       * @param [options] Conversion options
       * @returns Plain object
       */
      public static toObject(
        message: sprout.aixcourse.A2PPuzzleX,
        options?: $protobuf.IConversionOptions,
      ): { [k: string]: any }

      /**
       * Converts this A2PPuzzleX to JSON.
       * @returns JSON object
       */
      public toJSON(): { [k: string]: any }
    }

    /** Properties of a A2PToolX. */
    interface IA2PToolX {
      /** A2PToolX a2pTool */
      a2pTool?: sprout.aixcourse.IA2PTool | null
    }

    /** Represents a A2PToolX. */
    class A2PToolX implements IA2PToolX {
      /**
       * Constructs a new A2PToolX.
       * @param [properties] Properties to set
       */
      constructor(properties?: sprout.aixcourse.IA2PToolX)

      /** A2PToolX a2pTool. */
      public a2pTool?: sprout.aixcourse.IA2PTool | null

      /**
       * Creates a new A2PToolX instance using the specified properties.
       * @param [properties] Properties to set
       * @returns A2PToolX instance
       */
      public static create(
        properties?: sprout.aixcourse.IA2PToolX,
      ): sprout.aixcourse.A2PToolX

      /**
       * Encodes the specified A2PToolX message. Does not implicitly {@link sprout.aixcourse.A2PToolX.verify|verify} messages.
       * @param message A2PToolX message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encode(
        message: sprout.aixcourse.IA2PToolX,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Encodes the specified A2PToolX message, length delimited. Does not implicitly {@link sprout.aixcourse.A2PToolX.verify|verify} messages.
       * @param message A2PToolX message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encodeDelimited(
        message: sprout.aixcourse.IA2PToolX,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Decodes a A2PToolX message from the specified reader or buffer.
       * @param reader Reader or buffer to decode from
       * @param [length] Message length if known beforehand
       * @returns A2PToolX
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decode(
        reader: $protobuf.Reader | Uint8Array,
        length?: number,
      ): sprout.aixcourse.A2PToolX

      /**
       * Decodes a A2PToolX message from the specified reader or buffer, length delimited.
       * @param reader Reader or buffer to decode from
       * @returns A2PToolX
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decodeDelimited(
        reader: $protobuf.Reader | Uint8Array,
      ): sprout.aixcourse.A2PToolX

      /**
       * Verifies a A2PToolX message.
       * @param message Plain object to verify
       * @returns `null` if valid, otherwise the reason why it is not
       */
      public static verify(message: { [k: string]: any }): string | null

      /**
       * Creates a A2PToolX message from a plain object. Also converts values to their respective internal types.
       * @param object Plain object
       * @returns A2PToolX
       */
      public static fromObject(object: {
        [k: string]: any
      }): sprout.aixcourse.A2PToolX

      /**
       * Creates a plain object from a A2PToolX message. Also converts values to other types if specified.
       * @param message A2PToolX
       * @param [options] Conversion options
       * @returns Plain object
       */
      public static toObject(
        message: sprout.aixcourse.A2PToolX,
        options?: $protobuf.IConversionOptions,
      ): { [k: string]: any }

      /**
       * Converts this A2PToolX to JSON.
       * @returns JSON object
       */
      public toJSON(): { [k: string]: any }
    }

    /** Properties of a A2PTapX. */
    interface IA2PTapX {
      /** A2PTapX a2pTap */
      a2pTap?: sprout.aixcourse.IA2PTap | null
    }

    /** Represents a A2PTapX. */
    class A2PTapX implements IA2PTapX {
      /**
       * Constructs a new A2PTapX.
       * @param [properties] Properties to set
       */
      constructor(properties?: sprout.aixcourse.IA2PTapX)

      /** A2PTapX a2pTap. */
      public a2pTap?: sprout.aixcourse.IA2PTap | null

      /**
       * Creates a new A2PTapX instance using the specified properties.
       * @param [properties] Properties to set
       * @returns A2PTapX instance
       */
      public static create(
        properties?: sprout.aixcourse.IA2PTapX,
      ): sprout.aixcourse.A2PTapX

      /**
       * Encodes the specified A2PTapX message. Does not implicitly {@link sprout.aixcourse.A2PTapX.verify|verify} messages.
       * @param message A2PTapX message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encode(
        message: sprout.aixcourse.IA2PTapX,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Encodes the specified A2PTapX message, length delimited. Does not implicitly {@link sprout.aixcourse.A2PTapX.verify|verify} messages.
       * @param message A2PTapX message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encodeDelimited(
        message: sprout.aixcourse.IA2PTapX,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Decodes a A2PTapX message from the specified reader or buffer.
       * @param reader Reader or buffer to decode from
       * @param [length] Message length if known beforehand
       * @returns A2PTapX
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decode(
        reader: $protobuf.Reader | Uint8Array,
        length?: number,
      ): sprout.aixcourse.A2PTapX

      /**
       * Decodes a A2PTapX message from the specified reader or buffer, length delimited.
       * @param reader Reader or buffer to decode from
       * @returns A2PTapX
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decodeDelimited(
        reader: $protobuf.Reader | Uint8Array,
      ): sprout.aixcourse.A2PTapX

      /**
       * Verifies a A2PTapX message.
       * @param message Plain object to verify
       * @returns `null` if valid, otherwise the reason why it is not
       */
      public static verify(message: { [k: string]: any }): string | null

      /**
       * Creates a A2PTapX message from a plain object. Also converts values to their respective internal types.
       * @param object Plain object
       * @returns A2PTapX
       */
      public static fromObject(object: {
        [k: string]: any
      }): sprout.aixcourse.A2PTapX

      /**
       * Creates a plain object from a A2PTapX message. Also converts values to other types if specified.
       * @param message A2PTapX
       * @param [options] Conversion options
       * @returns Plain object
       */
      public static toObject(
        message: sprout.aixcourse.A2PTapX,
        options?: $protobuf.IConversionOptions,
      ): { [k: string]: any }

      /**
       * Converts this A2PTapX to JSON.
       * @returns JSON object
       */
      public toJSON(): { [k: string]: any }
    }

    /** Properties of a PA2AJetX. */
    interface IPA2AJetX {
      /** PA2AJetX pa2aJet */
      pa2aJet?: sprout.aixcourse.IPA2AJet | null
    }

    /** Represents a PA2AJetX. */
    class PA2AJetX implements IPA2AJetX {
      /**
       * Constructs a new PA2AJetX.
       * @param [properties] Properties to set
       */
      constructor(properties?: sprout.aixcourse.IPA2AJetX)

      /** PA2AJetX pa2aJet. */
      public pa2aJet?: sprout.aixcourse.IPA2AJet | null

      /**
       * Creates a new PA2AJetX instance using the specified properties.
       * @param [properties] Properties to set
       * @returns PA2AJetX instance
       */
      public static create(
        properties?: sprout.aixcourse.IPA2AJetX,
      ): sprout.aixcourse.PA2AJetX

      /**
       * Encodes the specified PA2AJetX message. Does not implicitly {@link sprout.aixcourse.PA2AJetX.verify|verify} messages.
       * @param message PA2AJetX message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encode(
        message: sprout.aixcourse.IPA2AJetX,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Encodes the specified PA2AJetX message, length delimited. Does not implicitly {@link sprout.aixcourse.PA2AJetX.verify|verify} messages.
       * @param message PA2AJetX message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encodeDelimited(
        message: sprout.aixcourse.IPA2AJetX,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Decodes a PA2AJetX message from the specified reader or buffer.
       * @param reader Reader or buffer to decode from
       * @param [length] Message length if known beforehand
       * @returns PA2AJetX
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decode(
        reader: $protobuf.Reader | Uint8Array,
        length?: number,
      ): sprout.aixcourse.PA2AJetX

      /**
       * Decodes a PA2AJetX message from the specified reader or buffer, length delimited.
       * @param reader Reader or buffer to decode from
       * @returns PA2AJetX
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decodeDelimited(
        reader: $protobuf.Reader | Uint8Array,
      ): sprout.aixcourse.PA2AJetX

      /**
       * Verifies a PA2AJetX message.
       * @param message Plain object to verify
       * @returns `null` if valid, otherwise the reason why it is not
       */
      public static verify(message: { [k: string]: any }): string | null

      /**
       * Creates a PA2AJetX message from a plain object. Also converts values to their respective internal types.
       * @param object Plain object
       * @returns PA2AJetX
       */
      public static fromObject(object: {
        [k: string]: any
      }): sprout.aixcourse.PA2AJetX

      /**
       * Creates a plain object from a PA2AJetX message. Also converts values to other types if specified.
       * @param message PA2AJetX
       * @param [options] Conversion options
       * @returns Plain object
       */
      public static toObject(
        message: sprout.aixcourse.PA2AJetX,
        options?: $protobuf.IConversionOptions,
      ): { [k: string]: any }

      /**
       * Converts this PA2AJetX to JSON.
       * @returns JSON object
       */
      public toJSON(): { [k: string]: any }
    }

    /** Properties of a PAT2PFallX. */
    interface IPAT2PFallX {
      /** PAT2PFallX pat2pFall */
      pat2pFall?: sprout.aixcourse.IPAT2PFall | null
    }

    /** Represents a PAT2PFallX. */
    class PAT2PFallX implements IPAT2PFallX {
      /**
       * Constructs a new PAT2PFallX.
       * @param [properties] Properties to set
       */
      constructor(properties?: sprout.aixcourse.IPAT2PFallX)

      /** PAT2PFallX pat2pFall. */
      public pat2pFall?: sprout.aixcourse.IPAT2PFall | null

      /**
       * Creates a new PAT2PFallX instance using the specified properties.
       * @param [properties] Properties to set
       * @returns PAT2PFallX instance
       */
      public static create(
        properties?: sprout.aixcourse.IPAT2PFallX,
      ): sprout.aixcourse.PAT2PFallX

      /**
       * Encodes the specified PAT2PFallX message. Does not implicitly {@link sprout.aixcourse.PAT2PFallX.verify|verify} messages.
       * @param message PAT2PFallX message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encode(
        message: sprout.aixcourse.IPAT2PFallX,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Encodes the specified PAT2PFallX message, length delimited. Does not implicitly {@link sprout.aixcourse.PAT2PFallX.verify|verify} messages.
       * @param message PAT2PFallX message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encodeDelimited(
        message: sprout.aixcourse.IPAT2PFallX,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Decodes a PAT2PFallX message from the specified reader or buffer.
       * @param reader Reader or buffer to decode from
       * @param [length] Message length if known beforehand
       * @returns PAT2PFallX
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decode(
        reader: $protobuf.Reader | Uint8Array,
        length?: number,
      ): sprout.aixcourse.PAT2PFallX

      /**
       * Decodes a PAT2PFallX message from the specified reader or buffer, length delimited.
       * @param reader Reader or buffer to decode from
       * @returns PAT2PFallX
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decodeDelimited(
        reader: $protobuf.Reader | Uint8Array,
      ): sprout.aixcourse.PAT2PFallX

      /**
       * Verifies a PAT2PFallX message.
       * @param message Plain object to verify
       * @returns `null` if valid, otherwise the reason why it is not
       */
      public static verify(message: { [k: string]: any }): string | null

      /**
       * Creates a PAT2PFallX message from a plain object. Also converts values to their respective internal types.
       * @param object Plain object
       * @returns PAT2PFallX
       */
      public static fromObject(object: {
        [k: string]: any
      }): sprout.aixcourse.PAT2PFallX

      /**
       * Creates a plain object from a PAT2PFallX message. Also converts values to other types if specified.
       * @param message PAT2PFallX
       * @param [options] Conversion options
       * @returns Plain object
       */
      public static toObject(
        message: sprout.aixcourse.PAT2PFallX,
        options?: $protobuf.IConversionOptions,
      ): { [k: string]: any }

      /**
       * Converts this PAT2PFallX to JSON.
       * @returns JSON object
       */
      public toJSON(): { [k: string]: any }
    }

    /** Properties of a PA2AWheelX. */
    interface IPA2AWheelX {
      /** PA2AWheelX pa2aWheel */
      pa2aWheel?: sprout.aixcourse.IPA2AWheel | null
    }

    /** Represents a PA2AWheelX. */
    class PA2AWheelX implements IPA2AWheelX {
      /**
       * Constructs a new PA2AWheelX.
       * @param [properties] Properties to set
       */
      constructor(properties?: sprout.aixcourse.IPA2AWheelX)

      /** PA2AWheelX pa2aWheel. */
      public pa2aWheel?: sprout.aixcourse.IPA2AWheel | null

      /**
       * Creates a new PA2AWheelX instance using the specified properties.
       * @param [properties] Properties to set
       * @returns PA2AWheelX instance
       */
      public static create(
        properties?: sprout.aixcourse.IPA2AWheelX,
      ): sprout.aixcourse.PA2AWheelX

      /**
       * Encodes the specified PA2AWheelX message. Does not implicitly {@link sprout.aixcourse.PA2AWheelX.verify|verify} messages.
       * @param message PA2AWheelX message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encode(
        message: sprout.aixcourse.IPA2AWheelX,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Encodes the specified PA2AWheelX message, length delimited. Does not implicitly {@link sprout.aixcourse.PA2AWheelX.verify|verify} messages.
       * @param message PA2AWheelX message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encodeDelimited(
        message: sprout.aixcourse.IPA2AWheelX,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Decodes a PA2AWheelX message from the specified reader or buffer.
       * @param reader Reader or buffer to decode from
       * @param [length] Message length if known beforehand
       * @returns PA2AWheelX
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decode(
        reader: $protobuf.Reader | Uint8Array,
        length?: number,
      ): sprout.aixcourse.PA2AWheelX

      /**
       * Decodes a PA2AWheelX message from the specified reader or buffer, length delimited.
       * @param reader Reader or buffer to decode from
       * @returns PA2AWheelX
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decodeDelimited(
        reader: $protobuf.Reader | Uint8Array,
      ): sprout.aixcourse.PA2AWheelX

      /**
       * Verifies a PA2AWheelX message.
       * @param message Plain object to verify
       * @returns `null` if valid, otherwise the reason why it is not
       */
      public static verify(message: { [k: string]: any }): string | null

      /**
       * Creates a PA2AWheelX message from a plain object. Also converts values to their respective internal types.
       * @param object Plain object
       * @returns PA2AWheelX
       */
      public static fromObject(object: {
        [k: string]: any
      }): sprout.aixcourse.PA2AWheelX

      /**
       * Creates a plain object from a PA2AWheelX message. Also converts values to other types if specified.
       * @param message PA2AWheelX
       * @param [options] Conversion options
       * @returns Plain object
       */
      public static toObject(
        message: sprout.aixcourse.PA2AWheelX,
        options?: $protobuf.IConversionOptions,
      ): { [k: string]: any }

      /**
       * Converts this PA2AWheelX to JSON.
       * @returns JSON object
       */
      public toJSON(): { [k: string]: any }
    }

    /** Properties of a AT2PBumpX. */
    interface IAT2PBumpX {
      /** AT2PBumpX at2pX */
      at2pX?: sprout.aixcourse.IAT2PX | null
    }

    /** Represents a AT2PBumpX. */
    class AT2PBumpX implements IAT2PBumpX {
      /**
       * Constructs a new AT2PBumpX.
       * @param [properties] Properties to set
       */
      constructor(properties?: sprout.aixcourse.IAT2PBumpX)

      /** AT2PBumpX at2pX. */
      public at2pX?: sprout.aixcourse.IAT2PX | null

      /**
       * Creates a new AT2PBumpX instance using the specified properties.
       * @param [properties] Properties to set
       * @returns AT2PBumpX instance
       */
      public static create(
        properties?: sprout.aixcourse.IAT2PBumpX,
      ): sprout.aixcourse.AT2PBumpX

      /**
       * Encodes the specified AT2PBumpX message. Does not implicitly {@link sprout.aixcourse.AT2PBumpX.verify|verify} messages.
       * @param message AT2PBumpX message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encode(
        message: sprout.aixcourse.IAT2PBumpX,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Encodes the specified AT2PBumpX message, length delimited. Does not implicitly {@link sprout.aixcourse.AT2PBumpX.verify|verify} messages.
       * @param message AT2PBumpX message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encodeDelimited(
        message: sprout.aixcourse.IAT2PBumpX,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Decodes a AT2PBumpX message from the specified reader or buffer.
       * @param reader Reader or buffer to decode from
       * @param [length] Message length if known beforehand
       * @returns AT2PBumpX
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decode(
        reader: $protobuf.Reader | Uint8Array,
        length?: number,
      ): sprout.aixcourse.AT2PBumpX

      /**
       * Decodes a AT2PBumpX message from the specified reader or buffer, length delimited.
       * @param reader Reader or buffer to decode from
       * @returns AT2PBumpX
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decodeDelimited(
        reader: $protobuf.Reader | Uint8Array,
      ): sprout.aixcourse.AT2PBumpX

      /**
       * Verifies a AT2PBumpX message.
       * @param message Plain object to verify
       * @returns `null` if valid, otherwise the reason why it is not
       */
      public static verify(message: { [k: string]: any }): string | null

      /**
       * Creates a AT2PBumpX message from a plain object. Also converts values to their respective internal types.
       * @param object Plain object
       * @returns AT2PBumpX
       */
      public static fromObject(object: {
        [k: string]: any
      }): sprout.aixcourse.AT2PBumpX

      /**
       * Creates a plain object from a AT2PBumpX message. Also converts values to other types if specified.
       * @param message AT2PBumpX
       * @param [options] Conversion options
       * @returns Plain object
       */
      public static toObject(
        message: sprout.aixcourse.AT2PBumpX,
        options?: $protobuf.IConversionOptions,
      ): { [k: string]: any }

      /**
       * Converts this AT2PBumpX to JSON.
       * @returns JSON object
       */
      public toJSON(): { [k: string]: any }
    }

    /** Properties of a A2PMoleX. */
    interface IA2PMoleX {
      /** A2PMoleX a2pMole */
      a2pMole?: sprout.aixcourse.IA2PMole | null
    }

    /** Represents a A2PMoleX. */
    class A2PMoleX implements IA2PMoleX {
      /**
       * Constructs a new A2PMoleX.
       * @param [properties] Properties to set
       */
      constructor(properties?: sprout.aixcourse.IA2PMoleX)

      /** A2PMoleX a2pMole. */
      public a2pMole?: sprout.aixcourse.IA2PMole | null

      /**
       * Creates a new A2PMoleX instance using the specified properties.
       * @param [properties] Properties to set
       * @returns A2PMoleX instance
       */
      public static create(
        properties?: sprout.aixcourse.IA2PMoleX,
      ): sprout.aixcourse.A2PMoleX

      /**
       * Encodes the specified A2PMoleX message. Does not implicitly {@link sprout.aixcourse.A2PMoleX.verify|verify} messages.
       * @param message A2PMoleX message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encode(
        message: sprout.aixcourse.IA2PMoleX,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Encodes the specified A2PMoleX message, length delimited. Does not implicitly {@link sprout.aixcourse.A2PMoleX.verify|verify} messages.
       * @param message A2PMoleX message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encodeDelimited(
        message: sprout.aixcourse.IA2PMoleX,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Decodes a A2PMoleX message from the specified reader or buffer.
       * @param reader Reader or buffer to decode from
       * @param [length] Message length if known beforehand
       * @returns A2PMoleX
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decode(
        reader: $protobuf.Reader | Uint8Array,
        length?: number,
      ): sprout.aixcourse.A2PMoleX

      /**
       * Decodes a A2PMoleX message from the specified reader or buffer, length delimited.
       * @param reader Reader or buffer to decode from
       * @returns A2PMoleX
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decodeDelimited(
        reader: $protobuf.Reader | Uint8Array,
      ): sprout.aixcourse.A2PMoleX

      /**
       * Verifies a A2PMoleX message.
       * @param message Plain object to verify
       * @returns `null` if valid, otherwise the reason why it is not
       */
      public static verify(message: { [k: string]: any }): string | null

      /**
       * Creates a A2PMoleX message from a plain object. Also converts values to their respective internal types.
       * @param object Plain object
       * @returns A2PMoleX
       */
      public static fromObject(object: {
        [k: string]: any
      }): sprout.aixcourse.A2PMoleX

      /**
       * Creates a plain object from a A2PMoleX message. Also converts values to other types if specified.
       * @param message A2PMoleX
       * @param [options] Conversion options
       * @returns Plain object
       */
      public static toObject(
        message: sprout.aixcourse.A2PMoleX,
        options?: $protobuf.IConversionOptions,
      ): { [k: string]: any }

      /**
       * Converts this A2PMoleX to JSON.
       * @returns JSON object
       */
      public toJSON(): { [k: string]: any }
    }

    /** Properties of a A2PDrag1X. */
    interface IA2PDrag1X {
      /** A2PDrag1X a2pDrag_1 */
      a2pDrag_1?: sprout.aixcourse.IA2PDrag1 | null
    }

    /** Represents a A2PDrag1X. */
    class A2PDrag1X implements IA2PDrag1X {
      /**
       * Constructs a new A2PDrag1X.
       * @param [properties] Properties to set
       */
      constructor(properties?: sprout.aixcourse.IA2PDrag1X)

      /** A2PDrag1X a2pDrag_1. */
      public a2pDrag_1?: sprout.aixcourse.IA2PDrag1 | null

      /**
       * Creates a new A2PDrag1X instance using the specified properties.
       * @param [properties] Properties to set
       * @returns A2PDrag1X instance
       */
      public static create(
        properties?: sprout.aixcourse.IA2PDrag1X,
      ): sprout.aixcourse.A2PDrag1X

      /**
       * Encodes the specified A2PDrag1X message. Does not implicitly {@link sprout.aixcourse.A2PDrag1X.verify|verify} messages.
       * @param message A2PDrag1X message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encode(
        message: sprout.aixcourse.IA2PDrag1X,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Encodes the specified A2PDrag1X message, length delimited. Does not implicitly {@link sprout.aixcourse.A2PDrag1X.verify|verify} messages.
       * @param message A2PDrag1X message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encodeDelimited(
        message: sprout.aixcourse.IA2PDrag1X,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Decodes a A2PDrag1X message from the specified reader or buffer.
       * @param reader Reader or buffer to decode from
       * @param [length] Message length if known beforehand
       * @returns A2PDrag1X
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decode(
        reader: $protobuf.Reader | Uint8Array,
        length?: number,
      ): sprout.aixcourse.A2PDrag1X

      /**
       * Decodes a A2PDrag1X message from the specified reader or buffer, length delimited.
       * @param reader Reader or buffer to decode from
       * @returns A2PDrag1X
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decodeDelimited(
        reader: $protobuf.Reader | Uint8Array,
      ): sprout.aixcourse.A2PDrag1X

      /**
       * Verifies a A2PDrag1X message.
       * @param message Plain object to verify
       * @returns `null` if valid, otherwise the reason why it is not
       */
      public static verify(message: { [k: string]: any }): string | null

      /**
       * Creates a A2PDrag1X message from a plain object. Also converts values to their respective internal types.
       * @param object Plain object
       * @returns A2PDrag1X
       */
      public static fromObject(object: {
        [k: string]: any
      }): sprout.aixcourse.A2PDrag1X

      /**
       * Creates a plain object from a A2PDrag1X message. Also converts values to other types if specified.
       * @param message A2PDrag1X
       * @param [options] Conversion options
       * @returns Plain object
       */
      public static toObject(
        message: sprout.aixcourse.A2PDrag1X,
        options?: $protobuf.IConversionOptions,
      ): { [k: string]: any }

      /**
       * Converts this A2PDrag1X to JSON.
       * @returns JSON object
       */
      public toJSON(): { [k: string]: any }
    }

    /** Properties of a PA2PRevealX. */
    interface IPA2PRevealX {
      /** PA2PRevealX pa2pReveal */
      pa2pReveal?: sprout.aixcourse.IPA2PReveal | null
    }

    /** Represents a PA2PRevealX. */
    class PA2PRevealX implements IPA2PRevealX {
      /**
       * Constructs a new PA2PRevealX.
       * @param [properties] Properties to set
       */
      constructor(properties?: sprout.aixcourse.IPA2PRevealX)

      /** PA2PRevealX pa2pReveal. */
      public pa2pReveal?: sprout.aixcourse.IPA2PReveal | null

      /**
       * Creates a new PA2PRevealX instance using the specified properties.
       * @param [properties] Properties to set
       * @returns PA2PRevealX instance
       */
      public static create(
        properties?: sprout.aixcourse.IPA2PRevealX,
      ): sprout.aixcourse.PA2PRevealX

      /**
       * Encodes the specified PA2PRevealX message. Does not implicitly {@link sprout.aixcourse.PA2PRevealX.verify|verify} messages.
       * @param message PA2PRevealX message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encode(
        message: sprout.aixcourse.IPA2PRevealX,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Encodes the specified PA2PRevealX message, length delimited. Does not implicitly {@link sprout.aixcourse.PA2PRevealX.verify|verify} messages.
       * @param message PA2PRevealX message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encodeDelimited(
        message: sprout.aixcourse.IPA2PRevealX,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Decodes a PA2PRevealX message from the specified reader or buffer.
       * @param reader Reader or buffer to decode from
       * @param [length] Message length if known beforehand
       * @returns PA2PRevealX
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decode(
        reader: $protobuf.Reader | Uint8Array,
        length?: number,
      ): sprout.aixcourse.PA2PRevealX

      /**
       * Decodes a PA2PRevealX message from the specified reader or buffer, length delimited.
       * @param reader Reader or buffer to decode from
       * @returns PA2PRevealX
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decodeDelimited(
        reader: $protobuf.Reader | Uint8Array,
      ): sprout.aixcourse.PA2PRevealX

      /**
       * Verifies a PA2PRevealX message.
       * @param message Plain object to verify
       * @returns `null` if valid, otherwise the reason why it is not
       */
      public static verify(message: { [k: string]: any }): string | null

      /**
       * Creates a PA2PRevealX message from a plain object. Also converts values to their respective internal types.
       * @param object Plain object
       * @returns PA2PRevealX
       */
      public static fromObject(object: {
        [k: string]: any
      }): sprout.aixcourse.PA2PRevealX

      /**
       * Creates a plain object from a PA2PRevealX message. Also converts values to other types if specified.
       * @param message PA2PRevealX
       * @param [options] Conversion options
       * @returns Plain object
       */
      public static toObject(
        message: sprout.aixcourse.PA2PRevealX,
        options?: $protobuf.IConversionOptions,
      ): { [k: string]: any }

      /**
       * Converts this PA2PRevealX to JSON.
       * @returns JSON object
       */
      public toJSON(): { [k: string]: any }
    }

    /** Properties of a PAT2TBridgeX. */
    interface IPAT2TBridgeX {
      /** PAT2TBridgeX wordFormation */
      wordFormation?: sprout.phonicscourse.IWordFormation | null
    }

    /** Represents a PAT2TBridgeX. */
    class PAT2TBridgeX implements IPAT2TBridgeX {
      /**
       * Constructs a new PAT2TBridgeX.
       * @param [properties] Properties to set
       */
      constructor(properties?: sprout.aixcourse.IPAT2TBridgeX)

      /** PAT2TBridgeX wordFormation. */
      public wordFormation?: sprout.phonicscourse.IWordFormation | null

      /**
       * Creates a new PAT2TBridgeX instance using the specified properties.
       * @param [properties] Properties to set
       * @returns PAT2TBridgeX instance
       */
      public static create(
        properties?: sprout.aixcourse.IPAT2TBridgeX,
      ): sprout.aixcourse.PAT2TBridgeX

      /**
       * Encodes the specified PAT2TBridgeX message. Does not implicitly {@link sprout.aixcourse.PAT2TBridgeX.verify|verify} messages.
       * @param message PAT2TBridgeX message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encode(
        message: sprout.aixcourse.IPAT2TBridgeX,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Encodes the specified PAT2TBridgeX message, length delimited. Does not implicitly {@link sprout.aixcourse.PAT2TBridgeX.verify|verify} messages.
       * @param message PAT2TBridgeX message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encodeDelimited(
        message: sprout.aixcourse.IPAT2TBridgeX,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Decodes a PAT2TBridgeX message from the specified reader or buffer.
       * @param reader Reader or buffer to decode from
       * @param [length] Message length if known beforehand
       * @returns PAT2TBridgeX
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decode(
        reader: $protobuf.Reader | Uint8Array,
        length?: number,
      ): sprout.aixcourse.PAT2TBridgeX

      /**
       * Decodes a PAT2TBridgeX message from the specified reader or buffer, length delimited.
       * @param reader Reader or buffer to decode from
       * @returns PAT2TBridgeX
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decodeDelimited(
        reader: $protobuf.Reader | Uint8Array,
      ): sprout.aixcourse.PAT2TBridgeX

      /**
       * Verifies a PAT2TBridgeX message.
       * @param message Plain object to verify
       * @returns `null` if valid, otherwise the reason why it is not
       */
      public static verify(message: { [k: string]: any }): string | null

      /**
       * Creates a PAT2TBridgeX message from a plain object. Also converts values to their respective internal types.
       * @param object Plain object
       * @returns PAT2TBridgeX
       */
      public static fromObject(object: {
        [k: string]: any
      }): sprout.aixcourse.PAT2TBridgeX

      /**
       * Creates a plain object from a PAT2TBridgeX message. Also converts values to other types if specified.
       * @param message PAT2TBridgeX
       * @param [options] Conversion options
       * @returns Plain object
       */
      public static toObject(
        message: sprout.aixcourse.PAT2TBridgeX,
        options?: $protobuf.IConversionOptions,
      ): { [k: string]: any }

      /**
       * Converts this PAT2TBridgeX to JSON.
       * @returns JSON object
       */
      public toJSON(): { [k: string]: any }
    }

    /** Properties of a AT2PPassBy. */
    interface IAT2PPassBy {
      /** AT2PPassBy choices */
      choices?: sprout.aixcourse.IAnimationChoice[] | null

      /** AT2PPassBy audioId */
      audioId?: string | null

      /** AT2PPassBy texts */
      texts?: string[] | null
    }

    /** Represents a AT2PPassBy. */
    class AT2PPassBy implements IAT2PPassBy {
      /**
       * Constructs a new AT2PPassBy.
       * @param [properties] Properties to set
       */
      constructor(properties?: sprout.aixcourse.IAT2PPassBy)

      /** AT2PPassBy choices. */
      public choices: sprout.aixcourse.IAnimationChoice[]

      /** AT2PPassBy audioId. */
      public audioId: string

      /** AT2PPassBy texts. */
      public texts: string[]

      /**
       * Creates a new AT2PPassBy instance using the specified properties.
       * @param [properties] Properties to set
       * @returns AT2PPassBy instance
       */
      public static create(
        properties?: sprout.aixcourse.IAT2PPassBy,
      ): sprout.aixcourse.AT2PPassBy

      /**
       * Encodes the specified AT2PPassBy message. Does not implicitly {@link sprout.aixcourse.AT2PPassBy.verify|verify} messages.
       * @param message AT2PPassBy message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encode(
        message: sprout.aixcourse.IAT2PPassBy,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Encodes the specified AT2PPassBy message, length delimited. Does not implicitly {@link sprout.aixcourse.AT2PPassBy.verify|verify} messages.
       * @param message AT2PPassBy message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encodeDelimited(
        message: sprout.aixcourse.IAT2PPassBy,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Decodes a AT2PPassBy message from the specified reader or buffer.
       * @param reader Reader or buffer to decode from
       * @param [length] Message length if known beforehand
       * @returns AT2PPassBy
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decode(
        reader: $protobuf.Reader | Uint8Array,
        length?: number,
      ): sprout.aixcourse.AT2PPassBy

      /**
       * Decodes a AT2PPassBy message from the specified reader or buffer, length delimited.
       * @param reader Reader or buffer to decode from
       * @returns AT2PPassBy
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decodeDelimited(
        reader: $protobuf.Reader | Uint8Array,
      ): sprout.aixcourse.AT2PPassBy

      /**
       * Verifies a AT2PPassBy message.
       * @param message Plain object to verify
       * @returns `null` if valid, otherwise the reason why it is not
       */
      public static verify(message: { [k: string]: any }): string | null

      /**
       * Creates a AT2PPassBy message from a plain object. Also converts values to their respective internal types.
       * @param object Plain object
       * @returns AT2PPassBy
       */
      public static fromObject(object: {
        [k: string]: any
      }): sprout.aixcourse.AT2PPassBy

      /**
       * Creates a plain object from a AT2PPassBy message. Also converts values to other types if specified.
       * @param message AT2PPassBy
       * @param [options] Conversion options
       * @returns Plain object
       */
      public static toObject(
        message: sprout.aixcourse.AT2PPassBy,
        options?: $protobuf.IConversionOptions,
      ): { [k: string]: any }

      /**
       * Converts this AT2PPassBy to JSON.
       * @returns JSON object
       */
      public toJSON(): { [k: string]: any }
    }

    /** Properties of a AT2PPassByX. */
    interface IAT2PPassByX {
      /** AT2PPassByX at2pPassBy */
      at2pPassBy?: sprout.aixcourse.IAT2PPassBy | null
    }

    /** Represents a AT2PPassByX. */
    class AT2PPassByX implements IAT2PPassByX {
      /**
       * Constructs a new AT2PPassByX.
       * @param [properties] Properties to set
       */
      constructor(properties?: sprout.aixcourse.IAT2PPassByX)

      /** AT2PPassByX at2pPassBy. */
      public at2pPassBy?: sprout.aixcourse.IAT2PPassBy | null

      /**
       * Creates a new AT2PPassByX instance using the specified properties.
       * @param [properties] Properties to set
       * @returns AT2PPassByX instance
       */
      public static create(
        properties?: sprout.aixcourse.IAT2PPassByX,
      ): sprout.aixcourse.AT2PPassByX

      /**
       * Encodes the specified AT2PPassByX message. Does not implicitly {@link sprout.aixcourse.AT2PPassByX.verify|verify} messages.
       * @param message AT2PPassByX message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encode(
        message: sprout.aixcourse.IAT2PPassByX,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Encodes the specified AT2PPassByX message, length delimited. Does not implicitly {@link sprout.aixcourse.AT2PPassByX.verify|verify} messages.
       * @param message AT2PPassByX message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encodeDelimited(
        message: sprout.aixcourse.IAT2PPassByX,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Decodes a AT2PPassByX message from the specified reader or buffer.
       * @param reader Reader or buffer to decode from
       * @param [length] Message length if known beforehand
       * @returns AT2PPassByX
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decode(
        reader: $protobuf.Reader | Uint8Array,
        length?: number,
      ): sprout.aixcourse.AT2PPassByX

      /**
       * Decodes a AT2PPassByX message from the specified reader or buffer, length delimited.
       * @param reader Reader or buffer to decode from
       * @returns AT2PPassByX
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decodeDelimited(
        reader: $protobuf.Reader | Uint8Array,
      ): sprout.aixcourse.AT2PPassByX

      /**
       * Verifies a AT2PPassByX message.
       * @param message Plain object to verify
       * @returns `null` if valid, otherwise the reason why it is not
       */
      public static verify(message: { [k: string]: any }): string | null

      /**
       * Creates a AT2PPassByX message from a plain object. Also converts values to their respective internal types.
       * @param object Plain object
       * @returns AT2PPassByX
       */
      public static fromObject(object: {
        [k: string]: any
      }): sprout.aixcourse.AT2PPassByX

      /**
       * Creates a plain object from a AT2PPassByX message. Also converts values to other types if specified.
       * @param message AT2PPassByX
       * @param [options] Conversion options
       * @returns Plain object
       */
      public static toObject(
        message: sprout.aixcourse.AT2PPassByX,
        options?: $protobuf.IConversionOptions,
      ): { [k: string]: any }

      /**
       * Converts this AT2PPassByX to JSON.
       * @returns JSON object
       */
      public toJSON(): { [k: string]: any }
    }

    /** Properties of an AnimatedPresentation. */
    interface IAnimatedPresentation {
      /** AnimatedPresentation pictures */
      pictures?: sprout.aixcourse.ITaggedCoordinatePicture[] | null
    }

    /** Represents an AnimatedPresentation. */
    class AnimatedPresentation implements IAnimatedPresentation {
      /**
       * Constructs a new AnimatedPresentation.
       * @param [properties] Properties to set
       */
      constructor(properties?: sprout.aixcourse.IAnimatedPresentation)

      /** AnimatedPresentation pictures. */
      public pictures: sprout.aixcourse.ITaggedCoordinatePicture[]

      /**
       * Creates a new AnimatedPresentation instance using the specified properties.
       * @param [properties] Properties to set
       * @returns AnimatedPresentation instance
       */
      public static create(
        properties?: sprout.aixcourse.IAnimatedPresentation,
      ): sprout.aixcourse.AnimatedPresentation

      /**
       * Encodes the specified AnimatedPresentation message. Does not implicitly {@link sprout.aixcourse.AnimatedPresentation.verify|verify} messages.
       * @param message AnimatedPresentation message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encode(
        message: sprout.aixcourse.IAnimatedPresentation,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Encodes the specified AnimatedPresentation message, length delimited. Does not implicitly {@link sprout.aixcourse.AnimatedPresentation.verify|verify} messages.
       * @param message AnimatedPresentation message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encodeDelimited(
        message: sprout.aixcourse.IAnimatedPresentation,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Decodes an AnimatedPresentation message from the specified reader or buffer.
       * @param reader Reader or buffer to decode from
       * @param [length] Message length if known beforehand
       * @returns AnimatedPresentation
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decode(
        reader: $protobuf.Reader | Uint8Array,
        length?: number,
      ): sprout.aixcourse.AnimatedPresentation

      /**
       * Decodes an AnimatedPresentation message from the specified reader or buffer, length delimited.
       * @param reader Reader or buffer to decode from
       * @returns AnimatedPresentation
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decodeDelimited(
        reader: $protobuf.Reader | Uint8Array,
      ): sprout.aixcourse.AnimatedPresentation

      /**
       * Verifies an AnimatedPresentation message.
       * @param message Plain object to verify
       * @returns `null` if valid, otherwise the reason why it is not
       */
      public static verify(message: { [k: string]: any }): string | null

      /**
       * Creates an AnimatedPresentation message from a plain object. Also converts values to their respective internal types.
       * @param object Plain object
       * @returns AnimatedPresentation
       */
      public static fromObject(object: {
        [k: string]: any
      }): sprout.aixcourse.AnimatedPresentation

      /**
       * Creates a plain object from an AnimatedPresentation message. Also converts values to other types if specified.
       * @param message AnimatedPresentation
       * @param [options] Conversion options
       * @returns Plain object
       */
      public static toObject(
        message: sprout.aixcourse.AnimatedPresentation,
        options?: $protobuf.IConversionOptions,
      ): { [k: string]: any }

      /**
       * Converts this AnimatedPresentation to JSON.
       * @returns JSON object
       */
      public toJSON(): { [k: string]: any }
    }

    /** Properties of a PAT2ARepeat. */
    interface IPAT2ARepeat {
      /** PAT2ARepeat audioId */
      audioId?: string | null

      /** PAT2ARepeat pictureId */
      pictureId?: string | null

      /** PAT2ARepeat text */
      text?: string | null
    }

    /** Represents a PAT2ARepeat. */
    class PAT2ARepeat implements IPAT2ARepeat {
      /**
       * Constructs a new PAT2ARepeat.
       * @param [properties] Properties to set
       */
      constructor(properties?: sprout.aixcourse.IPAT2ARepeat)

      /** PAT2ARepeat audioId. */
      public audioId: string

      /** PAT2ARepeat pictureId. */
      public pictureId: string

      /** PAT2ARepeat text. */
      public text: string

      /**
       * Creates a new PAT2ARepeat instance using the specified properties.
       * @param [properties] Properties to set
       * @returns PAT2ARepeat instance
       */
      public static create(
        properties?: sprout.aixcourse.IPAT2ARepeat,
      ): sprout.aixcourse.PAT2ARepeat

      /**
       * Encodes the specified PAT2ARepeat message. Does not implicitly {@link sprout.aixcourse.PAT2ARepeat.verify|verify} messages.
       * @param message PAT2ARepeat message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encode(
        message: sprout.aixcourse.IPAT2ARepeat,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Encodes the specified PAT2ARepeat message, length delimited. Does not implicitly {@link sprout.aixcourse.PAT2ARepeat.verify|verify} messages.
       * @param message PAT2ARepeat message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encodeDelimited(
        message: sprout.aixcourse.IPAT2ARepeat,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Decodes a PAT2ARepeat message from the specified reader or buffer.
       * @param reader Reader or buffer to decode from
       * @param [length] Message length if known beforehand
       * @returns PAT2ARepeat
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decode(
        reader: $protobuf.Reader | Uint8Array,
        length?: number,
      ): sprout.aixcourse.PAT2ARepeat

      /**
       * Decodes a PAT2ARepeat message from the specified reader or buffer, length delimited.
       * @param reader Reader or buffer to decode from
       * @returns PAT2ARepeat
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decodeDelimited(
        reader: $protobuf.Reader | Uint8Array,
      ): sprout.aixcourse.PAT2ARepeat

      /**
       * Verifies a PAT2ARepeat message.
       * @param message Plain object to verify
       * @returns `null` if valid, otherwise the reason why it is not
       */
      public static verify(message: { [k: string]: any }): string | null

      /**
       * Creates a PAT2ARepeat message from a plain object. Also converts values to their respective internal types.
       * @param object Plain object
       * @returns PAT2ARepeat
       */
      public static fromObject(object: {
        [k: string]: any
      }): sprout.aixcourse.PAT2ARepeat

      /**
       * Creates a plain object from a PAT2ARepeat message. Also converts values to other types if specified.
       * @param message PAT2ARepeat
       * @param [options] Conversion options
       * @returns Plain object
       */
      public static toObject(
        message: sprout.aixcourse.PAT2ARepeat,
        options?: $protobuf.IConversionOptions,
      ): { [k: string]: any }

      /**
       * Converts this PAT2ARepeat to JSON.
       * @returns JSON object
       */
      public toJSON(): { [k: string]: any }
    }

    /** Properties of a PAT2ARepeatX. */
    interface IPAT2ARepeatX {
      /** PAT2ARepeatX pat2aRepeat */
      pat2aRepeat?: sprout.aixcourse.IPAT2ARepeat | null
    }

    /** Represents a PAT2ARepeatX. */
    class PAT2ARepeatX implements IPAT2ARepeatX {
      /**
       * Constructs a new PAT2ARepeatX.
       * @param [properties] Properties to set
       */
      constructor(properties?: sprout.aixcourse.IPAT2ARepeatX)

      /** PAT2ARepeatX pat2aRepeat. */
      public pat2aRepeat?: sprout.aixcourse.IPAT2ARepeat | null

      /**
       * Creates a new PAT2ARepeatX instance using the specified properties.
       * @param [properties] Properties to set
       * @returns PAT2ARepeatX instance
       */
      public static create(
        properties?: sprout.aixcourse.IPAT2ARepeatX,
      ): sprout.aixcourse.PAT2ARepeatX

      /**
       * Encodes the specified PAT2ARepeatX message. Does not implicitly {@link sprout.aixcourse.PAT2ARepeatX.verify|verify} messages.
       * @param message PAT2ARepeatX message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encode(
        message: sprout.aixcourse.IPAT2ARepeatX,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Encodes the specified PAT2ARepeatX message, length delimited. Does not implicitly {@link sprout.aixcourse.PAT2ARepeatX.verify|verify} messages.
       * @param message PAT2ARepeatX message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encodeDelimited(
        message: sprout.aixcourse.IPAT2ARepeatX,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Decodes a PAT2ARepeatX message from the specified reader or buffer.
       * @param reader Reader or buffer to decode from
       * @param [length] Message length if known beforehand
       * @returns PAT2ARepeatX
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decode(
        reader: $protobuf.Reader | Uint8Array,
        length?: number,
      ): sprout.aixcourse.PAT2ARepeatX

      /**
       * Decodes a PAT2ARepeatX message from the specified reader or buffer, length delimited.
       * @param reader Reader or buffer to decode from
       * @returns PAT2ARepeatX
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decodeDelimited(
        reader: $protobuf.Reader | Uint8Array,
      ): sprout.aixcourse.PAT2ARepeatX

      /**
       * Verifies a PAT2ARepeatX message.
       * @param message Plain object to verify
       * @returns `null` if valid, otherwise the reason why it is not
       */
      public static verify(message: { [k: string]: any }): string | null

      /**
       * Creates a PAT2ARepeatX message from a plain object. Also converts values to their respective internal types.
       * @param object Plain object
       * @returns PAT2ARepeatX
       */
      public static fromObject(object: {
        [k: string]: any
      }): sprout.aixcourse.PAT2ARepeatX

      /**
       * Creates a plain object from a PAT2ARepeatX message. Also converts values to other types if specified.
       * @param message PAT2ARepeatX
       * @param [options] Conversion options
       * @returns Plain object
       */
      public static toObject(
        message: sprout.aixcourse.PAT2ARepeatX,
        options?: $protobuf.IConversionOptions,
      ): { [k: string]: any }

      /**
       * Converts this PAT2ARepeatX to JSON.
       * @returns JSON object
       */
      public toJSON(): { [k: string]: any }
    }

    /** Properties of a AT2PAdventure. */
    interface IAT2PAdventure {
      /** AT2PAdventure texts */
      texts?: string[] | null

      /** AT2PAdventure choices */
      choices?: darwincourse.IChoice[] | null

      /** AT2PAdventure audioId */
      audioId?: string | null
    }

    /** Represents a AT2PAdventure. */
    class AT2PAdventure implements IAT2PAdventure {
      /**
       * Constructs a new AT2PAdventure.
       * @param [properties] Properties to set
       */
      constructor(properties?: sprout.aixcourse.IAT2PAdventure)

      /** AT2PAdventure texts. */
      public texts: string[]

      /** AT2PAdventure choices. */
      public choices: darwincourse.IChoice[]

      /** AT2PAdventure audioId. */
      public audioId: string

      /**
       * Creates a new AT2PAdventure instance using the specified properties.
       * @param [properties] Properties to set
       * @returns AT2PAdventure instance
       */
      public static create(
        properties?: sprout.aixcourse.IAT2PAdventure,
      ): sprout.aixcourse.AT2PAdventure

      /**
       * Encodes the specified AT2PAdventure message. Does not implicitly {@link sprout.aixcourse.AT2PAdventure.verify|verify} messages.
       * @param message AT2PAdventure message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encode(
        message: sprout.aixcourse.IAT2PAdventure,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Encodes the specified AT2PAdventure message, length delimited. Does not implicitly {@link sprout.aixcourse.AT2PAdventure.verify|verify} messages.
       * @param message AT2PAdventure message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encodeDelimited(
        message: sprout.aixcourse.IAT2PAdventure,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Decodes a AT2PAdventure message from the specified reader or buffer.
       * @param reader Reader or buffer to decode from
       * @param [length] Message length if known beforehand
       * @returns AT2PAdventure
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decode(
        reader: $protobuf.Reader | Uint8Array,
        length?: number,
      ): sprout.aixcourse.AT2PAdventure

      /**
       * Decodes a AT2PAdventure message from the specified reader or buffer, length delimited.
       * @param reader Reader or buffer to decode from
       * @returns AT2PAdventure
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decodeDelimited(
        reader: $protobuf.Reader | Uint8Array,
      ): sprout.aixcourse.AT2PAdventure

      /**
       * Verifies a AT2PAdventure message.
       * @param message Plain object to verify
       * @returns `null` if valid, otherwise the reason why it is not
       */
      public static verify(message: { [k: string]: any }): string | null

      /**
       * Creates a AT2PAdventure message from a plain object. Also converts values to their respective internal types.
       * @param object Plain object
       * @returns AT2PAdventure
       */
      public static fromObject(object: {
        [k: string]: any
      }): sprout.aixcourse.AT2PAdventure

      /**
       * Creates a plain object from a AT2PAdventure message. Also converts values to other types if specified.
       * @param message AT2PAdventure
       * @param [options] Conversion options
       * @returns Plain object
       */
      public static toObject(
        message: sprout.aixcourse.AT2PAdventure,
        options?: $protobuf.IConversionOptions,
      ): { [k: string]: any }

      /**
       * Converts this AT2PAdventure to JSON.
       * @returns JSON object
       */
      public toJSON(): { [k: string]: any }
    }

    /** Properties of a A2PVoteX. */
    interface IA2PVoteX {
      /** A2PVoteX choices */
      choices?: darwincourse.IChoice[] | null
    }

    /** Represents a A2PVoteX. */
    class A2PVoteX implements IA2PVoteX {
      /**
       * Constructs a new A2PVoteX.
       * @param [properties] Properties to set
       */
      constructor(properties?: sprout.aixcourse.IA2PVoteX)

      /** A2PVoteX choices. */
      public choices: darwincourse.IChoice[]

      /**
       * Creates a new A2PVoteX instance using the specified properties.
       * @param [properties] Properties to set
       * @returns A2PVoteX instance
       */
      public static create(
        properties?: sprout.aixcourse.IA2PVoteX,
      ): sprout.aixcourse.A2PVoteX

      /**
       * Encodes the specified A2PVoteX message. Does not implicitly {@link sprout.aixcourse.A2PVoteX.verify|verify} messages.
       * @param message A2PVoteX message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encode(
        message: sprout.aixcourse.IA2PVoteX,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Encodes the specified A2PVoteX message, length delimited. Does not implicitly {@link sprout.aixcourse.A2PVoteX.verify|verify} messages.
       * @param message A2PVoteX message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encodeDelimited(
        message: sprout.aixcourse.IA2PVoteX,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Decodes a A2PVoteX message from the specified reader or buffer.
       * @param reader Reader or buffer to decode from
       * @param [length] Message length if known beforehand
       * @returns A2PVoteX
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decode(
        reader: $protobuf.Reader | Uint8Array,
        length?: number,
      ): sprout.aixcourse.A2PVoteX

      /**
       * Decodes a A2PVoteX message from the specified reader or buffer, length delimited.
       * @param reader Reader or buffer to decode from
       * @returns A2PVoteX
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decodeDelimited(
        reader: $protobuf.Reader | Uint8Array,
      ): sprout.aixcourse.A2PVoteX

      /**
       * Verifies a A2PVoteX message.
       * @param message Plain object to verify
       * @returns `null` if valid, otherwise the reason why it is not
       */
      public static verify(message: { [k: string]: any }): string | null

      /**
       * Creates a A2PVoteX message from a plain object. Also converts values to their respective internal types.
       * @param object Plain object
       * @returns A2PVoteX
       */
      public static fromObject(object: {
        [k: string]: any
      }): sprout.aixcourse.A2PVoteX

      /**
       * Creates a plain object from a A2PVoteX message. Also converts values to other types if specified.
       * @param message A2PVoteX
       * @param [options] Conversion options
       * @returns Plain object
       */
      public static toObject(
        message: sprout.aixcourse.A2PVoteX,
        options?: $protobuf.IConversionOptions,
      ): { [k: string]: any }

      /**
       * Converts this A2PVoteX to JSON.
       * @returns JSON object
       */
      public toJSON(): { [k: string]: any }
    }

    /** Properties of a TextChoice. */
    interface ITextChoice {
      /** TextChoice choice */
      choice?: darwincourse.IChoice | null

      /** TextChoice text */
      text?: string | null
    }

    /** Represents a TextChoice. */
    class TextChoice implements ITextChoice {
      /**
       * Constructs a new TextChoice.
       * @param [properties] Properties to set
       */
      constructor(properties?: sprout.aixcourse.ITextChoice)

      /** TextChoice choice. */
      public choice?: darwincourse.IChoice | null

      /** TextChoice text. */
      public text: string

      /**
       * Creates a new TextChoice instance using the specified properties.
       * @param [properties] Properties to set
       * @returns TextChoice instance
       */
      public static create(
        properties?: sprout.aixcourse.ITextChoice,
      ): sprout.aixcourse.TextChoice

      /**
       * Encodes the specified TextChoice message. Does not implicitly {@link sprout.aixcourse.TextChoice.verify|verify} messages.
       * @param message TextChoice message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encode(
        message: sprout.aixcourse.ITextChoice,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Encodes the specified TextChoice message, length delimited. Does not implicitly {@link sprout.aixcourse.TextChoice.verify|verify} messages.
       * @param message TextChoice message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encodeDelimited(
        message: sprout.aixcourse.ITextChoice,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Decodes a TextChoice message from the specified reader or buffer.
       * @param reader Reader or buffer to decode from
       * @param [length] Message length if known beforehand
       * @returns TextChoice
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decode(
        reader: $protobuf.Reader | Uint8Array,
        length?: number,
      ): sprout.aixcourse.TextChoice

      /**
       * Decodes a TextChoice message from the specified reader or buffer, length delimited.
       * @param reader Reader or buffer to decode from
       * @returns TextChoice
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decodeDelimited(
        reader: $protobuf.Reader | Uint8Array,
      ): sprout.aixcourse.TextChoice

      /**
       * Verifies a TextChoice message.
       * @param message Plain object to verify
       * @returns `null` if valid, otherwise the reason why it is not
       */
      public static verify(message: { [k: string]: any }): string | null

      /**
       * Creates a TextChoice message from a plain object. Also converts values to their respective internal types.
       * @param object Plain object
       * @returns TextChoice
       */
      public static fromObject(object: {
        [k: string]: any
      }): sprout.aixcourse.TextChoice

      /**
       * Creates a plain object from a TextChoice message. Also converts values to other types if specified.
       * @param message TextChoice
       * @param [options] Conversion options
       * @returns Plain object
       */
      public static toObject(
        message: sprout.aixcourse.TextChoice,
        options?: $protobuf.IConversionOptions,
      ): { [k: string]: any }

      /**
       * Converts this TextChoice to JSON.
       * @returns JSON object
       */
      public toJSON(): { [k: string]: any }
    }

    /** Properties of a PA2AVoteX. */
    interface IPA2AVoteX {
      /** PA2AVoteX choices */
      choices?: sprout.aixcourse.ITextChoice[] | null

      /** PA2AVoteX audioId */
      audioId?: string | null
    }

    /** Represents a PA2AVoteX. */
    class PA2AVoteX implements IPA2AVoteX {
      /**
       * Constructs a new PA2AVoteX.
       * @param [properties] Properties to set
       */
      constructor(properties?: sprout.aixcourse.IPA2AVoteX)

      /** PA2AVoteX choices. */
      public choices: sprout.aixcourse.ITextChoice[]

      /** PA2AVoteX audioId. */
      public audioId: string

      /**
       * Creates a new PA2AVoteX instance using the specified properties.
       * @param [properties] Properties to set
       * @returns PA2AVoteX instance
       */
      public static create(
        properties?: sprout.aixcourse.IPA2AVoteX,
      ): sprout.aixcourse.PA2AVoteX

      /**
       * Encodes the specified PA2AVoteX message. Does not implicitly {@link sprout.aixcourse.PA2AVoteX.verify|verify} messages.
       * @param message PA2AVoteX message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encode(
        message: sprout.aixcourse.IPA2AVoteX,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Encodes the specified PA2AVoteX message, length delimited. Does not implicitly {@link sprout.aixcourse.PA2AVoteX.verify|verify} messages.
       * @param message PA2AVoteX message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encodeDelimited(
        message: sprout.aixcourse.IPA2AVoteX,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Decodes a PA2AVoteX message from the specified reader or buffer.
       * @param reader Reader or buffer to decode from
       * @param [length] Message length if known beforehand
       * @returns PA2AVoteX
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decode(
        reader: $protobuf.Reader | Uint8Array,
        length?: number,
      ): sprout.aixcourse.PA2AVoteX

      /**
       * Decodes a PA2AVoteX message from the specified reader or buffer, length delimited.
       * @param reader Reader or buffer to decode from
       * @returns PA2AVoteX
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decodeDelimited(
        reader: $protobuf.Reader | Uint8Array,
      ): sprout.aixcourse.PA2AVoteX

      /**
       * Verifies a PA2AVoteX message.
       * @param message Plain object to verify
       * @returns `null` if valid, otherwise the reason why it is not
       */
      public static verify(message: { [k: string]: any }): string | null

      /**
       * Creates a PA2AVoteX message from a plain object. Also converts values to their respective internal types.
       * @param object Plain object
       * @returns PA2AVoteX
       */
      public static fromObject(object: {
        [k: string]: any
      }): sprout.aixcourse.PA2AVoteX

      /**
       * Creates a plain object from a PA2AVoteX message. Also converts values to other types if specified.
       * @param message PA2AVoteX
       * @param [options] Conversion options
       * @returns Plain object
       */
      public static toObject(
        message: sprout.aixcourse.PA2AVoteX,
        options?: $protobuf.IConversionOptions,
      ): { [k: string]: any }

      /**
       * Converts this PA2AVoteX to JSON.
       * @returns JSON object
       */
      public toJSON(): { [k: string]: any }
    }

    /** Properties of a A2ARecordFreeX. */
    interface IA2ARecordFreeX {
      /** A2ARecordFreeX audioId */
      audioId?: string | null

      /** A2ARecordFreeX videoId */
      videoId?: string | null
    }

    /** Represents a A2ARecordFreeX. */
    class A2ARecordFreeX implements IA2ARecordFreeX {
      /**
       * Constructs a new A2ARecordFreeX.
       * @param [properties] Properties to set
       */
      constructor(properties?: sprout.aixcourse.IA2ARecordFreeX)

      /** A2ARecordFreeX audioId. */
      public audioId: string

      /** A2ARecordFreeX videoId. */
      public videoId: string

      /**
       * Creates a new A2ARecordFreeX instance using the specified properties.
       * @param [properties] Properties to set
       * @returns A2ARecordFreeX instance
       */
      public static create(
        properties?: sprout.aixcourse.IA2ARecordFreeX,
      ): sprout.aixcourse.A2ARecordFreeX

      /**
       * Encodes the specified A2ARecordFreeX message. Does not implicitly {@link sprout.aixcourse.A2ARecordFreeX.verify|verify} messages.
       * @param message A2ARecordFreeX message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encode(
        message: sprout.aixcourse.IA2ARecordFreeX,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Encodes the specified A2ARecordFreeX message, length delimited. Does not implicitly {@link sprout.aixcourse.A2ARecordFreeX.verify|verify} messages.
       * @param message A2ARecordFreeX message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encodeDelimited(
        message: sprout.aixcourse.IA2ARecordFreeX,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Decodes a A2ARecordFreeX message from the specified reader or buffer.
       * @param reader Reader or buffer to decode from
       * @param [length] Message length if known beforehand
       * @returns A2ARecordFreeX
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decode(
        reader: $protobuf.Reader | Uint8Array,
        length?: number,
      ): sprout.aixcourse.A2ARecordFreeX

      /**
       * Decodes a A2ARecordFreeX message from the specified reader or buffer, length delimited.
       * @param reader Reader or buffer to decode from
       * @returns A2ARecordFreeX
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decodeDelimited(
        reader: $protobuf.Reader | Uint8Array,
      ): sprout.aixcourse.A2ARecordFreeX

      /**
       * Verifies a A2ARecordFreeX message.
       * @param message Plain object to verify
       * @returns `null` if valid, otherwise the reason why it is not
       */
      public static verify(message: { [k: string]: any }): string | null

      /**
       * Creates a A2ARecordFreeX message from a plain object. Also converts values to their respective internal types.
       * @param object Plain object
       * @returns A2ARecordFreeX
       */
      public static fromObject(object: {
        [k: string]: any
      }): sprout.aixcourse.A2ARecordFreeX

      /**
       * Creates a plain object from a A2ARecordFreeX message. Also converts values to other types if specified.
       * @param message A2ARecordFreeX
       * @param [options] Conversion options
       * @returns Plain object
       */
      public static toObject(
        message: sprout.aixcourse.A2ARecordFreeX,
        options?: $protobuf.IConversionOptions,
      ): { [k: string]: any }

      /**
       * Converts this A2ARecordFreeX to JSON.
       * @returns JSON object
       */
      public toJSON(): { [k: string]: any }
    }

    /** Properties of a PA2ARolePlayX. */
    interface IPA2ARolePlayX {
      /** PA2ARolePlayX pa2aRolePlay */
      pa2aRolePlay?: sprout.aixcourse.IPA2ARolePlay | null
    }

    /** Represents a PA2ARolePlayX. */
    class PA2ARolePlayX implements IPA2ARolePlayX {
      /**
       * Constructs a new PA2ARolePlayX.
       * @param [properties] Properties to set
       */
      constructor(properties?: sprout.aixcourse.IPA2ARolePlayX)

      /** PA2ARolePlayX pa2aRolePlay. */
      public pa2aRolePlay?: sprout.aixcourse.IPA2ARolePlay | null

      /**
       * Creates a new PA2ARolePlayX instance using the specified properties.
       * @param [properties] Properties to set
       * @returns PA2ARolePlayX instance
       */
      public static create(
        properties?: sprout.aixcourse.IPA2ARolePlayX,
      ): sprout.aixcourse.PA2ARolePlayX

      /**
       * Encodes the specified PA2ARolePlayX message. Does not implicitly {@link sprout.aixcourse.PA2ARolePlayX.verify|verify} messages.
       * @param message PA2ARolePlayX message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encode(
        message: sprout.aixcourse.IPA2ARolePlayX,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Encodes the specified PA2ARolePlayX message, length delimited. Does not implicitly {@link sprout.aixcourse.PA2ARolePlayX.verify|verify} messages.
       * @param message PA2ARolePlayX message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encodeDelimited(
        message: sprout.aixcourse.IPA2ARolePlayX,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Decodes a PA2ARolePlayX message from the specified reader or buffer.
       * @param reader Reader or buffer to decode from
       * @param [length] Message length if known beforehand
       * @returns PA2ARolePlayX
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decode(
        reader: $protobuf.Reader | Uint8Array,
        length?: number,
      ): sprout.aixcourse.PA2ARolePlayX

      /**
       * Decodes a PA2ARolePlayX message from the specified reader or buffer, length delimited.
       * @param reader Reader or buffer to decode from
       * @returns PA2ARolePlayX
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decodeDelimited(
        reader: $protobuf.Reader | Uint8Array,
      ): sprout.aixcourse.PA2ARolePlayX

      /**
       * Verifies a PA2ARolePlayX message.
       * @param message Plain object to verify
       * @returns `null` if valid, otherwise the reason why it is not
       */
      public static verify(message: { [k: string]: any }): string | null

      /**
       * Creates a PA2ARolePlayX message from a plain object. Also converts values to their respective internal types.
       * @param object Plain object
       * @returns PA2ARolePlayX
       */
      public static fromObject(object: {
        [k: string]: any
      }): sprout.aixcourse.PA2ARolePlayX

      /**
       * Creates a plain object from a PA2ARolePlayX message. Also converts values to other types if specified.
       * @param message PA2ARolePlayX
       * @param [options] Conversion options
       * @returns Plain object
       */
      public static toObject(
        message: sprout.aixcourse.PA2ARolePlayX,
        options?: $protobuf.IConversionOptions,
      ): { [k: string]: any }

      /**
       * Converts this PA2ARolePlayX to JSON.
       * @returns JSON object
       */
      public toJSON(): { [k: string]: any }
    }

    /** Properties of a A2PFreeX. */
    interface IA2PFreeX {
      /** A2PFreeX a2pFree */
      a2pFree?: sprout.aixcourse.IA2PFree | null
    }

    /** Represents a A2PFreeX. */
    class A2PFreeX implements IA2PFreeX {
      /**
       * Constructs a new A2PFreeX.
       * @param [properties] Properties to set
       */
      constructor(properties?: sprout.aixcourse.IA2PFreeX)

      /** A2PFreeX a2pFree. */
      public a2pFree?: sprout.aixcourse.IA2PFree | null

      /**
       * Creates a new A2PFreeX instance using the specified properties.
       * @param [properties] Properties to set
       * @returns A2PFreeX instance
       */
      public static create(
        properties?: sprout.aixcourse.IA2PFreeX,
      ): sprout.aixcourse.A2PFreeX

      /**
       * Encodes the specified A2PFreeX message. Does not implicitly {@link sprout.aixcourse.A2PFreeX.verify|verify} messages.
       * @param message A2PFreeX message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encode(
        message: sprout.aixcourse.IA2PFreeX,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Encodes the specified A2PFreeX message, length delimited. Does not implicitly {@link sprout.aixcourse.A2PFreeX.verify|verify} messages.
       * @param message A2PFreeX message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encodeDelimited(
        message: sprout.aixcourse.IA2PFreeX,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Decodes a A2PFreeX message from the specified reader or buffer.
       * @param reader Reader or buffer to decode from
       * @param [length] Message length if known beforehand
       * @returns A2PFreeX
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decode(
        reader: $protobuf.Reader | Uint8Array,
        length?: number,
      ): sprout.aixcourse.A2PFreeX

      /**
       * Decodes a A2PFreeX message from the specified reader or buffer, length delimited.
       * @param reader Reader or buffer to decode from
       * @returns A2PFreeX
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decodeDelimited(
        reader: $protobuf.Reader | Uint8Array,
      ): sprout.aixcourse.A2PFreeX

      /**
       * Verifies a A2PFreeX message.
       * @param message Plain object to verify
       * @returns `null` if valid, otherwise the reason why it is not
       */
      public static verify(message: { [k: string]: any }): string | null

      /**
       * Creates a A2PFreeX message from a plain object. Also converts values to their respective internal types.
       * @param object Plain object
       * @returns A2PFreeX
       */
      public static fromObject(object: {
        [k: string]: any
      }): sprout.aixcourse.A2PFreeX

      /**
       * Creates a plain object from a A2PFreeX message. Also converts values to other types if specified.
       * @param message A2PFreeX
       * @param [options] Conversion options
       * @returns Plain object
       */
      public static toObject(
        message: sprout.aixcourse.A2PFreeX,
        options?: $protobuf.IConversionOptions,
      ): { [k: string]: any }

      /**
       * Converts this A2PFreeX to JSON.
       * @returns JSON object
       */
      public toJSON(): { [k: string]: any }
    }

    /** Properties of a PA2AFreeX. */
    interface IPA2AFreeX {
      /** PA2AFreeX pa2aFree */
      pa2aFree?: sprout.aixcourse.IPA2AFree | null
    }

    /** Represents a PA2AFreeX. */
    class PA2AFreeX implements IPA2AFreeX {
      /**
       * Constructs a new PA2AFreeX.
       * @param [properties] Properties to set
       */
      constructor(properties?: sprout.aixcourse.IPA2AFreeX)

      /** PA2AFreeX pa2aFree. */
      public pa2aFree?: sprout.aixcourse.IPA2AFree | null

      /**
       * Creates a new PA2AFreeX instance using the specified properties.
       * @param [properties] Properties to set
       * @returns PA2AFreeX instance
       */
      public static create(
        properties?: sprout.aixcourse.IPA2AFreeX,
      ): sprout.aixcourse.PA2AFreeX

      /**
       * Encodes the specified PA2AFreeX message. Does not implicitly {@link sprout.aixcourse.PA2AFreeX.verify|verify} messages.
       * @param message PA2AFreeX message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encode(
        message: sprout.aixcourse.IPA2AFreeX,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Encodes the specified PA2AFreeX message, length delimited. Does not implicitly {@link sprout.aixcourse.PA2AFreeX.verify|verify} messages.
       * @param message PA2AFreeX message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encodeDelimited(
        message: sprout.aixcourse.IPA2AFreeX,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Decodes a PA2AFreeX message from the specified reader or buffer.
       * @param reader Reader or buffer to decode from
       * @param [length] Message length if known beforehand
       * @returns PA2AFreeX
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decode(
        reader: $protobuf.Reader | Uint8Array,
        length?: number,
      ): sprout.aixcourse.PA2AFreeX

      /**
       * Decodes a PA2AFreeX message from the specified reader or buffer, length delimited.
       * @param reader Reader or buffer to decode from
       * @returns PA2AFreeX
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decodeDelimited(
        reader: $protobuf.Reader | Uint8Array,
      ): sprout.aixcourse.PA2AFreeX

      /**
       * Verifies a PA2AFreeX message.
       * @param message Plain object to verify
       * @returns `null` if valid, otherwise the reason why it is not
       */
      public static verify(message: { [k: string]: any }): string | null

      /**
       * Creates a PA2AFreeX message from a plain object. Also converts values to their respective internal types.
       * @param object Plain object
       * @returns PA2AFreeX
       */
      public static fromObject(object: {
        [k: string]: any
      }): sprout.aixcourse.PA2AFreeX

      /**
       * Creates a plain object from a PA2AFreeX message. Also converts values to other types if specified.
       * @param message PA2AFreeX
       * @param [options] Conversion options
       * @returns Plain object
       */
      public static toObject(
        message: sprout.aixcourse.PA2AFreeX,
        options?: $protobuf.IConversionOptions,
      ): { [k: string]: any }

      /**
       * Converts this PA2AFreeX to JSON.
       * @returns JSON object
       */
      public toJSON(): { [k: string]: any }
    }

    /** Properties of a SegmentType. */
    interface ISegmentType {}

    /** Represents a SegmentType. */
    class SegmentType implements ISegmentType {
      /**
       * Constructs a new SegmentType.
       * @param [properties] Properties to set
       */
      constructor(properties?: sprout.aixcourse.ISegmentType)

      /**
       * Creates a new SegmentType instance using the specified properties.
       * @param [properties] Properties to set
       * @returns SegmentType instance
       */
      public static create(
        properties?: sprout.aixcourse.ISegmentType,
      ): sprout.aixcourse.SegmentType

      /**
       * Encodes the specified SegmentType message. Does not implicitly {@link sprout.aixcourse.SegmentType.verify|verify} messages.
       * @param message SegmentType message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encode(
        message: sprout.aixcourse.ISegmentType,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Encodes the specified SegmentType message, length delimited. Does not implicitly {@link sprout.aixcourse.SegmentType.verify|verify} messages.
       * @param message SegmentType message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encodeDelimited(
        message: sprout.aixcourse.ISegmentType,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Decodes a SegmentType message from the specified reader or buffer.
       * @param reader Reader or buffer to decode from
       * @param [length] Message length if known beforehand
       * @returns SegmentType
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decode(
        reader: $protobuf.Reader | Uint8Array,
        length?: number,
      ): sprout.aixcourse.SegmentType

      /**
       * Decodes a SegmentType message from the specified reader or buffer, length delimited.
       * @param reader Reader or buffer to decode from
       * @returns SegmentType
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decodeDelimited(
        reader: $protobuf.Reader | Uint8Array,
      ): sprout.aixcourse.SegmentType

      /**
       * Verifies a SegmentType message.
       * @param message Plain object to verify
       * @returns `null` if valid, otherwise the reason why it is not
       */
      public static verify(message: { [k: string]: any }): string | null

      /**
       * Creates a SegmentType message from a plain object. Also converts values to their respective internal types.
       * @param object Plain object
       * @returns SegmentType
       */
      public static fromObject(object: {
        [k: string]: any
      }): sprout.aixcourse.SegmentType

      /**
       * Creates a plain object from a SegmentType message. Also converts values to other types if specified.
       * @param message SegmentType
       * @param [options] Conversion options
       * @returns Plain object
       */
      public static toObject(
        message: sprout.aixcourse.SegmentType,
        options?: $protobuf.IConversionOptions,
      ): { [k: string]: any }

      /**
       * Converts this SegmentType to JSON.
       * @returns JSON object
       */
      public toJSON(): { [k: string]: any }
    }

    namespace SegmentType {
      /** Enum enum. */
      enum Enum {
        UNKNOWN = 0,
        OPENING = 1,
        LISTENING_ACTIVITY = 2,
        REPEATING = 3,
        LISTENING_GAME = 4,
        POWER_STATION = 5,
        TPR = 6,
        SPEAKING_GAME = 7,
        AWARD = 8,
        EXCHANGE = 9,
        WRITING_ACTIVITY = 10,
        SPEAKING_ACTIVITY = 11,
        READING_ACTIVITY = 12,
        WRITING_GAME = 13,
        READING_GAME = 14,
        LISTENING_REPETITION = 15,
        READING_REPETITION = 16,
        WRITING_REPETITION = 17,
      }
    }

    /** Properties of an AixVideoLayout. */
    interface IAixVideoLayout {}

    /** Represents an AixVideoLayout. */
    class AixVideoLayout implements IAixVideoLayout {
      /**
       * Constructs a new AixVideoLayout.
       * @param [properties] Properties to set
       */
      constructor(properties?: sprout.aixcourse.IAixVideoLayout)

      /**
       * Creates a new AixVideoLayout instance using the specified properties.
       * @param [properties] Properties to set
       * @returns AixVideoLayout instance
       */
      public static create(
        properties?: sprout.aixcourse.IAixVideoLayout,
      ): sprout.aixcourse.AixVideoLayout

      /**
       * Encodes the specified AixVideoLayout message. Does not implicitly {@link sprout.aixcourse.AixVideoLayout.verify|verify} messages.
       * @param message AixVideoLayout message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encode(
        message: sprout.aixcourse.IAixVideoLayout,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Encodes the specified AixVideoLayout message, length delimited. Does not implicitly {@link sprout.aixcourse.AixVideoLayout.verify|verify} messages.
       * @param message AixVideoLayout message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encodeDelimited(
        message: sprout.aixcourse.IAixVideoLayout,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Decodes an AixVideoLayout message from the specified reader or buffer.
       * @param reader Reader or buffer to decode from
       * @param [length] Message length if known beforehand
       * @returns AixVideoLayout
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decode(
        reader: $protobuf.Reader | Uint8Array,
        length?: number,
      ): sprout.aixcourse.AixVideoLayout

      /**
       * Decodes an AixVideoLayout message from the specified reader or buffer, length delimited.
       * @param reader Reader or buffer to decode from
       * @returns AixVideoLayout
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decodeDelimited(
        reader: $protobuf.Reader | Uint8Array,
      ): sprout.aixcourse.AixVideoLayout

      /**
       * Verifies an AixVideoLayout message.
       * @param message Plain object to verify
       * @returns `null` if valid, otherwise the reason why it is not
       */
      public static verify(message: { [k: string]: any }): string | null

      /**
       * Creates an AixVideoLayout message from a plain object. Also converts values to their respective internal types.
       * @param object Plain object
       * @returns AixVideoLayout
       */
      public static fromObject(object: {
        [k: string]: any
      }): sprout.aixcourse.AixVideoLayout

      /**
       * Creates a plain object from an AixVideoLayout message. Also converts values to other types if specified.
       * @param message AixVideoLayout
       * @param [options] Conversion options
       * @returns Plain object
       */
      public static toObject(
        message: sprout.aixcourse.AixVideoLayout,
        options?: $protobuf.IConversionOptions,
      ): { [k: string]: any }

      /**
       * Converts this AixVideoLayout to JSON.
       * @returns JSON object
       */
      public toJSON(): { [k: string]: any }
    }

    namespace AixVideoLayout {
      /** Enum enum. */
      enum Enum {
        UNKNOWN = 0,
        REGULAR = 1,
        EMPHASIZE = 2,
      }
    }

    /** Properties of a DifficultyType. */
    interface IDifficultyType {}

    /** Represents a DifficultyType. */
    class DifficultyType implements IDifficultyType {
      /**
       * Constructs a new DifficultyType.
       * @param [properties] Properties to set
       */
      constructor(properties?: sprout.aixcourse.IDifficultyType)

      /**
       * Creates a new DifficultyType instance using the specified properties.
       * @param [properties] Properties to set
       * @returns DifficultyType instance
       */
      public static create(
        properties?: sprout.aixcourse.IDifficultyType,
      ): sprout.aixcourse.DifficultyType

      /**
       * Encodes the specified DifficultyType message. Does not implicitly {@link sprout.aixcourse.DifficultyType.verify|verify} messages.
       * @param message DifficultyType message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encode(
        message: sprout.aixcourse.IDifficultyType,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Encodes the specified DifficultyType message, length delimited. Does not implicitly {@link sprout.aixcourse.DifficultyType.verify|verify} messages.
       * @param message DifficultyType message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encodeDelimited(
        message: sprout.aixcourse.IDifficultyType,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Decodes a DifficultyType message from the specified reader or buffer.
       * @param reader Reader or buffer to decode from
       * @param [length] Message length if known beforehand
       * @returns DifficultyType
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decode(
        reader: $protobuf.Reader | Uint8Array,
        length?: number,
      ): sprout.aixcourse.DifficultyType

      /**
       * Decodes a DifficultyType message from the specified reader or buffer, length delimited.
       * @param reader Reader or buffer to decode from
       * @returns DifficultyType
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decodeDelimited(
        reader: $protobuf.Reader | Uint8Array,
      ): sprout.aixcourse.DifficultyType

      /**
       * Verifies a DifficultyType message.
       * @param message Plain object to verify
       * @returns `null` if valid, otherwise the reason why it is not
       */
      public static verify(message: { [k: string]: any }): string | null

      /**
       * Creates a DifficultyType message from a plain object. Also converts values to their respective internal types.
       * @param object Plain object
       * @returns DifficultyType
       */
      public static fromObject(object: {
        [k: string]: any
      }): sprout.aixcourse.DifficultyType

      /**
       * Creates a plain object from a DifficultyType message. Also converts values to other types if specified.
       * @param message DifficultyType
       * @param [options] Conversion options
       * @returns Plain object
       */
      public static toObject(
        message: sprout.aixcourse.DifficultyType,
        options?: $protobuf.IConversionOptions,
      ): { [k: string]: any }

      /**
       * Converts this DifficultyType to JSON.
       * @returns JSON object
       */
      public toJSON(): { [k: string]: any }
    }

    namespace DifficultyType {
      /** Enum enum. */
      enum Enum {
        UNKNOWN = 0,
        EASY = 1,
        NORMAL = 2,
        HARD = 3,
      }
    }

    /** Properties of a GradeType. */
    interface IGradeType {}

    /** Represents a GradeType. */
    class GradeType implements IGradeType {
      /**
       * Constructs a new GradeType.
       * @param [properties] Properties to set
       */
      constructor(properties?: sprout.aixcourse.IGradeType)

      /**
       * Creates a new GradeType instance using the specified properties.
       * @param [properties] Properties to set
       * @returns GradeType instance
       */
      public static create(
        properties?: sprout.aixcourse.IGradeType,
      ): sprout.aixcourse.GradeType

      /**
       * Encodes the specified GradeType message. Does not implicitly {@link sprout.aixcourse.GradeType.verify|verify} messages.
       * @param message GradeType message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encode(
        message: sprout.aixcourse.IGradeType,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Encodes the specified GradeType message, length delimited. Does not implicitly {@link sprout.aixcourse.GradeType.verify|verify} messages.
       * @param message GradeType message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encodeDelimited(
        message: sprout.aixcourse.IGradeType,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Decodes a GradeType message from the specified reader or buffer.
       * @param reader Reader or buffer to decode from
       * @param [length] Message length if known beforehand
       * @returns GradeType
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decode(
        reader: $protobuf.Reader | Uint8Array,
        length?: number,
      ): sprout.aixcourse.GradeType

      /**
       * Decodes a GradeType message from the specified reader or buffer, length delimited.
       * @param reader Reader or buffer to decode from
       * @returns GradeType
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decodeDelimited(
        reader: $protobuf.Reader | Uint8Array,
      ): sprout.aixcourse.GradeType

      /**
       * Verifies a GradeType message.
       * @param message Plain object to verify
       * @returns `null` if valid, otherwise the reason why it is not
       */
      public static verify(message: { [k: string]: any }): string | null

      /**
       * Creates a GradeType message from a plain object. Also converts values to their respective internal types.
       * @param object Plain object
       * @returns GradeType
       */
      public static fromObject(object: {
        [k: string]: any
      }): sprout.aixcourse.GradeType

      /**
       * Creates a plain object from a GradeType message. Also converts values to other types if specified.
       * @param message GradeType
       * @param [options] Conversion options
       * @returns Plain object
       */
      public static toObject(
        message: sprout.aixcourse.GradeType,
        options?: $protobuf.IConversionOptions,
      ): { [k: string]: any }

      /**
       * Converts this GradeType to JSON.
       * @returns JSON object
       */
      public toJSON(): { [k: string]: any }
    }

    namespace GradeType {
      /** Enum enum. */
      enum Enum {
        UNKNOWN = 0,
        GOOD = 1,
        OK = 2,
        BAD = 3,
      }
    }

    /** Properties of a ClassThemeType. */
    interface IClassThemeType {}

    /** Represents a ClassThemeType. */
    class ClassThemeType implements IClassThemeType {
      /**
       * Constructs a new ClassThemeType.
       * @param [properties] Properties to set
       */
      constructor(properties?: sprout.aixcourse.IClassThemeType)

      /**
       * Creates a new ClassThemeType instance using the specified properties.
       * @param [properties] Properties to set
       * @returns ClassThemeType instance
       */
      public static create(
        properties?: sprout.aixcourse.IClassThemeType,
      ): sprout.aixcourse.ClassThemeType

      /**
       * Encodes the specified ClassThemeType message. Does not implicitly {@link sprout.aixcourse.ClassThemeType.verify|verify} messages.
       * @param message ClassThemeType message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encode(
        message: sprout.aixcourse.IClassThemeType,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Encodes the specified ClassThemeType message, length delimited. Does not implicitly {@link sprout.aixcourse.ClassThemeType.verify|verify} messages.
       * @param message ClassThemeType message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encodeDelimited(
        message: sprout.aixcourse.IClassThemeType,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Decodes a ClassThemeType message from the specified reader or buffer.
       * @param reader Reader or buffer to decode from
       * @param [length] Message length if known beforehand
       * @returns ClassThemeType
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decode(
        reader: $protobuf.Reader | Uint8Array,
        length?: number,
      ): sprout.aixcourse.ClassThemeType

      /**
       * Decodes a ClassThemeType message from the specified reader or buffer, length delimited.
       * @param reader Reader or buffer to decode from
       * @returns ClassThemeType
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decodeDelimited(
        reader: $protobuf.Reader | Uint8Array,
      ): sprout.aixcourse.ClassThemeType

      /**
       * Verifies a ClassThemeType message.
       * @param message Plain object to verify
       * @returns `null` if valid, otherwise the reason why it is not
       */
      public static verify(message: { [k: string]: any }): string | null

      /**
       * Creates a ClassThemeType message from a plain object. Also converts values to their respective internal types.
       * @param object Plain object
       * @returns ClassThemeType
       */
      public static fromObject(object: {
        [k: string]: any
      }): sprout.aixcourse.ClassThemeType

      /**
       * Creates a plain object from a ClassThemeType message. Also converts values to other types if specified.
       * @param message ClassThemeType
       * @param [options] Conversion options
       * @returns Plain object
       */
      public static toObject(
        message: sprout.aixcourse.ClassThemeType,
        options?: $protobuf.IConversionOptions,
      ): { [k: string]: any }

      /**
       * Converts this ClassThemeType to JSON.
       * @returns JSON object
       */
      public toJSON(): { [k: string]: any }
    }

    namespace ClassThemeType {
      /** Enum enum. */
      enum Enum {
        UNKNOWN = 0,
        THEME1 = 1,
        THEME2 = 2,
        THEME3 = 3,
        THEME4 = 4,
        THEME5 = 5,
        THEME6 = 6,
      }
    }

    /** Properties of an ActivityGroupPedagogy. */
    interface IActivityGroupPedagogy {}

    /** Represents an ActivityGroupPedagogy. */
    class ActivityGroupPedagogy implements IActivityGroupPedagogy {
      /**
       * Constructs a new ActivityGroupPedagogy.
       * @param [properties] Properties to set
       */
      constructor(properties?: sprout.aixcourse.IActivityGroupPedagogy)

      /**
       * Creates a new ActivityGroupPedagogy instance using the specified properties.
       * @param [properties] Properties to set
       * @returns ActivityGroupPedagogy instance
       */
      public static create(
        properties?: sprout.aixcourse.IActivityGroupPedagogy,
      ): sprout.aixcourse.ActivityGroupPedagogy

      /**
       * Encodes the specified ActivityGroupPedagogy message. Does not implicitly {@link sprout.aixcourse.ActivityGroupPedagogy.verify|verify} messages.
       * @param message ActivityGroupPedagogy message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encode(
        message: sprout.aixcourse.IActivityGroupPedagogy,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Encodes the specified ActivityGroupPedagogy message, length delimited. Does not implicitly {@link sprout.aixcourse.ActivityGroupPedagogy.verify|verify} messages.
       * @param message ActivityGroupPedagogy message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encodeDelimited(
        message: sprout.aixcourse.IActivityGroupPedagogy,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Decodes an ActivityGroupPedagogy message from the specified reader or buffer.
       * @param reader Reader or buffer to decode from
       * @param [length] Message length if known beforehand
       * @returns ActivityGroupPedagogy
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decode(
        reader: $protobuf.Reader | Uint8Array,
        length?: number,
      ): sprout.aixcourse.ActivityGroupPedagogy

      /**
       * Decodes an ActivityGroupPedagogy message from the specified reader or buffer, length delimited.
       * @param reader Reader or buffer to decode from
       * @returns ActivityGroupPedagogy
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decodeDelimited(
        reader: $protobuf.Reader | Uint8Array,
      ): sprout.aixcourse.ActivityGroupPedagogy

      /**
       * Verifies an ActivityGroupPedagogy message.
       * @param message Plain object to verify
       * @returns `null` if valid, otherwise the reason why it is not
       */
      public static verify(message: { [k: string]: any }): string | null

      /**
       * Creates an ActivityGroupPedagogy message from a plain object. Also converts values to their respective internal types.
       * @param object Plain object
       * @returns ActivityGroupPedagogy
       */
      public static fromObject(object: {
        [k: string]: any
      }): sprout.aixcourse.ActivityGroupPedagogy

      /**
       * Creates a plain object from an ActivityGroupPedagogy message. Also converts values to other types if specified.
       * @param message ActivityGroupPedagogy
       * @param [options] Conversion options
       * @returns Plain object
       */
      public static toObject(
        message: sprout.aixcourse.ActivityGroupPedagogy,
        options?: $protobuf.IConversionOptions,
      ): { [k: string]: any }

      /**
       * Converts this ActivityGroupPedagogy to JSON.
       * @returns JSON object
       */
      public toJSON(): { [k: string]: any }
    }

    namespace ActivityGroupPedagogy {
      /** Enum enum. */
      enum Enum {
        UNKNOWN = 0,
        UP_ADAPTIVE = 1,
        DO_AND_SAY = 2,
        SCAFFOLDING = 3,
      }
    }

    /** Properties of an ActivitySkinType. */
    interface IActivitySkinType {}

    /** Represents an ActivitySkinType. */
    class ActivitySkinType implements IActivitySkinType {
      /**
       * Constructs a new ActivitySkinType.
       * @param [properties] Properties to set
       */
      constructor(properties?: sprout.aixcourse.IActivitySkinType)

      /**
       * Creates a new ActivitySkinType instance using the specified properties.
       * @param [properties] Properties to set
       * @returns ActivitySkinType instance
       */
      public static create(
        properties?: sprout.aixcourse.IActivitySkinType,
      ): sprout.aixcourse.ActivitySkinType

      /**
       * Encodes the specified ActivitySkinType message. Does not implicitly {@link sprout.aixcourse.ActivitySkinType.verify|verify} messages.
       * @param message ActivitySkinType message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encode(
        message: sprout.aixcourse.IActivitySkinType,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Encodes the specified ActivitySkinType message, length delimited. Does not implicitly {@link sprout.aixcourse.ActivitySkinType.verify|verify} messages.
       * @param message ActivitySkinType message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encodeDelimited(
        message: sprout.aixcourse.IActivitySkinType,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Decodes an ActivitySkinType message from the specified reader or buffer.
       * @param reader Reader or buffer to decode from
       * @param [length] Message length if known beforehand
       * @returns ActivitySkinType
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decode(
        reader: $protobuf.Reader | Uint8Array,
        length?: number,
      ): sprout.aixcourse.ActivitySkinType

      /**
       * Decodes an ActivitySkinType message from the specified reader or buffer, length delimited.
       * @param reader Reader or buffer to decode from
       * @returns ActivitySkinType
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decodeDelimited(
        reader: $protobuf.Reader | Uint8Array,
      ): sprout.aixcourse.ActivitySkinType

      /**
       * Verifies an ActivitySkinType message.
       * @param message Plain object to verify
       * @returns `null` if valid, otherwise the reason why it is not
       */
      public static verify(message: { [k: string]: any }): string | null

      /**
       * Creates an ActivitySkinType message from a plain object. Also converts values to their respective internal types.
       * @param object Plain object
       * @returns ActivitySkinType
       */
      public static fromObject(object: {
        [k: string]: any
      }): sprout.aixcourse.ActivitySkinType

      /**
       * Creates a plain object from an ActivitySkinType message. Also converts values to other types if specified.
       * @param message ActivitySkinType
       * @param [options] Conversion options
       * @returns Plain object
       */
      public static toObject(
        message: sprout.aixcourse.ActivitySkinType,
        options?: $protobuf.IConversionOptions,
      ): { [k: string]: any }

      /**
       * Converts this ActivitySkinType to JSON.
       * @returns JSON object
       */
      public toJSON(): { [k: string]: any }
    }

    namespace ActivitySkinType {
      /** Enum enum. */
      enum Enum {
        UNKNOWN = 0,
        SKIN1 = 1,
        SKIN2 = 2,
        SKIN3 = 3,
        SKIN4 = 4,
        SKIN5 = 5,
        SKIN6 = 6,
        SKIN7 = 7,
        SKIN8 = 8,
        SKIN9 = 9,
        SKIN10 = 10,
        SKIN11 = 11,
        SKIN12 = 12,
        SKIN13 = 13,
        SKIN14 = 14,
        SKIN15 = 15,
        SKIN16 = 16,
        SKIN17 = 17,
        SKIN18 = 18,
        SKIN19 = 19,
        SKIN20 = 20,
      }
    }

    /** Properties of a AIXActivityAnswer. */
    interface IAIXActivityAnswer {
      /** AIXActivityAnswer startedAtUsec */
      startedAtUsec?: number | Long | null

      /** AIXActivityAnswer finishedAtUsec */
      finishedAtUsec?: number | Long | null

      /** AIXActivityAnswer activityType */
      activityType?: core_course.ActivityType.Enum | null

      /** AIXActivityAnswer activityId */
      activityId?: number | Long | null

      /** AIXActivityAnswer answerInfo */
      answerInfo?: sprout.aixcourse.IAIXActivityAnswerInfo | null

      /** AIXActivityAnswer teacherInteractionActivityAnswer */
      teacherInteractionActivityAnswer?: sprout.aixcourse.ITeacherInteractionGameActivityAnswer | null

      /** AIXActivityAnswer systemInteractionActivityAnswer */
      systemInteractionActivityAnswer?: sprout.aixcourse.ISystemInteractionGameActivityAnswer | null
    }

    /** Represents a AIXActivityAnswer. */
    class AIXActivityAnswer implements IAIXActivityAnswer {
      /**
       * Constructs a new AIXActivityAnswer.
       * @param [properties] Properties to set
       */
      constructor(properties?: sprout.aixcourse.IAIXActivityAnswer)

      /** AIXActivityAnswer startedAtUsec. */
      public startedAtUsec: number | Long

      /** AIXActivityAnswer finishedAtUsec. */
      public finishedAtUsec: number | Long

      /** AIXActivityAnswer activityType. */
      public activityType: core_course.ActivityType.Enum

      /** AIXActivityAnswer activityId. */
      public activityId: number | Long

      /** AIXActivityAnswer answerInfo. */
      public answerInfo?: sprout.aixcourse.IAIXActivityAnswerInfo | null

      /** AIXActivityAnswer teacherInteractionActivityAnswer. */
      public teacherInteractionActivityAnswer?: sprout.aixcourse.ITeacherInteractionGameActivityAnswer | null

      /** AIXActivityAnswer systemInteractionActivityAnswer. */
      public systemInteractionActivityAnswer?: sprout.aixcourse.ISystemInteractionGameActivityAnswer | null

      /** AIXActivityAnswer answerOneof. */
      public answerOneof?:
        | 'teacherInteractionActivityAnswer'
        | 'systemInteractionActivityAnswer'

      /**
       * Creates a new AIXActivityAnswer instance using the specified properties.
       * @param [properties] Properties to set
       * @returns AIXActivityAnswer instance
       */
      public static create(
        properties?: sprout.aixcourse.IAIXActivityAnswer,
      ): sprout.aixcourse.AIXActivityAnswer

      /**
       * Encodes the specified AIXActivityAnswer message. Does not implicitly {@link sprout.aixcourse.AIXActivityAnswer.verify|verify} messages.
       * @param message AIXActivityAnswer message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encode(
        message: sprout.aixcourse.IAIXActivityAnswer,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Encodes the specified AIXActivityAnswer message, length delimited. Does not implicitly {@link sprout.aixcourse.AIXActivityAnswer.verify|verify} messages.
       * @param message AIXActivityAnswer message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encodeDelimited(
        message: sprout.aixcourse.IAIXActivityAnswer,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Decodes a AIXActivityAnswer message from the specified reader or buffer.
       * @param reader Reader or buffer to decode from
       * @param [length] Message length if known beforehand
       * @returns AIXActivityAnswer
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decode(
        reader: $protobuf.Reader | Uint8Array,
        length?: number,
      ): sprout.aixcourse.AIXActivityAnswer

      /**
       * Decodes a AIXActivityAnswer message from the specified reader or buffer, length delimited.
       * @param reader Reader or buffer to decode from
       * @returns AIXActivityAnswer
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decodeDelimited(
        reader: $protobuf.Reader | Uint8Array,
      ): sprout.aixcourse.AIXActivityAnswer

      /**
       * Verifies a AIXActivityAnswer message.
       * @param message Plain object to verify
       * @returns `null` if valid, otherwise the reason why it is not
       */
      public static verify(message: { [k: string]: any }): string | null

      /**
       * Creates a AIXActivityAnswer message from a plain object. Also converts values to their respective internal types.
       * @param object Plain object
       * @returns AIXActivityAnswer
       */
      public static fromObject(object: {
        [k: string]: any
      }): sprout.aixcourse.AIXActivityAnswer

      /**
       * Creates a plain object from a AIXActivityAnswer message. Also converts values to other types if specified.
       * @param message AIXActivityAnswer
       * @param [options] Conversion options
       * @returns Plain object
       */
      public static toObject(
        message: sprout.aixcourse.AIXActivityAnswer,
        options?: $protobuf.IConversionOptions,
      ): { [k: string]: any }

      /**
       * Converts this AIXActivityAnswer to JSON.
       * @returns JSON object
       */
      public toJSON(): { [k: string]: any }
    }

    /** Properties of a AIXActivityAnswerInfo. */
    interface IAIXActivityAnswerInfo {
      /** AIXActivityAnswerInfo aiClassActivityAnswerInfo */
      aiClassActivityAnswerInfo?: sprout.aixcourse.IAIClassActivityAnswerInfo | null

      /** AIXActivityAnswerInfo xClassActivityAnswerInfo */
      xClassActivityAnswerInfo?: sprout.aixcourse.IXClassActivityAnswerInfo | null

      /** AIXActivityAnswerInfo homeworkActivityAnswerInfo */
      homeworkActivityAnswerInfo?: sprout.aixcourse.IHomeworkActivityAnswerInfo | null

      /** AIXActivityAnswerInfo yClassActivityAnswerInfo */
      yClassActivityAnswerInfo?: sprout.aixcourse.IYClassActivityAnswerInfo | null
    }

    /** Represents a AIXActivityAnswerInfo. */
    class AIXActivityAnswerInfo implements IAIXActivityAnswerInfo {
      /**
       * Constructs a new AIXActivityAnswerInfo.
       * @param [properties] Properties to set
       */
      constructor(properties?: sprout.aixcourse.IAIXActivityAnswerInfo)

      /** AIXActivityAnswerInfo aiClassActivityAnswerInfo. */
      public aiClassActivityAnswerInfo?: sprout.aixcourse.IAIClassActivityAnswerInfo | null

      /** AIXActivityAnswerInfo xClassActivityAnswerInfo. */
      public xClassActivityAnswerInfo?: sprout.aixcourse.IXClassActivityAnswerInfo | null

      /** AIXActivityAnswerInfo homeworkActivityAnswerInfo. */
      public homeworkActivityAnswerInfo?: sprout.aixcourse.IHomeworkActivityAnswerInfo | null

      /** AIXActivityAnswerInfo yClassActivityAnswerInfo. */
      public yClassActivityAnswerInfo?: sprout.aixcourse.IYClassActivityAnswerInfo | null

      /** AIXActivityAnswerInfo infoOneof. */
      public infoOneof?:
        | 'aiClassActivityAnswerInfo'
        | 'xClassActivityAnswerInfo'
        | 'homeworkActivityAnswerInfo'
        | 'yClassActivityAnswerInfo'

      /**
       * Creates a new AIXActivityAnswerInfo instance using the specified properties.
       * @param [properties] Properties to set
       * @returns AIXActivityAnswerInfo instance
       */
      public static create(
        properties?: sprout.aixcourse.IAIXActivityAnswerInfo,
      ): sprout.aixcourse.AIXActivityAnswerInfo

      /**
       * Encodes the specified AIXActivityAnswerInfo message. Does not implicitly {@link sprout.aixcourse.AIXActivityAnswerInfo.verify|verify} messages.
       * @param message AIXActivityAnswerInfo message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encode(
        message: sprout.aixcourse.IAIXActivityAnswerInfo,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Encodes the specified AIXActivityAnswerInfo message, length delimited. Does not implicitly {@link sprout.aixcourse.AIXActivityAnswerInfo.verify|verify} messages.
       * @param message AIXActivityAnswerInfo message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encodeDelimited(
        message: sprout.aixcourse.IAIXActivityAnswerInfo,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Decodes a AIXActivityAnswerInfo message from the specified reader or buffer.
       * @param reader Reader or buffer to decode from
       * @param [length] Message length if known beforehand
       * @returns AIXActivityAnswerInfo
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decode(
        reader: $protobuf.Reader | Uint8Array,
        length?: number,
      ): sprout.aixcourse.AIXActivityAnswerInfo

      /**
       * Decodes a AIXActivityAnswerInfo message from the specified reader or buffer, length delimited.
       * @param reader Reader or buffer to decode from
       * @returns AIXActivityAnswerInfo
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decodeDelimited(
        reader: $protobuf.Reader | Uint8Array,
      ): sprout.aixcourse.AIXActivityAnswerInfo

      /**
       * Verifies a AIXActivityAnswerInfo message.
       * @param message Plain object to verify
       * @returns `null` if valid, otherwise the reason why it is not
       */
      public static verify(message: { [k: string]: any }): string | null

      /**
       * Creates a AIXActivityAnswerInfo message from a plain object. Also converts values to their respective internal types.
       * @param object Plain object
       * @returns AIXActivityAnswerInfo
       */
      public static fromObject(object: {
        [k: string]: any
      }): sprout.aixcourse.AIXActivityAnswerInfo

      /**
       * Creates a plain object from a AIXActivityAnswerInfo message. Also converts values to other types if specified.
       * @param message AIXActivityAnswerInfo
       * @param [options] Conversion options
       * @returns Plain object
       */
      public static toObject(
        message: sprout.aixcourse.AIXActivityAnswerInfo,
        options?: $protobuf.IConversionOptions,
      ): { [k: string]: any }

      /**
       * Converts this AIXActivityAnswerInfo to JSON.
       * @returns JSON object
       */
      public toJSON(): { [k: string]: any }
    }

    /** Properties of a AIClassActivityAnswerInfo. */
    interface IAIClassActivityAnswerInfo {
      /** AIClassActivityAnswerInfo levelId */
      levelId?: number | Long | null

      /** AIClassActivityAnswerInfo moduleId */
      moduleId?: number | Long | null

      /** AIClassActivityAnswerInfo unitId */
      unitId?: number | Long | null

      /** AIClassActivityAnswerInfo lessonId */
      lessonId?: number | Long | null

      /** AIClassActivityAnswerInfo aiClassId */
      aiClassId?: number | Long | null

      /** AIClassActivityAnswerInfo segmentId */
      segmentId?: number | Long | null

      /** AIClassActivityAnswerInfo activityGroupId */
      activityGroupId?: number | Long | null
    }

    /** Represents a AIClassActivityAnswerInfo. */
    class AIClassActivityAnswerInfo implements IAIClassActivityAnswerInfo {
      /**
       * Constructs a new AIClassActivityAnswerInfo.
       * @param [properties] Properties to set
       */
      constructor(properties?: sprout.aixcourse.IAIClassActivityAnswerInfo)

      /** AIClassActivityAnswerInfo levelId. */
      public levelId: number | Long

      /** AIClassActivityAnswerInfo moduleId. */
      public moduleId: number | Long

      /** AIClassActivityAnswerInfo unitId. */
      public unitId: number | Long

      /** AIClassActivityAnswerInfo lessonId. */
      public lessonId: number | Long

      /** AIClassActivityAnswerInfo aiClassId. */
      public aiClassId: number | Long

      /** AIClassActivityAnswerInfo segmentId. */
      public segmentId: number | Long

      /** AIClassActivityAnswerInfo activityGroupId. */
      public activityGroupId: number | Long

      /**
       * Creates a new AIClassActivityAnswerInfo instance using the specified properties.
       * @param [properties] Properties to set
       * @returns AIClassActivityAnswerInfo instance
       */
      public static create(
        properties?: sprout.aixcourse.IAIClassActivityAnswerInfo,
      ): sprout.aixcourse.AIClassActivityAnswerInfo

      /**
       * Encodes the specified AIClassActivityAnswerInfo message. Does not implicitly {@link sprout.aixcourse.AIClassActivityAnswerInfo.verify|verify} messages.
       * @param message AIClassActivityAnswerInfo message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encode(
        message: sprout.aixcourse.IAIClassActivityAnswerInfo,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Encodes the specified AIClassActivityAnswerInfo message, length delimited. Does not implicitly {@link sprout.aixcourse.AIClassActivityAnswerInfo.verify|verify} messages.
       * @param message AIClassActivityAnswerInfo message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encodeDelimited(
        message: sprout.aixcourse.IAIClassActivityAnswerInfo,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Decodes a AIClassActivityAnswerInfo message from the specified reader or buffer.
       * @param reader Reader or buffer to decode from
       * @param [length] Message length if known beforehand
       * @returns AIClassActivityAnswerInfo
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decode(
        reader: $protobuf.Reader | Uint8Array,
        length?: number,
      ): sprout.aixcourse.AIClassActivityAnswerInfo

      /**
       * Decodes a AIClassActivityAnswerInfo message from the specified reader or buffer, length delimited.
       * @param reader Reader or buffer to decode from
       * @returns AIClassActivityAnswerInfo
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decodeDelimited(
        reader: $protobuf.Reader | Uint8Array,
      ): sprout.aixcourse.AIClassActivityAnswerInfo

      /**
       * Verifies a AIClassActivityAnswerInfo message.
       * @param message Plain object to verify
       * @returns `null` if valid, otherwise the reason why it is not
       */
      public static verify(message: { [k: string]: any }): string | null

      /**
       * Creates a AIClassActivityAnswerInfo message from a plain object. Also converts values to their respective internal types.
       * @param object Plain object
       * @returns AIClassActivityAnswerInfo
       */
      public static fromObject(object: {
        [k: string]: any
      }): sprout.aixcourse.AIClassActivityAnswerInfo

      /**
       * Creates a plain object from a AIClassActivityAnswerInfo message. Also converts values to other types if specified.
       * @param message AIClassActivityAnswerInfo
       * @param [options] Conversion options
       * @returns Plain object
       */
      public static toObject(
        message: sprout.aixcourse.AIClassActivityAnswerInfo,
        options?: $protobuf.IConversionOptions,
      ): { [k: string]: any }

      /**
       * Converts this AIClassActivityAnswerInfo to JSON.
       * @returns JSON object
       */
      public toJSON(): { [k: string]: any }
    }

    /** Properties of a XClassActivityAnswerInfo. */
    interface IXClassActivityAnswerInfo {
      /** XClassActivityAnswerInfo levelId */
      levelId?: number | Long | null

      /** XClassActivityAnswerInfo moduleId */
      moduleId?: number | Long | null

      /** XClassActivityAnswerInfo unitId */
      unitId?: number | Long | null

      /** XClassActivityAnswerInfo lessonId */
      lessonId?: number | Long | null

      /** XClassActivityAnswerInfo xClassId */
      xClassId?: number | Long | null

      /** XClassActivityAnswerInfo segmentId */
      segmentId?: number | Long | null

      /** XClassActivityAnswerInfo activityGroupId */
      activityGroupId?: number | Long | null
    }

    /** Represents a XClassActivityAnswerInfo. */
    class XClassActivityAnswerInfo implements IXClassActivityAnswerInfo {
      /**
       * Constructs a new XClassActivityAnswerInfo.
       * @param [properties] Properties to set
       */
      constructor(properties?: sprout.aixcourse.IXClassActivityAnswerInfo)

      /** XClassActivityAnswerInfo levelId. */
      public levelId: number | Long

      /** XClassActivityAnswerInfo moduleId. */
      public moduleId: number | Long

      /** XClassActivityAnswerInfo unitId. */
      public unitId: number | Long

      /** XClassActivityAnswerInfo lessonId. */
      public lessonId: number | Long

      /** XClassActivityAnswerInfo xClassId. */
      public xClassId: number | Long

      /** XClassActivityAnswerInfo segmentId. */
      public segmentId: number | Long

      /** XClassActivityAnswerInfo activityGroupId. */
      public activityGroupId: number | Long

      /**
       * Creates a new XClassActivityAnswerInfo instance using the specified properties.
       * @param [properties] Properties to set
       * @returns XClassActivityAnswerInfo instance
       */
      public static create(
        properties?: sprout.aixcourse.IXClassActivityAnswerInfo,
      ): sprout.aixcourse.XClassActivityAnswerInfo

      /**
       * Encodes the specified XClassActivityAnswerInfo message. Does not implicitly {@link sprout.aixcourse.XClassActivityAnswerInfo.verify|verify} messages.
       * @param message XClassActivityAnswerInfo message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encode(
        message: sprout.aixcourse.IXClassActivityAnswerInfo,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Encodes the specified XClassActivityAnswerInfo message, length delimited. Does not implicitly {@link sprout.aixcourse.XClassActivityAnswerInfo.verify|verify} messages.
       * @param message XClassActivityAnswerInfo message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encodeDelimited(
        message: sprout.aixcourse.IXClassActivityAnswerInfo,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Decodes a XClassActivityAnswerInfo message from the specified reader or buffer.
       * @param reader Reader or buffer to decode from
       * @param [length] Message length if known beforehand
       * @returns XClassActivityAnswerInfo
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decode(
        reader: $protobuf.Reader | Uint8Array,
        length?: number,
      ): sprout.aixcourse.XClassActivityAnswerInfo

      /**
       * Decodes a XClassActivityAnswerInfo message from the specified reader or buffer, length delimited.
       * @param reader Reader or buffer to decode from
       * @returns XClassActivityAnswerInfo
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decodeDelimited(
        reader: $protobuf.Reader | Uint8Array,
      ): sprout.aixcourse.XClassActivityAnswerInfo

      /**
       * Verifies a XClassActivityAnswerInfo message.
       * @param message Plain object to verify
       * @returns `null` if valid, otherwise the reason why it is not
       */
      public static verify(message: { [k: string]: any }): string | null

      /**
       * Creates a XClassActivityAnswerInfo message from a plain object. Also converts values to their respective internal types.
       * @param object Plain object
       * @returns XClassActivityAnswerInfo
       */
      public static fromObject(object: {
        [k: string]: any
      }): sprout.aixcourse.XClassActivityAnswerInfo

      /**
       * Creates a plain object from a XClassActivityAnswerInfo message. Also converts values to other types if specified.
       * @param message XClassActivityAnswerInfo
       * @param [options] Conversion options
       * @returns Plain object
       */
      public static toObject(
        message: sprout.aixcourse.XClassActivityAnswerInfo,
        options?: $protobuf.IConversionOptions,
      ): { [k: string]: any }

      /**
       * Converts this XClassActivityAnswerInfo to JSON.
       * @returns JSON object
       */
      public toJSON(): { [k: string]: any }
    }

    /** Properties of a YClassActivityAnswerInfo. */
    interface IYClassActivityAnswerInfo {
      /** YClassActivityAnswerInfo levelId */
      levelId?: number | Long | null

      /** YClassActivityAnswerInfo moduleId */
      moduleId?: number | Long | null

      /** YClassActivityAnswerInfo unitId */
      unitId?: number | Long | null

      /** YClassActivityAnswerInfo lessonId */
      lessonId?: number | Long | null

      /** YClassActivityAnswerInfo yClassId */
      yClassId?: number | Long | null

      /** YClassActivityAnswerInfo segmentId */
      segmentId?: number | Long | null

      /** YClassActivityAnswerInfo activityGroupId */
      activityGroupId?: number | Long | null
    }

    /** Represents a YClassActivityAnswerInfo. */
    class YClassActivityAnswerInfo implements IYClassActivityAnswerInfo {
      /**
       * Constructs a new YClassActivityAnswerInfo.
       * @param [properties] Properties to set
       */
      constructor(properties?: sprout.aixcourse.IYClassActivityAnswerInfo)

      /** YClassActivityAnswerInfo levelId. */
      public levelId: number | Long

      /** YClassActivityAnswerInfo moduleId. */
      public moduleId: number | Long

      /** YClassActivityAnswerInfo unitId. */
      public unitId: number | Long

      /** YClassActivityAnswerInfo lessonId. */
      public lessonId: number | Long

      /** YClassActivityAnswerInfo yClassId. */
      public yClassId: number | Long

      /** YClassActivityAnswerInfo segmentId. */
      public segmentId: number | Long

      /** YClassActivityAnswerInfo activityGroupId. */
      public activityGroupId: number | Long

      /**
       * Creates a new YClassActivityAnswerInfo instance using the specified properties.
       * @param [properties] Properties to set
       * @returns YClassActivityAnswerInfo instance
       */
      public static create(
        properties?: sprout.aixcourse.IYClassActivityAnswerInfo,
      ): sprout.aixcourse.YClassActivityAnswerInfo

      /**
       * Encodes the specified YClassActivityAnswerInfo message. Does not implicitly {@link sprout.aixcourse.YClassActivityAnswerInfo.verify|verify} messages.
       * @param message YClassActivityAnswerInfo message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encode(
        message: sprout.aixcourse.IYClassActivityAnswerInfo,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Encodes the specified YClassActivityAnswerInfo message, length delimited. Does not implicitly {@link sprout.aixcourse.YClassActivityAnswerInfo.verify|verify} messages.
       * @param message YClassActivityAnswerInfo message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encodeDelimited(
        message: sprout.aixcourse.IYClassActivityAnswerInfo,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Decodes a YClassActivityAnswerInfo message from the specified reader or buffer.
       * @param reader Reader or buffer to decode from
       * @param [length] Message length if known beforehand
       * @returns YClassActivityAnswerInfo
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decode(
        reader: $protobuf.Reader | Uint8Array,
        length?: number,
      ): sprout.aixcourse.YClassActivityAnswerInfo

      /**
       * Decodes a YClassActivityAnswerInfo message from the specified reader or buffer, length delimited.
       * @param reader Reader or buffer to decode from
       * @returns YClassActivityAnswerInfo
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decodeDelimited(
        reader: $protobuf.Reader | Uint8Array,
      ): sprout.aixcourse.YClassActivityAnswerInfo

      /**
       * Verifies a YClassActivityAnswerInfo message.
       * @param message Plain object to verify
       * @returns `null` if valid, otherwise the reason why it is not
       */
      public static verify(message: { [k: string]: any }): string | null

      /**
       * Creates a YClassActivityAnswerInfo message from a plain object. Also converts values to their respective internal types.
       * @param object Plain object
       * @returns YClassActivityAnswerInfo
       */
      public static fromObject(object: {
        [k: string]: any
      }): sprout.aixcourse.YClassActivityAnswerInfo

      /**
       * Creates a plain object from a YClassActivityAnswerInfo message. Also converts values to other types if specified.
       * @param message YClassActivityAnswerInfo
       * @param [options] Conversion options
       * @returns Plain object
       */
      public static toObject(
        message: sprout.aixcourse.YClassActivityAnswerInfo,
        options?: $protobuf.IConversionOptions,
      ): { [k: string]: any }

      /**
       * Converts this YClassActivityAnswerInfo to JSON.
       * @returns JSON object
       */
      public toJSON(): { [k: string]: any }
    }

    /** Properties of a HomeworkActivityAnswerInfo. */
    interface IHomeworkActivityAnswerInfo {
      /** HomeworkActivityAnswerInfo levelId */
      levelId?: number | Long | null

      /** HomeworkActivityAnswerInfo moduleId */
      moduleId?: number | Long | null

      /** HomeworkActivityAnswerInfo unitId */
      unitId?: number | Long | null

      /** HomeworkActivityAnswerInfo lessonId */
      lessonId?: number | Long | null

      /** HomeworkActivityAnswerInfo homeworkId */
      homeworkId?: number | Long | null

      /** HomeworkActivityAnswerInfo segmentId */
      segmentId?: number | Long | null

      /** HomeworkActivityAnswerInfo activityGroupId */
      activityGroupId?: number | Long | null
    }

    /** Represents a HomeworkActivityAnswerInfo. */
    class HomeworkActivityAnswerInfo implements IHomeworkActivityAnswerInfo {
      /**
       * Constructs a new HomeworkActivityAnswerInfo.
       * @param [properties] Properties to set
       */
      constructor(properties?: sprout.aixcourse.IHomeworkActivityAnswerInfo)

      /** HomeworkActivityAnswerInfo levelId. */
      public levelId: number | Long

      /** HomeworkActivityAnswerInfo moduleId. */
      public moduleId: number | Long

      /** HomeworkActivityAnswerInfo unitId. */
      public unitId: number | Long

      /** HomeworkActivityAnswerInfo lessonId. */
      public lessonId: number | Long

      /** HomeworkActivityAnswerInfo homeworkId. */
      public homeworkId: number | Long

      /** HomeworkActivityAnswerInfo segmentId. */
      public segmentId: number | Long

      /** HomeworkActivityAnswerInfo activityGroupId. */
      public activityGroupId: number | Long

      /**
       * Creates a new HomeworkActivityAnswerInfo instance using the specified properties.
       * @param [properties] Properties to set
       * @returns HomeworkActivityAnswerInfo instance
       */
      public static create(
        properties?: sprout.aixcourse.IHomeworkActivityAnswerInfo,
      ): sprout.aixcourse.HomeworkActivityAnswerInfo

      /**
       * Encodes the specified HomeworkActivityAnswerInfo message. Does not implicitly {@link sprout.aixcourse.HomeworkActivityAnswerInfo.verify|verify} messages.
       * @param message HomeworkActivityAnswerInfo message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encode(
        message: sprout.aixcourse.IHomeworkActivityAnswerInfo,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Encodes the specified HomeworkActivityAnswerInfo message, length delimited. Does not implicitly {@link sprout.aixcourse.HomeworkActivityAnswerInfo.verify|verify} messages.
       * @param message HomeworkActivityAnswerInfo message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encodeDelimited(
        message: sprout.aixcourse.IHomeworkActivityAnswerInfo,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Decodes a HomeworkActivityAnswerInfo message from the specified reader or buffer.
       * @param reader Reader or buffer to decode from
       * @param [length] Message length if known beforehand
       * @returns HomeworkActivityAnswerInfo
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decode(
        reader: $protobuf.Reader | Uint8Array,
        length?: number,
      ): sprout.aixcourse.HomeworkActivityAnswerInfo

      /**
       * Decodes a HomeworkActivityAnswerInfo message from the specified reader or buffer, length delimited.
       * @param reader Reader or buffer to decode from
       * @returns HomeworkActivityAnswerInfo
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decodeDelimited(
        reader: $protobuf.Reader | Uint8Array,
      ): sprout.aixcourse.HomeworkActivityAnswerInfo

      /**
       * Verifies a HomeworkActivityAnswerInfo message.
       * @param message Plain object to verify
       * @returns `null` if valid, otherwise the reason why it is not
       */
      public static verify(message: { [k: string]: any }): string | null

      /**
       * Creates a HomeworkActivityAnswerInfo message from a plain object. Also converts values to their respective internal types.
       * @param object Plain object
       * @returns HomeworkActivityAnswerInfo
       */
      public static fromObject(object: {
        [k: string]: any
      }): sprout.aixcourse.HomeworkActivityAnswerInfo

      /**
       * Creates a plain object from a HomeworkActivityAnswerInfo message. Also converts values to other types if specified.
       * @param message HomeworkActivityAnswerInfo
       * @param [options] Conversion options
       * @returns Plain object
       */
      public static toObject(
        message: sprout.aixcourse.HomeworkActivityAnswerInfo,
        options?: $protobuf.IConversionOptions,
      ): { [k: string]: any }

      /**
       * Converts this HomeworkActivityAnswerInfo to JSON.
       * @returns JSON object
       */
      public toJSON(): { [k: string]: any }
    }

    /** Properties of a TeacherInteractionGameActivityAnswer. */
    interface ITeacherInteractionGameActivityAnswer {
      /** TeacherInteractionGameActivityAnswer partAnswers */
      partAnswers?: sprout.aixcourse.IActivityPartAnswer[] | null
    }

    /** Represents a TeacherInteractionGameActivityAnswer. */
    class TeacherInteractionGameActivityAnswer
      implements ITeacherInteractionGameActivityAnswer {
      /**
       * Constructs a new TeacherInteractionGameActivityAnswer.
       * @param [properties] Properties to set
       */
      constructor(
        properties?: sprout.aixcourse.ITeacherInteractionGameActivityAnswer,
      )

      /** TeacherInteractionGameActivityAnswer partAnswers. */
      public partAnswers: sprout.aixcourse.IActivityPartAnswer[]

      /**
       * Creates a new TeacherInteractionGameActivityAnswer instance using the specified properties.
       * @param [properties] Properties to set
       * @returns TeacherInteractionGameActivityAnswer instance
       */
      public static create(
        properties?: sprout.aixcourse.ITeacherInteractionGameActivityAnswer,
      ): sprout.aixcourse.TeacherInteractionGameActivityAnswer

      /**
       * Encodes the specified TeacherInteractionGameActivityAnswer message. Does not implicitly {@link sprout.aixcourse.TeacherInteractionGameActivityAnswer.verify|verify} messages.
       * @param message TeacherInteractionGameActivityAnswer message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encode(
        message: sprout.aixcourse.ITeacherInteractionGameActivityAnswer,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Encodes the specified TeacherInteractionGameActivityAnswer message, length delimited. Does not implicitly {@link sprout.aixcourse.TeacherInteractionGameActivityAnswer.verify|verify} messages.
       * @param message TeacherInteractionGameActivityAnswer message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encodeDelimited(
        message: sprout.aixcourse.ITeacherInteractionGameActivityAnswer,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Decodes a TeacherInteractionGameActivityAnswer message from the specified reader or buffer.
       * @param reader Reader or buffer to decode from
       * @param [length] Message length if known beforehand
       * @returns TeacherInteractionGameActivityAnswer
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decode(
        reader: $protobuf.Reader | Uint8Array,
        length?: number,
      ): sprout.aixcourse.TeacherInteractionGameActivityAnswer

      /**
       * Decodes a TeacherInteractionGameActivityAnswer message from the specified reader or buffer, length delimited.
       * @param reader Reader or buffer to decode from
       * @returns TeacherInteractionGameActivityAnswer
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decodeDelimited(
        reader: $protobuf.Reader | Uint8Array,
      ): sprout.aixcourse.TeacherInteractionGameActivityAnswer

      /**
       * Verifies a TeacherInteractionGameActivityAnswer message.
       * @param message Plain object to verify
       * @returns `null` if valid, otherwise the reason why it is not
       */
      public static verify(message: { [k: string]: any }): string | null

      /**
       * Creates a TeacherInteractionGameActivityAnswer message from a plain object. Also converts values to their respective internal types.
       * @param object Plain object
       * @returns TeacherInteractionGameActivityAnswer
       */
      public static fromObject(object: {
        [k: string]: any
      }): sprout.aixcourse.TeacherInteractionGameActivityAnswer

      /**
       * Creates a plain object from a TeacherInteractionGameActivityAnswer message. Also converts values to other types if specified.
       * @param message TeacherInteractionGameActivityAnswer
       * @param [options] Conversion options
       * @returns Plain object
       */
      public static toObject(
        message: sprout.aixcourse.TeacherInteractionGameActivityAnswer,
        options?: $protobuf.IConversionOptions,
      ): { [k: string]: any }

      /**
       * Converts this TeacherInteractionGameActivityAnswer to JSON.
       * @returns JSON object
       */
      public toJSON(): { [k: string]: any }
    }

    /** Properties of a SystemInteractionGameActivityAnswer. */
    interface ISystemInteractionGameActivityAnswer {
      /** SystemInteractionGameActivityAnswer partAnswers */
      partAnswers?: sprout.aixcourse.IActivityPartAnswer[] | null

      /** SystemInteractionGameActivityAnswer grade */
      grade?: sprout.aixcourse.IGradeAnswer | null
    }

    /** Represents a SystemInteractionGameActivityAnswer. */
    class SystemInteractionGameActivityAnswer
      implements ISystemInteractionGameActivityAnswer {
      /**
       * Constructs a new SystemInteractionGameActivityAnswer.
       * @param [properties] Properties to set
       */
      constructor(
        properties?: sprout.aixcourse.ISystemInteractionGameActivityAnswer,
      )

      /** SystemInteractionGameActivityAnswer partAnswers. */
      public partAnswers: sprout.aixcourse.IActivityPartAnswer[]

      /** SystemInteractionGameActivityAnswer grade. */
      public grade?: sprout.aixcourse.IGradeAnswer | null

      /**
       * Creates a new SystemInteractionGameActivityAnswer instance using the specified properties.
       * @param [properties] Properties to set
       * @returns SystemInteractionGameActivityAnswer instance
       */
      public static create(
        properties?: sprout.aixcourse.ISystemInteractionGameActivityAnswer,
      ): sprout.aixcourse.SystemInteractionGameActivityAnswer

      /**
       * Encodes the specified SystemInteractionGameActivityAnswer message. Does not implicitly {@link sprout.aixcourse.SystemInteractionGameActivityAnswer.verify|verify} messages.
       * @param message SystemInteractionGameActivityAnswer message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encode(
        message: sprout.aixcourse.ISystemInteractionGameActivityAnswer,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Encodes the specified SystemInteractionGameActivityAnswer message, length delimited. Does not implicitly {@link sprout.aixcourse.SystemInteractionGameActivityAnswer.verify|verify} messages.
       * @param message SystemInteractionGameActivityAnswer message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encodeDelimited(
        message: sprout.aixcourse.ISystemInteractionGameActivityAnswer,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Decodes a SystemInteractionGameActivityAnswer message from the specified reader or buffer.
       * @param reader Reader or buffer to decode from
       * @param [length] Message length if known beforehand
       * @returns SystemInteractionGameActivityAnswer
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decode(
        reader: $protobuf.Reader | Uint8Array,
        length?: number,
      ): sprout.aixcourse.SystemInteractionGameActivityAnswer

      /**
       * Decodes a SystemInteractionGameActivityAnswer message from the specified reader or buffer, length delimited.
       * @param reader Reader or buffer to decode from
       * @returns SystemInteractionGameActivityAnswer
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decodeDelimited(
        reader: $protobuf.Reader | Uint8Array,
      ): sprout.aixcourse.SystemInteractionGameActivityAnswer

      /**
       * Verifies a SystemInteractionGameActivityAnswer message.
       * @param message Plain object to verify
       * @returns `null` if valid, otherwise the reason why it is not
       */
      public static verify(message: { [k: string]: any }): string | null

      /**
       * Creates a SystemInteractionGameActivityAnswer message from a plain object. Also converts values to their respective internal types.
       * @param object Plain object
       * @returns SystemInteractionGameActivityAnswer
       */
      public static fromObject(object: {
        [k: string]: any
      }): sprout.aixcourse.SystemInteractionGameActivityAnswer

      /**
       * Creates a plain object from a SystemInteractionGameActivityAnswer message. Also converts values to other types if specified.
       * @param message SystemInteractionGameActivityAnswer
       * @param [options] Conversion options
       * @returns Plain object
       */
      public static toObject(
        message: sprout.aixcourse.SystemInteractionGameActivityAnswer,
        options?: $protobuf.IConversionOptions,
      ): { [k: string]: any }

      /**
       * Converts this SystemInteractionGameActivityAnswer to JSON.
       * @returns JSON object
       */
      public toJSON(): { [k: string]: any }
    }

    /** Properties of an ActivityPartAnswer. */
    interface IActivityPartAnswer {
      /** ActivityPartAnswer activityPartId */
      activityPartId?: string | null

      /** ActivityPartAnswer audioRecordAnswer */
      audioRecordAnswer?: sprout.aixcourse.IAudioRecordAnswer | null

      /** ActivityPartAnswer freeAudioRecordAnswer */
      freeAudioRecordAnswer?: sprout.aixcourse.IFreeAudioRecordAnswer | null

      /** ActivityPartAnswer roundAudioRecordAnswer */
      roundAudioRecordAnswer?: sprout.aixcourse.IRoundAudioRecordAnswer | null

      /** ActivityPartAnswer choiceAnswer */
      choiceAnswer?: sprout.aixcourse.IChoiceAnswer | null

      /** ActivityPartAnswer gradeAnswer */
      gradeAnswer?: sprout.aixcourse.IGradeAnswer | null

      /** ActivityPartAnswer multiAudioRecordAnswer */
      multiAudioRecordAnswer?: sprout.aixcourse.IMultiAudioRecordAnswer | null

      /** ActivityPartAnswer freeChoiceAnswer */
      freeChoiceAnswer?: sprout.aixcourse.IFreeChoiceAnswer | null

      /** ActivityPartAnswer wordFormationAnswer */
      wordFormationAnswer?: sprout.phonicscourse.IWordFormationAnswer | null

      /** ActivityPartAnswer roundChoiceAnswer */
      roundChoiceAnswer?: sprout.aixcourse.IRoundChoiceAnswer | null
    }

    /** Represents an ActivityPartAnswer. */
    class ActivityPartAnswer implements IActivityPartAnswer {
      /**
       * Constructs a new ActivityPartAnswer.
       * @param [properties] Properties to set
       */
      constructor(properties?: sprout.aixcourse.IActivityPartAnswer)

      /** ActivityPartAnswer activityPartId. */
      public activityPartId: string

      /** ActivityPartAnswer audioRecordAnswer. */
      public audioRecordAnswer?: sprout.aixcourse.IAudioRecordAnswer | null

      /** ActivityPartAnswer freeAudioRecordAnswer. */
      public freeAudioRecordAnswer?: sprout.aixcourse.IFreeAudioRecordAnswer | null

      /** ActivityPartAnswer roundAudioRecordAnswer. */
      public roundAudioRecordAnswer?: sprout.aixcourse.IRoundAudioRecordAnswer | null

      /** ActivityPartAnswer choiceAnswer. */
      public choiceAnswer?: sprout.aixcourse.IChoiceAnswer | null

      /** ActivityPartAnswer gradeAnswer. */
      public gradeAnswer?: sprout.aixcourse.IGradeAnswer | null

      /** ActivityPartAnswer multiAudioRecordAnswer. */
      public multiAudioRecordAnswer?: sprout.aixcourse.IMultiAudioRecordAnswer | null

      /** ActivityPartAnswer freeChoiceAnswer. */
      public freeChoiceAnswer?: sprout.aixcourse.IFreeChoiceAnswer | null

      /** ActivityPartAnswer wordFormationAnswer. */
      public wordFormationAnswer?: sprout.phonicscourse.IWordFormationAnswer | null

      /** ActivityPartAnswer roundChoiceAnswer. */
      public roundChoiceAnswer?: sprout.aixcourse.IRoundChoiceAnswer | null

      /** ActivityPartAnswer answerOneof. */
      public answerOneof?:
        | 'audioRecordAnswer'
        | 'freeAudioRecordAnswer'
        | 'roundAudioRecordAnswer'
        | 'choiceAnswer'
        | 'gradeAnswer'
        | 'multiAudioRecordAnswer'
        | 'freeChoiceAnswer'
        | 'wordFormationAnswer'
        | 'roundChoiceAnswer'

      /**
       * Creates a new ActivityPartAnswer instance using the specified properties.
       * @param [properties] Properties to set
       * @returns ActivityPartAnswer instance
       */
      public static create(
        properties?: sprout.aixcourse.IActivityPartAnswer,
      ): sprout.aixcourse.ActivityPartAnswer

      /**
       * Encodes the specified ActivityPartAnswer message. Does not implicitly {@link sprout.aixcourse.ActivityPartAnswer.verify|verify} messages.
       * @param message ActivityPartAnswer message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encode(
        message: sprout.aixcourse.IActivityPartAnswer,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Encodes the specified ActivityPartAnswer message, length delimited. Does not implicitly {@link sprout.aixcourse.ActivityPartAnswer.verify|verify} messages.
       * @param message ActivityPartAnswer message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encodeDelimited(
        message: sprout.aixcourse.IActivityPartAnswer,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Decodes an ActivityPartAnswer message from the specified reader or buffer.
       * @param reader Reader or buffer to decode from
       * @param [length] Message length if known beforehand
       * @returns ActivityPartAnswer
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decode(
        reader: $protobuf.Reader | Uint8Array,
        length?: number,
      ): sprout.aixcourse.ActivityPartAnswer

      /**
       * Decodes an ActivityPartAnswer message from the specified reader or buffer, length delimited.
       * @param reader Reader or buffer to decode from
       * @returns ActivityPartAnswer
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decodeDelimited(
        reader: $protobuf.Reader | Uint8Array,
      ): sprout.aixcourse.ActivityPartAnswer

      /**
       * Verifies an ActivityPartAnswer message.
       * @param message Plain object to verify
       * @returns `null` if valid, otherwise the reason why it is not
       */
      public static verify(message: { [k: string]: any }): string | null

      /**
       * Creates an ActivityPartAnswer message from a plain object. Also converts values to their respective internal types.
       * @param object Plain object
       * @returns ActivityPartAnswer
       */
      public static fromObject(object: {
        [k: string]: any
      }): sprout.aixcourse.ActivityPartAnswer

      /**
       * Creates a plain object from an ActivityPartAnswer message. Also converts values to other types if specified.
       * @param message ActivityPartAnswer
       * @param [options] Conversion options
       * @returns Plain object
       */
      public static toObject(
        message: sprout.aixcourse.ActivityPartAnswer,
        options?: $protobuf.IConversionOptions,
      ): { [k: string]: any }

      /**
       * Converts this ActivityPartAnswer to JSON.
       * @returns JSON object
       */
      public toJSON(): { [k: string]: any }
    }

    /** Properties of a GradeAnswer. */
    interface IGradeAnswer {
      /** GradeAnswer streamGradeAnswer */
      streamGradeAnswer?: sprout.aixcourse.IStreamGradeAnswer | null
    }

    /** Represents a GradeAnswer. */
    class GradeAnswer implements IGradeAnswer {
      /**
       * Constructs a new GradeAnswer.
       * @param [properties] Properties to set
       */
      constructor(properties?: sprout.aixcourse.IGradeAnswer)

      /** GradeAnswer streamGradeAnswer. */
      public streamGradeAnswer?: sprout.aixcourse.IStreamGradeAnswer | null

      /**
       * Creates a new GradeAnswer instance using the specified properties.
       * @param [properties] Properties to set
       * @returns GradeAnswer instance
       */
      public static create(
        properties?: sprout.aixcourse.IGradeAnswer,
      ): sprout.aixcourse.GradeAnswer

      /**
       * Encodes the specified GradeAnswer message. Does not implicitly {@link sprout.aixcourse.GradeAnswer.verify|verify} messages.
       * @param message GradeAnswer message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encode(
        message: sprout.aixcourse.IGradeAnswer,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Encodes the specified GradeAnswer message, length delimited. Does not implicitly {@link sprout.aixcourse.GradeAnswer.verify|verify} messages.
       * @param message GradeAnswer message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encodeDelimited(
        message: sprout.aixcourse.IGradeAnswer,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Decodes a GradeAnswer message from the specified reader or buffer.
       * @param reader Reader or buffer to decode from
       * @param [length] Message length if known beforehand
       * @returns GradeAnswer
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decode(
        reader: $protobuf.Reader | Uint8Array,
        length?: number,
      ): sprout.aixcourse.GradeAnswer

      /**
       * Decodes a GradeAnswer message from the specified reader or buffer, length delimited.
       * @param reader Reader or buffer to decode from
       * @returns GradeAnswer
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decodeDelimited(
        reader: $protobuf.Reader | Uint8Array,
      ): sprout.aixcourse.GradeAnswer

      /**
       * Verifies a GradeAnswer message.
       * @param message Plain object to verify
       * @returns `null` if valid, otherwise the reason why it is not
       */
      public static verify(message: { [k: string]: any }): string | null

      /**
       * Creates a GradeAnswer message from a plain object. Also converts values to their respective internal types.
       * @param object Plain object
       * @returns GradeAnswer
       */
      public static fromObject(object: {
        [k: string]: any
      }): sprout.aixcourse.GradeAnswer

      /**
       * Creates a plain object from a GradeAnswer message. Also converts values to other types if specified.
       * @param message GradeAnswer
       * @param [options] Conversion options
       * @returns Plain object
       */
      public static toObject(
        message: sprout.aixcourse.GradeAnswer,
        options?: $protobuf.IConversionOptions,
      ): { [k: string]: any }

      /**
       * Converts this GradeAnswer to JSON.
       * @returns JSON object
       */
      public toJSON(): { [k: string]: any }
    }

    /** Properties of a FreeChoiceAnswer. */
    interface IFreeChoiceAnswer {
      /** FreeChoiceAnswer choiceId */
      choiceId?: string | null

      /** FreeChoiceAnswer text */
      text?: string | null
    }

    /** Represents a FreeChoiceAnswer. */
    class FreeChoiceAnswer implements IFreeChoiceAnswer {
      /**
       * Constructs a new FreeChoiceAnswer.
       * @param [properties] Properties to set
       */
      constructor(properties?: sprout.aixcourse.IFreeChoiceAnswer)

      /** FreeChoiceAnswer choiceId. */
      public choiceId: string

      /** FreeChoiceAnswer text. */
      public text: string

      /**
       * Creates a new FreeChoiceAnswer instance using the specified properties.
       * @param [properties] Properties to set
       * @returns FreeChoiceAnswer instance
       */
      public static create(
        properties?: sprout.aixcourse.IFreeChoiceAnswer,
      ): sprout.aixcourse.FreeChoiceAnswer

      /**
       * Encodes the specified FreeChoiceAnswer message. Does not implicitly {@link sprout.aixcourse.FreeChoiceAnswer.verify|verify} messages.
       * @param message FreeChoiceAnswer message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encode(
        message: sprout.aixcourse.IFreeChoiceAnswer,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Encodes the specified FreeChoiceAnswer message, length delimited. Does not implicitly {@link sprout.aixcourse.FreeChoiceAnswer.verify|verify} messages.
       * @param message FreeChoiceAnswer message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encodeDelimited(
        message: sprout.aixcourse.IFreeChoiceAnswer,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Decodes a FreeChoiceAnswer message from the specified reader or buffer.
       * @param reader Reader or buffer to decode from
       * @param [length] Message length if known beforehand
       * @returns FreeChoiceAnswer
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decode(
        reader: $protobuf.Reader | Uint8Array,
        length?: number,
      ): sprout.aixcourse.FreeChoiceAnswer

      /**
       * Decodes a FreeChoiceAnswer message from the specified reader or buffer, length delimited.
       * @param reader Reader or buffer to decode from
       * @returns FreeChoiceAnswer
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decodeDelimited(
        reader: $protobuf.Reader | Uint8Array,
      ): sprout.aixcourse.FreeChoiceAnswer

      /**
       * Verifies a FreeChoiceAnswer message.
       * @param message Plain object to verify
       * @returns `null` if valid, otherwise the reason why it is not
       */
      public static verify(message: { [k: string]: any }): string | null

      /**
       * Creates a FreeChoiceAnswer message from a plain object. Also converts values to their respective internal types.
       * @param object Plain object
       * @returns FreeChoiceAnswer
       */
      public static fromObject(object: {
        [k: string]: any
      }): sprout.aixcourse.FreeChoiceAnswer

      /**
       * Creates a plain object from a FreeChoiceAnswer message. Also converts values to other types if specified.
       * @param message FreeChoiceAnswer
       * @param [options] Conversion options
       * @returns Plain object
       */
      public static toObject(
        message: sprout.aixcourse.FreeChoiceAnswer,
        options?: $protobuf.IConversionOptions,
      ): { [k: string]: any }

      /**
       * Converts this FreeChoiceAnswer to JSON.
       * @returns JSON object
       */
      public toJSON(): { [k: string]: any }
    }

    /** Properties of a Choice. */
    interface IChoice {
      /** Choice choiceId */
      choiceId?: string | null

      /** Choice correct */
      correct?: boolean | null
    }

    /** Represents a Choice. */
    class Choice implements IChoice {
      /**
       * Constructs a new Choice.
       * @param [properties] Properties to set
       */
      constructor(properties?: sprout.aixcourse.IChoice)

      /** Choice choiceId. */
      public choiceId: string

      /** Choice correct. */
      public correct: boolean

      /**
       * Creates a new Choice instance using the specified properties.
       * @param [properties] Properties to set
       * @returns Choice instance
       */
      public static create(
        properties?: sprout.aixcourse.IChoice,
      ): sprout.aixcourse.Choice

      /**
       * Encodes the specified Choice message. Does not implicitly {@link sprout.aixcourse.Choice.verify|verify} messages.
       * @param message Choice message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encode(
        message: sprout.aixcourse.IChoice,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Encodes the specified Choice message, length delimited. Does not implicitly {@link sprout.aixcourse.Choice.verify|verify} messages.
       * @param message Choice message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encodeDelimited(
        message: sprout.aixcourse.IChoice,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Decodes a Choice message from the specified reader or buffer.
       * @param reader Reader or buffer to decode from
       * @param [length] Message length if known beforehand
       * @returns Choice
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decode(
        reader: $protobuf.Reader | Uint8Array,
        length?: number,
      ): sprout.aixcourse.Choice

      /**
       * Decodes a Choice message from the specified reader or buffer, length delimited.
       * @param reader Reader or buffer to decode from
       * @returns Choice
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decodeDelimited(
        reader: $protobuf.Reader | Uint8Array,
      ): sprout.aixcourse.Choice

      /**
       * Verifies a Choice message.
       * @param message Plain object to verify
       * @returns `null` if valid, otherwise the reason why it is not
       */
      public static verify(message: { [k: string]: any }): string | null

      /**
       * Creates a Choice message from a plain object. Also converts values to their respective internal types.
       * @param object Plain object
       * @returns Choice
       */
      public static fromObject(object: {
        [k: string]: any
      }): sprout.aixcourse.Choice

      /**
       * Creates a plain object from a Choice message. Also converts values to other types if specified.
       * @param message Choice
       * @param [options] Conversion options
       * @returns Plain object
       */
      public static toObject(
        message: sprout.aixcourse.Choice,
        options?: $protobuf.IConversionOptions,
      ): { [k: string]: any }

      /**
       * Converts this Choice to JSON.
       * @returns JSON object
       */
      public toJSON(): { [k: string]: any }
    }

    /** Properties of a ChoiceAnswer. */
    interface IChoiceAnswer {
      /** ChoiceAnswer grade */
      grade?: sprout.aixcourse.IGradeAnswer | null

      /** ChoiceAnswer choices */
      choices?: sprout.aixcourse.IChoice[] | null
    }

    /** Represents a ChoiceAnswer. */
    class ChoiceAnswer implements IChoiceAnswer {
      /**
       * Constructs a new ChoiceAnswer.
       * @param [properties] Properties to set
       */
      constructor(properties?: sprout.aixcourse.IChoiceAnswer)

      /** ChoiceAnswer grade. */
      public grade?: sprout.aixcourse.IGradeAnswer | null

      /** ChoiceAnswer choices. */
      public choices: sprout.aixcourse.IChoice[]

      /**
       * Creates a new ChoiceAnswer instance using the specified properties.
       * @param [properties] Properties to set
       * @returns ChoiceAnswer instance
       */
      public static create(
        properties?: sprout.aixcourse.IChoiceAnswer,
      ): sprout.aixcourse.ChoiceAnswer

      /**
       * Encodes the specified ChoiceAnswer message. Does not implicitly {@link sprout.aixcourse.ChoiceAnswer.verify|verify} messages.
       * @param message ChoiceAnswer message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encode(
        message: sprout.aixcourse.IChoiceAnswer,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Encodes the specified ChoiceAnswer message, length delimited. Does not implicitly {@link sprout.aixcourse.ChoiceAnswer.verify|verify} messages.
       * @param message ChoiceAnswer message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encodeDelimited(
        message: sprout.aixcourse.IChoiceAnswer,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Decodes a ChoiceAnswer message from the specified reader or buffer.
       * @param reader Reader or buffer to decode from
       * @param [length] Message length if known beforehand
       * @returns ChoiceAnswer
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decode(
        reader: $protobuf.Reader | Uint8Array,
        length?: number,
      ): sprout.aixcourse.ChoiceAnswer

      /**
       * Decodes a ChoiceAnswer message from the specified reader or buffer, length delimited.
       * @param reader Reader or buffer to decode from
       * @returns ChoiceAnswer
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decodeDelimited(
        reader: $protobuf.Reader | Uint8Array,
      ): sprout.aixcourse.ChoiceAnswer

      /**
       * Verifies a ChoiceAnswer message.
       * @param message Plain object to verify
       * @returns `null` if valid, otherwise the reason why it is not
       */
      public static verify(message: { [k: string]: any }): string | null

      /**
       * Creates a ChoiceAnswer message from a plain object. Also converts values to their respective internal types.
       * @param object Plain object
       * @returns ChoiceAnswer
       */
      public static fromObject(object: {
        [k: string]: any
      }): sprout.aixcourse.ChoiceAnswer

      /**
       * Creates a plain object from a ChoiceAnswer message. Also converts values to other types if specified.
       * @param message ChoiceAnswer
       * @param [options] Conversion options
       * @returns Plain object
       */
      public static toObject(
        message: sprout.aixcourse.ChoiceAnswer,
        options?: $protobuf.IConversionOptions,
      ): { [k: string]: any }

      /**
       * Converts this ChoiceAnswer to JSON.
       * @returns JSON object
       */
      public toJSON(): { [k: string]: any }
    }

    /** Properties of an AudioScore. */
    interface IAudioScore {
      /** AudioScore score */
      score?: number | null

      /** AudioScore audioScoreDetail */
      audioScoreDetail?: dolemgo.scorer.IDeliteScore | null
    }

    /** Represents an AudioScore. */
    class AudioScore implements IAudioScore {
      /**
       * Constructs a new AudioScore.
       * @param [properties] Properties to set
       */
      constructor(properties?: sprout.aixcourse.IAudioScore)

      /** AudioScore score. */
      public score: number

      /** AudioScore audioScoreDetail. */
      public audioScoreDetail?: dolemgo.scorer.IDeliteScore | null

      /**
       * Creates a new AudioScore instance using the specified properties.
       * @param [properties] Properties to set
       * @returns AudioScore instance
       */
      public static create(
        properties?: sprout.aixcourse.IAudioScore,
      ): sprout.aixcourse.AudioScore

      /**
       * Encodes the specified AudioScore message. Does not implicitly {@link sprout.aixcourse.AudioScore.verify|verify} messages.
       * @param message AudioScore message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encode(
        message: sprout.aixcourse.IAudioScore,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Encodes the specified AudioScore message, length delimited. Does not implicitly {@link sprout.aixcourse.AudioScore.verify|verify} messages.
       * @param message AudioScore message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encodeDelimited(
        message: sprout.aixcourse.IAudioScore,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Decodes an AudioScore message from the specified reader or buffer.
       * @param reader Reader or buffer to decode from
       * @param [length] Message length if known beforehand
       * @returns AudioScore
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decode(
        reader: $protobuf.Reader | Uint8Array,
        length?: number,
      ): sprout.aixcourse.AudioScore

      /**
       * Decodes an AudioScore message from the specified reader or buffer, length delimited.
       * @param reader Reader or buffer to decode from
       * @returns AudioScore
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decodeDelimited(
        reader: $protobuf.Reader | Uint8Array,
      ): sprout.aixcourse.AudioScore

      /**
       * Verifies an AudioScore message.
       * @param message Plain object to verify
       * @returns `null` if valid, otherwise the reason why it is not
       */
      public static verify(message: { [k: string]: any }): string | null

      /**
       * Creates an AudioScore message from a plain object. Also converts values to their respective internal types.
       * @param object Plain object
       * @returns AudioScore
       */
      public static fromObject(object: {
        [k: string]: any
      }): sprout.aixcourse.AudioScore

      /**
       * Creates a plain object from an AudioScore message. Also converts values to other types if specified.
       * @param message AudioScore
       * @param [options] Conversion options
       * @returns Plain object
       */
      public static toObject(
        message: sprout.aixcourse.AudioScore,
        options?: $protobuf.IConversionOptions,
      ): { [k: string]: any }

      /**
       * Converts this AudioScore to JSON.
       * @returns JSON object
       */
      public toJSON(): { [k: string]: any }
    }

    /** Properties of an AudioRecordAnswer. */
    interface IAudioRecordAnswer {
      /** AudioRecordAnswer audioScore */
      audioScore?: sprout.aixcourse.IAudioScore | null

      /** AudioRecordAnswer audioId */
      audioId?: string | null
    }

    /** Represents an AudioRecordAnswer. */
    class AudioRecordAnswer implements IAudioRecordAnswer {
      /**
       * Constructs a new AudioRecordAnswer.
       * @param [properties] Properties to set
       */
      constructor(properties?: sprout.aixcourse.IAudioRecordAnswer)

      /** AudioRecordAnswer audioScore. */
      public audioScore?: sprout.aixcourse.IAudioScore | null

      /** AudioRecordAnswer audioId. */
      public audioId: string

      /**
       * Creates a new AudioRecordAnswer instance using the specified properties.
       * @param [properties] Properties to set
       * @returns AudioRecordAnswer instance
       */
      public static create(
        properties?: sprout.aixcourse.IAudioRecordAnswer,
      ): sprout.aixcourse.AudioRecordAnswer

      /**
       * Encodes the specified AudioRecordAnswer message. Does not implicitly {@link sprout.aixcourse.AudioRecordAnswer.verify|verify} messages.
       * @param message AudioRecordAnswer message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encode(
        message: sprout.aixcourse.IAudioRecordAnswer,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Encodes the specified AudioRecordAnswer message, length delimited. Does not implicitly {@link sprout.aixcourse.AudioRecordAnswer.verify|verify} messages.
       * @param message AudioRecordAnswer message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encodeDelimited(
        message: sprout.aixcourse.IAudioRecordAnswer,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Decodes an AudioRecordAnswer message from the specified reader or buffer.
       * @param reader Reader or buffer to decode from
       * @param [length] Message length if known beforehand
       * @returns AudioRecordAnswer
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decode(
        reader: $protobuf.Reader | Uint8Array,
        length?: number,
      ): sprout.aixcourse.AudioRecordAnswer

      /**
       * Decodes an AudioRecordAnswer message from the specified reader or buffer, length delimited.
       * @param reader Reader or buffer to decode from
       * @returns AudioRecordAnswer
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decodeDelimited(
        reader: $protobuf.Reader | Uint8Array,
      ): sprout.aixcourse.AudioRecordAnswer

      /**
       * Verifies an AudioRecordAnswer message.
       * @param message Plain object to verify
       * @returns `null` if valid, otherwise the reason why it is not
       */
      public static verify(message: { [k: string]: any }): string | null

      /**
       * Creates an AudioRecordAnswer message from a plain object. Also converts values to their respective internal types.
       * @param object Plain object
       * @returns AudioRecordAnswer
       */
      public static fromObject(object: {
        [k: string]: any
      }): sprout.aixcourse.AudioRecordAnswer

      /**
       * Creates a plain object from an AudioRecordAnswer message. Also converts values to other types if specified.
       * @param message AudioRecordAnswer
       * @param [options] Conversion options
       * @returns Plain object
       */
      public static toObject(
        message: sprout.aixcourse.AudioRecordAnswer,
        options?: $protobuf.IConversionOptions,
      ): { [k: string]: any }

      /**
       * Converts this AudioRecordAnswer to JSON.
       * @returns JSON object
       */
      public toJSON(): { [k: string]: any }
    }

    /** Properties of a RoundAudioRecordAnswer. */
    interface IRoundAudioRecordAnswer {
      /** RoundAudioRecordAnswer audioScores */
      audioScores?: sprout.aixcourse.IAudioScore[] | null

      /** RoundAudioRecordAnswer audioId */
      audioId?: string | null
    }

    /** Represents a RoundAudioRecordAnswer. */
    class RoundAudioRecordAnswer implements IRoundAudioRecordAnswer {
      /**
       * Constructs a new RoundAudioRecordAnswer.
       * @param [properties] Properties to set
       */
      constructor(properties?: sprout.aixcourse.IRoundAudioRecordAnswer)

      /** RoundAudioRecordAnswer audioScores. */
      public audioScores: sprout.aixcourse.IAudioScore[]

      /** RoundAudioRecordAnswer audioId. */
      public audioId: string

      /**
       * Creates a new RoundAudioRecordAnswer instance using the specified properties.
       * @param [properties] Properties to set
       * @returns RoundAudioRecordAnswer instance
       */
      public static create(
        properties?: sprout.aixcourse.IRoundAudioRecordAnswer,
      ): sprout.aixcourse.RoundAudioRecordAnswer

      /**
       * Encodes the specified RoundAudioRecordAnswer message. Does not implicitly {@link sprout.aixcourse.RoundAudioRecordAnswer.verify|verify} messages.
       * @param message RoundAudioRecordAnswer message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encode(
        message: sprout.aixcourse.IRoundAudioRecordAnswer,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Encodes the specified RoundAudioRecordAnswer message, length delimited. Does not implicitly {@link sprout.aixcourse.RoundAudioRecordAnswer.verify|verify} messages.
       * @param message RoundAudioRecordAnswer message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encodeDelimited(
        message: sprout.aixcourse.IRoundAudioRecordAnswer,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Decodes a RoundAudioRecordAnswer message from the specified reader or buffer.
       * @param reader Reader or buffer to decode from
       * @param [length] Message length if known beforehand
       * @returns RoundAudioRecordAnswer
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decode(
        reader: $protobuf.Reader | Uint8Array,
        length?: number,
      ): sprout.aixcourse.RoundAudioRecordAnswer

      /**
       * Decodes a RoundAudioRecordAnswer message from the specified reader or buffer, length delimited.
       * @param reader Reader or buffer to decode from
       * @returns RoundAudioRecordAnswer
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decodeDelimited(
        reader: $protobuf.Reader | Uint8Array,
      ): sprout.aixcourse.RoundAudioRecordAnswer

      /**
       * Verifies a RoundAudioRecordAnswer message.
       * @param message Plain object to verify
       * @returns `null` if valid, otherwise the reason why it is not
       */
      public static verify(message: { [k: string]: any }): string | null

      /**
       * Creates a RoundAudioRecordAnswer message from a plain object. Also converts values to their respective internal types.
       * @param object Plain object
       * @returns RoundAudioRecordAnswer
       */
      public static fromObject(object: {
        [k: string]: any
      }): sprout.aixcourse.RoundAudioRecordAnswer

      /**
       * Creates a plain object from a RoundAudioRecordAnswer message. Also converts values to other types if specified.
       * @param message RoundAudioRecordAnswer
       * @param [options] Conversion options
       * @returns Plain object
       */
      public static toObject(
        message: sprout.aixcourse.RoundAudioRecordAnswer,
        options?: $protobuf.IConversionOptions,
      ): { [k: string]: any }

      /**
       * Converts this RoundAudioRecordAnswer to JSON.
       * @returns JSON object
       */
      public toJSON(): { [k: string]: any }
    }

    /** Properties of a MultiAudioRecordAnswer. */
    interface IMultiAudioRecordAnswer {
      /** MultiAudioRecordAnswer audioRecordAnswer */
      audioRecordAnswer?: sprout.aixcourse.IAudioRecordAnswer[] | null
    }

    /** Represents a MultiAudioRecordAnswer. */
    class MultiAudioRecordAnswer implements IMultiAudioRecordAnswer {
      /**
       * Constructs a new MultiAudioRecordAnswer.
       * @param [properties] Properties to set
       */
      constructor(properties?: sprout.aixcourse.IMultiAudioRecordAnswer)

      /** MultiAudioRecordAnswer audioRecordAnswer. */
      public audioRecordAnswer: sprout.aixcourse.IAudioRecordAnswer[]

      /**
       * Creates a new MultiAudioRecordAnswer instance using the specified properties.
       * @param [properties] Properties to set
       * @returns MultiAudioRecordAnswer instance
       */
      public static create(
        properties?: sprout.aixcourse.IMultiAudioRecordAnswer,
      ): sprout.aixcourse.MultiAudioRecordAnswer

      /**
       * Encodes the specified MultiAudioRecordAnswer message. Does not implicitly {@link sprout.aixcourse.MultiAudioRecordAnswer.verify|verify} messages.
       * @param message MultiAudioRecordAnswer message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encode(
        message: sprout.aixcourse.IMultiAudioRecordAnswer,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Encodes the specified MultiAudioRecordAnswer message, length delimited. Does not implicitly {@link sprout.aixcourse.MultiAudioRecordAnswer.verify|verify} messages.
       * @param message MultiAudioRecordAnswer message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encodeDelimited(
        message: sprout.aixcourse.IMultiAudioRecordAnswer,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Decodes a MultiAudioRecordAnswer message from the specified reader or buffer.
       * @param reader Reader or buffer to decode from
       * @param [length] Message length if known beforehand
       * @returns MultiAudioRecordAnswer
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decode(
        reader: $protobuf.Reader | Uint8Array,
        length?: number,
      ): sprout.aixcourse.MultiAudioRecordAnswer

      /**
       * Decodes a MultiAudioRecordAnswer message from the specified reader or buffer, length delimited.
       * @param reader Reader or buffer to decode from
       * @returns MultiAudioRecordAnswer
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decodeDelimited(
        reader: $protobuf.Reader | Uint8Array,
      ): sprout.aixcourse.MultiAudioRecordAnswer

      /**
       * Verifies a MultiAudioRecordAnswer message.
       * @param message Plain object to verify
       * @returns `null` if valid, otherwise the reason why it is not
       */
      public static verify(message: { [k: string]: any }): string | null

      /**
       * Creates a MultiAudioRecordAnswer message from a plain object. Also converts values to their respective internal types.
       * @param object Plain object
       * @returns MultiAudioRecordAnswer
       */
      public static fromObject(object: {
        [k: string]: any
      }): sprout.aixcourse.MultiAudioRecordAnswer

      /**
       * Creates a plain object from a MultiAudioRecordAnswer message. Also converts values to other types if specified.
       * @param message MultiAudioRecordAnswer
       * @param [options] Conversion options
       * @returns Plain object
       */
      public static toObject(
        message: sprout.aixcourse.MultiAudioRecordAnswer,
        options?: $protobuf.IConversionOptions,
      ): { [k: string]: any }

      /**
       * Converts this MultiAudioRecordAnswer to JSON.
       * @returns JSON object
       */
      public toJSON(): { [k: string]: any }
    }

    /** Properties of a FreeAudioRecordAnswer. */
    interface IFreeAudioRecordAnswer {
      /** FreeAudioRecordAnswer text */
      text?: string | null

      /** FreeAudioRecordAnswer audioRecordAnswer */
      audioRecordAnswer?: sprout.aixcourse.IAudioRecordAnswer | null
    }

    /** Represents a FreeAudioRecordAnswer. */
    class FreeAudioRecordAnswer implements IFreeAudioRecordAnswer {
      /**
       * Constructs a new FreeAudioRecordAnswer.
       * @param [properties] Properties to set
       */
      constructor(properties?: sprout.aixcourse.IFreeAudioRecordAnswer)

      /** FreeAudioRecordAnswer text. */
      public text: string

      /** FreeAudioRecordAnswer audioRecordAnswer. */
      public audioRecordAnswer?: sprout.aixcourse.IAudioRecordAnswer | null

      /**
       * Creates a new FreeAudioRecordAnswer instance using the specified properties.
       * @param [properties] Properties to set
       * @returns FreeAudioRecordAnswer instance
       */
      public static create(
        properties?: sprout.aixcourse.IFreeAudioRecordAnswer,
      ): sprout.aixcourse.FreeAudioRecordAnswer

      /**
       * Encodes the specified FreeAudioRecordAnswer message. Does not implicitly {@link sprout.aixcourse.FreeAudioRecordAnswer.verify|verify} messages.
       * @param message FreeAudioRecordAnswer message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encode(
        message: sprout.aixcourse.IFreeAudioRecordAnswer,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Encodes the specified FreeAudioRecordAnswer message, length delimited. Does not implicitly {@link sprout.aixcourse.FreeAudioRecordAnswer.verify|verify} messages.
       * @param message FreeAudioRecordAnswer message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encodeDelimited(
        message: sprout.aixcourse.IFreeAudioRecordAnswer,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Decodes a FreeAudioRecordAnswer message from the specified reader or buffer.
       * @param reader Reader or buffer to decode from
       * @param [length] Message length if known beforehand
       * @returns FreeAudioRecordAnswer
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decode(
        reader: $protobuf.Reader | Uint8Array,
        length?: number,
      ): sprout.aixcourse.FreeAudioRecordAnswer

      /**
       * Decodes a FreeAudioRecordAnswer message from the specified reader or buffer, length delimited.
       * @param reader Reader or buffer to decode from
       * @returns FreeAudioRecordAnswer
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decodeDelimited(
        reader: $protobuf.Reader | Uint8Array,
      ): sprout.aixcourse.FreeAudioRecordAnswer

      /**
       * Verifies a FreeAudioRecordAnswer message.
       * @param message Plain object to verify
       * @returns `null` if valid, otherwise the reason why it is not
       */
      public static verify(message: { [k: string]: any }): string | null

      /**
       * Creates a FreeAudioRecordAnswer message from a plain object. Also converts values to their respective internal types.
       * @param object Plain object
       * @returns FreeAudioRecordAnswer
       */
      public static fromObject(object: {
        [k: string]: any
      }): sprout.aixcourse.FreeAudioRecordAnswer

      /**
       * Creates a plain object from a FreeAudioRecordAnswer message. Also converts values to other types if specified.
       * @param message FreeAudioRecordAnswer
       * @param [options] Conversion options
       * @returns Plain object
       */
      public static toObject(
        message: sprout.aixcourse.FreeAudioRecordAnswer,
        options?: $protobuf.IConversionOptions,
      ): { [k: string]: any }

      /**
       * Converts this FreeAudioRecordAnswer to JSON.
       * @returns JSON object
       */
      public toJSON(): { [k: string]: any }
    }

    /** Properties of a RoundChoiceAnswer. */
    interface IRoundChoiceAnswer {
      /** RoundChoiceAnswer choiceAnswers */
      choiceAnswers?: sprout.aixcourse.IChoiceAnswer[] | null
    }

    /** Represents a RoundChoiceAnswer. */
    class RoundChoiceAnswer implements IRoundChoiceAnswer {
      /**
       * Constructs a new RoundChoiceAnswer.
       * @param [properties] Properties to set
       */
      constructor(properties?: sprout.aixcourse.IRoundChoiceAnswer)

      /** RoundChoiceAnswer choiceAnswers. */
      public choiceAnswers: sprout.aixcourse.IChoiceAnswer[]

      /**
       * Creates a new RoundChoiceAnswer instance using the specified properties.
       * @param [properties] Properties to set
       * @returns RoundChoiceAnswer instance
       */
      public static create(
        properties?: sprout.aixcourse.IRoundChoiceAnswer,
      ): sprout.aixcourse.RoundChoiceAnswer

      /**
       * Encodes the specified RoundChoiceAnswer message. Does not implicitly {@link sprout.aixcourse.RoundChoiceAnswer.verify|verify} messages.
       * @param message RoundChoiceAnswer message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encode(
        message: sprout.aixcourse.IRoundChoiceAnswer,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Encodes the specified RoundChoiceAnswer message, length delimited. Does not implicitly {@link sprout.aixcourse.RoundChoiceAnswer.verify|verify} messages.
       * @param message RoundChoiceAnswer message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encodeDelimited(
        message: sprout.aixcourse.IRoundChoiceAnswer,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Decodes a RoundChoiceAnswer message from the specified reader or buffer.
       * @param reader Reader or buffer to decode from
       * @param [length] Message length if known beforehand
       * @returns RoundChoiceAnswer
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decode(
        reader: $protobuf.Reader | Uint8Array,
        length?: number,
      ): sprout.aixcourse.RoundChoiceAnswer

      /**
       * Decodes a RoundChoiceAnswer message from the specified reader or buffer, length delimited.
       * @param reader Reader or buffer to decode from
       * @returns RoundChoiceAnswer
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decodeDelimited(
        reader: $protobuf.Reader | Uint8Array,
      ): sprout.aixcourse.RoundChoiceAnswer

      /**
       * Verifies a RoundChoiceAnswer message.
       * @param message Plain object to verify
       * @returns `null` if valid, otherwise the reason why it is not
       */
      public static verify(message: { [k: string]: any }): string | null

      /**
       * Creates a RoundChoiceAnswer message from a plain object. Also converts values to their respective internal types.
       * @param object Plain object
       * @returns RoundChoiceAnswer
       */
      public static fromObject(object: {
        [k: string]: any
      }): sprout.aixcourse.RoundChoiceAnswer

      /**
       * Creates a plain object from a RoundChoiceAnswer message. Also converts values to other types if specified.
       * @param message RoundChoiceAnswer
       * @param [options] Conversion options
       * @returns Plain object
       */
      public static toObject(
        message: sprout.aixcourse.RoundChoiceAnswer,
        options?: $protobuf.IConversionOptions,
      ): { [k: string]: any }

      /**
       * Converts this RoundChoiceAnswer to JSON.
       * @returns JSON object
       */
      public toJSON(): { [k: string]: any }
    }

    /** Properties of a AIXStreamAnswer. */
    interface IAIXStreamAnswer {
      /** AIXStreamAnswer timestampUsec */
      timestampUsec?: number | Long | null

      /** AIXStreamAnswer activityId */
      activityId?: number | Long | null

      /** AIXStreamAnswer activityPartId */
      activityPartId?: string | null

      /** AIXStreamAnswer round */
      round?: number | null

      /** AIXStreamAnswer scoreAnswer */
      scoreAnswer?: sprout.aixcourse.IStreamScoreAnswer | null

      /** AIXStreamAnswer scoreFreeAnswer */
      scoreFreeAnswer?: sprout.aixcourse.IStreamScoreFreeAnswer | null

      /** AIXStreamAnswer gradeAnswer */
      gradeAnswer?: sprout.aixcourse.IStreamGradeAnswer | null

      /** AIXStreamAnswer freeAnswer */
      freeAnswer?: sprout.aixcourse.IStreamFreeAnswer | null

      /** AIXStreamAnswer emptyAnswer */
      emptyAnswer?: sprout.aixcourse.IStreamEmptyAnswer | null

      /** AIXStreamAnswer timesUpAnswer */
      timesUpAnswer?: sprout.aixcourse.IStreamTimesUpAnswer | null
    }

    /** Represents a AIXStreamAnswer. */
    class AIXStreamAnswer implements IAIXStreamAnswer {
      /**
       * Constructs a new AIXStreamAnswer.
       * @param [properties] Properties to set
       */
      constructor(properties?: sprout.aixcourse.IAIXStreamAnswer)

      /** AIXStreamAnswer timestampUsec. */
      public timestampUsec: number | Long

      /** AIXStreamAnswer activityId. */
      public activityId: number | Long

      /** AIXStreamAnswer activityPartId. */
      public activityPartId: string

      /** AIXStreamAnswer round. */
      public round: number

      /** AIXStreamAnswer scoreAnswer. */
      public scoreAnswer?: sprout.aixcourse.IStreamScoreAnswer | null

      /** AIXStreamAnswer scoreFreeAnswer. */
      public scoreFreeAnswer?: sprout.aixcourse.IStreamScoreFreeAnswer | null

      /** AIXStreamAnswer gradeAnswer. */
      public gradeAnswer?: sprout.aixcourse.IStreamGradeAnswer | null

      /** AIXStreamAnswer freeAnswer. */
      public freeAnswer?: sprout.aixcourse.IStreamFreeAnswer | null

      /** AIXStreamAnswer emptyAnswer. */
      public emptyAnswer?: sprout.aixcourse.IStreamEmptyAnswer | null

      /** AIXStreamAnswer timesUpAnswer. */
      public timesUpAnswer?: sprout.aixcourse.IStreamTimesUpAnswer | null

      /** AIXStreamAnswer answerOneof. */
      public answerOneof?:
        | 'scoreAnswer'
        | 'scoreFreeAnswer'
        | 'gradeAnswer'
        | 'freeAnswer'
        | 'emptyAnswer'
        | 'timesUpAnswer'

      /**
       * Creates a new AIXStreamAnswer instance using the specified properties.
       * @param [properties] Properties to set
       * @returns AIXStreamAnswer instance
       */
      public static create(
        properties?: sprout.aixcourse.IAIXStreamAnswer,
      ): sprout.aixcourse.AIXStreamAnswer

      /**
       * Encodes the specified AIXStreamAnswer message. Does not implicitly {@link sprout.aixcourse.AIXStreamAnswer.verify|verify} messages.
       * @param message AIXStreamAnswer message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encode(
        message: sprout.aixcourse.IAIXStreamAnswer,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Encodes the specified AIXStreamAnswer message, length delimited. Does not implicitly {@link sprout.aixcourse.AIXStreamAnswer.verify|verify} messages.
       * @param message AIXStreamAnswer message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encodeDelimited(
        message: sprout.aixcourse.IAIXStreamAnswer,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Decodes a AIXStreamAnswer message from the specified reader or buffer.
       * @param reader Reader or buffer to decode from
       * @param [length] Message length if known beforehand
       * @returns AIXStreamAnswer
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decode(
        reader: $protobuf.Reader | Uint8Array,
        length?: number,
      ): sprout.aixcourse.AIXStreamAnswer

      /**
       * Decodes a AIXStreamAnswer message from the specified reader or buffer, length delimited.
       * @param reader Reader or buffer to decode from
       * @returns AIXStreamAnswer
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decodeDelimited(
        reader: $protobuf.Reader | Uint8Array,
      ): sprout.aixcourse.AIXStreamAnswer

      /**
       * Verifies a AIXStreamAnswer message.
       * @param message Plain object to verify
       * @returns `null` if valid, otherwise the reason why it is not
       */
      public static verify(message: { [k: string]: any }): string | null

      /**
       * Creates a AIXStreamAnswer message from a plain object. Also converts values to their respective internal types.
       * @param object Plain object
       * @returns AIXStreamAnswer
       */
      public static fromObject(object: {
        [k: string]: any
      }): sprout.aixcourse.AIXStreamAnswer

      /**
       * Creates a plain object from a AIXStreamAnswer message. Also converts values to other types if specified.
       * @param message AIXStreamAnswer
       * @param [options] Conversion options
       * @returns Plain object
       */
      public static toObject(
        message: sprout.aixcourse.AIXStreamAnswer,
        options?: $protobuf.IConversionOptions,
      ): { [k: string]: any }

      /**
       * Converts this AIXStreamAnswer to JSON.
       * @returns JSON object
       */
      public toJSON(): { [k: string]: any }
    }

    /** Properties of a StreamEmptyAnswer. */
    interface IStreamEmptyAnswer {}

    /** Represents a StreamEmptyAnswer. */
    class StreamEmptyAnswer implements IStreamEmptyAnswer {
      /**
       * Constructs a new StreamEmptyAnswer.
       * @param [properties] Properties to set
       */
      constructor(properties?: sprout.aixcourse.IStreamEmptyAnswer)

      /**
       * Creates a new StreamEmptyAnswer instance using the specified properties.
       * @param [properties] Properties to set
       * @returns StreamEmptyAnswer instance
       */
      public static create(
        properties?: sprout.aixcourse.IStreamEmptyAnswer,
      ): sprout.aixcourse.StreamEmptyAnswer

      /**
       * Encodes the specified StreamEmptyAnswer message. Does not implicitly {@link sprout.aixcourse.StreamEmptyAnswer.verify|verify} messages.
       * @param message StreamEmptyAnswer message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encode(
        message: sprout.aixcourse.IStreamEmptyAnswer,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Encodes the specified StreamEmptyAnswer message, length delimited. Does not implicitly {@link sprout.aixcourse.StreamEmptyAnswer.verify|verify} messages.
       * @param message StreamEmptyAnswer message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encodeDelimited(
        message: sprout.aixcourse.IStreamEmptyAnswer,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Decodes a StreamEmptyAnswer message from the specified reader or buffer.
       * @param reader Reader or buffer to decode from
       * @param [length] Message length if known beforehand
       * @returns StreamEmptyAnswer
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decode(
        reader: $protobuf.Reader | Uint8Array,
        length?: number,
      ): sprout.aixcourse.StreamEmptyAnswer

      /**
       * Decodes a StreamEmptyAnswer message from the specified reader or buffer, length delimited.
       * @param reader Reader or buffer to decode from
       * @returns StreamEmptyAnswer
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decodeDelimited(
        reader: $protobuf.Reader | Uint8Array,
      ): sprout.aixcourse.StreamEmptyAnswer

      /**
       * Verifies a StreamEmptyAnswer message.
       * @param message Plain object to verify
       * @returns `null` if valid, otherwise the reason why it is not
       */
      public static verify(message: { [k: string]: any }): string | null

      /**
       * Creates a StreamEmptyAnswer message from a plain object. Also converts values to their respective internal types.
       * @param object Plain object
       * @returns StreamEmptyAnswer
       */
      public static fromObject(object: {
        [k: string]: any
      }): sprout.aixcourse.StreamEmptyAnswer

      /**
       * Creates a plain object from a StreamEmptyAnswer message. Also converts values to other types if specified.
       * @param message StreamEmptyAnswer
       * @param [options] Conversion options
       * @returns Plain object
       */
      public static toObject(
        message: sprout.aixcourse.StreamEmptyAnswer,
        options?: $protobuf.IConversionOptions,
      ): { [k: string]: any }

      /**
       * Converts this StreamEmptyAnswer to JSON.
       * @returns JSON object
       */
      public toJSON(): { [k: string]: any }
    }

    /** Properties of a StreamScoreAnswer. */
    interface IStreamScoreAnswer {
      /** StreamScoreAnswer score */
      score?: number | null
    }

    /** Represents a StreamScoreAnswer. */
    class StreamScoreAnswer implements IStreamScoreAnswer {
      /**
       * Constructs a new StreamScoreAnswer.
       * @param [properties] Properties to set
       */
      constructor(properties?: sprout.aixcourse.IStreamScoreAnswer)

      /** StreamScoreAnswer score. */
      public score: number

      /**
       * Creates a new StreamScoreAnswer instance using the specified properties.
       * @param [properties] Properties to set
       * @returns StreamScoreAnswer instance
       */
      public static create(
        properties?: sprout.aixcourse.IStreamScoreAnswer,
      ): sprout.aixcourse.StreamScoreAnswer

      /**
       * Encodes the specified StreamScoreAnswer message. Does not implicitly {@link sprout.aixcourse.StreamScoreAnswer.verify|verify} messages.
       * @param message StreamScoreAnswer message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encode(
        message: sprout.aixcourse.IStreamScoreAnswer,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Encodes the specified StreamScoreAnswer message, length delimited. Does not implicitly {@link sprout.aixcourse.StreamScoreAnswer.verify|verify} messages.
       * @param message StreamScoreAnswer message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encodeDelimited(
        message: sprout.aixcourse.IStreamScoreAnswer,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Decodes a StreamScoreAnswer message from the specified reader or buffer.
       * @param reader Reader or buffer to decode from
       * @param [length] Message length if known beforehand
       * @returns StreamScoreAnswer
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decode(
        reader: $protobuf.Reader | Uint8Array,
        length?: number,
      ): sprout.aixcourse.StreamScoreAnswer

      /**
       * Decodes a StreamScoreAnswer message from the specified reader or buffer, length delimited.
       * @param reader Reader or buffer to decode from
       * @returns StreamScoreAnswer
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decodeDelimited(
        reader: $protobuf.Reader | Uint8Array,
      ): sprout.aixcourse.StreamScoreAnswer

      /**
       * Verifies a StreamScoreAnswer message.
       * @param message Plain object to verify
       * @returns `null` if valid, otherwise the reason why it is not
       */
      public static verify(message: { [k: string]: any }): string | null

      /**
       * Creates a StreamScoreAnswer message from a plain object. Also converts values to their respective internal types.
       * @param object Plain object
       * @returns StreamScoreAnswer
       */
      public static fromObject(object: {
        [k: string]: any
      }): sprout.aixcourse.StreamScoreAnswer

      /**
       * Creates a plain object from a StreamScoreAnswer message. Also converts values to other types if specified.
       * @param message StreamScoreAnswer
       * @param [options] Conversion options
       * @returns Plain object
       */
      public static toObject(
        message: sprout.aixcourse.StreamScoreAnswer,
        options?: $protobuf.IConversionOptions,
      ): { [k: string]: any }

      /**
       * Converts this StreamScoreAnswer to JSON.
       * @returns JSON object
       */
      public toJSON(): { [k: string]: any }
    }

    /** Properties of a StreamScoreFreeAnswer. */
    interface IStreamScoreFreeAnswer {
      /** StreamScoreFreeAnswer text */
      text?: string | null

      /** StreamScoreFreeAnswer score */
      score?: number | null
    }

    /** Represents a StreamScoreFreeAnswer. */
    class StreamScoreFreeAnswer implements IStreamScoreFreeAnswer {
      /**
       * Constructs a new StreamScoreFreeAnswer.
       * @param [properties] Properties to set
       */
      constructor(properties?: sprout.aixcourse.IStreamScoreFreeAnswer)

      /** StreamScoreFreeAnswer text. */
      public text: string

      /** StreamScoreFreeAnswer score. */
      public score: number

      /**
       * Creates a new StreamScoreFreeAnswer instance using the specified properties.
       * @param [properties] Properties to set
       * @returns StreamScoreFreeAnswer instance
       */
      public static create(
        properties?: sprout.aixcourse.IStreamScoreFreeAnswer,
      ): sprout.aixcourse.StreamScoreFreeAnswer

      /**
       * Encodes the specified StreamScoreFreeAnswer message. Does not implicitly {@link sprout.aixcourse.StreamScoreFreeAnswer.verify|verify} messages.
       * @param message StreamScoreFreeAnswer message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encode(
        message: sprout.aixcourse.IStreamScoreFreeAnswer,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Encodes the specified StreamScoreFreeAnswer message, length delimited. Does not implicitly {@link sprout.aixcourse.StreamScoreFreeAnswer.verify|verify} messages.
       * @param message StreamScoreFreeAnswer message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encodeDelimited(
        message: sprout.aixcourse.IStreamScoreFreeAnswer,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Decodes a StreamScoreFreeAnswer message from the specified reader or buffer.
       * @param reader Reader or buffer to decode from
       * @param [length] Message length if known beforehand
       * @returns StreamScoreFreeAnswer
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decode(
        reader: $protobuf.Reader | Uint8Array,
        length?: number,
      ): sprout.aixcourse.StreamScoreFreeAnswer

      /**
       * Decodes a StreamScoreFreeAnswer message from the specified reader or buffer, length delimited.
       * @param reader Reader or buffer to decode from
       * @returns StreamScoreFreeAnswer
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decodeDelimited(
        reader: $protobuf.Reader | Uint8Array,
      ): sprout.aixcourse.StreamScoreFreeAnswer

      /**
       * Verifies a StreamScoreFreeAnswer message.
       * @param message Plain object to verify
       * @returns `null` if valid, otherwise the reason why it is not
       */
      public static verify(message: { [k: string]: any }): string | null

      /**
       * Creates a StreamScoreFreeAnswer message from a plain object. Also converts values to their respective internal types.
       * @param object Plain object
       * @returns StreamScoreFreeAnswer
       */
      public static fromObject(object: {
        [k: string]: any
      }): sprout.aixcourse.StreamScoreFreeAnswer

      /**
       * Creates a plain object from a StreamScoreFreeAnswer message. Also converts values to other types if specified.
       * @param message StreamScoreFreeAnswer
       * @param [options] Conversion options
       * @returns Plain object
       */
      public static toObject(
        message: sprout.aixcourse.StreamScoreFreeAnswer,
        options?: $protobuf.IConversionOptions,
      ): { [k: string]: any }

      /**
       * Converts this StreamScoreFreeAnswer to JSON.
       * @returns JSON object
       */
      public toJSON(): { [k: string]: any }
    }

    /** Properties of a StreamFreeAnswer. */
    interface IStreamFreeAnswer {
      /** StreamFreeAnswer text */
      text?: string | null
    }

    /** Represents a StreamFreeAnswer. */
    class StreamFreeAnswer implements IStreamFreeAnswer {
      /**
       * Constructs a new StreamFreeAnswer.
       * @param [properties] Properties to set
       */
      constructor(properties?: sprout.aixcourse.IStreamFreeAnswer)

      /** StreamFreeAnswer text. */
      public text: string

      /**
       * Creates a new StreamFreeAnswer instance using the specified properties.
       * @param [properties] Properties to set
       * @returns StreamFreeAnswer instance
       */
      public static create(
        properties?: sprout.aixcourse.IStreamFreeAnswer,
      ): sprout.aixcourse.StreamFreeAnswer

      /**
       * Encodes the specified StreamFreeAnswer message. Does not implicitly {@link sprout.aixcourse.StreamFreeAnswer.verify|verify} messages.
       * @param message StreamFreeAnswer message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encode(
        message: sprout.aixcourse.IStreamFreeAnswer,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Encodes the specified StreamFreeAnswer message, length delimited. Does not implicitly {@link sprout.aixcourse.StreamFreeAnswer.verify|verify} messages.
       * @param message StreamFreeAnswer message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encodeDelimited(
        message: sprout.aixcourse.IStreamFreeAnswer,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Decodes a StreamFreeAnswer message from the specified reader or buffer.
       * @param reader Reader or buffer to decode from
       * @param [length] Message length if known beforehand
       * @returns StreamFreeAnswer
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decode(
        reader: $protobuf.Reader | Uint8Array,
        length?: number,
      ): sprout.aixcourse.StreamFreeAnswer

      /**
       * Decodes a StreamFreeAnswer message from the specified reader or buffer, length delimited.
       * @param reader Reader or buffer to decode from
       * @returns StreamFreeAnswer
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decodeDelimited(
        reader: $protobuf.Reader | Uint8Array,
      ): sprout.aixcourse.StreamFreeAnswer

      /**
       * Verifies a StreamFreeAnswer message.
       * @param message Plain object to verify
       * @returns `null` if valid, otherwise the reason why it is not
       */
      public static verify(message: { [k: string]: any }): string | null

      /**
       * Creates a StreamFreeAnswer message from a plain object. Also converts values to their respective internal types.
       * @param object Plain object
       * @returns StreamFreeAnswer
       */
      public static fromObject(object: {
        [k: string]: any
      }): sprout.aixcourse.StreamFreeAnswer

      /**
       * Creates a plain object from a StreamFreeAnswer message. Also converts values to other types if specified.
       * @param message StreamFreeAnswer
       * @param [options] Conversion options
       * @returns Plain object
       */
      public static toObject(
        message: sprout.aixcourse.StreamFreeAnswer,
        options?: $protobuf.IConversionOptions,
      ): { [k: string]: any }

      /**
       * Converts this StreamFreeAnswer to JSON.
       * @returns JSON object
       */
      public toJSON(): { [k: string]: any }
    }

    /** Properties of a StreamGradeAnswer. */
    interface IStreamGradeAnswer {
      /** StreamGradeAnswer grade */
      grade?: sprout.aixcourse.GradeType.Enum | null
    }

    /** Represents a StreamGradeAnswer. */
    class StreamGradeAnswer implements IStreamGradeAnswer {
      /**
       * Constructs a new StreamGradeAnswer.
       * @param [properties] Properties to set
       */
      constructor(properties?: sprout.aixcourse.IStreamGradeAnswer)

      /** StreamGradeAnswer grade. */
      public grade: sprout.aixcourse.GradeType.Enum

      /**
       * Creates a new StreamGradeAnswer instance using the specified properties.
       * @param [properties] Properties to set
       * @returns StreamGradeAnswer instance
       */
      public static create(
        properties?: sprout.aixcourse.IStreamGradeAnswer,
      ): sprout.aixcourse.StreamGradeAnswer

      /**
       * Encodes the specified StreamGradeAnswer message. Does not implicitly {@link sprout.aixcourse.StreamGradeAnswer.verify|verify} messages.
       * @param message StreamGradeAnswer message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encode(
        message: sprout.aixcourse.IStreamGradeAnswer,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Encodes the specified StreamGradeAnswer message, length delimited. Does not implicitly {@link sprout.aixcourse.StreamGradeAnswer.verify|verify} messages.
       * @param message StreamGradeAnswer message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encodeDelimited(
        message: sprout.aixcourse.IStreamGradeAnswer,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Decodes a StreamGradeAnswer message from the specified reader or buffer.
       * @param reader Reader or buffer to decode from
       * @param [length] Message length if known beforehand
       * @returns StreamGradeAnswer
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decode(
        reader: $protobuf.Reader | Uint8Array,
        length?: number,
      ): sprout.aixcourse.StreamGradeAnswer

      /**
       * Decodes a StreamGradeAnswer message from the specified reader or buffer, length delimited.
       * @param reader Reader or buffer to decode from
       * @returns StreamGradeAnswer
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decodeDelimited(
        reader: $protobuf.Reader | Uint8Array,
      ): sprout.aixcourse.StreamGradeAnswer

      /**
       * Verifies a StreamGradeAnswer message.
       * @param message Plain object to verify
       * @returns `null` if valid, otherwise the reason why it is not
       */
      public static verify(message: { [k: string]: any }): string | null

      /**
       * Creates a StreamGradeAnswer message from a plain object. Also converts values to their respective internal types.
       * @param object Plain object
       * @returns StreamGradeAnswer
       */
      public static fromObject(object: {
        [k: string]: any
      }): sprout.aixcourse.StreamGradeAnswer

      /**
       * Creates a plain object from a StreamGradeAnswer message. Also converts values to other types if specified.
       * @param message StreamGradeAnswer
       * @param [options] Conversion options
       * @returns Plain object
       */
      public static toObject(
        message: sprout.aixcourse.StreamGradeAnswer,
        options?: $protobuf.IConversionOptions,
      ): { [k: string]: any }

      /**
       * Converts this StreamGradeAnswer to JSON.
       * @returns JSON object
       */
      public toJSON(): { [k: string]: any }
    }

    /** Properties of a StreamTimesUpAnswer. */
    interface IStreamTimesUpAnswer {}

    /** Represents a StreamTimesUpAnswer. */
    class StreamTimesUpAnswer implements IStreamTimesUpAnswer {
      /**
       * Constructs a new StreamTimesUpAnswer.
       * @param [properties] Properties to set
       */
      constructor(properties?: sprout.aixcourse.IStreamTimesUpAnswer)

      /**
       * Creates a new StreamTimesUpAnswer instance using the specified properties.
       * @param [properties] Properties to set
       * @returns StreamTimesUpAnswer instance
       */
      public static create(
        properties?: sprout.aixcourse.IStreamTimesUpAnswer,
      ): sprout.aixcourse.StreamTimesUpAnswer

      /**
       * Encodes the specified StreamTimesUpAnswer message. Does not implicitly {@link sprout.aixcourse.StreamTimesUpAnswer.verify|verify} messages.
       * @param message StreamTimesUpAnswer message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encode(
        message: sprout.aixcourse.IStreamTimesUpAnswer,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Encodes the specified StreamTimesUpAnswer message, length delimited. Does not implicitly {@link sprout.aixcourse.StreamTimesUpAnswer.verify|verify} messages.
       * @param message StreamTimesUpAnswer message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encodeDelimited(
        message: sprout.aixcourse.IStreamTimesUpAnswer,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Decodes a StreamTimesUpAnswer message from the specified reader or buffer.
       * @param reader Reader or buffer to decode from
       * @param [length] Message length if known beforehand
       * @returns StreamTimesUpAnswer
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decode(
        reader: $protobuf.Reader | Uint8Array,
        length?: number,
      ): sprout.aixcourse.StreamTimesUpAnswer

      /**
       * Decodes a StreamTimesUpAnswer message from the specified reader or buffer, length delimited.
       * @param reader Reader or buffer to decode from
       * @returns StreamTimesUpAnswer
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decodeDelimited(
        reader: $protobuf.Reader | Uint8Array,
      ): sprout.aixcourse.StreamTimesUpAnswer

      /**
       * Verifies a StreamTimesUpAnswer message.
       * @param message Plain object to verify
       * @returns `null` if valid, otherwise the reason why it is not
       */
      public static verify(message: { [k: string]: any }): string | null

      /**
       * Creates a StreamTimesUpAnswer message from a plain object. Also converts values to their respective internal types.
       * @param object Plain object
       * @returns StreamTimesUpAnswer
       */
      public static fromObject(object: {
        [k: string]: any
      }): sprout.aixcourse.StreamTimesUpAnswer

      /**
       * Creates a plain object from a StreamTimesUpAnswer message. Also converts values to other types if specified.
       * @param message StreamTimesUpAnswer
       * @param [options] Conversion options
       * @returns Plain object
       */
      public static toObject(
        message: sprout.aixcourse.StreamTimesUpAnswer,
        options?: $protobuf.IConversionOptions,
      ): { [k: string]: any }

      /**
       * Converts this StreamTimesUpAnswer to JSON.
       * @returns JSON object
       */
      public toJSON(): { [k: string]: any }
    }

    /** Properties of a AIXCourse. */
    interface IAIXCourse {
      /** AIXCourse versionTimestampUsec */
      versionTimestampUsec?: number | Long | null

      /** AIXCourse levels */
      levels?: sprout.aixcourse.ILevel[] | null

      /** AIXCourse moduleMap */
      moduleMap?: { [k: string]: sprout.aixcourse.IModule } | null

      /** AIXCourse unitMap */
      unitMap?: { [k: string]: sprout.aixcourse.IUnit } | null

      /** AIXCourse lessonMap */
      lessonMap?: { [k: string]: sprout.aixcourse.ILesson } | null

      /** AIXCourse aiClassMap */
      aiClassMap?: { [k: string]: sprout.aixcourse.IAIClass } | null

      /** AIXCourse segmentMap */
      segmentMap?: { [k: string]: sprout.aixcourse.ISegment } | null

      /** AIXCourse activityGroupMap */
      activityGroupMap?: { [k: string]: sprout.aixcourse.IActivityGroup } | null

      /** AIXCourse activityMap */
      activityMap?: { [k: string]: sprout.aixcourse.IActivity } | null

      /** AIXCourse xClassMap */
      xClassMap?: { [k: string]: sprout.aixcourse.IXClass } | null

      /** AIXCourse aiHomeworkMap */
      aiHomeworkMap?: { [k: string]: sprout.aixcourse.IAIHomework } | null

      /** AIXCourse yClassMap */
      yClassMap?: { [k: string]: sprout.aixcourse.IYClass } | null
    }

    /** Represents a AIXCourse. */
    class AIXCourse implements IAIXCourse {
      /**
       * Constructs a new AIXCourse.
       * @param [properties] Properties to set
       */
      constructor(properties?: sprout.aixcourse.IAIXCourse)

      /** AIXCourse versionTimestampUsec. */
      public versionTimestampUsec: number | Long

      /** AIXCourse levels. */
      public levels: sprout.aixcourse.ILevel[]

      /** AIXCourse moduleMap. */
      public moduleMap: { [k: string]: sprout.aixcourse.IModule }

      /** AIXCourse unitMap. */
      public unitMap: { [k: string]: sprout.aixcourse.IUnit }

      /** AIXCourse lessonMap. */
      public lessonMap: { [k: string]: sprout.aixcourse.ILesson }

      /** AIXCourse aiClassMap. */
      public aiClassMap: { [k: string]: sprout.aixcourse.IAIClass }

      /** AIXCourse segmentMap. */
      public segmentMap: { [k: string]: sprout.aixcourse.ISegment }

      /** AIXCourse activityGroupMap. */
      public activityGroupMap: { [k: string]: sprout.aixcourse.IActivityGroup }

      /** AIXCourse activityMap. */
      public activityMap: { [k: string]: sprout.aixcourse.IActivity }

      /** AIXCourse xClassMap. */
      public xClassMap: { [k: string]: sprout.aixcourse.IXClass }

      /** AIXCourse aiHomeworkMap. */
      public aiHomeworkMap: { [k: string]: sprout.aixcourse.IAIHomework }

      /** AIXCourse yClassMap. */
      public yClassMap: { [k: string]: sprout.aixcourse.IYClass }

      /**
       * Creates a new AIXCourse instance using the specified properties.
       * @param [properties] Properties to set
       * @returns AIXCourse instance
       */
      public static create(
        properties?: sprout.aixcourse.IAIXCourse,
      ): sprout.aixcourse.AIXCourse

      /**
       * Encodes the specified AIXCourse message. Does not implicitly {@link sprout.aixcourse.AIXCourse.verify|verify} messages.
       * @param message AIXCourse message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encode(
        message: sprout.aixcourse.IAIXCourse,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Encodes the specified AIXCourse message, length delimited. Does not implicitly {@link sprout.aixcourse.AIXCourse.verify|verify} messages.
       * @param message AIXCourse message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encodeDelimited(
        message: sprout.aixcourse.IAIXCourse,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Decodes a AIXCourse message from the specified reader or buffer.
       * @param reader Reader or buffer to decode from
       * @param [length] Message length if known beforehand
       * @returns AIXCourse
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decode(
        reader: $protobuf.Reader | Uint8Array,
        length?: number,
      ): sprout.aixcourse.AIXCourse

      /**
       * Decodes a AIXCourse message from the specified reader or buffer, length delimited.
       * @param reader Reader or buffer to decode from
       * @returns AIXCourse
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decodeDelimited(
        reader: $protobuf.Reader | Uint8Array,
      ): sprout.aixcourse.AIXCourse

      /**
       * Verifies a AIXCourse message.
       * @param message Plain object to verify
       * @returns `null` if valid, otherwise the reason why it is not
       */
      public static verify(message: { [k: string]: any }): string | null

      /**
       * Creates a AIXCourse message from a plain object. Also converts values to their respective internal types.
       * @param object Plain object
       * @returns AIXCourse
       */
      public static fromObject(object: {
        [k: string]: any
      }): sprout.aixcourse.AIXCourse

      /**
       * Creates a plain object from a AIXCourse message. Also converts values to other types if specified.
       * @param message AIXCourse
       * @param [options] Conversion options
       * @returns Plain object
       */
      public static toObject(
        message: sprout.aixcourse.AIXCourse,
        options?: $protobuf.IConversionOptions,
      ): { [k: string]: any }

      /**
       * Converts this AIXCourse to JSON.
       * @returns JSON object
       */
      public toJSON(): { [k: string]: any }
    }

    /** Properties of a Level. */
    interface ILevel {
      /** Level id */
      id?: number | Long | null

      /** Level level */
      level?: string | null

      /** Level moduleIds */
      moduleIds?: (number | Long)[] | null

      /** Level originalMetadata */
      originalMetadata?: string | null

      /** Level levelDes */
      levelDes?: string | null
    }

    /** Represents a Level. */
    class Level implements ILevel {
      /**
       * Constructs a new Level.
       * @param [properties] Properties to set
       */
      constructor(properties?: sprout.aixcourse.ILevel)

      /** Level id. */
      public id: number | Long

      /** Level level. */
      public level: string

      /** Level moduleIds. */
      public moduleIds: (number | Long)[]

      /** Level originalMetadata. */
      public originalMetadata: string

      /** Level levelDes. */
      public levelDes: string

      /**
       * Creates a new Level instance using the specified properties.
       * @param [properties] Properties to set
       * @returns Level instance
       */
      public static create(
        properties?: sprout.aixcourse.ILevel,
      ): sprout.aixcourse.Level

      /**
       * Encodes the specified Level message. Does not implicitly {@link sprout.aixcourse.Level.verify|verify} messages.
       * @param message Level message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encode(
        message: sprout.aixcourse.ILevel,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Encodes the specified Level message, length delimited. Does not implicitly {@link sprout.aixcourse.Level.verify|verify} messages.
       * @param message Level message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encodeDelimited(
        message: sprout.aixcourse.ILevel,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Decodes a Level message from the specified reader or buffer.
       * @param reader Reader or buffer to decode from
       * @param [length] Message length if known beforehand
       * @returns Level
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decode(
        reader: $protobuf.Reader | Uint8Array,
        length?: number,
      ): sprout.aixcourse.Level

      /**
       * Decodes a Level message from the specified reader or buffer, length delimited.
       * @param reader Reader or buffer to decode from
       * @returns Level
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decodeDelimited(
        reader: $protobuf.Reader | Uint8Array,
      ): sprout.aixcourse.Level

      /**
       * Verifies a Level message.
       * @param message Plain object to verify
       * @returns `null` if valid, otherwise the reason why it is not
       */
      public static verify(message: { [k: string]: any }): string | null

      /**
       * Creates a Level message from a plain object. Also converts values to their respective internal types.
       * @param object Plain object
       * @returns Level
       */
      public static fromObject(object: {
        [k: string]: any
      }): sprout.aixcourse.Level

      /**
       * Creates a plain object from a Level message. Also converts values to other types if specified.
       * @param message Level
       * @param [options] Conversion options
       * @returns Plain object
       */
      public static toObject(
        message: sprout.aixcourse.Level,
        options?: $protobuf.IConversionOptions,
      ): { [k: string]: any }

      /**
       * Converts this Level to JSON.
       * @returns JSON object
       */
      public toJSON(): { [k: string]: any }
    }

    /** Properties of a Module. */
    interface IModule {
      /** Module id */
      id?: number | Long | null

      /** Module unitIds */
      unitIds?: (number | Long)[] | null
    }

    /** Represents a Module. */
    class Module implements IModule {
      /**
       * Constructs a new Module.
       * @param [properties] Properties to set
       */
      constructor(properties?: sprout.aixcourse.IModule)

      /** Module id. */
      public id: number | Long

      /** Module unitIds. */
      public unitIds: (number | Long)[]

      /**
       * Creates a new Module instance using the specified properties.
       * @param [properties] Properties to set
       * @returns Module instance
       */
      public static create(
        properties?: sprout.aixcourse.IModule,
      ): sprout.aixcourse.Module

      /**
       * Encodes the specified Module message. Does not implicitly {@link sprout.aixcourse.Module.verify|verify} messages.
       * @param message Module message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encode(
        message: sprout.aixcourse.IModule,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Encodes the specified Module message, length delimited. Does not implicitly {@link sprout.aixcourse.Module.verify|verify} messages.
       * @param message Module message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encodeDelimited(
        message: sprout.aixcourse.IModule,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Decodes a Module message from the specified reader or buffer.
       * @param reader Reader or buffer to decode from
       * @param [length] Message length if known beforehand
       * @returns Module
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decode(
        reader: $protobuf.Reader | Uint8Array,
        length?: number,
      ): sprout.aixcourse.Module

      /**
       * Decodes a Module message from the specified reader or buffer, length delimited.
       * @param reader Reader or buffer to decode from
       * @returns Module
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decodeDelimited(
        reader: $protobuf.Reader | Uint8Array,
      ): sprout.aixcourse.Module

      /**
       * Verifies a Module message.
       * @param message Plain object to verify
       * @returns `null` if valid, otherwise the reason why it is not
       */
      public static verify(message: { [k: string]: any }): string | null

      /**
       * Creates a Module message from a plain object. Also converts values to their respective internal types.
       * @param object Plain object
       * @returns Module
       */
      public static fromObject(object: {
        [k: string]: any
      }): sprout.aixcourse.Module

      /**
       * Creates a plain object from a Module message. Also converts values to other types if specified.
       * @param message Module
       * @param [options] Conversion options
       * @returns Plain object
       */
      public static toObject(
        message: sprout.aixcourse.Module,
        options?: $protobuf.IConversionOptions,
      ): { [k: string]: any }

      /**
       * Converts this Module to JSON.
       * @returns JSON object
       */
      public toJSON(): { [k: string]: any }
    }

    /** Properties of an Unit. */
    interface IUnit {
      /** Unit id */
      id?: number | Long | null

      /** Unit lessonIds */
      lessonIds?: (number | Long)[] | null

      /** Unit titleCn */
      titleCn?: string | null

      /** Unit originalMetadata */
      originalMetadata?: string | null

      /** Unit unitDes */
      unitDes?: string | null
    }

    /** Represents an Unit. */
    class Unit implements IUnit {
      /**
       * Constructs a new Unit.
       * @param [properties] Properties to set
       */
      constructor(properties?: sprout.aixcourse.IUnit)

      /** Unit id. */
      public id: number | Long

      /** Unit lessonIds. */
      public lessonIds: (number | Long)[]

      /** Unit titleCn. */
      public titleCn: string

      /** Unit originalMetadata. */
      public originalMetadata: string

      /** Unit unitDes. */
      public unitDes: string

      /**
       * Creates a new Unit instance using the specified properties.
       * @param [properties] Properties to set
       * @returns Unit instance
       */
      public static create(
        properties?: sprout.aixcourse.IUnit,
      ): sprout.aixcourse.Unit

      /**
       * Encodes the specified Unit message. Does not implicitly {@link sprout.aixcourse.Unit.verify|verify} messages.
       * @param message Unit message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encode(
        message: sprout.aixcourse.IUnit,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Encodes the specified Unit message, length delimited. Does not implicitly {@link sprout.aixcourse.Unit.verify|verify} messages.
       * @param message Unit message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encodeDelimited(
        message: sprout.aixcourse.IUnit,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Decodes an Unit message from the specified reader or buffer.
       * @param reader Reader or buffer to decode from
       * @param [length] Message length if known beforehand
       * @returns Unit
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decode(
        reader: $protobuf.Reader | Uint8Array,
        length?: number,
      ): sprout.aixcourse.Unit

      /**
       * Decodes an Unit message from the specified reader or buffer, length delimited.
       * @param reader Reader or buffer to decode from
       * @returns Unit
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decodeDelimited(
        reader: $protobuf.Reader | Uint8Array,
      ): sprout.aixcourse.Unit

      /**
       * Verifies an Unit message.
       * @param message Plain object to verify
       * @returns `null` if valid, otherwise the reason why it is not
       */
      public static verify(message: { [k: string]: any }): string | null

      /**
       * Creates an Unit message from a plain object. Also converts values to their respective internal types.
       * @param object Plain object
       * @returns Unit
       */
      public static fromObject(object: {
        [k: string]: any
      }): sprout.aixcourse.Unit

      /**
       * Creates a plain object from an Unit message. Also converts values to other types if specified.
       * @param message Unit
       * @param [options] Conversion options
       * @returns Plain object
       */
      public static toObject(
        message: sprout.aixcourse.Unit,
        options?: $protobuf.IConversionOptions,
      ): { [k: string]: any }

      /**
       * Converts this Unit to JSON.
       * @returns JSON object
       */
      public toJSON(): { [k: string]: any }
    }

    /** Properties of a Lesson. */
    interface ILesson {
      /** Lesson id */
      id?: number | Long | null

      /** Lesson aiClassMap */
      aiClassMap?: { [k: string]: sprout.aixcourse.IAIClass } | null

      /** Lesson name */
      name?: string | null

      /** Lesson coverPictureUrl */
      coverPictureUrl?: string | null

      /** Lesson originalMetadata */
      originalMetadata?: string | null

      /** Lesson xClassMap */
      xClassMap?: { [k: string]: sprout.aixcourse.IXClass } | null

      /** Lesson aiHomeworkMap */
      aiHomeworkMap?: { [k: string]: sprout.aixcourse.IAIHomework } | null

      /** Lesson titleCn */
      titleCn?: string | null

      /** Lesson des */
      des?: string | null

      /** Lesson reviewWords */
      reviewWords?: string | null

      /** Lesson newWords */
      newWords?: string | null

      /** Lesson reviewSentences */
      reviewSentences?: string | null

      /** Lesson newSentences */
      newSentences?: string | null

      /** Lesson yClassMap */
      yClassMap?: { [k: string]: sprout.aixcourse.IYClass } | null

      /** Lesson isEndOfLevel */
      isEndOfLevel?: boolean | null
    }

    /** Represents a Lesson. */
    class Lesson implements ILesson {
      /**
       * Constructs a new Lesson.
       * @param [properties] Properties to set
       */
      constructor(properties?: sprout.aixcourse.ILesson)

      /** Lesson id. */
      public id: number | Long

      /** Lesson aiClassMap. */
      public aiClassMap: { [k: string]: sprout.aixcourse.IAIClass }

      /** Lesson name. */
      public name: string

      /** Lesson coverPictureUrl. */
      public coverPictureUrl: string

      /** Lesson originalMetadata. */
      public originalMetadata: string

      /** Lesson xClassMap. */
      public xClassMap: { [k: string]: sprout.aixcourse.IXClass }

      /** Lesson aiHomeworkMap. */
      public aiHomeworkMap: { [k: string]: sprout.aixcourse.IAIHomework }

      /** Lesson titleCn. */
      public titleCn: string

      /** Lesson des. */
      public des: string

      /** Lesson reviewWords. */
      public reviewWords: string

      /** Lesson newWords. */
      public newWords: string

      /** Lesson reviewSentences. */
      public reviewSentences: string

      /** Lesson newSentences. */
      public newSentences: string

      /** Lesson yClassMap. */
      public yClassMap: { [k: string]: sprout.aixcourse.IYClass }

      /** Lesson isEndOfLevel. */
      public isEndOfLevel: boolean

      /**
       * Creates a new Lesson instance using the specified properties.
       * @param [properties] Properties to set
       * @returns Lesson instance
       */
      public static create(
        properties?: sprout.aixcourse.ILesson,
      ): sprout.aixcourse.Lesson

      /**
       * Encodes the specified Lesson message. Does not implicitly {@link sprout.aixcourse.Lesson.verify|verify} messages.
       * @param message Lesson message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encode(
        message: sprout.aixcourse.ILesson,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Encodes the specified Lesson message, length delimited. Does not implicitly {@link sprout.aixcourse.Lesson.verify|verify} messages.
       * @param message Lesson message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encodeDelimited(
        message: sprout.aixcourse.ILesson,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Decodes a Lesson message from the specified reader or buffer.
       * @param reader Reader or buffer to decode from
       * @param [length] Message length if known beforehand
       * @returns Lesson
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decode(
        reader: $protobuf.Reader | Uint8Array,
        length?: number,
      ): sprout.aixcourse.Lesson

      /**
       * Decodes a Lesson message from the specified reader or buffer, length delimited.
       * @param reader Reader or buffer to decode from
       * @returns Lesson
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decodeDelimited(
        reader: $protobuf.Reader | Uint8Array,
      ): sprout.aixcourse.Lesson

      /**
       * Verifies a Lesson message.
       * @param message Plain object to verify
       * @returns `null` if valid, otherwise the reason why it is not
       */
      public static verify(message: { [k: string]: any }): string | null

      /**
       * Creates a Lesson message from a plain object. Also converts values to their respective internal types.
       * @param object Plain object
       * @returns Lesson
       */
      public static fromObject(object: {
        [k: string]: any
      }): sprout.aixcourse.Lesson

      /**
       * Creates a plain object from a Lesson message. Also converts values to other types if specified.
       * @param message Lesson
       * @param [options] Conversion options
       * @returns Plain object
       */
      public static toObject(
        message: sprout.aixcourse.Lesson,
        options?: $protobuf.IConversionOptions,
      ): { [k: string]: any }

      /**
       * Converts this Lesson to JSON.
       * @returns JSON object
       */
      public toJSON(): { [k: string]: any }
    }

    /** Properties of a XClass. */
    interface IXClass {
      /** XClass id */
      id?: number | Long | null

      /** XClass difficulty */
      difficulty?: sprout.aixcourse.DifficultyType.Enum | null

      /** XClass segmentIds */
      segmentIds?: (number | Long)[] | null

      /** XClass segmentMap */
      segmentMap?: { [k: string]: sprout.aixcourse.ISegment } | null

      /** XClass activityGroupMap */
      activityGroupMap?: { [k: string]: sprout.aixcourse.IActivityGroup } | null

      /** XClass activityMap */
      activityMap?: { [k: string]: sprout.aixcourse.IActivity } | null

      /** XClass standardDefinitionZipUrl */
      standardDefinitionZipUrl?: string | null

      /** XClass standardDefinitionZipMd5 */
      standardDefinitionZipMd5?: string | null

      /** XClass highDefinitionZipUrl */
      highDefinitionZipUrl?: string | null

      /** XClass highDefinitionZipMd5 */
      highDefinitionZipMd5?: string | null

      /** XClass originalMetadata */
      originalMetadata?: string | null

      /** XClass resource */
      resource?: sprout.aixcourse.XClass.IResource | null

      /** XClass theme */
      theme?: sprout.aixcourse.ClassThemeType.Enum | null
    }

    /** Represents a XClass. */
    class XClass implements IXClass {
      /**
       * Constructs a new XClass.
       * @param [properties] Properties to set
       */
      constructor(properties?: sprout.aixcourse.IXClass)

      /** XClass id. */
      public id: number | Long

      /** XClass difficulty. */
      public difficulty: sprout.aixcourse.DifficultyType.Enum

      /** XClass segmentIds. */
      public segmentIds: (number | Long)[]

      /** XClass segmentMap. */
      public segmentMap: { [k: string]: sprout.aixcourse.ISegment }

      /** XClass activityGroupMap. */
      public activityGroupMap: { [k: string]: sprout.aixcourse.IActivityGroup }

      /** XClass activityMap. */
      public activityMap: { [k: string]: sprout.aixcourse.IActivity }

      /** XClass standardDefinitionZipUrl. */
      public standardDefinitionZipUrl: string

      /** XClass standardDefinitionZipMd5. */
      public standardDefinitionZipMd5: string

      /** XClass highDefinitionZipUrl. */
      public highDefinitionZipUrl: string

      /** XClass highDefinitionZipMd5. */
      public highDefinitionZipMd5: string

      /** XClass originalMetadata. */
      public originalMetadata: string

      /** XClass resource. */
      public resource?: sprout.aixcourse.XClass.IResource | null

      /** XClass theme. */
      public theme: sprout.aixcourse.ClassThemeType.Enum

      /**
       * Creates a new XClass instance using the specified properties.
       * @param [properties] Properties to set
       * @returns XClass instance
       */
      public static create(
        properties?: sprout.aixcourse.IXClass,
      ): sprout.aixcourse.XClass

      /**
       * Encodes the specified XClass message. Does not implicitly {@link sprout.aixcourse.XClass.verify|verify} messages.
       * @param message XClass message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encode(
        message: sprout.aixcourse.IXClass,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Encodes the specified XClass message, length delimited. Does not implicitly {@link sprout.aixcourse.XClass.verify|verify} messages.
       * @param message XClass message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encodeDelimited(
        message: sprout.aixcourse.IXClass,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Decodes a XClass message from the specified reader or buffer.
       * @param reader Reader or buffer to decode from
       * @param [length] Message length if known beforehand
       * @returns XClass
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decode(
        reader: $protobuf.Reader | Uint8Array,
        length?: number,
      ): sprout.aixcourse.XClass

      /**
       * Decodes a XClass message from the specified reader or buffer, length delimited.
       * @param reader Reader or buffer to decode from
       * @returns XClass
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decodeDelimited(
        reader: $protobuf.Reader | Uint8Array,
      ): sprout.aixcourse.XClass

      /**
       * Verifies a XClass message.
       * @param message Plain object to verify
       * @returns `null` if valid, otherwise the reason why it is not
       */
      public static verify(message: { [k: string]: any }): string | null

      /**
       * Creates a XClass message from a plain object. Also converts values to their respective internal types.
       * @param object Plain object
       * @returns XClass
       */
      public static fromObject(object: {
        [k: string]: any
      }): sprout.aixcourse.XClass

      /**
       * Creates a plain object from a XClass message. Also converts values to other types if specified.
       * @param message XClass
       * @param [options] Conversion options
       * @returns Plain object
       */
      public static toObject(
        message: sprout.aixcourse.XClass,
        options?: $protobuf.IConversionOptions,
      ): { [k: string]: any }

      /**
       * Converts this XClass to JSON.
       * @returns JSON object
       */
      public toJSON(): { [k: string]: any }
    }

    namespace XClass {
      /** Properties of a Resource. */
      interface IResource {
        /** Resource awardPictureUrl */
        awardPictureUrl?: string | null

        /** Resource backgroundPictureUrl */
        backgroundPictureUrl?: string | null
      }

      /** Represents a Resource. */
      class Resource implements IResource {
        /**
         * Constructs a new Resource.
         * @param [properties] Properties to set
         */
        constructor(properties?: sprout.aixcourse.XClass.IResource)

        /** Resource awardPictureUrl. */
        public awardPictureUrl: string

        /** Resource backgroundPictureUrl. */
        public backgroundPictureUrl: string

        /**
         * Creates a new Resource instance using the specified properties.
         * @param [properties] Properties to set
         * @returns Resource instance
         */
        public static create(
          properties?: sprout.aixcourse.XClass.IResource,
        ): sprout.aixcourse.XClass.Resource

        /**
         * Encodes the specified Resource message. Does not implicitly {@link sprout.aixcourse.XClass.Resource.verify|verify} messages.
         * @param message Resource message or plain object to encode
         * @param [writer] Writer to encode to
         * @returns Writer
         */
        public static encode(
          message: sprout.aixcourse.XClass.IResource,
          writer?: $protobuf.Writer,
        ): $protobuf.Writer

        /**
         * Encodes the specified Resource message, length delimited. Does not implicitly {@link sprout.aixcourse.XClass.Resource.verify|verify} messages.
         * @param message Resource message or plain object to encode
         * @param [writer] Writer to encode to
         * @returns Writer
         */
        public static encodeDelimited(
          message: sprout.aixcourse.XClass.IResource,
          writer?: $protobuf.Writer,
        ): $protobuf.Writer

        /**
         * Decodes a Resource message from the specified reader or buffer.
         * @param reader Reader or buffer to decode from
         * @param [length] Message length if known beforehand
         * @returns Resource
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        public static decode(
          reader: $protobuf.Reader | Uint8Array,
          length?: number,
        ): sprout.aixcourse.XClass.Resource

        /**
         * Decodes a Resource message from the specified reader or buffer, length delimited.
         * @param reader Reader or buffer to decode from
         * @returns Resource
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        public static decodeDelimited(
          reader: $protobuf.Reader | Uint8Array,
        ): sprout.aixcourse.XClass.Resource

        /**
         * Verifies a Resource message.
         * @param message Plain object to verify
         * @returns `null` if valid, otherwise the reason why it is not
         */
        public static verify(message: { [k: string]: any }): string | null

        /**
         * Creates a Resource message from a plain object. Also converts values to their respective internal types.
         * @param object Plain object
         * @returns Resource
         */
        public static fromObject(object: {
          [k: string]: any
        }): sprout.aixcourse.XClass.Resource

        /**
         * Creates a plain object from a Resource message. Also converts values to other types if specified.
         * @param message Resource
         * @param [options] Conversion options
         * @returns Plain object
         */
        public static toObject(
          message: sprout.aixcourse.XClass.Resource,
          options?: $protobuf.IConversionOptions,
        ): { [k: string]: any }

        /**
         * Converts this Resource to JSON.
         * @returns JSON object
         */
        public toJSON(): { [k: string]: any }
      }
    }

    /** Properties of a YClass. */
    interface IYClass {
      /** YClass id */
      id?: number | Long | null

      /** YClass difficulty */
      difficulty?: sprout.aixcourse.DifficultyType.Enum | null

      /** YClass segmentIds */
      segmentIds?: (number | Long)[] | null

      /** YClass segmentMap */
      segmentMap?: { [k: string]: sprout.aixcourse.ISegment } | null

      /** YClass activityGroupMap */
      activityGroupMap?: { [k: string]: sprout.aixcourse.IActivityGroup } | null

      /** YClass activityMap */
      activityMap?: { [k: string]: sprout.aixcourse.IActivity } | null

      /** YClass standardDefinitionZipUrl */
      standardDefinitionZipUrl?: string | null

      /** YClass standardDefinitionZipMd5 */
      standardDefinitionZipMd5?: string | null

      /** YClass highDefinitionZipUrl */
      highDefinitionZipUrl?: string | null

      /** YClass highDefinitionZipMd5 */
      highDefinitionZipMd5?: string | null

      /** YClass originalMetadata */
      originalMetadata?: string | null

      /** YClass resource */
      resource?: sprout.aixcourse.YClass.IResource | null

      /** YClass teacherName */
      teacherName?: string | null

      /** YClass teacherPictureUrl */
      teacherPictureUrl?: string | null
    }

    /** Represents a YClass. */
    class YClass implements IYClass {
      /**
       * Constructs a new YClass.
       * @param [properties] Properties to set
       */
      constructor(properties?: sprout.aixcourse.IYClass)

      /** YClass id. */
      public id: number | Long

      /** YClass difficulty. */
      public difficulty: sprout.aixcourse.DifficultyType.Enum

      /** YClass segmentIds. */
      public segmentIds: (number | Long)[]

      /** YClass segmentMap. */
      public segmentMap: { [k: string]: sprout.aixcourse.ISegment }

      /** YClass activityGroupMap. */
      public activityGroupMap: { [k: string]: sprout.aixcourse.IActivityGroup }

      /** YClass activityMap. */
      public activityMap: { [k: string]: sprout.aixcourse.IActivity }

      /** YClass standardDefinitionZipUrl. */
      public standardDefinitionZipUrl: string

      /** YClass standardDefinitionZipMd5. */
      public standardDefinitionZipMd5: string

      /** YClass highDefinitionZipUrl. */
      public highDefinitionZipUrl: string

      /** YClass highDefinitionZipMd5. */
      public highDefinitionZipMd5: string

      /** YClass originalMetadata. */
      public originalMetadata: string

      /** YClass resource. */
      public resource?: sprout.aixcourse.YClass.IResource | null

      /** YClass teacherName. */
      public teacherName: string

      /** YClass teacherPictureUrl. */
      public teacherPictureUrl: string

      /**
       * Creates a new YClass instance using the specified properties.
       * @param [properties] Properties to set
       * @returns YClass instance
       */
      public static create(
        properties?: sprout.aixcourse.IYClass,
      ): sprout.aixcourse.YClass

      /**
       * Encodes the specified YClass message. Does not implicitly {@link sprout.aixcourse.YClass.verify|verify} messages.
       * @param message YClass message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encode(
        message: sprout.aixcourse.IYClass,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Encodes the specified YClass message, length delimited. Does not implicitly {@link sprout.aixcourse.YClass.verify|verify} messages.
       * @param message YClass message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encodeDelimited(
        message: sprout.aixcourse.IYClass,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Decodes a YClass message from the specified reader or buffer.
       * @param reader Reader or buffer to decode from
       * @param [length] Message length if known beforehand
       * @returns YClass
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decode(
        reader: $protobuf.Reader | Uint8Array,
        length?: number,
      ): sprout.aixcourse.YClass

      /**
       * Decodes a YClass message from the specified reader or buffer, length delimited.
       * @param reader Reader or buffer to decode from
       * @returns YClass
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decodeDelimited(
        reader: $protobuf.Reader | Uint8Array,
      ): sprout.aixcourse.YClass

      /**
       * Verifies a YClass message.
       * @param message Plain object to verify
       * @returns `null` if valid, otherwise the reason why it is not
       */
      public static verify(message: { [k: string]: any }): string | null

      /**
       * Creates a YClass message from a plain object. Also converts values to their respective internal types.
       * @param object Plain object
       * @returns YClass
       */
      public static fromObject(object: {
        [k: string]: any
      }): sprout.aixcourse.YClass

      /**
       * Creates a plain object from a YClass message. Also converts values to other types if specified.
       * @param message YClass
       * @param [options] Conversion options
       * @returns Plain object
       */
      public static toObject(
        message: sprout.aixcourse.YClass,
        options?: $protobuf.IConversionOptions,
      ): { [k: string]: any }

      /**
       * Converts this YClass to JSON.
       * @returns JSON object
       */
      public toJSON(): { [k: string]: any }
    }

    namespace YClass {
      /** Properties of a Resource. */
      interface IResource {
        /** Resource awardPictureUrl */
        awardPictureUrl?: string | null

        /** Resource backgroundPictureUrl */
        backgroundPictureUrl?: string | null
      }

      /** Represents a Resource. */
      class Resource implements IResource {
        /**
         * Constructs a new Resource.
         * @param [properties] Properties to set
         */
        constructor(properties?: sprout.aixcourse.YClass.IResource)

        /** Resource awardPictureUrl. */
        public awardPictureUrl: string

        /** Resource backgroundPictureUrl. */
        public backgroundPictureUrl: string

        /**
         * Creates a new Resource instance using the specified properties.
         * @param [properties] Properties to set
         * @returns Resource instance
         */
        public static create(
          properties?: sprout.aixcourse.YClass.IResource,
        ): sprout.aixcourse.YClass.Resource

        /**
         * Encodes the specified Resource message. Does not implicitly {@link sprout.aixcourse.YClass.Resource.verify|verify} messages.
         * @param message Resource message or plain object to encode
         * @param [writer] Writer to encode to
         * @returns Writer
         */
        public static encode(
          message: sprout.aixcourse.YClass.IResource,
          writer?: $protobuf.Writer,
        ): $protobuf.Writer

        /**
         * Encodes the specified Resource message, length delimited. Does not implicitly {@link sprout.aixcourse.YClass.Resource.verify|verify} messages.
         * @param message Resource message or plain object to encode
         * @param [writer] Writer to encode to
         * @returns Writer
         */
        public static encodeDelimited(
          message: sprout.aixcourse.YClass.IResource,
          writer?: $protobuf.Writer,
        ): $protobuf.Writer

        /**
         * Decodes a Resource message from the specified reader or buffer.
         * @param reader Reader or buffer to decode from
         * @param [length] Message length if known beforehand
         * @returns Resource
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        public static decode(
          reader: $protobuf.Reader | Uint8Array,
          length?: number,
        ): sprout.aixcourse.YClass.Resource

        /**
         * Decodes a Resource message from the specified reader or buffer, length delimited.
         * @param reader Reader or buffer to decode from
         * @returns Resource
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        public static decodeDelimited(
          reader: $protobuf.Reader | Uint8Array,
        ): sprout.aixcourse.YClass.Resource

        /**
         * Verifies a Resource message.
         * @param message Plain object to verify
         * @returns `null` if valid, otherwise the reason why it is not
         */
        public static verify(message: { [k: string]: any }): string | null

        /**
         * Creates a Resource message from a plain object. Also converts values to their respective internal types.
         * @param object Plain object
         * @returns Resource
         */
        public static fromObject(object: {
          [k: string]: any
        }): sprout.aixcourse.YClass.Resource

        /**
         * Creates a plain object from a Resource message. Also converts values to other types if specified.
         * @param message Resource
         * @param [options] Conversion options
         * @returns Plain object
         */
        public static toObject(
          message: sprout.aixcourse.YClass.Resource,
          options?: $protobuf.IConversionOptions,
        ): { [k: string]: any }

        /**
         * Converts this Resource to JSON.
         * @returns JSON object
         */
        public toJSON(): { [k: string]: any }
      }
    }

    /** Properties of a AIHomework. */
    interface IAIHomework {
      /** AIHomework id */
      id?: number | Long | null

      /** AIHomework difficulty */
      difficulty?: sprout.aixcourse.DifficultyType.Enum | null

      /** AIHomework segmentIds */
      segmentIds?: (number | Long)[] | null

      /** AIHomework segmentMap */
      segmentMap?: { [k: string]: sprout.aixcourse.ISegment } | null

      /** AIHomework activityGroupMap */
      activityGroupMap?: { [k: string]: sprout.aixcourse.IActivityGroup } | null

      /** AIHomework activityMap */
      activityMap?: { [k: string]: sprout.aixcourse.IActivity } | null

      /** AIHomework originalMetadata */
      originalMetadata?: string | null

      /** AIHomework standardDefinitionZipUrl */
      standardDefinitionZipUrl?: string | null

      /** AIHomework standardDefinitionZipMd5 */
      standardDefinitionZipMd5?: string | null

      /** AIHomework highDefinitionZipUrl */
      highDefinitionZipUrl?: string | null

      /** AIHomework highDefinitionZipMd5 */
      highDefinitionZipMd5?: string | null

      /** AIHomework resource */
      resource?: sprout.aixcourse.AIHomework.IResource | null

      /** AIHomework theme */
      theme?: sprout.aixcourse.ClassThemeType.Enum | null
    }

    /** Represents a AIHomework. */
    class AIHomework implements IAIHomework {
      /**
       * Constructs a new AIHomework.
       * @param [properties] Properties to set
       */
      constructor(properties?: sprout.aixcourse.IAIHomework)

      /** AIHomework id. */
      public id: number | Long

      /** AIHomework difficulty. */
      public difficulty: sprout.aixcourse.DifficultyType.Enum

      /** AIHomework segmentIds. */
      public segmentIds: (number | Long)[]

      /** AIHomework segmentMap. */
      public segmentMap: { [k: string]: sprout.aixcourse.ISegment }

      /** AIHomework activityGroupMap. */
      public activityGroupMap: { [k: string]: sprout.aixcourse.IActivityGroup }

      /** AIHomework activityMap. */
      public activityMap: { [k: string]: sprout.aixcourse.IActivity }

      /** AIHomework originalMetadata. */
      public originalMetadata: string

      /** AIHomework standardDefinitionZipUrl. */
      public standardDefinitionZipUrl: string

      /** AIHomework standardDefinitionZipMd5. */
      public standardDefinitionZipMd5: string

      /** AIHomework highDefinitionZipUrl. */
      public highDefinitionZipUrl: string

      /** AIHomework highDefinitionZipMd5. */
      public highDefinitionZipMd5: string

      /** AIHomework resource. */
      public resource?: sprout.aixcourse.AIHomework.IResource | null

      /** AIHomework theme. */
      public theme: sprout.aixcourse.ClassThemeType.Enum

      /**
       * Creates a new AIHomework instance using the specified properties.
       * @param [properties] Properties to set
       * @returns AIHomework instance
       */
      public static create(
        properties?: sprout.aixcourse.IAIHomework,
      ): sprout.aixcourse.AIHomework

      /**
       * Encodes the specified AIHomework message. Does not implicitly {@link sprout.aixcourse.AIHomework.verify|verify} messages.
       * @param message AIHomework message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encode(
        message: sprout.aixcourse.IAIHomework,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Encodes the specified AIHomework message, length delimited. Does not implicitly {@link sprout.aixcourse.AIHomework.verify|verify} messages.
       * @param message AIHomework message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encodeDelimited(
        message: sprout.aixcourse.IAIHomework,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Decodes a AIHomework message from the specified reader or buffer.
       * @param reader Reader or buffer to decode from
       * @param [length] Message length if known beforehand
       * @returns AIHomework
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decode(
        reader: $protobuf.Reader | Uint8Array,
        length?: number,
      ): sprout.aixcourse.AIHomework

      /**
       * Decodes a AIHomework message from the specified reader or buffer, length delimited.
       * @param reader Reader or buffer to decode from
       * @returns AIHomework
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decodeDelimited(
        reader: $protobuf.Reader | Uint8Array,
      ): sprout.aixcourse.AIHomework

      /**
       * Verifies a AIHomework message.
       * @param message Plain object to verify
       * @returns `null` if valid, otherwise the reason why it is not
       */
      public static verify(message: { [k: string]: any }): string | null

      /**
       * Creates a AIHomework message from a plain object. Also converts values to their respective internal types.
       * @param object Plain object
       * @returns AIHomework
       */
      public static fromObject(object: {
        [k: string]: any
      }): sprout.aixcourse.AIHomework

      /**
       * Creates a plain object from a AIHomework message. Also converts values to other types if specified.
       * @param message AIHomework
       * @param [options] Conversion options
       * @returns Plain object
       */
      public static toObject(
        message: sprout.aixcourse.AIHomework,
        options?: $protobuf.IConversionOptions,
      ): { [k: string]: any }

      /**
       * Converts this AIHomework to JSON.
       * @returns JSON object
       */
      public toJSON(): { [k: string]: any }
    }

    namespace AIHomework {
      /** Properties of a Resource. */
      interface IResource {
        /** Resource backgroundPictureUrl */
        backgroundPictureUrl?: string | null
      }

      /** Represents a Resource. */
      class Resource implements IResource {
        /**
         * Constructs a new Resource.
         * @param [properties] Properties to set
         */
        constructor(properties?: sprout.aixcourse.AIHomework.IResource)

        /** Resource backgroundPictureUrl. */
        public backgroundPictureUrl: string

        /**
         * Creates a new Resource instance using the specified properties.
         * @param [properties] Properties to set
         * @returns Resource instance
         */
        public static create(
          properties?: sprout.aixcourse.AIHomework.IResource,
        ): sprout.aixcourse.AIHomework.Resource

        /**
         * Encodes the specified Resource message. Does not implicitly {@link sprout.aixcourse.AIHomework.Resource.verify|verify} messages.
         * @param message Resource message or plain object to encode
         * @param [writer] Writer to encode to
         * @returns Writer
         */
        public static encode(
          message: sprout.aixcourse.AIHomework.IResource,
          writer?: $protobuf.Writer,
        ): $protobuf.Writer

        /**
         * Encodes the specified Resource message, length delimited. Does not implicitly {@link sprout.aixcourse.AIHomework.Resource.verify|verify} messages.
         * @param message Resource message or plain object to encode
         * @param [writer] Writer to encode to
         * @returns Writer
         */
        public static encodeDelimited(
          message: sprout.aixcourse.AIHomework.IResource,
          writer?: $protobuf.Writer,
        ): $protobuf.Writer

        /**
         * Decodes a Resource message from the specified reader or buffer.
         * @param reader Reader or buffer to decode from
         * @param [length] Message length if known beforehand
         * @returns Resource
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        public static decode(
          reader: $protobuf.Reader | Uint8Array,
          length?: number,
        ): sprout.aixcourse.AIHomework.Resource

        /**
         * Decodes a Resource message from the specified reader or buffer, length delimited.
         * @param reader Reader or buffer to decode from
         * @returns Resource
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        public static decodeDelimited(
          reader: $protobuf.Reader | Uint8Array,
        ): sprout.aixcourse.AIHomework.Resource

        /**
         * Verifies a Resource message.
         * @param message Plain object to verify
         * @returns `null` if valid, otherwise the reason why it is not
         */
        public static verify(message: { [k: string]: any }): string | null

        /**
         * Creates a Resource message from a plain object. Also converts values to their respective internal types.
         * @param object Plain object
         * @returns Resource
         */
        public static fromObject(object: {
          [k: string]: any
        }): sprout.aixcourse.AIHomework.Resource

        /**
         * Creates a plain object from a Resource message. Also converts values to other types if specified.
         * @param message Resource
         * @param [options] Conversion options
         * @returns Plain object
         */
        public static toObject(
          message: sprout.aixcourse.AIHomework.Resource,
          options?: $protobuf.IConversionOptions,
        ): { [k: string]: any }

        /**
         * Converts this Resource to JSON.
         * @returns JSON object
         */
        public toJSON(): { [k: string]: any }
      }
    }

    /** Properties of a AIClass. */
    interface IAIClass {
      /** AIClass id */
      id?: number | Long | null

      /** AIClass TeacherName */
      TeacherName?: string | null

      /** AIClass difficulty */
      difficulty?: sprout.aixcourse.DifficultyType.Enum | null

      /** AIClass theme */
      theme?: sprout.aixcourse.ClassThemeType.Enum | null

      /** AIClass resource */
      resource?: sprout.aixcourse.AIClass.IResource | null

      /** AIClass segmentIds */
      segmentIds?: (number | Long)[] | null

      /** AIClass segmentMap */
      segmentMap?: { [k: string]: sprout.aixcourse.ISegment } | null

      /** AIClass activityGroupMap */
      activityGroupMap?: { [k: string]: sprout.aixcourse.IActivityGroup } | null

      /** AIClass activityMap */
      activityMap?: { [k: string]: sprout.aixcourse.IActivity } | null

      /** AIClass standardDefinitionZipUrl */
      standardDefinitionZipUrl?: string | null

      /** AIClass standardDefinitionZipMd5 */
      standardDefinitionZipMd5?: string | null

      /** AIClass highDefinitionZipUrl */
      highDefinitionZipUrl?: string | null

      /** AIClass highDefinitionZipMd5 */
      highDefinitionZipMd5?: string | null

      /** AIClass originalMetadata */
      originalMetadata?: string | null
    }

    /** Represents a AIClass. */
    class AIClass implements IAIClass {
      /**
       * Constructs a new AIClass.
       * @param [properties] Properties to set
       */
      constructor(properties?: sprout.aixcourse.IAIClass)

      /** AIClass id. */
      public id: number | Long

      /** AIClass TeacherName. */
      public TeacherName: string

      /** AIClass difficulty. */
      public difficulty: sprout.aixcourse.DifficultyType.Enum

      /** AIClass theme. */
      public theme: sprout.aixcourse.ClassThemeType.Enum

      /** AIClass resource. */
      public resource?: sprout.aixcourse.AIClass.IResource | null

      /** AIClass segmentIds. */
      public segmentIds: (number | Long)[]

      /** AIClass segmentMap. */
      public segmentMap: { [k: string]: sprout.aixcourse.ISegment }

      /** AIClass activityGroupMap. */
      public activityGroupMap: { [k: string]: sprout.aixcourse.IActivityGroup }

      /** AIClass activityMap. */
      public activityMap: { [k: string]: sprout.aixcourse.IActivity }

      /** AIClass standardDefinitionZipUrl. */
      public standardDefinitionZipUrl: string

      /** AIClass standardDefinitionZipMd5. */
      public standardDefinitionZipMd5: string

      /** AIClass highDefinitionZipUrl. */
      public highDefinitionZipUrl: string

      /** AIClass highDefinitionZipMd5. */
      public highDefinitionZipMd5: string

      /** AIClass originalMetadata. */
      public originalMetadata: string

      /**
       * Creates a new AIClass instance using the specified properties.
       * @param [properties] Properties to set
       * @returns AIClass instance
       */
      public static create(
        properties?: sprout.aixcourse.IAIClass,
      ): sprout.aixcourse.AIClass

      /**
       * Encodes the specified AIClass message. Does not implicitly {@link sprout.aixcourse.AIClass.verify|verify} messages.
       * @param message AIClass message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encode(
        message: sprout.aixcourse.IAIClass,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Encodes the specified AIClass message, length delimited. Does not implicitly {@link sprout.aixcourse.AIClass.verify|verify} messages.
       * @param message AIClass message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encodeDelimited(
        message: sprout.aixcourse.IAIClass,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Decodes a AIClass message from the specified reader or buffer.
       * @param reader Reader or buffer to decode from
       * @param [length] Message length if known beforehand
       * @returns AIClass
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decode(
        reader: $protobuf.Reader | Uint8Array,
        length?: number,
      ): sprout.aixcourse.AIClass

      /**
       * Decodes a AIClass message from the specified reader or buffer, length delimited.
       * @param reader Reader or buffer to decode from
       * @returns AIClass
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decodeDelimited(
        reader: $protobuf.Reader | Uint8Array,
      ): sprout.aixcourse.AIClass

      /**
       * Verifies a AIClass message.
       * @param message Plain object to verify
       * @returns `null` if valid, otherwise the reason why it is not
       */
      public static verify(message: { [k: string]: any }): string | null

      /**
       * Creates a AIClass message from a plain object. Also converts values to their respective internal types.
       * @param object Plain object
       * @returns AIClass
       */
      public static fromObject(object: {
        [k: string]: any
      }): sprout.aixcourse.AIClass

      /**
       * Creates a plain object from a AIClass message. Also converts values to other types if specified.
       * @param message AIClass
       * @param [options] Conversion options
       * @returns Plain object
       */
      public static toObject(
        message: sprout.aixcourse.AIClass,
        options?: $protobuf.IConversionOptions,
      ): { [k: string]: any }

      /**
       * Converts this AIClass to JSON.
       * @returns JSON object
       */
      public toJSON(): { [k: string]: any }
    }

    namespace AIClass {
      /** Properties of a Resource. */
      interface IResource {
        /** Resource awardPictureUrl */
        awardPictureUrl?: string | null

        /** Resource backgroundPictureUrl */
        backgroundPictureUrl?: string | null
      }

      /** Represents a Resource. */
      class Resource implements IResource {
        /**
         * Constructs a new Resource.
         * @param [properties] Properties to set
         */
        constructor(properties?: sprout.aixcourse.AIClass.IResource)

        /** Resource awardPictureUrl. */
        public awardPictureUrl: string

        /** Resource backgroundPictureUrl. */
        public backgroundPictureUrl: string

        /**
         * Creates a new Resource instance using the specified properties.
         * @param [properties] Properties to set
         * @returns Resource instance
         */
        public static create(
          properties?: sprout.aixcourse.AIClass.IResource,
        ): sprout.aixcourse.AIClass.Resource

        /**
         * Encodes the specified Resource message. Does not implicitly {@link sprout.aixcourse.AIClass.Resource.verify|verify} messages.
         * @param message Resource message or plain object to encode
         * @param [writer] Writer to encode to
         * @returns Writer
         */
        public static encode(
          message: sprout.aixcourse.AIClass.IResource,
          writer?: $protobuf.Writer,
        ): $protobuf.Writer

        /**
         * Encodes the specified Resource message, length delimited. Does not implicitly {@link sprout.aixcourse.AIClass.Resource.verify|verify} messages.
         * @param message Resource message or plain object to encode
         * @param [writer] Writer to encode to
         * @returns Writer
         */
        public static encodeDelimited(
          message: sprout.aixcourse.AIClass.IResource,
          writer?: $protobuf.Writer,
        ): $protobuf.Writer

        /**
         * Decodes a Resource message from the specified reader or buffer.
         * @param reader Reader or buffer to decode from
         * @param [length] Message length if known beforehand
         * @returns Resource
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        public static decode(
          reader: $protobuf.Reader | Uint8Array,
          length?: number,
        ): sprout.aixcourse.AIClass.Resource

        /**
         * Decodes a Resource message from the specified reader or buffer, length delimited.
         * @param reader Reader or buffer to decode from
         * @returns Resource
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        public static decodeDelimited(
          reader: $protobuf.Reader | Uint8Array,
        ): sprout.aixcourse.AIClass.Resource

        /**
         * Verifies a Resource message.
         * @param message Plain object to verify
         * @returns `null` if valid, otherwise the reason why it is not
         */
        public static verify(message: { [k: string]: any }): string | null

        /**
         * Creates a Resource message from a plain object. Also converts values to their respective internal types.
         * @param object Plain object
         * @returns Resource
         */
        public static fromObject(object: {
          [k: string]: any
        }): sprout.aixcourse.AIClass.Resource

        /**
         * Creates a plain object from a Resource message. Also converts values to other types if specified.
         * @param message Resource
         * @param [options] Conversion options
         * @returns Plain object
         */
        public static toObject(
          message: sprout.aixcourse.AIClass.Resource,
          options?: $protobuf.IConversionOptions,
        ): { [k: string]: any }

        /**
         * Converts this Resource to JSON.
         * @returns JSON object
         */
        public toJSON(): { [k: string]: any }
      }
    }

    /** Properties of a Segment. */
    interface ISegment {
      /** Segment id */
      id?: number | Long | null

      /** Segment type */
      type?: sprout.aixcourse.SegmentType.Enum | null

      /** Segment resource */
      resource?: sprout.aixcourse.Segment.IResource | null

      /** Segment activityGroupIds */
      activityGroupIds?: (number | Long)[] | null

      /** Segment originalMetadata */
      originalMetadata?: string | null
    }

    /** Represents a Segment. */
    class Segment implements ISegment {
      /**
       * Constructs a new Segment.
       * @param [properties] Properties to set
       */
      constructor(properties?: sprout.aixcourse.ISegment)

      /** Segment id. */
      public id: number | Long

      /** Segment type. */
      public type: sprout.aixcourse.SegmentType.Enum

      /** Segment resource. */
      public resource?: sprout.aixcourse.Segment.IResource | null

      /** Segment activityGroupIds. */
      public activityGroupIds: (number | Long)[]

      /** Segment originalMetadata. */
      public originalMetadata: string

      /**
       * Creates a new Segment instance using the specified properties.
       * @param [properties] Properties to set
       * @returns Segment instance
       */
      public static create(
        properties?: sprout.aixcourse.ISegment,
      ): sprout.aixcourse.Segment

      /**
       * Encodes the specified Segment message. Does not implicitly {@link sprout.aixcourse.Segment.verify|verify} messages.
       * @param message Segment message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encode(
        message: sprout.aixcourse.ISegment,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Encodes the specified Segment message, length delimited. Does not implicitly {@link sprout.aixcourse.Segment.verify|verify} messages.
       * @param message Segment message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encodeDelimited(
        message: sprout.aixcourse.ISegment,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Decodes a Segment message from the specified reader or buffer.
       * @param reader Reader or buffer to decode from
       * @param [length] Message length if known beforehand
       * @returns Segment
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decode(
        reader: $protobuf.Reader | Uint8Array,
        length?: number,
      ): sprout.aixcourse.Segment

      /**
       * Decodes a Segment message from the specified reader or buffer, length delimited.
       * @param reader Reader or buffer to decode from
       * @returns Segment
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decodeDelimited(
        reader: $protobuf.Reader | Uint8Array,
      ): sprout.aixcourse.Segment

      /**
       * Verifies a Segment message.
       * @param message Plain object to verify
       * @returns `null` if valid, otherwise the reason why it is not
       */
      public static verify(message: { [k: string]: any }): string | null

      /**
       * Creates a Segment message from a plain object. Also converts values to their respective internal types.
       * @param object Plain object
       * @returns Segment
       */
      public static fromObject(object: {
        [k: string]: any
      }): sprout.aixcourse.Segment

      /**
       * Creates a plain object from a Segment message. Also converts values to other types if specified.
       * @param message Segment
       * @param [options] Conversion options
       * @returns Plain object
       */
      public static toObject(
        message: sprout.aixcourse.Segment,
        options?: $protobuf.IConversionOptions,
      ): { [k: string]: any }

      /**
       * Converts this Segment to JSON.
       * @returns JSON object
       */
      public toJSON(): { [k: string]: any }
    }

    namespace Segment {
      /** Properties of a Resource. */
      interface IResource {
        /** Resource backgroundPictureUrl */
        backgroundPictureUrl?: string | null
      }

      /** Represents a Resource. */
      class Resource implements IResource {
        /**
         * Constructs a new Resource.
         * @param [properties] Properties to set
         */
        constructor(properties?: sprout.aixcourse.Segment.IResource)

        /** Resource backgroundPictureUrl. */
        public backgroundPictureUrl: string

        /**
         * Creates a new Resource instance using the specified properties.
         * @param [properties] Properties to set
         * @returns Resource instance
         */
        public static create(
          properties?: sprout.aixcourse.Segment.IResource,
        ): sprout.aixcourse.Segment.Resource

        /**
         * Encodes the specified Resource message. Does not implicitly {@link sprout.aixcourse.Segment.Resource.verify|verify} messages.
         * @param message Resource message or plain object to encode
         * @param [writer] Writer to encode to
         * @returns Writer
         */
        public static encode(
          message: sprout.aixcourse.Segment.IResource,
          writer?: $protobuf.Writer,
        ): $protobuf.Writer

        /**
         * Encodes the specified Resource message, length delimited. Does not implicitly {@link sprout.aixcourse.Segment.Resource.verify|verify} messages.
         * @param message Resource message or plain object to encode
         * @param [writer] Writer to encode to
         * @returns Writer
         */
        public static encodeDelimited(
          message: sprout.aixcourse.Segment.IResource,
          writer?: $protobuf.Writer,
        ): $protobuf.Writer

        /**
         * Decodes a Resource message from the specified reader or buffer.
         * @param reader Reader or buffer to decode from
         * @param [length] Message length if known beforehand
         * @returns Resource
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        public static decode(
          reader: $protobuf.Reader | Uint8Array,
          length?: number,
        ): sprout.aixcourse.Segment.Resource

        /**
         * Decodes a Resource message from the specified reader or buffer, length delimited.
         * @param reader Reader or buffer to decode from
         * @returns Resource
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        public static decodeDelimited(
          reader: $protobuf.Reader | Uint8Array,
        ): sprout.aixcourse.Segment.Resource

        /**
         * Verifies a Resource message.
         * @param message Plain object to verify
         * @returns `null` if valid, otherwise the reason why it is not
         */
        public static verify(message: { [k: string]: any }): string | null

        /**
         * Creates a Resource message from a plain object. Also converts values to their respective internal types.
         * @param object Plain object
         * @returns Resource
         */
        public static fromObject(object: {
          [k: string]: any
        }): sprout.aixcourse.Segment.Resource

        /**
         * Creates a plain object from a Resource message. Also converts values to other types if specified.
         * @param message Resource
         * @param [options] Conversion options
         * @returns Plain object
         */
        public static toObject(
          message: sprout.aixcourse.Segment.Resource,
          options?: $protobuf.IConversionOptions,
        ): { [k: string]: any }

        /**
         * Converts this Resource to JSON.
         * @returns JSON object
         */
        public toJSON(): { [k: string]: any }
      }
    }

    /** Properties of an ActivityGroup. */
    interface IActivityGroup {
      /** ActivityGroup id */
      id?: number | Long | null

      /** ActivityGroup activityIds */
      activityIds?: (number | Long)[] | null

      /** ActivityGroup groupPedagogy */
      groupPedagogy?: sprout.aixcourse.ActivityGroupPedagogy.Enum | null

      /** ActivityGroup originalMetadata */
      originalMetadata?: string | null
    }

    /** Represents an ActivityGroup. */
    class ActivityGroup implements IActivityGroup {
      /**
       * Constructs a new ActivityGroup.
       * @param [properties] Properties to set
       */
      constructor(properties?: sprout.aixcourse.IActivityGroup)

      /** ActivityGroup id. */
      public id: number | Long

      /** ActivityGroup activityIds. */
      public activityIds: (number | Long)[]

      /** ActivityGroup groupPedagogy. */
      public groupPedagogy: sprout.aixcourse.ActivityGroupPedagogy.Enum

      /** ActivityGroup originalMetadata. */
      public originalMetadata: string

      /**
       * Creates a new ActivityGroup instance using the specified properties.
       * @param [properties] Properties to set
       * @returns ActivityGroup instance
       */
      public static create(
        properties?: sprout.aixcourse.IActivityGroup,
      ): sprout.aixcourse.ActivityGroup

      /**
       * Encodes the specified ActivityGroup message. Does not implicitly {@link sprout.aixcourse.ActivityGroup.verify|verify} messages.
       * @param message ActivityGroup message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encode(
        message: sprout.aixcourse.IActivityGroup,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Encodes the specified ActivityGroup message, length delimited. Does not implicitly {@link sprout.aixcourse.ActivityGroup.verify|verify} messages.
       * @param message ActivityGroup message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encodeDelimited(
        message: sprout.aixcourse.IActivityGroup,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Decodes an ActivityGroup message from the specified reader or buffer.
       * @param reader Reader or buffer to decode from
       * @param [length] Message length if known beforehand
       * @returns ActivityGroup
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decode(
        reader: $protobuf.Reader | Uint8Array,
        length?: number,
      ): sprout.aixcourse.ActivityGroup

      /**
       * Decodes an ActivityGroup message from the specified reader or buffer, length delimited.
       * @param reader Reader or buffer to decode from
       * @returns ActivityGroup
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decodeDelimited(
        reader: $protobuf.Reader | Uint8Array,
      ): sprout.aixcourse.ActivityGroup

      /**
       * Verifies an ActivityGroup message.
       * @param message Plain object to verify
       * @returns `null` if valid, otherwise the reason why it is not
       */
      public static verify(message: { [k: string]: any }): string | null

      /**
       * Creates an ActivityGroup message from a plain object. Also converts values to their respective internal types.
       * @param object Plain object
       * @returns ActivityGroup
       */
      public static fromObject(object: {
        [k: string]: any
      }): sprout.aixcourse.ActivityGroup

      /**
       * Creates a plain object from an ActivityGroup message. Also converts values to other types if specified.
       * @param message ActivityGroup
       * @param [options] Conversion options
       * @returns Plain object
       */
      public static toObject(
        message: sprout.aixcourse.ActivityGroup,
        options?: $protobuf.IConversionOptions,
      ): { [k: string]: any }

      /**
       * Converts this ActivityGroup to JSON.
       * @returns JSON object
       */
      public toJSON(): { [k: string]: any }
    }

    /** Properties of a AIXCourseSkeleton. */
    interface IAIXCourseSkeleton {
      /** AIXCourseSkeleton versionTimestampUsec */
      versionTimestampUsec?: number | Long | null

      /** AIXCourseSkeleton levels */
      levels?: sprout.aixcourse.ILevelSkeleton[] | null
    }

    /** Represents a AIXCourseSkeleton. */
    class AIXCourseSkeleton implements IAIXCourseSkeleton {
      /**
       * Constructs a new AIXCourseSkeleton.
       * @param [properties] Properties to set
       */
      constructor(properties?: sprout.aixcourse.IAIXCourseSkeleton)

      /** AIXCourseSkeleton versionTimestampUsec. */
      public versionTimestampUsec: number | Long

      /** AIXCourseSkeleton levels. */
      public levels: sprout.aixcourse.ILevelSkeleton[]

      /**
       * Creates a new AIXCourseSkeleton instance using the specified properties.
       * @param [properties] Properties to set
       * @returns AIXCourseSkeleton instance
       */
      public static create(
        properties?: sprout.aixcourse.IAIXCourseSkeleton,
      ): sprout.aixcourse.AIXCourseSkeleton

      /**
       * Encodes the specified AIXCourseSkeleton message. Does not implicitly {@link sprout.aixcourse.AIXCourseSkeleton.verify|verify} messages.
       * @param message AIXCourseSkeleton message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encode(
        message: sprout.aixcourse.IAIXCourseSkeleton,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Encodes the specified AIXCourseSkeleton message, length delimited. Does not implicitly {@link sprout.aixcourse.AIXCourseSkeleton.verify|verify} messages.
       * @param message AIXCourseSkeleton message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encodeDelimited(
        message: sprout.aixcourse.IAIXCourseSkeleton,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Decodes a AIXCourseSkeleton message from the specified reader or buffer.
       * @param reader Reader or buffer to decode from
       * @param [length] Message length if known beforehand
       * @returns AIXCourseSkeleton
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decode(
        reader: $protobuf.Reader | Uint8Array,
        length?: number,
      ): sprout.aixcourse.AIXCourseSkeleton

      /**
       * Decodes a AIXCourseSkeleton message from the specified reader or buffer, length delimited.
       * @param reader Reader or buffer to decode from
       * @returns AIXCourseSkeleton
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decodeDelimited(
        reader: $protobuf.Reader | Uint8Array,
      ): sprout.aixcourse.AIXCourseSkeleton

      /**
       * Verifies a AIXCourseSkeleton message.
       * @param message Plain object to verify
       * @returns `null` if valid, otherwise the reason why it is not
       */
      public static verify(message: { [k: string]: any }): string | null

      /**
       * Creates a AIXCourseSkeleton message from a plain object. Also converts values to their respective internal types.
       * @param object Plain object
       * @returns AIXCourseSkeleton
       */
      public static fromObject(object: {
        [k: string]: any
      }): sprout.aixcourse.AIXCourseSkeleton

      /**
       * Creates a plain object from a AIXCourseSkeleton message. Also converts values to other types if specified.
       * @param message AIXCourseSkeleton
       * @param [options] Conversion options
       * @returns Plain object
       */
      public static toObject(
        message: sprout.aixcourse.AIXCourseSkeleton,
        options?: $protobuf.IConversionOptions,
      ): { [k: string]: any }

      /**
       * Converts this AIXCourseSkeleton to JSON.
       * @returns JSON object
       */
      public toJSON(): { [k: string]: any }
    }

    /** Properties of a LevelSkeleton. */
    interface ILevelSkeleton {
      /** LevelSkeleton id */
      id?: number | Long | null

      /** LevelSkeleton level */
      level?: string | null

      /** LevelSkeleton modules */
      modules?: sprout.aixcourse.IModuleSkeleton[] | null
    }

    /** Represents a LevelSkeleton. */
    class LevelSkeleton implements ILevelSkeleton {
      /**
       * Constructs a new LevelSkeleton.
       * @param [properties] Properties to set
       */
      constructor(properties?: sprout.aixcourse.ILevelSkeleton)

      /** LevelSkeleton id. */
      public id: number | Long

      /** LevelSkeleton level. */
      public level: string

      /** LevelSkeleton modules. */
      public modules: sprout.aixcourse.IModuleSkeleton[]

      /**
       * Creates a new LevelSkeleton instance using the specified properties.
       * @param [properties] Properties to set
       * @returns LevelSkeleton instance
       */
      public static create(
        properties?: sprout.aixcourse.ILevelSkeleton,
      ): sprout.aixcourse.LevelSkeleton

      /**
       * Encodes the specified LevelSkeleton message. Does not implicitly {@link sprout.aixcourse.LevelSkeleton.verify|verify} messages.
       * @param message LevelSkeleton message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encode(
        message: sprout.aixcourse.ILevelSkeleton,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Encodes the specified LevelSkeleton message, length delimited. Does not implicitly {@link sprout.aixcourse.LevelSkeleton.verify|verify} messages.
       * @param message LevelSkeleton message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encodeDelimited(
        message: sprout.aixcourse.ILevelSkeleton,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Decodes a LevelSkeleton message from the specified reader or buffer.
       * @param reader Reader or buffer to decode from
       * @param [length] Message length if known beforehand
       * @returns LevelSkeleton
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decode(
        reader: $protobuf.Reader | Uint8Array,
        length?: number,
      ): sprout.aixcourse.LevelSkeleton

      /**
       * Decodes a LevelSkeleton message from the specified reader or buffer, length delimited.
       * @param reader Reader or buffer to decode from
       * @returns LevelSkeleton
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decodeDelimited(
        reader: $protobuf.Reader | Uint8Array,
      ): sprout.aixcourse.LevelSkeleton

      /**
       * Verifies a LevelSkeleton message.
       * @param message Plain object to verify
       * @returns `null` if valid, otherwise the reason why it is not
       */
      public static verify(message: { [k: string]: any }): string | null

      /**
       * Creates a LevelSkeleton message from a plain object. Also converts values to their respective internal types.
       * @param object Plain object
       * @returns LevelSkeleton
       */
      public static fromObject(object: {
        [k: string]: any
      }): sprout.aixcourse.LevelSkeleton

      /**
       * Creates a plain object from a LevelSkeleton message. Also converts values to other types if specified.
       * @param message LevelSkeleton
       * @param [options] Conversion options
       * @returns Plain object
       */
      public static toObject(
        message: sprout.aixcourse.LevelSkeleton,
        options?: $protobuf.IConversionOptions,
      ): { [k: string]: any }

      /**
       * Converts this LevelSkeleton to JSON.
       * @returns JSON object
       */
      public toJSON(): { [k: string]: any }
    }

    /** Properties of a ModuleSkeleton. */
    interface IModuleSkeleton {
      /** ModuleSkeleton id */
      id?: number | Long | null

      /** ModuleSkeleton units */
      units?: sprout.aixcourse.IUnitSkeleton[] | null
    }

    /** Represents a ModuleSkeleton. */
    class ModuleSkeleton implements IModuleSkeleton {
      /**
       * Constructs a new ModuleSkeleton.
       * @param [properties] Properties to set
       */
      constructor(properties?: sprout.aixcourse.IModuleSkeleton)

      /** ModuleSkeleton id. */
      public id: number | Long

      /** ModuleSkeleton units. */
      public units: sprout.aixcourse.IUnitSkeleton[]

      /**
       * Creates a new ModuleSkeleton instance using the specified properties.
       * @param [properties] Properties to set
       * @returns ModuleSkeleton instance
       */
      public static create(
        properties?: sprout.aixcourse.IModuleSkeleton,
      ): sprout.aixcourse.ModuleSkeleton

      /**
       * Encodes the specified ModuleSkeleton message. Does not implicitly {@link sprout.aixcourse.ModuleSkeleton.verify|verify} messages.
       * @param message ModuleSkeleton message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encode(
        message: sprout.aixcourse.IModuleSkeleton,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Encodes the specified ModuleSkeleton message, length delimited. Does not implicitly {@link sprout.aixcourse.ModuleSkeleton.verify|verify} messages.
       * @param message ModuleSkeleton message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encodeDelimited(
        message: sprout.aixcourse.IModuleSkeleton,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Decodes a ModuleSkeleton message from the specified reader or buffer.
       * @param reader Reader or buffer to decode from
       * @param [length] Message length if known beforehand
       * @returns ModuleSkeleton
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decode(
        reader: $protobuf.Reader | Uint8Array,
        length?: number,
      ): sprout.aixcourse.ModuleSkeleton

      /**
       * Decodes a ModuleSkeleton message from the specified reader or buffer, length delimited.
       * @param reader Reader or buffer to decode from
       * @returns ModuleSkeleton
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decodeDelimited(
        reader: $protobuf.Reader | Uint8Array,
      ): sprout.aixcourse.ModuleSkeleton

      /**
       * Verifies a ModuleSkeleton message.
       * @param message Plain object to verify
       * @returns `null` if valid, otherwise the reason why it is not
       */
      public static verify(message: { [k: string]: any }): string | null

      /**
       * Creates a ModuleSkeleton message from a plain object. Also converts values to their respective internal types.
       * @param object Plain object
       * @returns ModuleSkeleton
       */
      public static fromObject(object: {
        [k: string]: any
      }): sprout.aixcourse.ModuleSkeleton

      /**
       * Creates a plain object from a ModuleSkeleton message. Also converts values to other types if specified.
       * @param message ModuleSkeleton
       * @param [options] Conversion options
       * @returns Plain object
       */
      public static toObject(
        message: sprout.aixcourse.ModuleSkeleton,
        options?: $protobuf.IConversionOptions,
      ): { [k: string]: any }

      /**
       * Converts this ModuleSkeleton to JSON.
       * @returns JSON object
       */
      public toJSON(): { [k: string]: any }
    }

    /** Properties of an UnitSkeleton. */
    interface IUnitSkeleton {
      /** UnitSkeleton id */
      id?: number | Long | null

      /** UnitSkeleton titleCn */
      titleCn?: string | null

      /** UnitSkeleton lessons */
      lessons?: sprout.aixcourse.ILessonSkeleton[] | null
    }

    /** Represents an UnitSkeleton. */
    class UnitSkeleton implements IUnitSkeleton {
      /**
       * Constructs a new UnitSkeleton.
       * @param [properties] Properties to set
       */
      constructor(properties?: sprout.aixcourse.IUnitSkeleton)

      /** UnitSkeleton id. */
      public id: number | Long

      /** UnitSkeleton titleCn. */
      public titleCn: string

      /** UnitSkeleton lessons. */
      public lessons: sprout.aixcourse.ILessonSkeleton[]

      /**
       * Creates a new UnitSkeleton instance using the specified properties.
       * @param [properties] Properties to set
       * @returns UnitSkeleton instance
       */
      public static create(
        properties?: sprout.aixcourse.IUnitSkeleton,
      ): sprout.aixcourse.UnitSkeleton

      /**
       * Encodes the specified UnitSkeleton message. Does not implicitly {@link sprout.aixcourse.UnitSkeleton.verify|verify} messages.
       * @param message UnitSkeleton message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encode(
        message: sprout.aixcourse.IUnitSkeleton,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Encodes the specified UnitSkeleton message, length delimited. Does not implicitly {@link sprout.aixcourse.UnitSkeleton.verify|verify} messages.
       * @param message UnitSkeleton message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encodeDelimited(
        message: sprout.aixcourse.IUnitSkeleton,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Decodes an UnitSkeleton message from the specified reader or buffer.
       * @param reader Reader or buffer to decode from
       * @param [length] Message length if known beforehand
       * @returns UnitSkeleton
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decode(
        reader: $protobuf.Reader | Uint8Array,
        length?: number,
      ): sprout.aixcourse.UnitSkeleton

      /**
       * Decodes an UnitSkeleton message from the specified reader or buffer, length delimited.
       * @param reader Reader or buffer to decode from
       * @returns UnitSkeleton
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decodeDelimited(
        reader: $protobuf.Reader | Uint8Array,
      ): sprout.aixcourse.UnitSkeleton

      /**
       * Verifies an UnitSkeleton message.
       * @param message Plain object to verify
       * @returns `null` if valid, otherwise the reason why it is not
       */
      public static verify(message: { [k: string]: any }): string | null

      /**
       * Creates an UnitSkeleton message from a plain object. Also converts values to their respective internal types.
       * @param object Plain object
       * @returns UnitSkeleton
       */
      public static fromObject(object: {
        [k: string]: any
      }): sprout.aixcourse.UnitSkeleton

      /**
       * Creates a plain object from an UnitSkeleton message. Also converts values to other types if specified.
       * @param message UnitSkeleton
       * @param [options] Conversion options
       * @returns Plain object
       */
      public static toObject(
        message: sprout.aixcourse.UnitSkeleton,
        options?: $protobuf.IConversionOptions,
      ): { [k: string]: any }

      /**
       * Converts this UnitSkeleton to JSON.
       * @returns JSON object
       */
      public toJSON(): { [k: string]: any }
    }

    /** Properties of a LessonSkeleton. */
    interface ILessonSkeleton {
      /** LessonSkeleton id */
      id?: number | Long | null

      /** LessonSkeleton name */
      name?: string | null

      /** LessonSkeleton titleCn */
      titleCn?: string | null

      /** LessonSkeleton coverPictureUrl */
      coverPictureUrl?: string | null

      /** LessonSkeleton aiClassMap */
      aiClassMap?: { [k: string]: sprout.aixcourse.IAIClassSkeleton } | null

      /** LessonSkeleton xClassMap */
      xClassMap?: { [k: string]: sprout.aixcourse.IXClassSkeleton } | null

      /** LessonSkeleton aiHomeworkMap */
      aiHomeworkMap?: {
        [k: string]: sprout.aixcourse.IAIHomeworkSkeleton
      } | null

      /** LessonSkeleton yClassMap */
      yClassMap?: { [k: string]: sprout.aixcourse.IYClassSkeleton } | null
    }

    /** Represents a LessonSkeleton. */
    class LessonSkeleton implements ILessonSkeleton {
      /**
       * Constructs a new LessonSkeleton.
       * @param [properties] Properties to set
       */
      constructor(properties?: sprout.aixcourse.ILessonSkeleton)

      /** LessonSkeleton id. */
      public id: number | Long

      /** LessonSkeleton name. */
      public name: string

      /** LessonSkeleton titleCn. */
      public titleCn: string

      /** LessonSkeleton coverPictureUrl. */
      public coverPictureUrl: string

      /** LessonSkeleton aiClassMap. */
      public aiClassMap: { [k: string]: sprout.aixcourse.IAIClassSkeleton }

      /** LessonSkeleton xClassMap. */
      public xClassMap: { [k: string]: sprout.aixcourse.IXClassSkeleton }

      /** LessonSkeleton aiHomeworkMap. */
      public aiHomeworkMap: {
        [k: string]: sprout.aixcourse.IAIHomeworkSkeleton
      }

      /** LessonSkeleton yClassMap. */
      public yClassMap: { [k: string]: sprout.aixcourse.IYClassSkeleton }

      /**
       * Creates a new LessonSkeleton instance using the specified properties.
       * @param [properties] Properties to set
       * @returns LessonSkeleton instance
       */
      public static create(
        properties?: sprout.aixcourse.ILessonSkeleton,
      ): sprout.aixcourse.LessonSkeleton

      /**
       * Encodes the specified LessonSkeleton message. Does not implicitly {@link sprout.aixcourse.LessonSkeleton.verify|verify} messages.
       * @param message LessonSkeleton message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encode(
        message: sprout.aixcourse.ILessonSkeleton,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Encodes the specified LessonSkeleton message, length delimited. Does not implicitly {@link sprout.aixcourse.LessonSkeleton.verify|verify} messages.
       * @param message LessonSkeleton message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encodeDelimited(
        message: sprout.aixcourse.ILessonSkeleton,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Decodes a LessonSkeleton message from the specified reader or buffer.
       * @param reader Reader or buffer to decode from
       * @param [length] Message length if known beforehand
       * @returns LessonSkeleton
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decode(
        reader: $protobuf.Reader | Uint8Array,
        length?: number,
      ): sprout.aixcourse.LessonSkeleton

      /**
       * Decodes a LessonSkeleton message from the specified reader or buffer, length delimited.
       * @param reader Reader or buffer to decode from
       * @returns LessonSkeleton
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decodeDelimited(
        reader: $protobuf.Reader | Uint8Array,
      ): sprout.aixcourse.LessonSkeleton

      /**
       * Verifies a LessonSkeleton message.
       * @param message Plain object to verify
       * @returns `null` if valid, otherwise the reason why it is not
       */
      public static verify(message: { [k: string]: any }): string | null

      /**
       * Creates a LessonSkeleton message from a plain object. Also converts values to their respective internal types.
       * @param object Plain object
       * @returns LessonSkeleton
       */
      public static fromObject(object: {
        [k: string]: any
      }): sprout.aixcourse.LessonSkeleton

      /**
       * Creates a plain object from a LessonSkeleton message. Also converts values to other types if specified.
       * @param message LessonSkeleton
       * @param [options] Conversion options
       * @returns Plain object
       */
      public static toObject(
        message: sprout.aixcourse.LessonSkeleton,
        options?: $protobuf.IConversionOptions,
      ): { [k: string]: any }

      /**
       * Converts this LessonSkeleton to JSON.
       * @returns JSON object
       */
      public toJSON(): { [k: string]: any }
    }

    /** Properties of a AIClassSkeleton. */
    interface IAIClassSkeleton {
      /** AIClassSkeleton id */
      id?: number | Long | null

      /** AIClassSkeleton teacherName */
      teacherName?: string | null

      /** AIClassSkeleton difficulty */
      difficulty?: sprout.aixcourse.DifficultyType.Enum | null

      /** AIClassSkeleton segments */
      segments?: sprout.aixcourse.ISegmentSkeleton[] | null
    }

    /** Represents a AIClassSkeleton. */
    class AIClassSkeleton implements IAIClassSkeleton {
      /**
       * Constructs a new AIClassSkeleton.
       * @param [properties] Properties to set
       */
      constructor(properties?: sprout.aixcourse.IAIClassSkeleton)

      /** AIClassSkeleton id. */
      public id: number | Long

      /** AIClassSkeleton teacherName. */
      public teacherName: string

      /** AIClassSkeleton difficulty. */
      public difficulty: sprout.aixcourse.DifficultyType.Enum

      /** AIClassSkeleton segments. */
      public segments: sprout.aixcourse.ISegmentSkeleton[]

      /**
       * Creates a new AIClassSkeleton instance using the specified properties.
       * @param [properties] Properties to set
       * @returns AIClassSkeleton instance
       */
      public static create(
        properties?: sprout.aixcourse.IAIClassSkeleton,
      ): sprout.aixcourse.AIClassSkeleton

      /**
       * Encodes the specified AIClassSkeleton message. Does not implicitly {@link sprout.aixcourse.AIClassSkeleton.verify|verify} messages.
       * @param message AIClassSkeleton message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encode(
        message: sprout.aixcourse.IAIClassSkeleton,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Encodes the specified AIClassSkeleton message, length delimited. Does not implicitly {@link sprout.aixcourse.AIClassSkeleton.verify|verify} messages.
       * @param message AIClassSkeleton message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encodeDelimited(
        message: sprout.aixcourse.IAIClassSkeleton,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Decodes a AIClassSkeleton message from the specified reader or buffer.
       * @param reader Reader or buffer to decode from
       * @param [length] Message length if known beforehand
       * @returns AIClassSkeleton
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decode(
        reader: $protobuf.Reader | Uint8Array,
        length?: number,
      ): sprout.aixcourse.AIClassSkeleton

      /**
       * Decodes a AIClassSkeleton message from the specified reader or buffer, length delimited.
       * @param reader Reader or buffer to decode from
       * @returns AIClassSkeleton
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decodeDelimited(
        reader: $protobuf.Reader | Uint8Array,
      ): sprout.aixcourse.AIClassSkeleton

      /**
       * Verifies a AIClassSkeleton message.
       * @param message Plain object to verify
       * @returns `null` if valid, otherwise the reason why it is not
       */
      public static verify(message: { [k: string]: any }): string | null

      /**
       * Creates a AIClassSkeleton message from a plain object. Also converts values to their respective internal types.
       * @param object Plain object
       * @returns AIClassSkeleton
       */
      public static fromObject(object: {
        [k: string]: any
      }): sprout.aixcourse.AIClassSkeleton

      /**
       * Creates a plain object from a AIClassSkeleton message. Also converts values to other types if specified.
       * @param message AIClassSkeleton
       * @param [options] Conversion options
       * @returns Plain object
       */
      public static toObject(
        message: sprout.aixcourse.AIClassSkeleton,
        options?: $protobuf.IConversionOptions,
      ): { [k: string]: any }

      /**
       * Converts this AIClassSkeleton to JSON.
       * @returns JSON object
       */
      public toJSON(): { [k: string]: any }
    }

    /** Properties of a XClassSkeleton. */
    interface IXClassSkeleton {
      /** XClassSkeleton id */
      id?: number | Long | null

      /** XClassSkeleton difficulty */
      difficulty?: sprout.aixcourse.DifficultyType.Enum | null

      /** XClassSkeleton segments */
      segments?: sprout.aixcourse.ISegmentSkeleton[] | null
    }

    /** Represents a XClassSkeleton. */
    class XClassSkeleton implements IXClassSkeleton {
      /**
       * Constructs a new XClassSkeleton.
       * @param [properties] Properties to set
       */
      constructor(properties?: sprout.aixcourse.IXClassSkeleton)

      /** XClassSkeleton id. */
      public id: number | Long

      /** XClassSkeleton difficulty. */
      public difficulty: sprout.aixcourse.DifficultyType.Enum

      /** XClassSkeleton segments. */
      public segments: sprout.aixcourse.ISegmentSkeleton[]

      /**
       * Creates a new XClassSkeleton instance using the specified properties.
       * @param [properties] Properties to set
       * @returns XClassSkeleton instance
       */
      public static create(
        properties?: sprout.aixcourse.IXClassSkeleton,
      ): sprout.aixcourse.XClassSkeleton

      /**
       * Encodes the specified XClassSkeleton message. Does not implicitly {@link sprout.aixcourse.XClassSkeleton.verify|verify} messages.
       * @param message XClassSkeleton message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encode(
        message: sprout.aixcourse.IXClassSkeleton,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Encodes the specified XClassSkeleton message, length delimited. Does not implicitly {@link sprout.aixcourse.XClassSkeleton.verify|verify} messages.
       * @param message XClassSkeleton message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encodeDelimited(
        message: sprout.aixcourse.IXClassSkeleton,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Decodes a XClassSkeleton message from the specified reader or buffer.
       * @param reader Reader or buffer to decode from
       * @param [length] Message length if known beforehand
       * @returns XClassSkeleton
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decode(
        reader: $protobuf.Reader | Uint8Array,
        length?: number,
      ): sprout.aixcourse.XClassSkeleton

      /**
       * Decodes a XClassSkeleton message from the specified reader or buffer, length delimited.
       * @param reader Reader or buffer to decode from
       * @returns XClassSkeleton
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decodeDelimited(
        reader: $protobuf.Reader | Uint8Array,
      ): sprout.aixcourse.XClassSkeleton

      /**
       * Verifies a XClassSkeleton message.
       * @param message Plain object to verify
       * @returns `null` if valid, otherwise the reason why it is not
       */
      public static verify(message: { [k: string]: any }): string | null

      /**
       * Creates a XClassSkeleton message from a plain object. Also converts values to their respective internal types.
       * @param object Plain object
       * @returns XClassSkeleton
       */
      public static fromObject(object: {
        [k: string]: any
      }): sprout.aixcourse.XClassSkeleton

      /**
       * Creates a plain object from a XClassSkeleton message. Also converts values to other types if specified.
       * @param message XClassSkeleton
       * @param [options] Conversion options
       * @returns Plain object
       */
      public static toObject(
        message: sprout.aixcourse.XClassSkeleton,
        options?: $protobuf.IConversionOptions,
      ): { [k: string]: any }

      /**
       * Converts this XClassSkeleton to JSON.
       * @returns JSON object
       */
      public toJSON(): { [k: string]: any }
    }

    /** Properties of a YClassSkeleton. */
    interface IYClassSkeleton {
      /** YClassSkeleton id */
      id?: number | Long | null

      /** YClassSkeleton difficulty */
      difficulty?: sprout.aixcourse.DifficultyType.Enum | null

      /** YClassSkeleton segments */
      segments?: sprout.aixcourse.ISegmentSkeleton[] | null
    }

    /** Represents a YClassSkeleton. */
    class YClassSkeleton implements IYClassSkeleton {
      /**
       * Constructs a new YClassSkeleton.
       * @param [properties] Properties to set
       */
      constructor(properties?: sprout.aixcourse.IYClassSkeleton)

      /** YClassSkeleton id. */
      public id: number | Long

      /** YClassSkeleton difficulty. */
      public difficulty: sprout.aixcourse.DifficultyType.Enum

      /** YClassSkeleton segments. */
      public segments: sprout.aixcourse.ISegmentSkeleton[]

      /**
       * Creates a new YClassSkeleton instance using the specified properties.
       * @param [properties] Properties to set
       * @returns YClassSkeleton instance
       */
      public static create(
        properties?: sprout.aixcourse.IYClassSkeleton,
      ): sprout.aixcourse.YClassSkeleton

      /**
       * Encodes the specified YClassSkeleton message. Does not implicitly {@link sprout.aixcourse.YClassSkeleton.verify|verify} messages.
       * @param message YClassSkeleton message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encode(
        message: sprout.aixcourse.IYClassSkeleton,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Encodes the specified YClassSkeleton message, length delimited. Does not implicitly {@link sprout.aixcourse.YClassSkeleton.verify|verify} messages.
       * @param message YClassSkeleton message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encodeDelimited(
        message: sprout.aixcourse.IYClassSkeleton,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Decodes a YClassSkeleton message from the specified reader or buffer.
       * @param reader Reader or buffer to decode from
       * @param [length] Message length if known beforehand
       * @returns YClassSkeleton
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decode(
        reader: $protobuf.Reader | Uint8Array,
        length?: number,
      ): sprout.aixcourse.YClassSkeleton

      /**
       * Decodes a YClassSkeleton message from the specified reader or buffer, length delimited.
       * @param reader Reader or buffer to decode from
       * @returns YClassSkeleton
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decodeDelimited(
        reader: $protobuf.Reader | Uint8Array,
      ): sprout.aixcourse.YClassSkeleton

      /**
       * Verifies a YClassSkeleton message.
       * @param message Plain object to verify
       * @returns `null` if valid, otherwise the reason why it is not
       */
      public static verify(message: { [k: string]: any }): string | null

      /**
       * Creates a YClassSkeleton message from a plain object. Also converts values to their respective internal types.
       * @param object Plain object
       * @returns YClassSkeleton
       */
      public static fromObject(object: {
        [k: string]: any
      }): sprout.aixcourse.YClassSkeleton

      /**
       * Creates a plain object from a YClassSkeleton message. Also converts values to other types if specified.
       * @param message YClassSkeleton
       * @param [options] Conversion options
       * @returns Plain object
       */
      public static toObject(
        message: sprout.aixcourse.YClassSkeleton,
        options?: $protobuf.IConversionOptions,
      ): { [k: string]: any }

      /**
       * Converts this YClassSkeleton to JSON.
       * @returns JSON object
       */
      public toJSON(): { [k: string]: any }
    }

    /** Properties of a AIHomeworkSkeleton. */
    interface IAIHomeworkSkeleton {
      /** AIHomeworkSkeleton id */
      id?: number | Long | null

      /** AIHomeworkSkeleton difficulty */
      difficulty?: sprout.aixcourse.DifficultyType.Enum | null

      /** AIHomeworkSkeleton segments */
      segments?: sprout.aixcourse.ISegmentSkeleton[] | null
    }

    /** Represents a AIHomeworkSkeleton. */
    class AIHomeworkSkeleton implements IAIHomeworkSkeleton {
      /**
       * Constructs a new AIHomeworkSkeleton.
       * @param [properties] Properties to set
       */
      constructor(properties?: sprout.aixcourse.IAIHomeworkSkeleton)

      /** AIHomeworkSkeleton id. */
      public id: number | Long

      /** AIHomeworkSkeleton difficulty. */
      public difficulty: sprout.aixcourse.DifficultyType.Enum

      /** AIHomeworkSkeleton segments. */
      public segments: sprout.aixcourse.ISegmentSkeleton[]

      /**
       * Creates a new AIHomeworkSkeleton instance using the specified properties.
       * @param [properties] Properties to set
       * @returns AIHomeworkSkeleton instance
       */
      public static create(
        properties?: sprout.aixcourse.IAIHomeworkSkeleton,
      ): sprout.aixcourse.AIHomeworkSkeleton

      /**
       * Encodes the specified AIHomeworkSkeleton message. Does not implicitly {@link sprout.aixcourse.AIHomeworkSkeleton.verify|verify} messages.
       * @param message AIHomeworkSkeleton message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encode(
        message: sprout.aixcourse.IAIHomeworkSkeleton,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Encodes the specified AIHomeworkSkeleton message, length delimited. Does not implicitly {@link sprout.aixcourse.AIHomeworkSkeleton.verify|verify} messages.
       * @param message AIHomeworkSkeleton message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encodeDelimited(
        message: sprout.aixcourse.IAIHomeworkSkeleton,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Decodes a AIHomeworkSkeleton message from the specified reader or buffer.
       * @param reader Reader or buffer to decode from
       * @param [length] Message length if known beforehand
       * @returns AIHomeworkSkeleton
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decode(
        reader: $protobuf.Reader | Uint8Array,
        length?: number,
      ): sprout.aixcourse.AIHomeworkSkeleton

      /**
       * Decodes a AIHomeworkSkeleton message from the specified reader or buffer, length delimited.
       * @param reader Reader or buffer to decode from
       * @returns AIHomeworkSkeleton
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decodeDelimited(
        reader: $protobuf.Reader | Uint8Array,
      ): sprout.aixcourse.AIHomeworkSkeleton

      /**
       * Verifies a AIHomeworkSkeleton message.
       * @param message Plain object to verify
       * @returns `null` if valid, otherwise the reason why it is not
       */
      public static verify(message: { [k: string]: any }): string | null

      /**
       * Creates a AIHomeworkSkeleton message from a plain object. Also converts values to their respective internal types.
       * @param object Plain object
       * @returns AIHomeworkSkeleton
       */
      public static fromObject(object: {
        [k: string]: any
      }): sprout.aixcourse.AIHomeworkSkeleton

      /**
       * Creates a plain object from a AIHomeworkSkeleton message. Also converts values to other types if specified.
       * @param message AIHomeworkSkeleton
       * @param [options] Conversion options
       * @returns Plain object
       */
      public static toObject(
        message: sprout.aixcourse.AIHomeworkSkeleton,
        options?: $protobuf.IConversionOptions,
      ): { [k: string]: any }

      /**
       * Converts this AIHomeworkSkeleton to JSON.
       * @returns JSON object
       */
      public toJSON(): { [k: string]: any }
    }

    /** Properties of a SegmentSkeleton. */
    interface ISegmentSkeleton {
      /** SegmentSkeleton id */
      id?: number | Long | null

      /** SegmentSkeleton activityGroups */
      activityGroups?: sprout.aixcourse.IActivityGroupSkeleton[] | null
    }

    /** Represents a SegmentSkeleton. */
    class SegmentSkeleton implements ISegmentSkeleton {
      /**
       * Constructs a new SegmentSkeleton.
       * @param [properties] Properties to set
       */
      constructor(properties?: sprout.aixcourse.ISegmentSkeleton)

      /** SegmentSkeleton id. */
      public id: number | Long

      /** SegmentSkeleton activityGroups. */
      public activityGroups: sprout.aixcourse.IActivityGroupSkeleton[]

      /**
       * Creates a new SegmentSkeleton instance using the specified properties.
       * @param [properties] Properties to set
       * @returns SegmentSkeleton instance
       */
      public static create(
        properties?: sprout.aixcourse.ISegmentSkeleton,
      ): sprout.aixcourse.SegmentSkeleton

      /**
       * Encodes the specified SegmentSkeleton message. Does not implicitly {@link sprout.aixcourse.SegmentSkeleton.verify|verify} messages.
       * @param message SegmentSkeleton message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encode(
        message: sprout.aixcourse.ISegmentSkeleton,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Encodes the specified SegmentSkeleton message, length delimited. Does not implicitly {@link sprout.aixcourse.SegmentSkeleton.verify|verify} messages.
       * @param message SegmentSkeleton message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encodeDelimited(
        message: sprout.aixcourse.ISegmentSkeleton,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Decodes a SegmentSkeleton message from the specified reader or buffer.
       * @param reader Reader or buffer to decode from
       * @param [length] Message length if known beforehand
       * @returns SegmentSkeleton
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decode(
        reader: $protobuf.Reader | Uint8Array,
        length?: number,
      ): sprout.aixcourse.SegmentSkeleton

      /**
       * Decodes a SegmentSkeleton message from the specified reader or buffer, length delimited.
       * @param reader Reader or buffer to decode from
       * @returns SegmentSkeleton
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decodeDelimited(
        reader: $protobuf.Reader | Uint8Array,
      ): sprout.aixcourse.SegmentSkeleton

      /**
       * Verifies a SegmentSkeleton message.
       * @param message Plain object to verify
       * @returns `null` if valid, otherwise the reason why it is not
       */
      public static verify(message: { [k: string]: any }): string | null

      /**
       * Creates a SegmentSkeleton message from a plain object. Also converts values to their respective internal types.
       * @param object Plain object
       * @returns SegmentSkeleton
       */
      public static fromObject(object: {
        [k: string]: any
      }): sprout.aixcourse.SegmentSkeleton

      /**
       * Creates a plain object from a SegmentSkeleton message. Also converts values to other types if specified.
       * @param message SegmentSkeleton
       * @param [options] Conversion options
       * @returns Plain object
       */
      public static toObject(
        message: sprout.aixcourse.SegmentSkeleton,
        options?: $protobuf.IConversionOptions,
      ): { [k: string]: any }

      /**
       * Converts this SegmentSkeleton to JSON.
       * @returns JSON object
       */
      public toJSON(): { [k: string]: any }
    }

    /** Properties of an ActivityGroupSkeleton. */
    interface IActivityGroupSkeleton {
      /** ActivityGroupSkeleton id */
      id?: number | Long | null

      /** ActivityGroupSkeleton activities */
      activities?: sprout.aixcourse.IActivitySkeleton[] | null
    }

    /** Represents an ActivityGroupSkeleton. */
    class ActivityGroupSkeleton implements IActivityGroupSkeleton {
      /**
       * Constructs a new ActivityGroupSkeleton.
       * @param [properties] Properties to set
       */
      constructor(properties?: sprout.aixcourse.IActivityGroupSkeleton)

      /** ActivityGroupSkeleton id. */
      public id: number | Long

      /** ActivityGroupSkeleton activities. */
      public activities: sprout.aixcourse.IActivitySkeleton[]

      /**
       * Creates a new ActivityGroupSkeleton instance using the specified properties.
       * @param [properties] Properties to set
       * @returns ActivityGroupSkeleton instance
       */
      public static create(
        properties?: sprout.aixcourse.IActivityGroupSkeleton,
      ): sprout.aixcourse.ActivityGroupSkeleton

      /**
       * Encodes the specified ActivityGroupSkeleton message. Does not implicitly {@link sprout.aixcourse.ActivityGroupSkeleton.verify|verify} messages.
       * @param message ActivityGroupSkeleton message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encode(
        message: sprout.aixcourse.IActivityGroupSkeleton,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Encodes the specified ActivityGroupSkeleton message, length delimited. Does not implicitly {@link sprout.aixcourse.ActivityGroupSkeleton.verify|verify} messages.
       * @param message ActivityGroupSkeleton message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encodeDelimited(
        message: sprout.aixcourse.IActivityGroupSkeleton,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Decodes an ActivityGroupSkeleton message from the specified reader or buffer.
       * @param reader Reader or buffer to decode from
       * @param [length] Message length if known beforehand
       * @returns ActivityGroupSkeleton
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decode(
        reader: $protobuf.Reader | Uint8Array,
        length?: number,
      ): sprout.aixcourse.ActivityGroupSkeleton

      /**
       * Decodes an ActivityGroupSkeleton message from the specified reader or buffer, length delimited.
       * @param reader Reader or buffer to decode from
       * @returns ActivityGroupSkeleton
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decodeDelimited(
        reader: $protobuf.Reader | Uint8Array,
      ): sprout.aixcourse.ActivityGroupSkeleton

      /**
       * Verifies an ActivityGroupSkeleton message.
       * @param message Plain object to verify
       * @returns `null` if valid, otherwise the reason why it is not
       */
      public static verify(message: { [k: string]: any }): string | null

      /**
       * Creates an ActivityGroupSkeleton message from a plain object. Also converts values to their respective internal types.
       * @param object Plain object
       * @returns ActivityGroupSkeleton
       */
      public static fromObject(object: {
        [k: string]: any
      }): sprout.aixcourse.ActivityGroupSkeleton

      /**
       * Creates a plain object from an ActivityGroupSkeleton message. Also converts values to other types if specified.
       * @param message ActivityGroupSkeleton
       * @param [options] Conversion options
       * @returns Plain object
       */
      public static toObject(
        message: sprout.aixcourse.ActivityGroupSkeleton,
        options?: $protobuf.IConversionOptions,
      ): { [k: string]: any }

      /**
       * Converts this ActivityGroupSkeleton to JSON.
       * @returns JSON object
       */
      public toJSON(): { [k: string]: any }
    }

    /** Properties of an ActivitySkeleton. */
    interface IActivitySkeleton {
      /** ActivitySkeleton id */
      id?: number | Long | null
    }

    /** Represents an ActivitySkeleton. */
    class ActivitySkeleton implements IActivitySkeleton {
      /**
       * Constructs a new ActivitySkeleton.
       * @param [properties] Properties to set
       */
      constructor(properties?: sprout.aixcourse.IActivitySkeleton)

      /** ActivitySkeleton id. */
      public id: number | Long

      /**
       * Creates a new ActivitySkeleton instance using the specified properties.
       * @param [properties] Properties to set
       * @returns ActivitySkeleton instance
       */
      public static create(
        properties?: sprout.aixcourse.IActivitySkeleton,
      ): sprout.aixcourse.ActivitySkeleton

      /**
       * Encodes the specified ActivitySkeleton message. Does not implicitly {@link sprout.aixcourse.ActivitySkeleton.verify|verify} messages.
       * @param message ActivitySkeleton message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encode(
        message: sprout.aixcourse.IActivitySkeleton,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Encodes the specified ActivitySkeleton message, length delimited. Does not implicitly {@link sprout.aixcourse.ActivitySkeleton.verify|verify} messages.
       * @param message ActivitySkeleton message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encodeDelimited(
        message: sprout.aixcourse.IActivitySkeleton,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Decodes an ActivitySkeleton message from the specified reader or buffer.
       * @param reader Reader or buffer to decode from
       * @param [length] Message length if known beforehand
       * @returns ActivitySkeleton
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decode(
        reader: $protobuf.Reader | Uint8Array,
        length?: number,
      ): sprout.aixcourse.ActivitySkeleton

      /**
       * Decodes an ActivitySkeleton message from the specified reader or buffer, length delimited.
       * @param reader Reader or buffer to decode from
       * @returns ActivitySkeleton
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decodeDelimited(
        reader: $protobuf.Reader | Uint8Array,
      ): sprout.aixcourse.ActivitySkeleton

      /**
       * Verifies an ActivitySkeleton message.
       * @param message Plain object to verify
       * @returns `null` if valid, otherwise the reason why it is not
       */
      public static verify(message: { [k: string]: any }): string | null

      /**
       * Creates an ActivitySkeleton message from a plain object. Also converts values to their respective internal types.
       * @param object Plain object
       * @returns ActivitySkeleton
       */
      public static fromObject(object: {
        [k: string]: any
      }): sprout.aixcourse.ActivitySkeleton

      /**
       * Creates a plain object from an ActivitySkeleton message. Also converts values to other types if specified.
       * @param message ActivitySkeleton
       * @param [options] Conversion options
       * @returns Plain object
       */
      public static toObject(
        message: sprout.aixcourse.ActivitySkeleton,
        options?: $protobuf.IConversionOptions,
      ): { [k: string]: any }

      /**
       * Converts this ActivitySkeleton to JSON.
       * @returns JSON object
       */
      public toJSON(): { [k: string]: any }
    }
  }

  /** Namespace phonicscourse. */
  namespace phonicscourse {
    /** Properties of a VideoTeaching. */
    interface IVideoTeaching {
      /** VideoTeaching videoId */
      videoId?: string | null

      /** VideoTeaching clips */
      clips?: sprout.phonicscourse.IVideoTeachingClip[] | null
    }

    /** Represents a VideoTeaching. */
    class VideoTeaching implements IVideoTeaching {
      /**
       * Constructs a new VideoTeaching.
       * @param [properties] Properties to set
       */
      constructor(properties?: sprout.phonicscourse.IVideoTeaching)

      /** VideoTeaching videoId. */
      public videoId: string

      /** VideoTeaching clips. */
      public clips: sprout.phonicscourse.IVideoTeachingClip[]

      /**
       * Creates a new VideoTeaching instance using the specified properties.
       * @param [properties] Properties to set
       * @returns VideoTeaching instance
       */
      public static create(
        properties?: sprout.phonicscourse.IVideoTeaching,
      ): sprout.phonicscourse.VideoTeaching

      /**
       * Encodes the specified VideoTeaching message. Does not implicitly {@link sprout.phonicscourse.VideoTeaching.verify|verify} messages.
       * @param message VideoTeaching message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encode(
        message: sprout.phonicscourse.IVideoTeaching,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Encodes the specified VideoTeaching message, length delimited. Does not implicitly {@link sprout.phonicscourse.VideoTeaching.verify|verify} messages.
       * @param message VideoTeaching message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encodeDelimited(
        message: sprout.phonicscourse.IVideoTeaching,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Decodes a VideoTeaching message from the specified reader or buffer.
       * @param reader Reader or buffer to decode from
       * @param [length] Message length if known beforehand
       * @returns VideoTeaching
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decode(
        reader: $protobuf.Reader | Uint8Array,
        length?: number,
      ): sprout.phonicscourse.VideoTeaching

      /**
       * Decodes a VideoTeaching message from the specified reader or buffer, length delimited.
       * @param reader Reader or buffer to decode from
       * @returns VideoTeaching
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decodeDelimited(
        reader: $protobuf.Reader | Uint8Array,
      ): sprout.phonicscourse.VideoTeaching

      /**
       * Verifies a VideoTeaching message.
       * @param message Plain object to verify
       * @returns `null` if valid, otherwise the reason why it is not
       */
      public static verify(message: { [k: string]: any }): string | null

      /**
       * Creates a VideoTeaching message from a plain object. Also converts values to their respective internal types.
       * @param object Plain object
       * @returns VideoTeaching
       */
      public static fromObject(object: {
        [k: string]: any
      }): sprout.phonicscourse.VideoTeaching

      /**
       * Creates a plain object from a VideoTeaching message. Also converts values to other types if specified.
       * @param message VideoTeaching
       * @param [options] Conversion options
       * @returns Plain object
       */
      public static toObject(
        message: sprout.phonicscourse.VideoTeaching,
        options?: $protobuf.IConversionOptions,
      ): { [k: string]: any }

      /**
       * Converts this VideoTeaching to JSON.
       * @returns JSON object
       */
      public toJSON(): { [k: string]: any }
    }

    /** Properties of a HandWriting. */
    interface IHandWriting {
      /** HandWriting text */
      text?: string | null
    }

    /** Represents a HandWriting. */
    class HandWriting implements IHandWriting {
      /**
       * Constructs a new HandWriting.
       * @param [properties] Properties to set
       */
      constructor(properties?: sprout.phonicscourse.IHandWriting)

      /** HandWriting text. */
      public text: string

      /**
       * Creates a new HandWriting instance using the specified properties.
       * @param [properties] Properties to set
       * @returns HandWriting instance
       */
      public static create(
        properties?: sprout.phonicscourse.IHandWriting,
      ): sprout.phonicscourse.HandWriting

      /**
       * Encodes the specified HandWriting message. Does not implicitly {@link sprout.phonicscourse.HandWriting.verify|verify} messages.
       * @param message HandWriting message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encode(
        message: sprout.phonicscourse.IHandWriting,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Encodes the specified HandWriting message, length delimited. Does not implicitly {@link sprout.phonicscourse.HandWriting.verify|verify} messages.
       * @param message HandWriting message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encodeDelimited(
        message: sprout.phonicscourse.IHandWriting,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Decodes a HandWriting message from the specified reader or buffer.
       * @param reader Reader or buffer to decode from
       * @param [length] Message length if known beforehand
       * @returns HandWriting
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decode(
        reader: $protobuf.Reader | Uint8Array,
        length?: number,
      ): sprout.phonicscourse.HandWriting

      /**
       * Decodes a HandWriting message from the specified reader or buffer, length delimited.
       * @param reader Reader or buffer to decode from
       * @returns HandWriting
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decodeDelimited(
        reader: $protobuf.Reader | Uint8Array,
      ): sprout.phonicscourse.HandWriting

      /**
       * Verifies a HandWriting message.
       * @param message Plain object to verify
       * @returns `null` if valid, otherwise the reason why it is not
       */
      public static verify(message: { [k: string]: any }): string | null

      /**
       * Creates a HandWriting message from a plain object. Also converts values to their respective internal types.
       * @param object Plain object
       * @returns HandWriting
       */
      public static fromObject(object: {
        [k: string]: any
      }): sprout.phonicscourse.HandWriting

      /**
       * Creates a plain object from a HandWriting message. Also converts values to other types if specified.
       * @param message HandWriting
       * @param [options] Conversion options
       * @returns Plain object
       */
      public static toObject(
        message: sprout.phonicscourse.HandWriting,
        options?: $protobuf.IConversionOptions,
      ): { [k: string]: any }

      /**
       * Converts this HandWriting to JSON.
       * @returns JSON object
       */
      public toJSON(): { [k: string]: any }
    }

    /** Properties of a VideoTeachingClip. */
    interface IVideoTeachingClip {
      /** VideoTeachingClip videoClipId */
      videoClipId?: string | null

      /** VideoTeachingClip sourceVideoId */
      sourceVideoId?: string | null

      /** VideoTeachingClip startAt */
      startAt?: number | null

      /** VideoTeachingClip endAt */
      endAt?: number | null

      /** VideoTeachingClip text */
      text?: string | null

      /** VideoTeachingClip activityId */
      activityId?: (number | Long)[] | null
    }

    /** Represents a VideoTeachingClip. */
    class VideoTeachingClip implements IVideoTeachingClip {
      /**
       * Constructs a new VideoTeachingClip.
       * @param [properties] Properties to set
       */
      constructor(properties?: sprout.phonicscourse.IVideoTeachingClip)

      /** VideoTeachingClip videoClipId. */
      public videoClipId: string

      /** VideoTeachingClip sourceVideoId. */
      public sourceVideoId: string

      /** VideoTeachingClip startAt. */
      public startAt: number

      /** VideoTeachingClip endAt. */
      public endAt: number

      /** VideoTeachingClip text. */
      public text: string

      /** VideoTeachingClip activityId. */
      public activityId: (number | Long)[]

      /**
       * Creates a new VideoTeachingClip instance using the specified properties.
       * @param [properties] Properties to set
       * @returns VideoTeachingClip instance
       */
      public static create(
        properties?: sprout.phonicscourse.IVideoTeachingClip,
      ): sprout.phonicscourse.VideoTeachingClip

      /**
       * Encodes the specified VideoTeachingClip message. Does not implicitly {@link sprout.phonicscourse.VideoTeachingClip.verify|verify} messages.
       * @param message VideoTeachingClip message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encode(
        message: sprout.phonicscourse.IVideoTeachingClip,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Encodes the specified VideoTeachingClip message, length delimited. Does not implicitly {@link sprout.phonicscourse.VideoTeachingClip.verify|verify} messages.
       * @param message VideoTeachingClip message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encodeDelimited(
        message: sprout.phonicscourse.IVideoTeachingClip,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Decodes a VideoTeachingClip message from the specified reader or buffer.
       * @param reader Reader or buffer to decode from
       * @param [length] Message length if known beforehand
       * @returns VideoTeachingClip
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decode(
        reader: $protobuf.Reader | Uint8Array,
        length?: number,
      ): sprout.phonicscourse.VideoTeachingClip

      /**
       * Decodes a VideoTeachingClip message from the specified reader or buffer, length delimited.
       * @param reader Reader or buffer to decode from
       * @returns VideoTeachingClip
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decodeDelimited(
        reader: $protobuf.Reader | Uint8Array,
      ): sprout.phonicscourse.VideoTeachingClip

      /**
       * Verifies a VideoTeachingClip message.
       * @param message Plain object to verify
       * @returns `null` if valid, otherwise the reason why it is not
       */
      public static verify(message: { [k: string]: any }): string | null

      /**
       * Creates a VideoTeachingClip message from a plain object. Also converts values to their respective internal types.
       * @param object Plain object
       * @returns VideoTeachingClip
       */
      public static fromObject(object: {
        [k: string]: any
      }): sprout.phonicscourse.VideoTeachingClip

      /**
       * Creates a plain object from a VideoTeachingClip message. Also converts values to other types if specified.
       * @param message VideoTeachingClip
       * @param [options] Conversion options
       * @returns Plain object
       */
      public static toObject(
        message: sprout.phonicscourse.VideoTeachingClip,
        options?: $protobuf.IConversionOptions,
      ): { [k: string]: any }

      /**
       * Converts this VideoTeachingClip to JSON.
       * @returns JSON object
       */
      public toJSON(): { [k: string]: any }
    }

    /** Properties of a DubShow. */
    interface IDubShow {
      /** DubShow videoElement */
      videoElement?: core_course.IPBVideoElement | null

      /** DubShow audioId */
      audioId?: string | null

      /** DubShow bgmId */
      bgmId?: string | null

      /** DubShow text */
      text?: string | null

      /** DubShow audioMeta */
      audioMeta?: sprout.phonicscourse.IAudioMeta | null
    }

    /** Represents a DubShow. */
    class DubShow implements IDubShow {
      /**
       * Constructs a new DubShow.
       * @param [properties] Properties to set
       */
      constructor(properties?: sprout.phonicscourse.IDubShow)

      /** DubShow videoElement. */
      public videoElement?: core_course.IPBVideoElement | null

      /** DubShow audioId. */
      public audioId: string

      /** DubShow bgmId. */
      public bgmId: string

      /** DubShow text. */
      public text: string

      /** DubShow audioMeta. */
      public audioMeta?: sprout.phonicscourse.IAudioMeta | null

      /**
       * Creates a new DubShow instance using the specified properties.
       * @param [properties] Properties to set
       * @returns DubShow instance
       */
      public static create(
        properties?: sprout.phonicscourse.IDubShow,
      ): sprout.phonicscourse.DubShow

      /**
       * Encodes the specified DubShow message. Does not implicitly {@link sprout.phonicscourse.DubShow.verify|verify} messages.
       * @param message DubShow message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encode(
        message: sprout.phonicscourse.IDubShow,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Encodes the specified DubShow message, length delimited. Does not implicitly {@link sprout.phonicscourse.DubShow.verify|verify} messages.
       * @param message DubShow message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encodeDelimited(
        message: sprout.phonicscourse.IDubShow,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Decodes a DubShow message from the specified reader or buffer.
       * @param reader Reader or buffer to decode from
       * @param [length] Message length if known beforehand
       * @returns DubShow
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decode(
        reader: $protobuf.Reader | Uint8Array,
        length?: number,
      ): sprout.phonicscourse.DubShow

      /**
       * Decodes a DubShow message from the specified reader or buffer, length delimited.
       * @param reader Reader or buffer to decode from
       * @returns DubShow
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decodeDelimited(
        reader: $protobuf.Reader | Uint8Array,
      ): sprout.phonicscourse.DubShow

      /**
       * Verifies a DubShow message.
       * @param message Plain object to verify
       * @returns `null` if valid, otherwise the reason why it is not
       */
      public static verify(message: { [k: string]: any }): string | null

      /**
       * Creates a DubShow message from a plain object. Also converts values to their respective internal types.
       * @param object Plain object
       * @returns DubShow
       */
      public static fromObject(object: {
        [k: string]: any
      }): sprout.phonicscourse.DubShow

      /**
       * Creates a plain object from a DubShow message. Also converts values to other types if specified.
       * @param message DubShow
       * @param [options] Conversion options
       * @returns Plain object
       */
      public static toObject(
        message: sprout.phonicscourse.DubShow,
        options?: $protobuf.IConversionOptions,
      ): { [k: string]: any }

      /**
       * Converts this DubShow to JSON.
       * @returns JSON object
       */
      public toJSON(): { [k: string]: any }
    }

    /** Properties of an AudioToPicture. */
    interface IAudioToPicture {
      /** AudioToPicture multiChoicePicture_1 */
      multiChoicePicture_1?: darwincourse.IMultiChoicePicture1 | null
    }

    /** Represents an AudioToPicture. */
    class AudioToPicture implements IAudioToPicture {
      /**
       * Constructs a new AudioToPicture.
       * @param [properties] Properties to set
       */
      constructor(properties?: sprout.phonicscourse.IAudioToPicture)

      /** AudioToPicture multiChoicePicture_1. */
      public multiChoicePicture_1?: darwincourse.IMultiChoicePicture1 | null

      /**
       * Creates a new AudioToPicture instance using the specified properties.
       * @param [properties] Properties to set
       * @returns AudioToPicture instance
       */
      public static create(
        properties?: sprout.phonicscourse.IAudioToPicture,
      ): sprout.phonicscourse.AudioToPicture

      /**
       * Encodes the specified AudioToPicture message. Does not implicitly {@link sprout.phonicscourse.AudioToPicture.verify|verify} messages.
       * @param message AudioToPicture message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encode(
        message: sprout.phonicscourse.IAudioToPicture,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Encodes the specified AudioToPicture message, length delimited. Does not implicitly {@link sprout.phonicscourse.AudioToPicture.verify|verify} messages.
       * @param message AudioToPicture message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encodeDelimited(
        message: sprout.phonicscourse.IAudioToPicture,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Decodes an AudioToPicture message from the specified reader or buffer.
       * @param reader Reader or buffer to decode from
       * @param [length] Message length if known beforehand
       * @returns AudioToPicture
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decode(
        reader: $protobuf.Reader | Uint8Array,
        length?: number,
      ): sprout.phonicscourse.AudioToPicture

      /**
       * Decodes an AudioToPicture message from the specified reader or buffer, length delimited.
       * @param reader Reader or buffer to decode from
       * @returns AudioToPicture
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decodeDelimited(
        reader: $protobuf.Reader | Uint8Array,
      ): sprout.phonicscourse.AudioToPicture

      /**
       * Verifies an AudioToPicture message.
       * @param message Plain object to verify
       * @returns `null` if valid, otherwise the reason why it is not
       */
      public static verify(message: { [k: string]: any }): string | null

      /**
       * Creates an AudioToPicture message from a plain object. Also converts values to their respective internal types.
       * @param object Plain object
       * @returns AudioToPicture
       */
      public static fromObject(object: {
        [k: string]: any
      }): sprout.phonicscourse.AudioToPicture

      /**
       * Creates a plain object from an AudioToPicture message. Also converts values to other types if specified.
       * @param message AudioToPicture
       * @param [options] Conversion options
       * @returns Plain object
       */
      public static toObject(
        message: sprout.phonicscourse.AudioToPicture,
        options?: $protobuf.IConversionOptions,
      ): { [k: string]: any }

      /**
       * Converts this AudioToPicture to JSON.
       * @returns JSON object
       */
      public toJSON(): { [k: string]: any }
    }

    /** Properties of a TextToPicture. */
    interface ITextToPicture {
      /** TextToPicture text */
      text?: string | null

      /** TextToPicture choice */
      choice?: { [k: string]: darwincourse.IChoice } | null
    }

    /** Represents a TextToPicture. */
    class TextToPicture implements ITextToPicture {
      /**
       * Constructs a new TextToPicture.
       * @param [properties] Properties to set
       */
      constructor(properties?: sprout.phonicscourse.ITextToPicture)

      /** TextToPicture text. */
      public text: string

      /** TextToPicture choice. */
      public choice: { [k: string]: darwincourse.IChoice }

      /**
       * Creates a new TextToPicture instance using the specified properties.
       * @param [properties] Properties to set
       * @returns TextToPicture instance
       */
      public static create(
        properties?: sprout.phonicscourse.ITextToPicture,
      ): sprout.phonicscourse.TextToPicture

      /**
       * Encodes the specified TextToPicture message. Does not implicitly {@link sprout.phonicscourse.TextToPicture.verify|verify} messages.
       * @param message TextToPicture message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encode(
        message: sprout.phonicscourse.ITextToPicture,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Encodes the specified TextToPicture message, length delimited. Does not implicitly {@link sprout.phonicscourse.TextToPicture.verify|verify} messages.
       * @param message TextToPicture message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encodeDelimited(
        message: sprout.phonicscourse.ITextToPicture,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Decodes a TextToPicture message from the specified reader or buffer.
       * @param reader Reader or buffer to decode from
       * @param [length] Message length if known beforehand
       * @returns TextToPicture
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decode(
        reader: $protobuf.Reader | Uint8Array,
        length?: number,
      ): sprout.phonicscourse.TextToPicture

      /**
       * Decodes a TextToPicture message from the specified reader or buffer, length delimited.
       * @param reader Reader or buffer to decode from
       * @returns TextToPicture
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decodeDelimited(
        reader: $protobuf.Reader | Uint8Array,
      ): sprout.phonicscourse.TextToPicture

      /**
       * Verifies a TextToPicture message.
       * @param message Plain object to verify
       * @returns `null` if valid, otherwise the reason why it is not
       */
      public static verify(message: { [k: string]: any }): string | null

      /**
       * Creates a TextToPicture message from a plain object. Also converts values to their respective internal types.
       * @param object Plain object
       * @returns TextToPicture
       */
      public static fromObject(object: {
        [k: string]: any
      }): sprout.phonicscourse.TextToPicture

      /**
       * Creates a plain object from a TextToPicture message. Also converts values to other types if specified.
       * @param message TextToPicture
       * @param [options] Conversion options
       * @returns Plain object
       */
      public static toObject(
        message: sprout.phonicscourse.TextToPicture,
        options?: $protobuf.IConversionOptions,
      ): { [k: string]: any }

      /**
       * Converts this TextToPicture to JSON.
       * @returns JSON object
       */
      public toJSON(): { [k: string]: any }
    }

    /** Properties of an AudioToText. */
    interface IAudioToText {
      /** AudioToText multiChoiceQuestion_1 */
      multiChoiceQuestion_1?: darwincourse.IMultiChoiceQuestion1 | null
    }

    /** Represents an AudioToText. */
    class AudioToText implements IAudioToText {
      /**
       * Constructs a new AudioToText.
       * @param [properties] Properties to set
       */
      constructor(properties?: sprout.phonicscourse.IAudioToText)

      /** AudioToText multiChoiceQuestion_1. */
      public multiChoiceQuestion_1?: darwincourse.IMultiChoiceQuestion1 | null

      /**
       * Creates a new AudioToText instance using the specified properties.
       * @param [properties] Properties to set
       * @returns AudioToText instance
       */
      public static create(
        properties?: sprout.phonicscourse.IAudioToText,
      ): sprout.phonicscourse.AudioToText

      /**
       * Encodes the specified AudioToText message. Does not implicitly {@link sprout.phonicscourse.AudioToText.verify|verify} messages.
       * @param message AudioToText message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encode(
        message: sprout.phonicscourse.IAudioToText,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Encodes the specified AudioToText message, length delimited. Does not implicitly {@link sprout.phonicscourse.AudioToText.verify|verify} messages.
       * @param message AudioToText message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encodeDelimited(
        message: sprout.phonicscourse.IAudioToText,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Decodes an AudioToText message from the specified reader or buffer.
       * @param reader Reader or buffer to decode from
       * @param [length] Message length if known beforehand
       * @returns AudioToText
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decode(
        reader: $protobuf.Reader | Uint8Array,
        length?: number,
      ): sprout.phonicscourse.AudioToText

      /**
       * Decodes an AudioToText message from the specified reader or buffer, length delimited.
       * @param reader Reader or buffer to decode from
       * @returns AudioToText
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decodeDelimited(
        reader: $protobuf.Reader | Uint8Array,
      ): sprout.phonicscourse.AudioToText

      /**
       * Verifies an AudioToText message.
       * @param message Plain object to verify
       * @returns `null` if valid, otherwise the reason why it is not
       */
      public static verify(message: { [k: string]: any }): string | null

      /**
       * Creates an AudioToText message from a plain object. Also converts values to their respective internal types.
       * @param object Plain object
       * @returns AudioToText
       */
      public static fromObject(object: {
        [k: string]: any
      }): sprout.phonicscourse.AudioToText

      /**
       * Creates a plain object from an AudioToText message. Also converts values to other types if specified.
       * @param message AudioToText
       * @param [options] Conversion options
       * @returns Plain object
       */
      public static toObject(
        message: sprout.phonicscourse.AudioToText,
        options?: $protobuf.IConversionOptions,
      ): { [k: string]: any }

      /**
       * Converts this AudioToText to JSON.
       * @returns JSON object
       */
      public toJSON(): { [k: string]: any }
    }

    /** Properties of an AudioToText2. */
    interface IAudioToText2 {
      /** AudioToText2 multiChoiceQuestion_1 */
      multiChoiceQuestion_1?: darwincourse.IMultiChoiceQuestion1 | null
    }

    /** Represents an AudioToText2. */
    class AudioToText2 implements IAudioToText2 {
      /**
       * Constructs a new AudioToText2.
       * @param [properties] Properties to set
       */
      constructor(properties?: sprout.phonicscourse.IAudioToText2)

      /** AudioToText2 multiChoiceQuestion_1. */
      public multiChoiceQuestion_1?: darwincourse.IMultiChoiceQuestion1 | null

      /**
       * Creates a new AudioToText2 instance using the specified properties.
       * @param [properties] Properties to set
       * @returns AudioToText2 instance
       */
      public static create(
        properties?: sprout.phonicscourse.IAudioToText2,
      ): sprout.phonicscourse.AudioToText2

      /**
       * Encodes the specified AudioToText2 message. Does not implicitly {@link sprout.phonicscourse.AudioToText2.verify|verify} messages.
       * @param message AudioToText2 message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encode(
        message: sprout.phonicscourse.IAudioToText2,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Encodes the specified AudioToText2 message, length delimited. Does not implicitly {@link sprout.phonicscourse.AudioToText2.verify|verify} messages.
       * @param message AudioToText2 message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encodeDelimited(
        message: sprout.phonicscourse.IAudioToText2,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Decodes an AudioToText2 message from the specified reader or buffer.
       * @param reader Reader or buffer to decode from
       * @param [length] Message length if known beforehand
       * @returns AudioToText2
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decode(
        reader: $protobuf.Reader | Uint8Array,
        length?: number,
      ): sprout.phonicscourse.AudioToText2

      /**
       * Decodes an AudioToText2 message from the specified reader or buffer, length delimited.
       * @param reader Reader or buffer to decode from
       * @returns AudioToText2
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decodeDelimited(
        reader: $protobuf.Reader | Uint8Array,
      ): sprout.phonicscourse.AudioToText2

      /**
       * Verifies an AudioToText2 message.
       * @param message Plain object to verify
       * @returns `null` if valid, otherwise the reason why it is not
       */
      public static verify(message: { [k: string]: any }): string | null

      /**
       * Creates an AudioToText2 message from a plain object. Also converts values to their respective internal types.
       * @param object Plain object
       * @returns AudioToText2
       */
      public static fromObject(object: {
        [k: string]: any
      }): sprout.phonicscourse.AudioToText2

      /**
       * Creates a plain object from an AudioToText2 message. Also converts values to other types if specified.
       * @param message AudioToText2
       * @param [options] Conversion options
       * @returns Plain object
       */
      public static toObject(
        message: sprout.phonicscourse.AudioToText2,
        options?: $protobuf.IConversionOptions,
      ): { [k: string]: any }

      /**
       * Converts this AudioToText2 to JSON.
       * @returns JSON object
       */
      public toJSON(): { [k: string]: any }
    }

    /** Properties of a SpeakOut. */
    interface ISpeakOut {
      /** SpeakOut text */
      text?: string | null

      /** SpeakOut audioId */
      audioId?: string | null

      /** SpeakOut spokenText */
      spokenText?: string | null

      /** SpeakOut pictureId */
      pictureId?: string | null

      /** SpeakOut audioMeta */
      audioMeta?: sprout.phonicscourse.IAudioMeta | null
    }

    /** Represents a SpeakOut. */
    class SpeakOut implements ISpeakOut {
      /**
       * Constructs a new SpeakOut.
       * @param [properties] Properties to set
       */
      constructor(properties?: sprout.phonicscourse.ISpeakOut)

      /** SpeakOut text. */
      public text: string

      /** SpeakOut audioId. */
      public audioId: string

      /** SpeakOut spokenText. */
      public spokenText: string

      /** SpeakOut pictureId. */
      public pictureId: string

      /** SpeakOut audioMeta. */
      public audioMeta?: sprout.phonicscourse.IAudioMeta | null

      /**
       * Creates a new SpeakOut instance using the specified properties.
       * @param [properties] Properties to set
       * @returns SpeakOut instance
       */
      public static create(
        properties?: sprout.phonicscourse.ISpeakOut,
      ): sprout.phonicscourse.SpeakOut

      /**
       * Encodes the specified SpeakOut message. Does not implicitly {@link sprout.phonicscourse.SpeakOut.verify|verify} messages.
       * @param message SpeakOut message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encode(
        message: sprout.phonicscourse.ISpeakOut,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Encodes the specified SpeakOut message, length delimited. Does not implicitly {@link sprout.phonicscourse.SpeakOut.verify|verify} messages.
       * @param message SpeakOut message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encodeDelimited(
        message: sprout.phonicscourse.ISpeakOut,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Decodes a SpeakOut message from the specified reader or buffer.
       * @param reader Reader or buffer to decode from
       * @param [length] Message length if known beforehand
       * @returns SpeakOut
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decode(
        reader: $protobuf.Reader | Uint8Array,
        length?: number,
      ): sprout.phonicscourse.SpeakOut

      /**
       * Decodes a SpeakOut message from the specified reader or buffer, length delimited.
       * @param reader Reader or buffer to decode from
       * @returns SpeakOut
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decodeDelimited(
        reader: $protobuf.Reader | Uint8Array,
      ): sprout.phonicscourse.SpeakOut

      /**
       * Verifies a SpeakOut message.
       * @param message Plain object to verify
       * @returns `null` if valid, otherwise the reason why it is not
       */
      public static verify(message: { [k: string]: any }): string | null

      /**
       * Creates a SpeakOut message from a plain object. Also converts values to their respective internal types.
       * @param object Plain object
       * @returns SpeakOut
       */
      public static fromObject(object: {
        [k: string]: any
      }): sprout.phonicscourse.SpeakOut

      /**
       * Creates a plain object from a SpeakOut message. Also converts values to other types if specified.
       * @param message SpeakOut
       * @param [options] Conversion options
       * @returns Plain object
       */
      public static toObject(
        message: sprout.phonicscourse.SpeakOut,
        options?: $protobuf.IConversionOptions,
      ): { [k: string]: any }

      /**
       * Converts this SpeakOut to JSON.
       * @returns JSON object
       */
      public toJSON(): { [k: string]: any }
    }

    /** Properties of a SpeakOut1. */
    interface ISpeakOut1 {
      /** SpeakOut1 speakOut */
      speakOut?: sprout.phonicscourse.ISpeakOut | null
    }

    /** Represents a SpeakOut1. */
    class SpeakOut1 implements ISpeakOut1 {
      /**
       * Constructs a new SpeakOut1.
       * @param [properties] Properties to set
       */
      constructor(properties?: sprout.phonicscourse.ISpeakOut1)

      /** SpeakOut1 speakOut. */
      public speakOut?: sprout.phonicscourse.ISpeakOut | null

      /**
       * Creates a new SpeakOut1 instance using the specified properties.
       * @param [properties] Properties to set
       * @returns SpeakOut1 instance
       */
      public static create(
        properties?: sprout.phonicscourse.ISpeakOut1,
      ): sprout.phonicscourse.SpeakOut1

      /**
       * Encodes the specified SpeakOut1 message. Does not implicitly {@link sprout.phonicscourse.SpeakOut1.verify|verify} messages.
       * @param message SpeakOut1 message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encode(
        message: sprout.phonicscourse.ISpeakOut1,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Encodes the specified SpeakOut1 message, length delimited. Does not implicitly {@link sprout.phonicscourse.SpeakOut1.verify|verify} messages.
       * @param message SpeakOut1 message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encodeDelimited(
        message: sprout.phonicscourse.ISpeakOut1,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Decodes a SpeakOut1 message from the specified reader or buffer.
       * @param reader Reader or buffer to decode from
       * @param [length] Message length if known beforehand
       * @returns SpeakOut1
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decode(
        reader: $protobuf.Reader | Uint8Array,
        length?: number,
      ): sprout.phonicscourse.SpeakOut1

      /**
       * Decodes a SpeakOut1 message from the specified reader or buffer, length delimited.
       * @param reader Reader or buffer to decode from
       * @returns SpeakOut1
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decodeDelimited(
        reader: $protobuf.Reader | Uint8Array,
      ): sprout.phonicscourse.SpeakOut1

      /**
       * Verifies a SpeakOut1 message.
       * @param message Plain object to verify
       * @returns `null` if valid, otherwise the reason why it is not
       */
      public static verify(message: { [k: string]: any }): string | null

      /**
       * Creates a SpeakOut1 message from a plain object. Also converts values to their respective internal types.
       * @param object Plain object
       * @returns SpeakOut1
       */
      public static fromObject(object: {
        [k: string]: any
      }): sprout.phonicscourse.SpeakOut1

      /**
       * Creates a plain object from a SpeakOut1 message. Also converts values to other types if specified.
       * @param message SpeakOut1
       * @param [options] Conversion options
       * @returns Plain object
       */
      public static toObject(
        message: sprout.phonicscourse.SpeakOut1,
        options?: $protobuf.IConversionOptions,
      ): { [k: string]: any }

      /**
       * Converts this SpeakOut1 to JSON.
       * @returns JSON object
       */
      public toJSON(): { [k: string]: any }
    }

    /** Properties of a SpeakOut2. */
    interface ISpeakOut2 {
      /** SpeakOut2 speakOut */
      speakOut?: sprout.phonicscourse.ISpeakOut | null
    }

    /** Represents a SpeakOut2. */
    class SpeakOut2 implements ISpeakOut2 {
      /**
       * Constructs a new SpeakOut2.
       * @param [properties] Properties to set
       */
      constructor(properties?: sprout.phonicscourse.ISpeakOut2)

      /** SpeakOut2 speakOut. */
      public speakOut?: sprout.phonicscourse.ISpeakOut | null

      /**
       * Creates a new SpeakOut2 instance using the specified properties.
       * @param [properties] Properties to set
       * @returns SpeakOut2 instance
       */
      public static create(
        properties?: sprout.phonicscourse.ISpeakOut2,
      ): sprout.phonicscourse.SpeakOut2

      /**
       * Encodes the specified SpeakOut2 message. Does not implicitly {@link sprout.phonicscourse.SpeakOut2.verify|verify} messages.
       * @param message SpeakOut2 message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encode(
        message: sprout.phonicscourse.ISpeakOut2,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Encodes the specified SpeakOut2 message, length delimited. Does not implicitly {@link sprout.phonicscourse.SpeakOut2.verify|verify} messages.
       * @param message SpeakOut2 message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encodeDelimited(
        message: sprout.phonicscourse.ISpeakOut2,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Decodes a SpeakOut2 message from the specified reader or buffer.
       * @param reader Reader or buffer to decode from
       * @param [length] Message length if known beforehand
       * @returns SpeakOut2
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decode(
        reader: $protobuf.Reader | Uint8Array,
        length?: number,
      ): sprout.phonicscourse.SpeakOut2

      /**
       * Decodes a SpeakOut2 message from the specified reader or buffer, length delimited.
       * @param reader Reader or buffer to decode from
       * @returns SpeakOut2
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decodeDelimited(
        reader: $protobuf.Reader | Uint8Array,
      ): sprout.phonicscourse.SpeakOut2

      /**
       * Verifies a SpeakOut2 message.
       * @param message Plain object to verify
       * @returns `null` if valid, otherwise the reason why it is not
       */
      public static verify(message: { [k: string]: any }): string | null

      /**
       * Creates a SpeakOut2 message from a plain object. Also converts values to their respective internal types.
       * @param object Plain object
       * @returns SpeakOut2
       */
      public static fromObject(object: {
        [k: string]: any
      }): sprout.phonicscourse.SpeakOut2

      /**
       * Creates a plain object from a SpeakOut2 message. Also converts values to other types if specified.
       * @param message SpeakOut2
       * @param [options] Conversion options
       * @returns Plain object
       */
      public static toObject(
        message: sprout.phonicscourse.SpeakOut2,
        options?: $protobuf.IConversionOptions,
      ): { [k: string]: any }

      /**
       * Converts this SpeakOut2 to JSON.
       * @returns JSON object
       */
      public toJSON(): { [k: string]: any }
    }

    /** Properties of a SpeakOut3. */
    interface ISpeakOut3 {
      /** SpeakOut3 speakOut */
      speakOut?: sprout.phonicscourse.ISpeakOut | null
    }

    /** Represents a SpeakOut3. */
    class SpeakOut3 implements ISpeakOut3 {
      /**
       * Constructs a new SpeakOut3.
       * @param [properties] Properties to set
       */
      constructor(properties?: sprout.phonicscourse.ISpeakOut3)

      /** SpeakOut3 speakOut. */
      public speakOut?: sprout.phonicscourse.ISpeakOut | null

      /**
       * Creates a new SpeakOut3 instance using the specified properties.
       * @param [properties] Properties to set
       * @returns SpeakOut3 instance
       */
      public static create(
        properties?: sprout.phonicscourse.ISpeakOut3,
      ): sprout.phonicscourse.SpeakOut3

      /**
       * Encodes the specified SpeakOut3 message. Does not implicitly {@link sprout.phonicscourse.SpeakOut3.verify|verify} messages.
       * @param message SpeakOut3 message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encode(
        message: sprout.phonicscourse.ISpeakOut3,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Encodes the specified SpeakOut3 message, length delimited. Does not implicitly {@link sprout.phonicscourse.SpeakOut3.verify|verify} messages.
       * @param message SpeakOut3 message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encodeDelimited(
        message: sprout.phonicscourse.ISpeakOut3,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Decodes a SpeakOut3 message from the specified reader or buffer.
       * @param reader Reader or buffer to decode from
       * @param [length] Message length if known beforehand
       * @returns SpeakOut3
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decode(
        reader: $protobuf.Reader | Uint8Array,
        length?: number,
      ): sprout.phonicscourse.SpeakOut3

      /**
       * Decodes a SpeakOut3 message from the specified reader or buffer, length delimited.
       * @param reader Reader or buffer to decode from
       * @returns SpeakOut3
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decodeDelimited(
        reader: $protobuf.Reader | Uint8Array,
      ): sprout.phonicscourse.SpeakOut3

      /**
       * Verifies a SpeakOut3 message.
       * @param message Plain object to verify
       * @returns `null` if valid, otherwise the reason why it is not
       */
      public static verify(message: { [k: string]: any }): string | null

      /**
       * Creates a SpeakOut3 message from a plain object. Also converts values to their respective internal types.
       * @param object Plain object
       * @returns SpeakOut3
       */
      public static fromObject(object: {
        [k: string]: any
      }): sprout.phonicscourse.SpeakOut3

      /**
       * Creates a plain object from a SpeakOut3 message. Also converts values to other types if specified.
       * @param message SpeakOut3
       * @param [options] Conversion options
       * @returns Plain object
       */
      public static toObject(
        message: sprout.phonicscourse.SpeakOut3,
        options?: $protobuf.IConversionOptions,
      ): { [k: string]: any }

      /**
       * Converts this SpeakOut3 to JSON.
       * @returns JSON object
       */
      public toJSON(): { [k: string]: any }
    }

    /** Properties of a SpeakOut4. */
    interface ISpeakOut4 {
      /** SpeakOut4 speakOut */
      speakOut?: sprout.phonicscourse.ISpeakOut | null
    }

    /** Represents a SpeakOut4. */
    class SpeakOut4 implements ISpeakOut4 {
      /**
       * Constructs a new SpeakOut4.
       * @param [properties] Properties to set
       */
      constructor(properties?: sprout.phonicscourse.ISpeakOut4)

      /** SpeakOut4 speakOut. */
      public speakOut?: sprout.phonicscourse.ISpeakOut | null

      /**
       * Creates a new SpeakOut4 instance using the specified properties.
       * @param [properties] Properties to set
       * @returns SpeakOut4 instance
       */
      public static create(
        properties?: sprout.phonicscourse.ISpeakOut4,
      ): sprout.phonicscourse.SpeakOut4

      /**
       * Encodes the specified SpeakOut4 message. Does not implicitly {@link sprout.phonicscourse.SpeakOut4.verify|verify} messages.
       * @param message SpeakOut4 message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encode(
        message: sprout.phonicscourse.ISpeakOut4,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Encodes the specified SpeakOut4 message, length delimited. Does not implicitly {@link sprout.phonicscourse.SpeakOut4.verify|verify} messages.
       * @param message SpeakOut4 message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encodeDelimited(
        message: sprout.phonicscourse.ISpeakOut4,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Decodes a SpeakOut4 message from the specified reader or buffer.
       * @param reader Reader or buffer to decode from
       * @param [length] Message length if known beforehand
       * @returns SpeakOut4
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decode(
        reader: $protobuf.Reader | Uint8Array,
        length?: number,
      ): sprout.phonicscourse.SpeakOut4

      /**
       * Decodes a SpeakOut4 message from the specified reader or buffer, length delimited.
       * @param reader Reader or buffer to decode from
       * @returns SpeakOut4
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decodeDelimited(
        reader: $protobuf.Reader | Uint8Array,
      ): sprout.phonicscourse.SpeakOut4

      /**
       * Verifies a SpeakOut4 message.
       * @param message Plain object to verify
       * @returns `null` if valid, otherwise the reason why it is not
       */
      public static verify(message: { [k: string]: any }): string | null

      /**
       * Creates a SpeakOut4 message from a plain object. Also converts values to their respective internal types.
       * @param object Plain object
       * @returns SpeakOut4
       */
      public static fromObject(object: {
        [k: string]: any
      }): sprout.phonicscourse.SpeakOut4

      /**
       * Creates a plain object from a SpeakOut4 message. Also converts values to other types if specified.
       * @param message SpeakOut4
       * @param [options] Conversion options
       * @returns Plain object
       */
      public static toObject(
        message: sprout.phonicscourse.SpeakOut4,
        options?: $protobuf.IConversionOptions,
      ): { [k: string]: any }

      /**
       * Converts this SpeakOut4 to JSON.
       * @returns JSON object
       */
      public toJSON(): { [k: string]: any }
    }

    /** Properties of a SpeakOut0. */
    interface ISpeakOut0 {
      /** SpeakOut0 speakOut */
      speakOut?: sprout.phonicscourse.ISpeakOut | null
    }

    /** Represents a SpeakOut0. */
    class SpeakOut0 implements ISpeakOut0 {
      /**
       * Constructs a new SpeakOut0.
       * @param [properties] Properties to set
       */
      constructor(properties?: sprout.phonicscourse.ISpeakOut0)

      /** SpeakOut0 speakOut. */
      public speakOut?: sprout.phonicscourse.ISpeakOut | null

      /**
       * Creates a new SpeakOut0 instance using the specified properties.
       * @param [properties] Properties to set
       * @returns SpeakOut0 instance
       */
      public static create(
        properties?: sprout.phonicscourse.ISpeakOut0,
      ): sprout.phonicscourse.SpeakOut0

      /**
       * Encodes the specified SpeakOut0 message. Does not implicitly {@link sprout.phonicscourse.SpeakOut0.verify|verify} messages.
       * @param message SpeakOut0 message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encode(
        message: sprout.phonicscourse.ISpeakOut0,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Encodes the specified SpeakOut0 message, length delimited. Does not implicitly {@link sprout.phonicscourse.SpeakOut0.verify|verify} messages.
       * @param message SpeakOut0 message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encodeDelimited(
        message: sprout.phonicscourse.ISpeakOut0,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Decodes a SpeakOut0 message from the specified reader or buffer.
       * @param reader Reader or buffer to decode from
       * @param [length] Message length if known beforehand
       * @returns SpeakOut0
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decode(
        reader: $protobuf.Reader | Uint8Array,
        length?: number,
      ): sprout.phonicscourse.SpeakOut0

      /**
       * Decodes a SpeakOut0 message from the specified reader or buffer, length delimited.
       * @param reader Reader or buffer to decode from
       * @returns SpeakOut0
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decodeDelimited(
        reader: $protobuf.Reader | Uint8Array,
      ): sprout.phonicscourse.SpeakOut0

      /**
       * Verifies a SpeakOut0 message.
       * @param message Plain object to verify
       * @returns `null` if valid, otherwise the reason why it is not
       */
      public static verify(message: { [k: string]: any }): string | null

      /**
       * Creates a SpeakOut0 message from a plain object. Also converts values to their respective internal types.
       * @param object Plain object
       * @returns SpeakOut0
       */
      public static fromObject(object: {
        [k: string]: any
      }): sprout.phonicscourse.SpeakOut0

      /**
       * Creates a plain object from a SpeakOut0 message. Also converts values to other types if specified.
       * @param message SpeakOut0
       * @param [options] Conversion options
       * @returns Plain object
       */
      public static toObject(
        message: sprout.phonicscourse.SpeakOut0,
        options?: $protobuf.IConversionOptions,
      ): { [k: string]: any }

      /**
       * Converts this SpeakOut0 to JSON.
       * @returns JSON object
       */
      public toJSON(): { [k: string]: any }
    }

    /** Properties of a PictureToText. */
    interface IPictureToText {
      /** PictureToText pictureId */
      pictureId?: string | null

      /** PictureToText choice */
      choice?: { [k: string]: darwincourse.IChoice } | null
    }

    /** Represents a PictureToText. */
    class PictureToText implements IPictureToText {
      /**
       * Constructs a new PictureToText.
       * @param [properties] Properties to set
       */
      constructor(properties?: sprout.phonicscourse.IPictureToText)

      /** PictureToText pictureId. */
      public pictureId: string

      /** PictureToText choice. */
      public choice: { [k: string]: darwincourse.IChoice }

      /**
       * Creates a new PictureToText instance using the specified properties.
       * @param [properties] Properties to set
       * @returns PictureToText instance
       */
      public static create(
        properties?: sprout.phonicscourse.IPictureToText,
      ): sprout.phonicscourse.PictureToText

      /**
       * Encodes the specified PictureToText message. Does not implicitly {@link sprout.phonicscourse.PictureToText.verify|verify} messages.
       * @param message PictureToText message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encode(
        message: sprout.phonicscourse.IPictureToText,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Encodes the specified PictureToText message, length delimited. Does not implicitly {@link sprout.phonicscourse.PictureToText.verify|verify} messages.
       * @param message PictureToText message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encodeDelimited(
        message: sprout.phonicscourse.IPictureToText,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Decodes a PictureToText message from the specified reader or buffer.
       * @param reader Reader or buffer to decode from
       * @param [length] Message length if known beforehand
       * @returns PictureToText
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decode(
        reader: $protobuf.Reader | Uint8Array,
        length?: number,
      ): sprout.phonicscourse.PictureToText

      /**
       * Decodes a PictureToText message from the specified reader or buffer, length delimited.
       * @param reader Reader or buffer to decode from
       * @returns PictureToText
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decodeDelimited(
        reader: $protobuf.Reader | Uint8Array,
      ): sprout.phonicscourse.PictureToText

      /**
       * Verifies a PictureToText message.
       * @param message Plain object to verify
       * @returns `null` if valid, otherwise the reason why it is not
       */
      public static verify(message: { [k: string]: any }): string | null

      /**
       * Creates a PictureToText message from a plain object. Also converts values to their respective internal types.
       * @param object Plain object
       * @returns PictureToText
       */
      public static fromObject(object: {
        [k: string]: any
      }): sprout.phonicscourse.PictureToText

      /**
       * Creates a plain object from a PictureToText message. Also converts values to other types if specified.
       * @param message PictureToText
       * @param [options] Conversion options
       * @returns Plain object
       */
      public static toObject(
        message: sprout.phonicscourse.PictureToText,
        options?: $protobuf.IConversionOptions,
      ): { [k: string]: any }

      /**
       * Converts this PictureToText to JSON.
       * @returns JSON object
       */
      public toJSON(): { [k: string]: any }
    }

    /** Properties of a MixChoice. */
    interface IMixChoice {
      /** MixChoice pictureId */
      pictureId?: string | null

      /** MixChoice audioId */
      audioId?: string | null

      /** MixChoice text */
      text?: string | null

      /** MixChoice checked */
      checked?: boolean | null
    }

    /** Represents a MixChoice. */
    class MixChoice implements IMixChoice {
      /**
       * Constructs a new MixChoice.
       * @param [properties] Properties to set
       */
      constructor(properties?: sprout.phonicscourse.IMixChoice)

      /** MixChoice pictureId. */
      public pictureId: string

      /** MixChoice audioId. */
      public audioId: string

      /** MixChoice text. */
      public text: string

      /** MixChoice checked. */
      public checked: boolean

      /**
       * Creates a new MixChoice instance using the specified properties.
       * @param [properties] Properties to set
       * @returns MixChoice instance
       */
      public static create(
        properties?: sprout.phonicscourse.IMixChoice,
      ): sprout.phonicscourse.MixChoice

      /**
       * Encodes the specified MixChoice message. Does not implicitly {@link sprout.phonicscourse.MixChoice.verify|verify} messages.
       * @param message MixChoice message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encode(
        message: sprout.phonicscourse.IMixChoice,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Encodes the specified MixChoice message, length delimited. Does not implicitly {@link sprout.phonicscourse.MixChoice.verify|verify} messages.
       * @param message MixChoice message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encodeDelimited(
        message: sprout.phonicscourse.IMixChoice,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Decodes a MixChoice message from the specified reader or buffer.
       * @param reader Reader or buffer to decode from
       * @param [length] Message length if known beforehand
       * @returns MixChoice
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decode(
        reader: $protobuf.Reader | Uint8Array,
        length?: number,
      ): sprout.phonicscourse.MixChoice

      /**
       * Decodes a MixChoice message from the specified reader or buffer, length delimited.
       * @param reader Reader or buffer to decode from
       * @returns MixChoice
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decodeDelimited(
        reader: $protobuf.Reader | Uint8Array,
      ): sprout.phonicscourse.MixChoice

      /**
       * Verifies a MixChoice message.
       * @param message Plain object to verify
       * @returns `null` if valid, otherwise the reason why it is not
       */
      public static verify(message: { [k: string]: any }): string | null

      /**
       * Creates a MixChoice message from a plain object. Also converts values to their respective internal types.
       * @param object Plain object
       * @returns MixChoice
       */
      public static fromObject(object: {
        [k: string]: any
      }): sprout.phonicscourse.MixChoice

      /**
       * Creates a plain object from a MixChoice message. Also converts values to other types if specified.
       * @param message MixChoice
       * @param [options] Conversion options
       * @returns Plain object
       */
      public static toObject(
        message: sprout.phonicscourse.MixChoice,
        options?: $protobuf.IConversionOptions,
      ): { [k: string]: any }

      /**
       * Converts this MixChoice to JSON.
       * @returns JSON object
       */
      public toJSON(): { [k: string]: any }
    }

    /** Properties of a Scene. */
    interface IScene {
      /** Scene pictureId */
      pictureId?: string | null

      /** Scene coordinate */
      coordinate?: sprout.phonicscourse.Scene.ICoordinate[] | null
    }

    /** Represents a Scene. */
    class Scene implements IScene {
      /**
       * Constructs a new Scene.
       * @param [properties] Properties to set
       */
      constructor(properties?: sprout.phonicscourse.IScene)

      /** Scene pictureId. */
      public pictureId: string

      /** Scene coordinate. */
      public coordinate: sprout.phonicscourse.Scene.ICoordinate[]

      /**
       * Creates a new Scene instance using the specified properties.
       * @param [properties] Properties to set
       * @returns Scene instance
       */
      public static create(
        properties?: sprout.phonicscourse.IScene,
      ): sprout.phonicscourse.Scene

      /**
       * Encodes the specified Scene message. Does not implicitly {@link sprout.phonicscourse.Scene.verify|verify} messages.
       * @param message Scene message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encode(
        message: sprout.phonicscourse.IScene,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Encodes the specified Scene message, length delimited. Does not implicitly {@link sprout.phonicscourse.Scene.verify|verify} messages.
       * @param message Scene message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encodeDelimited(
        message: sprout.phonicscourse.IScene,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Decodes a Scene message from the specified reader or buffer.
       * @param reader Reader or buffer to decode from
       * @param [length] Message length if known beforehand
       * @returns Scene
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decode(
        reader: $protobuf.Reader | Uint8Array,
        length?: number,
      ): sprout.phonicscourse.Scene

      /**
       * Decodes a Scene message from the specified reader or buffer, length delimited.
       * @param reader Reader or buffer to decode from
       * @returns Scene
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decodeDelimited(
        reader: $protobuf.Reader | Uint8Array,
      ): sprout.phonicscourse.Scene

      /**
       * Verifies a Scene message.
       * @param message Plain object to verify
       * @returns `null` if valid, otherwise the reason why it is not
       */
      public static verify(message: { [k: string]: any }): string | null

      /**
       * Creates a Scene message from a plain object. Also converts values to their respective internal types.
       * @param object Plain object
       * @returns Scene
       */
      public static fromObject(object: {
        [k: string]: any
      }): sprout.phonicscourse.Scene

      /**
       * Creates a plain object from a Scene message. Also converts values to other types if specified.
       * @param message Scene
       * @param [options] Conversion options
       * @returns Plain object
       */
      public static toObject(
        message: sprout.phonicscourse.Scene,
        options?: $protobuf.IConversionOptions,
      ): { [k: string]: any }

      /**
       * Converts this Scene to JSON.
       * @returns JSON object
       */
      public toJSON(): { [k: string]: any }
    }

    namespace Scene {
      /** Properties of a Coordinate. */
      interface ICoordinate {
        /** Coordinate x */
        x?: number | null

        /** Coordinate y */
        y?: number | null

        /** Coordinate w */
        w?: number | null

        /** Coordinate h */
        h?: number | null

        /** Coordinate pictureId */
        pictureId?: string | null
      }

      /** Represents a Coordinate. */
      class Coordinate implements ICoordinate {
        /**
         * Constructs a new Coordinate.
         * @param [properties] Properties to set
         */
        constructor(properties?: sprout.phonicscourse.Scene.ICoordinate)

        /** Coordinate x. */
        public x: number

        /** Coordinate y. */
        public y: number

        /** Coordinate w. */
        public w: number

        /** Coordinate h. */
        public h: number

        /** Coordinate pictureId. */
        public pictureId: string

        /**
         * Creates a new Coordinate instance using the specified properties.
         * @param [properties] Properties to set
         * @returns Coordinate instance
         */
        public static create(
          properties?: sprout.phonicscourse.Scene.ICoordinate,
        ): sprout.phonicscourse.Scene.Coordinate

        /**
         * Encodes the specified Coordinate message. Does not implicitly {@link sprout.phonicscourse.Scene.Coordinate.verify|verify} messages.
         * @param message Coordinate message or plain object to encode
         * @param [writer] Writer to encode to
         * @returns Writer
         */
        public static encode(
          message: sprout.phonicscourse.Scene.ICoordinate,
          writer?: $protobuf.Writer,
        ): $protobuf.Writer

        /**
         * Encodes the specified Coordinate message, length delimited. Does not implicitly {@link sprout.phonicscourse.Scene.Coordinate.verify|verify} messages.
         * @param message Coordinate message or plain object to encode
         * @param [writer] Writer to encode to
         * @returns Writer
         */
        public static encodeDelimited(
          message: sprout.phonicscourse.Scene.ICoordinate,
          writer?: $protobuf.Writer,
        ): $protobuf.Writer

        /**
         * Decodes a Coordinate message from the specified reader or buffer.
         * @param reader Reader or buffer to decode from
         * @param [length] Message length if known beforehand
         * @returns Coordinate
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        public static decode(
          reader: $protobuf.Reader | Uint8Array,
          length?: number,
        ): sprout.phonicscourse.Scene.Coordinate

        /**
         * Decodes a Coordinate message from the specified reader or buffer, length delimited.
         * @param reader Reader or buffer to decode from
         * @returns Coordinate
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        public static decodeDelimited(
          reader: $protobuf.Reader | Uint8Array,
        ): sprout.phonicscourse.Scene.Coordinate

        /**
         * Verifies a Coordinate message.
         * @param message Plain object to verify
         * @returns `null` if valid, otherwise the reason why it is not
         */
        public static verify(message: { [k: string]: any }): string | null

        /**
         * Creates a Coordinate message from a plain object. Also converts values to their respective internal types.
         * @param object Plain object
         * @returns Coordinate
         */
        public static fromObject(object: {
          [k: string]: any
        }): sprout.phonicscourse.Scene.Coordinate

        /**
         * Creates a plain object from a Coordinate message. Also converts values to other types if specified.
         * @param message Coordinate
         * @param [options] Conversion options
         * @returns Plain object
         */
        public static toObject(
          message: sprout.phonicscourse.Scene.Coordinate,
          options?: $protobuf.IConversionOptions,
        ): { [k: string]: any }

        /**
         * Converts this Coordinate to JSON.
         * @returns JSON object
         */
        public toJSON(): { [k: string]: any }
      }
    }

    /** Properties of an AudioToPictureMQSA. */
    interface IAudioToPictureMQSA {
      /** AudioToPictureMQSA mixChoice */
      mixChoice?: sprout.phonicscourse.IMixChoice[] | null

      /** AudioToPictureMQSA scene */
      scene?: sprout.phonicscourse.IScene | null

      /** AudioToPictureMQSA questionPart */
      questionPart?:
        | sprout.phonicscourse.AudioToPictureMQSA.IQuestionPart[]
        | null
    }

    /** Represents an AudioToPictureMQSA. */
    class AudioToPictureMQSA implements IAudioToPictureMQSA {
      /**
       * Constructs a new AudioToPictureMQSA.
       * @param [properties] Properties to set
       */
      constructor(properties?: sprout.phonicscourse.IAudioToPictureMQSA)

      /** AudioToPictureMQSA mixChoice. */
      public mixChoice: sprout.phonicscourse.IMixChoice[]

      /** AudioToPictureMQSA scene. */
      public scene?: sprout.phonicscourse.IScene | null

      /** AudioToPictureMQSA questionPart. */
      public questionPart: sprout.phonicscourse.AudioToPictureMQSA.IQuestionPart[]

      /**
       * Creates a new AudioToPictureMQSA instance using the specified properties.
       * @param [properties] Properties to set
       * @returns AudioToPictureMQSA instance
       */
      public static create(
        properties?: sprout.phonicscourse.IAudioToPictureMQSA,
      ): sprout.phonicscourse.AudioToPictureMQSA

      /**
       * Encodes the specified AudioToPictureMQSA message. Does not implicitly {@link sprout.phonicscourse.AudioToPictureMQSA.verify|verify} messages.
       * @param message AudioToPictureMQSA message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encode(
        message: sprout.phonicscourse.IAudioToPictureMQSA,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Encodes the specified AudioToPictureMQSA message, length delimited. Does not implicitly {@link sprout.phonicscourse.AudioToPictureMQSA.verify|verify} messages.
       * @param message AudioToPictureMQSA message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encodeDelimited(
        message: sprout.phonicscourse.IAudioToPictureMQSA,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Decodes an AudioToPictureMQSA message from the specified reader or buffer.
       * @param reader Reader or buffer to decode from
       * @param [length] Message length if known beforehand
       * @returns AudioToPictureMQSA
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decode(
        reader: $protobuf.Reader | Uint8Array,
        length?: number,
      ): sprout.phonicscourse.AudioToPictureMQSA

      /**
       * Decodes an AudioToPictureMQSA message from the specified reader or buffer, length delimited.
       * @param reader Reader or buffer to decode from
       * @returns AudioToPictureMQSA
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decodeDelimited(
        reader: $protobuf.Reader | Uint8Array,
      ): sprout.phonicscourse.AudioToPictureMQSA

      /**
       * Verifies an AudioToPictureMQSA message.
       * @param message Plain object to verify
       * @returns `null` if valid, otherwise the reason why it is not
       */
      public static verify(message: { [k: string]: any }): string | null

      /**
       * Creates an AudioToPictureMQSA message from a plain object. Also converts values to their respective internal types.
       * @param object Plain object
       * @returns AudioToPictureMQSA
       */
      public static fromObject(object: {
        [k: string]: any
      }): sprout.phonicscourse.AudioToPictureMQSA

      /**
       * Creates a plain object from an AudioToPictureMQSA message. Also converts values to other types if specified.
       * @param message AudioToPictureMQSA
       * @param [options] Conversion options
       * @returns Plain object
       */
      public static toObject(
        message: sprout.phonicscourse.AudioToPictureMQSA,
        options?: $protobuf.IConversionOptions,
      ): { [k: string]: any }

      /**
       * Converts this AudioToPictureMQSA to JSON.
       * @returns JSON object
       */
      public toJSON(): { [k: string]: any }
    }

    namespace AudioToPictureMQSA {
      /** Properties of a QuestionPart. */
      interface IQuestionPart {
        /** QuestionPart pictureId */
        pictureId?: string | null

        /** QuestionPart audioId */
        audioId?: string | null
      }

      /** Represents a QuestionPart. */
      class QuestionPart implements IQuestionPart {
        /**
         * Constructs a new QuestionPart.
         * @param [properties] Properties to set
         */
        constructor(
          properties?: sprout.phonicscourse.AudioToPictureMQSA.IQuestionPart,
        )

        /** QuestionPart pictureId. */
        public pictureId: string

        /** QuestionPart audioId. */
        public audioId: string

        /**
         * Creates a new QuestionPart instance using the specified properties.
         * @param [properties] Properties to set
         * @returns QuestionPart instance
         */
        public static create(
          properties?: sprout.phonicscourse.AudioToPictureMQSA.IQuestionPart,
        ): sprout.phonicscourse.AudioToPictureMQSA.QuestionPart

        /**
         * Encodes the specified QuestionPart message. Does not implicitly {@link sprout.phonicscourse.AudioToPictureMQSA.QuestionPart.verify|verify} messages.
         * @param message QuestionPart message or plain object to encode
         * @param [writer] Writer to encode to
         * @returns Writer
         */
        public static encode(
          message: sprout.phonicscourse.AudioToPictureMQSA.IQuestionPart,
          writer?: $protobuf.Writer,
        ): $protobuf.Writer

        /**
         * Encodes the specified QuestionPart message, length delimited. Does not implicitly {@link sprout.phonicscourse.AudioToPictureMQSA.QuestionPart.verify|verify} messages.
         * @param message QuestionPart message or plain object to encode
         * @param [writer] Writer to encode to
         * @returns Writer
         */
        public static encodeDelimited(
          message: sprout.phonicscourse.AudioToPictureMQSA.IQuestionPart,
          writer?: $protobuf.Writer,
        ): $protobuf.Writer

        /**
         * Decodes a QuestionPart message from the specified reader or buffer.
         * @param reader Reader or buffer to decode from
         * @param [length] Message length if known beforehand
         * @returns QuestionPart
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        public static decode(
          reader: $protobuf.Reader | Uint8Array,
          length?: number,
        ): sprout.phonicscourse.AudioToPictureMQSA.QuestionPart

        /**
         * Decodes a QuestionPart message from the specified reader or buffer, length delimited.
         * @param reader Reader or buffer to decode from
         * @returns QuestionPart
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        public static decodeDelimited(
          reader: $protobuf.Reader | Uint8Array,
        ): sprout.phonicscourse.AudioToPictureMQSA.QuestionPart

        /**
         * Verifies a QuestionPart message.
         * @param message Plain object to verify
         * @returns `null` if valid, otherwise the reason why it is not
         */
        public static verify(message: { [k: string]: any }): string | null

        /**
         * Creates a QuestionPart message from a plain object. Also converts values to their respective internal types.
         * @param object Plain object
         * @returns QuestionPart
         */
        public static fromObject(object: {
          [k: string]: any
        }): sprout.phonicscourse.AudioToPictureMQSA.QuestionPart

        /**
         * Creates a plain object from a QuestionPart message. Also converts values to other types if specified.
         * @param message QuestionPart
         * @param [options] Conversion options
         * @returns Plain object
         */
        public static toObject(
          message: sprout.phonicscourse.AudioToPictureMQSA.QuestionPart,
          options?: $protobuf.IConversionOptions,
        ): { [k: string]: any }

        /**
         * Converts this QuestionPart to JSON.
         * @returns JSON object
         */
        public toJSON(): { [k: string]: any }
      }
    }

    /** Properties of an AudioToPictureSQMA. */
    interface IAudioToPictureSQMA {
      /** AudioToPictureSQMA audioId */
      audioId?: string | null

      /** AudioToPictureSQMA mixChoice */
      mixChoice?: sprout.phonicscourse.IMixChoice[] | null

      /** AudioToPictureSQMA scene */
      scene?: sprout.phonicscourse.IScene | null
    }

    /** Represents an AudioToPictureSQMA. */
    class AudioToPictureSQMA implements IAudioToPictureSQMA {
      /**
       * Constructs a new AudioToPictureSQMA.
       * @param [properties] Properties to set
       */
      constructor(properties?: sprout.phonicscourse.IAudioToPictureSQMA)

      /** AudioToPictureSQMA audioId. */
      public audioId: string

      /** AudioToPictureSQMA mixChoice. */
      public mixChoice: sprout.phonicscourse.IMixChoice[]

      /** AudioToPictureSQMA scene. */
      public scene?: sprout.phonicscourse.IScene | null

      /**
       * Creates a new AudioToPictureSQMA instance using the specified properties.
       * @param [properties] Properties to set
       * @returns AudioToPictureSQMA instance
       */
      public static create(
        properties?: sprout.phonicscourse.IAudioToPictureSQMA,
      ): sprout.phonicscourse.AudioToPictureSQMA

      /**
       * Encodes the specified AudioToPictureSQMA message. Does not implicitly {@link sprout.phonicscourse.AudioToPictureSQMA.verify|verify} messages.
       * @param message AudioToPictureSQMA message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encode(
        message: sprout.phonicscourse.IAudioToPictureSQMA,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Encodes the specified AudioToPictureSQMA message, length delimited. Does not implicitly {@link sprout.phonicscourse.AudioToPictureSQMA.verify|verify} messages.
       * @param message AudioToPictureSQMA message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encodeDelimited(
        message: sprout.phonicscourse.IAudioToPictureSQMA,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Decodes an AudioToPictureSQMA message from the specified reader or buffer.
       * @param reader Reader or buffer to decode from
       * @param [length] Message length if known beforehand
       * @returns AudioToPictureSQMA
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decode(
        reader: $protobuf.Reader | Uint8Array,
        length?: number,
      ): sprout.phonicscourse.AudioToPictureSQMA

      /**
       * Decodes an AudioToPictureSQMA message from the specified reader or buffer, length delimited.
       * @param reader Reader or buffer to decode from
       * @returns AudioToPictureSQMA
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decodeDelimited(
        reader: $protobuf.Reader | Uint8Array,
      ): sprout.phonicscourse.AudioToPictureSQMA

      /**
       * Verifies an AudioToPictureSQMA message.
       * @param message Plain object to verify
       * @returns `null` if valid, otherwise the reason why it is not
       */
      public static verify(message: { [k: string]: any }): string | null

      /**
       * Creates an AudioToPictureSQMA message from a plain object. Also converts values to their respective internal types.
       * @param object Plain object
       * @returns AudioToPictureSQMA
       */
      public static fromObject(object: {
        [k: string]: any
      }): sprout.phonicscourse.AudioToPictureSQMA

      /**
       * Creates a plain object from an AudioToPictureSQMA message. Also converts values to other types if specified.
       * @param message AudioToPictureSQMA
       * @param [options] Conversion options
       * @returns Plain object
       */
      public static toObject(
        message: sprout.phonicscourse.AudioToPictureSQMA,
        options?: $protobuf.IConversionOptions,
      ): { [k: string]: any }

      /**
       * Converts this AudioToPictureSQMA to JSON.
       * @returns JSON object
       */
      public toJSON(): { [k: string]: any }
    }

    /** Properties of a WordFormation. */
    interface IWordFormation {
      /** WordFormation stem */
      stem?: sprout.phonicscourse.WordFormation.IStem[] | null

      /** WordFormation text */
      text?: string[] | null

      /** WordFormation audioId */
      audioId?: string | null

      /** WordFormation pictureId */
      pictureId?: string | null
    }

    /** Represents a WordFormation. */
    class WordFormation implements IWordFormation {
      /**
       * Constructs a new WordFormation.
       * @param [properties] Properties to set
       */
      constructor(properties?: sprout.phonicscourse.IWordFormation)

      /** WordFormation stem. */
      public stem: sprout.phonicscourse.WordFormation.IStem[]

      /** WordFormation text. */
      public text: string[]

      /** WordFormation audioId. */
      public audioId: string

      /** WordFormation pictureId. */
      public pictureId: string

      /**
       * Creates a new WordFormation instance using the specified properties.
       * @param [properties] Properties to set
       * @returns WordFormation instance
       */
      public static create(
        properties?: sprout.phonicscourse.IWordFormation,
      ): sprout.phonicscourse.WordFormation

      /**
       * Encodes the specified WordFormation message. Does not implicitly {@link sprout.phonicscourse.WordFormation.verify|verify} messages.
       * @param message WordFormation message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encode(
        message: sprout.phonicscourse.IWordFormation,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Encodes the specified WordFormation message, length delimited. Does not implicitly {@link sprout.phonicscourse.WordFormation.verify|verify} messages.
       * @param message WordFormation message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encodeDelimited(
        message: sprout.phonicscourse.IWordFormation,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Decodes a WordFormation message from the specified reader or buffer.
       * @param reader Reader or buffer to decode from
       * @param [length] Message length if known beforehand
       * @returns WordFormation
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decode(
        reader: $protobuf.Reader | Uint8Array,
        length?: number,
      ): sprout.phonicscourse.WordFormation

      /**
       * Decodes a WordFormation message from the specified reader or buffer, length delimited.
       * @param reader Reader or buffer to decode from
       * @returns WordFormation
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decodeDelimited(
        reader: $protobuf.Reader | Uint8Array,
      ): sprout.phonicscourse.WordFormation

      /**
       * Verifies a WordFormation message.
       * @param message Plain object to verify
       * @returns `null` if valid, otherwise the reason why it is not
       */
      public static verify(message: { [k: string]: any }): string | null

      /**
       * Creates a WordFormation message from a plain object. Also converts values to their respective internal types.
       * @param object Plain object
       * @returns WordFormation
       */
      public static fromObject(object: {
        [k: string]: any
      }): sprout.phonicscourse.WordFormation

      /**
       * Creates a plain object from a WordFormation message. Also converts values to other types if specified.
       * @param message WordFormation
       * @param [options] Conversion options
       * @returns Plain object
       */
      public static toObject(
        message: sprout.phonicscourse.WordFormation,
        options?: $protobuf.IConversionOptions,
      ): { [k: string]: any }

      /**
       * Converts this WordFormation to JSON.
       * @returns JSON object
       */
      public toJSON(): { [k: string]: any }
    }

    namespace WordFormation {
      /** Properties of a Stem. */
      interface IStem {
        /** Stem text */
        text?: string | null

        /** Stem checked */
        checked?: boolean | null
      }

      /** Represents a Stem. */
      class Stem implements IStem {
        /**
         * Constructs a new Stem.
         * @param [properties] Properties to set
         */
        constructor(properties?: sprout.phonicscourse.WordFormation.IStem)

        /** Stem text. */
        public text: string

        /** Stem checked. */
        public checked: boolean

        /**
         * Creates a new Stem instance using the specified properties.
         * @param [properties] Properties to set
         * @returns Stem instance
         */
        public static create(
          properties?: sprout.phonicscourse.WordFormation.IStem,
        ): sprout.phonicscourse.WordFormation.Stem

        /**
         * Encodes the specified Stem message. Does not implicitly {@link sprout.phonicscourse.WordFormation.Stem.verify|verify} messages.
         * @param message Stem message or plain object to encode
         * @param [writer] Writer to encode to
         * @returns Writer
         */
        public static encode(
          message: sprout.phonicscourse.WordFormation.IStem,
          writer?: $protobuf.Writer,
        ): $protobuf.Writer

        /**
         * Encodes the specified Stem message, length delimited. Does not implicitly {@link sprout.phonicscourse.WordFormation.Stem.verify|verify} messages.
         * @param message Stem message or plain object to encode
         * @param [writer] Writer to encode to
         * @returns Writer
         */
        public static encodeDelimited(
          message: sprout.phonicscourse.WordFormation.IStem,
          writer?: $protobuf.Writer,
        ): $protobuf.Writer

        /**
         * Decodes a Stem message from the specified reader or buffer.
         * @param reader Reader or buffer to decode from
         * @param [length] Message length if known beforehand
         * @returns Stem
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        public static decode(
          reader: $protobuf.Reader | Uint8Array,
          length?: number,
        ): sprout.phonicscourse.WordFormation.Stem

        /**
         * Decodes a Stem message from the specified reader or buffer, length delimited.
         * @param reader Reader or buffer to decode from
         * @returns Stem
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        public static decodeDelimited(
          reader: $protobuf.Reader | Uint8Array,
        ): sprout.phonicscourse.WordFormation.Stem

        /**
         * Verifies a Stem message.
         * @param message Plain object to verify
         * @returns `null` if valid, otherwise the reason why it is not
         */
        public static verify(message: { [k: string]: any }): string | null

        /**
         * Creates a Stem message from a plain object. Also converts values to their respective internal types.
         * @param object Plain object
         * @returns Stem
         */
        public static fromObject(object: {
          [k: string]: any
        }): sprout.phonicscourse.WordFormation.Stem

        /**
         * Creates a plain object from a Stem message. Also converts values to other types if specified.
         * @param message Stem
         * @param [options] Conversion options
         * @returns Plain object
         */
        public static toObject(
          message: sprout.phonicscourse.WordFormation.Stem,
          options?: $protobuf.IConversionOptions,
        ): { [k: string]: any }

        /**
         * Converts this Stem to JSON.
         * @returns JSON object
         */
        public toJSON(): { [k: string]: any }
      }
    }

    /** Properties of a WordFormation2. */
    interface IWordFormation2 {
      /** WordFormation2 wordFormation */
      wordFormation?: sprout.phonicscourse.IWordFormation | null
    }

    /** Represents a WordFormation2. */
    class WordFormation2 implements IWordFormation2 {
      /**
       * Constructs a new WordFormation2.
       * @param [properties] Properties to set
       */
      constructor(properties?: sprout.phonicscourse.IWordFormation2)

      /** WordFormation2 wordFormation. */
      public wordFormation?: sprout.phonicscourse.IWordFormation | null

      /**
       * Creates a new WordFormation2 instance using the specified properties.
       * @param [properties] Properties to set
       * @returns WordFormation2 instance
       */
      public static create(
        properties?: sprout.phonicscourse.IWordFormation2,
      ): sprout.phonicscourse.WordFormation2

      /**
       * Encodes the specified WordFormation2 message. Does not implicitly {@link sprout.phonicscourse.WordFormation2.verify|verify} messages.
       * @param message WordFormation2 message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encode(
        message: sprout.phonicscourse.IWordFormation2,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Encodes the specified WordFormation2 message, length delimited. Does not implicitly {@link sprout.phonicscourse.WordFormation2.verify|verify} messages.
       * @param message WordFormation2 message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encodeDelimited(
        message: sprout.phonicscourse.IWordFormation2,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Decodes a WordFormation2 message from the specified reader or buffer.
       * @param reader Reader or buffer to decode from
       * @param [length] Message length if known beforehand
       * @returns WordFormation2
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decode(
        reader: $protobuf.Reader | Uint8Array,
        length?: number,
      ): sprout.phonicscourse.WordFormation2

      /**
       * Decodes a WordFormation2 message from the specified reader or buffer, length delimited.
       * @param reader Reader or buffer to decode from
       * @returns WordFormation2
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decodeDelimited(
        reader: $protobuf.Reader | Uint8Array,
      ): sprout.phonicscourse.WordFormation2

      /**
       * Verifies a WordFormation2 message.
       * @param message Plain object to verify
       * @returns `null` if valid, otherwise the reason why it is not
       */
      public static verify(message: { [k: string]: any }): string | null

      /**
       * Creates a WordFormation2 message from a plain object. Also converts values to their respective internal types.
       * @param object Plain object
       * @returns WordFormation2
       */
      public static fromObject(object: {
        [k: string]: any
      }): sprout.phonicscourse.WordFormation2

      /**
       * Creates a plain object from a WordFormation2 message. Also converts values to other types if specified.
       * @param message WordFormation2
       * @param [options] Conversion options
       * @returns Plain object
       */
      public static toObject(
        message: sprout.phonicscourse.WordFormation2,
        options?: $protobuf.IConversionOptions,
      ): { [k: string]: any }

      /**
       * Converts this WordFormation2 to JSON.
       * @returns JSON object
       */
      public toJSON(): { [k: string]: any }
    }

    /** Properties of a TapTap. */
    interface ITapTap {
      /** TapTap audioId */
      audioId?: string | null

      /** TapTap mixChoice */
      mixChoice?: sprout.phonicscourse.IMixChoice[] | null
    }

    /** Represents a TapTap. */
    class TapTap implements ITapTap {
      /**
       * Constructs a new TapTap.
       * @param [properties] Properties to set
       */
      constructor(properties?: sprout.phonicscourse.ITapTap)

      /** TapTap audioId. */
      public audioId: string

      /** TapTap mixChoice. */
      public mixChoice: sprout.phonicscourse.IMixChoice[]

      /**
       * Creates a new TapTap instance using the specified properties.
       * @param [properties] Properties to set
       * @returns TapTap instance
       */
      public static create(
        properties?: sprout.phonicscourse.ITapTap,
      ): sprout.phonicscourse.TapTap

      /**
       * Encodes the specified TapTap message. Does not implicitly {@link sprout.phonicscourse.TapTap.verify|verify} messages.
       * @param message TapTap message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encode(
        message: sprout.phonicscourse.ITapTap,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Encodes the specified TapTap message, length delimited. Does not implicitly {@link sprout.phonicscourse.TapTap.verify|verify} messages.
       * @param message TapTap message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encodeDelimited(
        message: sprout.phonicscourse.ITapTap,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Decodes a TapTap message from the specified reader or buffer.
       * @param reader Reader or buffer to decode from
       * @param [length] Message length if known beforehand
       * @returns TapTap
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decode(
        reader: $protobuf.Reader | Uint8Array,
        length?: number,
      ): sprout.phonicscourse.TapTap

      /**
       * Decodes a TapTap message from the specified reader or buffer, length delimited.
       * @param reader Reader or buffer to decode from
       * @returns TapTap
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decodeDelimited(
        reader: $protobuf.Reader | Uint8Array,
      ): sprout.phonicscourse.TapTap

      /**
       * Verifies a TapTap message.
       * @param message Plain object to verify
       * @returns `null` if valid, otherwise the reason why it is not
       */
      public static verify(message: { [k: string]: any }): string | null

      /**
       * Creates a TapTap message from a plain object. Also converts values to their respective internal types.
       * @param object Plain object
       * @returns TapTap
       */
      public static fromObject(object: {
        [k: string]: any
      }): sprout.phonicscourse.TapTap

      /**
       * Creates a plain object from a TapTap message. Also converts values to other types if specified.
       * @param message TapTap
       * @param [options] Conversion options
       * @returns Plain object
       */
      public static toObject(
        message: sprout.phonicscourse.TapTap,
        options?: $protobuf.IConversionOptions,
      ): { [k: string]: any }

      /**
       * Converts this TapTap to JSON.
       * @returns JSON object
       */
      public toJSON(): { [k: string]: any }
    }

    /** Properties of an AudioTextChoice. */
    interface IAudioTextChoice {
      /** AudioTextChoice audioId */
      audioId?: string | null

      /** AudioTextChoice text */
      text?: string | null

      /** AudioTextChoice checked */
      checked?: boolean | null
    }

    /** Represents an AudioTextChoice. */
    class AudioTextChoice implements IAudioTextChoice {
      /**
       * Constructs a new AudioTextChoice.
       * @param [properties] Properties to set
       */
      constructor(properties?: sprout.phonicscourse.IAudioTextChoice)

      /** AudioTextChoice audioId. */
      public audioId: string

      /** AudioTextChoice text. */
      public text: string

      /** AudioTextChoice checked. */
      public checked: boolean

      /**
       * Creates a new AudioTextChoice instance using the specified properties.
       * @param [properties] Properties to set
       * @returns AudioTextChoice instance
       */
      public static create(
        properties?: sprout.phonicscourse.IAudioTextChoice,
      ): sprout.phonicscourse.AudioTextChoice

      /**
       * Encodes the specified AudioTextChoice message. Does not implicitly {@link sprout.phonicscourse.AudioTextChoice.verify|verify} messages.
       * @param message AudioTextChoice message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encode(
        message: sprout.phonicscourse.IAudioTextChoice,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Encodes the specified AudioTextChoice message, length delimited. Does not implicitly {@link sprout.phonicscourse.AudioTextChoice.verify|verify} messages.
       * @param message AudioTextChoice message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encodeDelimited(
        message: sprout.phonicscourse.IAudioTextChoice,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Decodes an AudioTextChoice message from the specified reader or buffer.
       * @param reader Reader or buffer to decode from
       * @param [length] Message length if known beforehand
       * @returns AudioTextChoice
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decode(
        reader: $protobuf.Reader | Uint8Array,
        length?: number,
      ): sprout.phonicscourse.AudioTextChoice

      /**
       * Decodes an AudioTextChoice message from the specified reader or buffer, length delimited.
       * @param reader Reader or buffer to decode from
       * @returns AudioTextChoice
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decodeDelimited(
        reader: $protobuf.Reader | Uint8Array,
      ): sprout.phonicscourse.AudioTextChoice

      /**
       * Verifies an AudioTextChoice message.
       * @param message Plain object to verify
       * @returns `null` if valid, otherwise the reason why it is not
       */
      public static verify(message: { [k: string]: any }): string | null

      /**
       * Creates an AudioTextChoice message from a plain object. Also converts values to their respective internal types.
       * @param object Plain object
       * @returns AudioTextChoice
       */
      public static fromObject(object: {
        [k: string]: any
      }): sprout.phonicscourse.AudioTextChoice

      /**
       * Creates a plain object from an AudioTextChoice message. Also converts values to other types if specified.
       * @param message AudioTextChoice
       * @param [options] Conversion options
       * @returns Plain object
       */
      public static toObject(
        message: sprout.phonicscourse.AudioTextChoice,
        options?: $protobuf.IConversionOptions,
      ): { [k: string]: any }

      /**
       * Converts this AudioTextChoice to JSON.
       * @returns JSON object
       */
      public toJSON(): { [k: string]: any }
    }

    /** Properties of a CrossingRiverMQ. */
    interface ICrossingRiverMQ {
      /** CrossingRiverMQ questionPart */
      questionPart?: sprout.phonicscourse.CrossingRiverMQ.IQuestionPart[] | null

      /** CrossingRiverMQ sceneCr */
      sceneCr?: sprout.phonicscourse.ISceneCR | null
    }

    /** Represents a CrossingRiverMQ. */
    class CrossingRiverMQ implements ICrossingRiverMQ {
      /**
       * Constructs a new CrossingRiverMQ.
       * @param [properties] Properties to set
       */
      constructor(properties?: sprout.phonicscourse.ICrossingRiverMQ)

      /** CrossingRiverMQ questionPart. */
      public questionPart: sprout.phonicscourse.CrossingRiverMQ.IQuestionPart[]

      /** CrossingRiverMQ sceneCr. */
      public sceneCr?: sprout.phonicscourse.ISceneCR | null

      /**
       * Creates a new CrossingRiverMQ instance using the specified properties.
       * @param [properties] Properties to set
       * @returns CrossingRiverMQ instance
       */
      public static create(
        properties?: sprout.phonicscourse.ICrossingRiverMQ,
      ): sprout.phonicscourse.CrossingRiverMQ

      /**
       * Encodes the specified CrossingRiverMQ message. Does not implicitly {@link sprout.phonicscourse.CrossingRiverMQ.verify|verify} messages.
       * @param message CrossingRiverMQ message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encode(
        message: sprout.phonicscourse.ICrossingRiverMQ,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Encodes the specified CrossingRiverMQ message, length delimited. Does not implicitly {@link sprout.phonicscourse.CrossingRiverMQ.verify|verify} messages.
       * @param message CrossingRiverMQ message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encodeDelimited(
        message: sprout.phonicscourse.ICrossingRiverMQ,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Decodes a CrossingRiverMQ message from the specified reader or buffer.
       * @param reader Reader or buffer to decode from
       * @param [length] Message length if known beforehand
       * @returns CrossingRiverMQ
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decode(
        reader: $protobuf.Reader | Uint8Array,
        length?: number,
      ): sprout.phonicscourse.CrossingRiverMQ

      /**
       * Decodes a CrossingRiverMQ message from the specified reader or buffer, length delimited.
       * @param reader Reader or buffer to decode from
       * @returns CrossingRiverMQ
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decodeDelimited(
        reader: $protobuf.Reader | Uint8Array,
      ): sprout.phonicscourse.CrossingRiverMQ

      /**
       * Verifies a CrossingRiverMQ message.
       * @param message Plain object to verify
       * @returns `null` if valid, otherwise the reason why it is not
       */
      public static verify(message: { [k: string]: any }): string | null

      /**
       * Creates a CrossingRiverMQ message from a plain object. Also converts values to their respective internal types.
       * @param object Plain object
       * @returns CrossingRiverMQ
       */
      public static fromObject(object: {
        [k: string]: any
      }): sprout.phonicscourse.CrossingRiverMQ

      /**
       * Creates a plain object from a CrossingRiverMQ message. Also converts values to other types if specified.
       * @param message CrossingRiverMQ
       * @param [options] Conversion options
       * @returns Plain object
       */
      public static toObject(
        message: sprout.phonicscourse.CrossingRiverMQ,
        options?: $protobuf.IConversionOptions,
      ): { [k: string]: any }

      /**
       * Converts this CrossingRiverMQ to JSON.
       * @returns JSON object
       */
      public toJSON(): { [k: string]: any }
    }

    namespace CrossingRiverMQ {
      /** Properties of a QuestionPart. */
      interface IQuestionPart {
        /** QuestionPart audioId */
        audioId?: string | null

        /** QuestionPart text */
        text?: string | null

        /** QuestionPart audioTextChoice */
        audioTextChoice?: sprout.phonicscourse.IAudioTextChoice[] | null
      }

      /** Represents a QuestionPart. */
      class QuestionPart implements IQuestionPart {
        /**
         * Constructs a new QuestionPart.
         * @param [properties] Properties to set
         */
        constructor(
          properties?: sprout.phonicscourse.CrossingRiverMQ.IQuestionPart,
        )

        /** QuestionPart audioId. */
        public audioId: string

        /** QuestionPart text. */
        public text: string

        /** QuestionPart audioTextChoice. */
        public audioTextChoice: sprout.phonicscourse.IAudioTextChoice[]

        /**
         * Creates a new QuestionPart instance using the specified properties.
         * @param [properties] Properties to set
         * @returns QuestionPart instance
         */
        public static create(
          properties?: sprout.phonicscourse.CrossingRiverMQ.IQuestionPart,
        ): sprout.phonicscourse.CrossingRiverMQ.QuestionPart

        /**
         * Encodes the specified QuestionPart message. Does not implicitly {@link sprout.phonicscourse.CrossingRiverMQ.QuestionPart.verify|verify} messages.
         * @param message QuestionPart message or plain object to encode
         * @param [writer] Writer to encode to
         * @returns Writer
         */
        public static encode(
          message: sprout.phonicscourse.CrossingRiverMQ.IQuestionPart,
          writer?: $protobuf.Writer,
        ): $protobuf.Writer

        /**
         * Encodes the specified QuestionPart message, length delimited. Does not implicitly {@link sprout.phonicscourse.CrossingRiverMQ.QuestionPart.verify|verify} messages.
         * @param message QuestionPart message or plain object to encode
         * @param [writer] Writer to encode to
         * @returns Writer
         */
        public static encodeDelimited(
          message: sprout.phonicscourse.CrossingRiverMQ.IQuestionPart,
          writer?: $protobuf.Writer,
        ): $protobuf.Writer

        /**
         * Decodes a QuestionPart message from the specified reader or buffer.
         * @param reader Reader or buffer to decode from
         * @param [length] Message length if known beforehand
         * @returns QuestionPart
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        public static decode(
          reader: $protobuf.Reader | Uint8Array,
          length?: number,
        ): sprout.phonicscourse.CrossingRiverMQ.QuestionPart

        /**
         * Decodes a QuestionPart message from the specified reader or buffer, length delimited.
         * @param reader Reader or buffer to decode from
         * @returns QuestionPart
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        public static decodeDelimited(
          reader: $protobuf.Reader | Uint8Array,
        ): sprout.phonicscourse.CrossingRiverMQ.QuestionPart

        /**
         * Verifies a QuestionPart message.
         * @param message Plain object to verify
         * @returns `null` if valid, otherwise the reason why it is not
         */
        public static verify(message: { [k: string]: any }): string | null

        /**
         * Creates a QuestionPart message from a plain object. Also converts values to their respective internal types.
         * @param object Plain object
         * @returns QuestionPart
         */
        public static fromObject(object: {
          [k: string]: any
        }): sprout.phonicscourse.CrossingRiverMQ.QuestionPart

        /**
         * Creates a plain object from a QuestionPart message. Also converts values to other types if specified.
         * @param message QuestionPart
         * @param [options] Conversion options
         * @returns Plain object
         */
        public static toObject(
          message: sprout.phonicscourse.CrossingRiverMQ.QuestionPart,
          options?: $protobuf.IConversionOptions,
        ): { [k: string]: any }

        /**
         * Converts this QuestionPart to JSON.
         * @returns JSON object
         */
        public toJSON(): { [k: string]: any }
      }
    }

    /** Properties of a CrossingRiverSQ. */
    interface ICrossingRiverSQ {
      /** CrossingRiverSQ audioId */
      audioId?: string | null

      /** CrossingRiverSQ text */
      text?: string | null

      /** CrossingRiverSQ audioTextChoice */
      audioTextChoice?: sprout.phonicscourse.IAudioTextChoice[] | null

      /** CrossingRiverSQ sceneCr */
      sceneCr?: sprout.phonicscourse.ISceneCR | null
    }

    /** Represents a CrossingRiverSQ. */
    class CrossingRiverSQ implements ICrossingRiverSQ {
      /**
       * Constructs a new CrossingRiverSQ.
       * @param [properties] Properties to set
       */
      constructor(properties?: sprout.phonicscourse.ICrossingRiverSQ)

      /** CrossingRiverSQ audioId. */
      public audioId: string

      /** CrossingRiverSQ text. */
      public text: string

      /** CrossingRiverSQ audioTextChoice. */
      public audioTextChoice: sprout.phonicscourse.IAudioTextChoice[]

      /** CrossingRiverSQ sceneCr. */
      public sceneCr?: sprout.phonicscourse.ISceneCR | null

      /**
       * Creates a new CrossingRiverSQ instance using the specified properties.
       * @param [properties] Properties to set
       * @returns CrossingRiverSQ instance
       */
      public static create(
        properties?: sprout.phonicscourse.ICrossingRiverSQ,
      ): sprout.phonicscourse.CrossingRiverSQ

      /**
       * Encodes the specified CrossingRiverSQ message. Does not implicitly {@link sprout.phonicscourse.CrossingRiverSQ.verify|verify} messages.
       * @param message CrossingRiverSQ message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encode(
        message: sprout.phonicscourse.ICrossingRiverSQ,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Encodes the specified CrossingRiverSQ message, length delimited. Does not implicitly {@link sprout.phonicscourse.CrossingRiverSQ.verify|verify} messages.
       * @param message CrossingRiverSQ message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encodeDelimited(
        message: sprout.phonicscourse.ICrossingRiverSQ,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Decodes a CrossingRiverSQ message from the specified reader or buffer.
       * @param reader Reader or buffer to decode from
       * @param [length] Message length if known beforehand
       * @returns CrossingRiverSQ
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decode(
        reader: $protobuf.Reader | Uint8Array,
        length?: number,
      ): sprout.phonicscourse.CrossingRiverSQ

      /**
       * Decodes a CrossingRiverSQ message from the specified reader or buffer, length delimited.
       * @param reader Reader or buffer to decode from
       * @returns CrossingRiverSQ
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decodeDelimited(
        reader: $protobuf.Reader | Uint8Array,
      ): sprout.phonicscourse.CrossingRiverSQ

      /**
       * Verifies a CrossingRiverSQ message.
       * @param message Plain object to verify
       * @returns `null` if valid, otherwise the reason why it is not
       */
      public static verify(message: { [k: string]: any }): string | null

      /**
       * Creates a CrossingRiverSQ message from a plain object. Also converts values to their respective internal types.
       * @param object Plain object
       * @returns CrossingRiverSQ
       */
      public static fromObject(object: {
        [k: string]: any
      }): sprout.phonicscourse.CrossingRiverSQ

      /**
       * Creates a plain object from a CrossingRiverSQ message. Also converts values to other types if specified.
       * @param message CrossingRiverSQ
       * @param [options] Conversion options
       * @returns Plain object
       */
      public static toObject(
        message: sprout.phonicscourse.CrossingRiverSQ,
        options?: $protobuf.IConversionOptions,
      ): { [k: string]: any }

      /**
       * Converts this CrossingRiverSQ to JSON.
       * @returns JSON object
       */
      public toJSON(): { [k: string]: any }
    }

    /** Properties of a CrossingRiverSQ2. */
    interface ICrossingRiverSQ2 {
      /** CrossingRiverSQ2 crossingRiverSq */
      crossingRiverSq?: sprout.phonicscourse.ICrossingRiverSQ | null
    }

    /** Represents a CrossingRiverSQ2. */
    class CrossingRiverSQ2 implements ICrossingRiverSQ2 {
      /**
       * Constructs a new CrossingRiverSQ2.
       * @param [properties] Properties to set
       */
      constructor(properties?: sprout.phonicscourse.ICrossingRiverSQ2)

      /** CrossingRiverSQ2 crossingRiverSq. */
      public crossingRiverSq?: sprout.phonicscourse.ICrossingRiverSQ | null

      /**
       * Creates a new CrossingRiverSQ2 instance using the specified properties.
       * @param [properties] Properties to set
       * @returns CrossingRiverSQ2 instance
       */
      public static create(
        properties?: sprout.phonicscourse.ICrossingRiverSQ2,
      ): sprout.phonicscourse.CrossingRiverSQ2

      /**
       * Encodes the specified CrossingRiverSQ2 message. Does not implicitly {@link sprout.phonicscourse.CrossingRiverSQ2.verify|verify} messages.
       * @param message CrossingRiverSQ2 message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encode(
        message: sprout.phonicscourse.ICrossingRiverSQ2,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Encodes the specified CrossingRiverSQ2 message, length delimited. Does not implicitly {@link sprout.phonicscourse.CrossingRiverSQ2.verify|verify} messages.
       * @param message CrossingRiverSQ2 message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encodeDelimited(
        message: sprout.phonicscourse.ICrossingRiverSQ2,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Decodes a CrossingRiverSQ2 message from the specified reader or buffer.
       * @param reader Reader or buffer to decode from
       * @param [length] Message length if known beforehand
       * @returns CrossingRiverSQ2
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decode(
        reader: $protobuf.Reader | Uint8Array,
        length?: number,
      ): sprout.phonicscourse.CrossingRiverSQ2

      /**
       * Decodes a CrossingRiverSQ2 message from the specified reader or buffer, length delimited.
       * @param reader Reader or buffer to decode from
       * @returns CrossingRiverSQ2
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decodeDelimited(
        reader: $protobuf.Reader | Uint8Array,
      ): sprout.phonicscourse.CrossingRiverSQ2

      /**
       * Verifies a CrossingRiverSQ2 message.
       * @param message Plain object to verify
       * @returns `null` if valid, otherwise the reason why it is not
       */
      public static verify(message: { [k: string]: any }): string | null

      /**
       * Creates a CrossingRiverSQ2 message from a plain object. Also converts values to their respective internal types.
       * @param object Plain object
       * @returns CrossingRiverSQ2
       */
      public static fromObject(object: {
        [k: string]: any
      }): sprout.phonicscourse.CrossingRiverSQ2

      /**
       * Creates a plain object from a CrossingRiverSQ2 message. Also converts values to other types if specified.
       * @param message CrossingRiverSQ2
       * @param [options] Conversion options
       * @returns Plain object
       */
      public static toObject(
        message: sprout.phonicscourse.CrossingRiverSQ2,
        options?: $protobuf.IConversionOptions,
      ): { [k: string]: any }

      /**
       * Converts this CrossingRiverSQ2 to JSON.
       * @returns JSON object
       */
      public toJSON(): { [k: string]: any }
    }

    /** Properties of an AudioToPicture2. */
    interface IAudioToPicture2 {
      /** AudioToPicture2 multiChoicePicture_1 */
      multiChoicePicture_1?: darwincourse.IMultiChoicePicture1 | null
    }

    /** Represents an AudioToPicture2. */
    class AudioToPicture2 implements IAudioToPicture2 {
      /**
       * Constructs a new AudioToPicture2.
       * @param [properties] Properties to set
       */
      constructor(properties?: sprout.phonicscourse.IAudioToPicture2)

      /** AudioToPicture2 multiChoicePicture_1. */
      public multiChoicePicture_1?: darwincourse.IMultiChoicePicture1 | null

      /**
       * Creates a new AudioToPicture2 instance using the specified properties.
       * @param [properties] Properties to set
       * @returns AudioToPicture2 instance
       */
      public static create(
        properties?: sprout.phonicscourse.IAudioToPicture2,
      ): sprout.phonicscourse.AudioToPicture2

      /**
       * Encodes the specified AudioToPicture2 message. Does not implicitly {@link sprout.phonicscourse.AudioToPicture2.verify|verify} messages.
       * @param message AudioToPicture2 message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encode(
        message: sprout.phonicscourse.IAudioToPicture2,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Encodes the specified AudioToPicture2 message, length delimited. Does not implicitly {@link sprout.phonicscourse.AudioToPicture2.verify|verify} messages.
       * @param message AudioToPicture2 message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encodeDelimited(
        message: sprout.phonicscourse.IAudioToPicture2,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Decodes an AudioToPicture2 message from the specified reader or buffer.
       * @param reader Reader or buffer to decode from
       * @param [length] Message length if known beforehand
       * @returns AudioToPicture2
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decode(
        reader: $protobuf.Reader | Uint8Array,
        length?: number,
      ): sprout.phonicscourse.AudioToPicture2

      /**
       * Decodes an AudioToPicture2 message from the specified reader or buffer, length delimited.
       * @param reader Reader or buffer to decode from
       * @returns AudioToPicture2
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decodeDelimited(
        reader: $protobuf.Reader | Uint8Array,
      ): sprout.phonicscourse.AudioToPicture2

      /**
       * Verifies an AudioToPicture2 message.
       * @param message Plain object to verify
       * @returns `null` if valid, otherwise the reason why it is not
       */
      public static verify(message: { [k: string]: any }): string | null

      /**
       * Creates an AudioToPicture2 message from a plain object. Also converts values to their respective internal types.
       * @param object Plain object
       * @returns AudioToPicture2
       */
      public static fromObject(object: {
        [k: string]: any
      }): sprout.phonicscourse.AudioToPicture2

      /**
       * Creates a plain object from an AudioToPicture2 message. Also converts values to other types if specified.
       * @param message AudioToPicture2
       * @param [options] Conversion options
       * @returns Plain object
       */
      public static toObject(
        message: sprout.phonicscourse.AudioToPicture2,
        options?: $protobuf.IConversionOptions,
      ): { [k: string]: any }

      /**
       * Converts this AudioToPicture2 to JSON.
       * @returns JSON object
       */
      public toJSON(): { [k: string]: any }
    }

    /** Properties of a SceneCR. */
    interface ISceneCR {
      /** SceneCR pictureId */
      pictureId?: string | null

      /** SceneCR choicePictureId */
      choicePictureId?: string[] | null

      /** SceneCR textFontColor */
      textFontColor?: string | null
    }

    /** Represents a SceneCR. */
    class SceneCR implements ISceneCR {
      /**
       * Constructs a new SceneCR.
       * @param [properties] Properties to set
       */
      constructor(properties?: sprout.phonicscourse.ISceneCR)

      /** SceneCR pictureId. */
      public pictureId: string

      /** SceneCR choicePictureId. */
      public choicePictureId: string[]

      /** SceneCR textFontColor. */
      public textFontColor: string

      /**
       * Creates a new SceneCR instance using the specified properties.
       * @param [properties] Properties to set
       * @returns SceneCR instance
       */
      public static create(
        properties?: sprout.phonicscourse.ISceneCR,
      ): sprout.phonicscourse.SceneCR

      /**
       * Encodes the specified SceneCR message. Does not implicitly {@link sprout.phonicscourse.SceneCR.verify|verify} messages.
       * @param message SceneCR message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encode(
        message: sprout.phonicscourse.ISceneCR,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Encodes the specified SceneCR message, length delimited. Does not implicitly {@link sprout.phonicscourse.SceneCR.verify|verify} messages.
       * @param message SceneCR message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encodeDelimited(
        message: sprout.phonicscourse.ISceneCR,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Decodes a SceneCR message from the specified reader or buffer.
       * @param reader Reader or buffer to decode from
       * @param [length] Message length if known beforehand
       * @returns SceneCR
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decode(
        reader: $protobuf.Reader | Uint8Array,
        length?: number,
      ): sprout.phonicscourse.SceneCR

      /**
       * Decodes a SceneCR message from the specified reader or buffer, length delimited.
       * @param reader Reader or buffer to decode from
       * @returns SceneCR
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decodeDelimited(
        reader: $protobuf.Reader | Uint8Array,
      ): sprout.phonicscourse.SceneCR

      /**
       * Verifies a SceneCR message.
       * @param message Plain object to verify
       * @returns `null` if valid, otherwise the reason why it is not
       */
      public static verify(message: { [k: string]: any }): string | null

      /**
       * Creates a SceneCR message from a plain object. Also converts values to their respective internal types.
       * @param object Plain object
       * @returns SceneCR
       */
      public static fromObject(object: {
        [k: string]: any
      }): sprout.phonicscourse.SceneCR

      /**
       * Creates a plain object from a SceneCR message. Also converts values to other types if specified.
       * @param message SceneCR
       * @param [options] Conversion options
       * @returns Plain object
       */
      public static toObject(
        message: sprout.phonicscourse.SceneCR,
        options?: $protobuf.IConversionOptions,
      ): { [k: string]: any }

      /**
       * Converts this SceneCR to JSON.
       * @returns JSON object
       */
      public toJSON(): { [k: string]: any }
    }

    /** Properties of a SpeakSentence. */
    interface ISpeakSentence {
      /** SpeakSentence sentence */
      sentence?: sprout.phonicscourse.ISpeakOut | null

      /** SpeakSentence sentenceChunk */
      sentenceChunk?: sprout.phonicscourse.ISpeakOut[] | null
    }

    /** Represents a SpeakSentence. */
    class SpeakSentence implements ISpeakSentence {
      /**
       * Constructs a new SpeakSentence.
       * @param [properties] Properties to set
       */
      constructor(properties?: sprout.phonicscourse.ISpeakSentence)

      /** SpeakSentence sentence. */
      public sentence?: sprout.phonicscourse.ISpeakOut | null

      /** SpeakSentence sentenceChunk. */
      public sentenceChunk: sprout.phonicscourse.ISpeakOut[]

      /**
       * Creates a new SpeakSentence instance using the specified properties.
       * @param [properties] Properties to set
       * @returns SpeakSentence instance
       */
      public static create(
        properties?: sprout.phonicscourse.ISpeakSentence,
      ): sprout.phonicscourse.SpeakSentence

      /**
       * Encodes the specified SpeakSentence message. Does not implicitly {@link sprout.phonicscourse.SpeakSentence.verify|verify} messages.
       * @param message SpeakSentence message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encode(
        message: sprout.phonicscourse.ISpeakSentence,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Encodes the specified SpeakSentence message, length delimited. Does not implicitly {@link sprout.phonicscourse.SpeakSentence.verify|verify} messages.
       * @param message SpeakSentence message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encodeDelimited(
        message: sprout.phonicscourse.ISpeakSentence,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Decodes a SpeakSentence message from the specified reader or buffer.
       * @param reader Reader or buffer to decode from
       * @param [length] Message length if known beforehand
       * @returns SpeakSentence
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decode(
        reader: $protobuf.Reader | Uint8Array,
        length?: number,
      ): sprout.phonicscourse.SpeakSentence

      /**
       * Decodes a SpeakSentence message from the specified reader or buffer, length delimited.
       * @param reader Reader or buffer to decode from
       * @returns SpeakSentence
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decodeDelimited(
        reader: $protobuf.Reader | Uint8Array,
      ): sprout.phonicscourse.SpeakSentence

      /**
       * Verifies a SpeakSentence message.
       * @param message Plain object to verify
       * @returns `null` if valid, otherwise the reason why it is not
       */
      public static verify(message: { [k: string]: any }): string | null

      /**
       * Creates a SpeakSentence message from a plain object. Also converts values to their respective internal types.
       * @param object Plain object
       * @returns SpeakSentence
       */
      public static fromObject(object: {
        [k: string]: any
      }): sprout.phonicscourse.SpeakSentence

      /**
       * Creates a plain object from a SpeakSentence message. Also converts values to other types if specified.
       * @param message SpeakSentence
       * @param [options] Conversion options
       * @returns Plain object
       */
      public static toObject(
        message: sprout.phonicscourse.SpeakSentence,
        options?: $protobuf.IConversionOptions,
      ): { [k: string]: any }

      /**
       * Converts this SpeakSentence to JSON.
       * @returns JSON object
       */
      public toJSON(): { [k: string]: any }
    }

    /** Properties of an AudioMeta. */
    interface IAudioMeta {
      /** AudioMeta audioId */
      audioId?: string | null

      /** AudioMeta karaokeWord */
      karaokeWord?: core_course.PBAudio.IKaraokeWord[] | null
    }

    /** Represents an AudioMeta. */
    class AudioMeta implements IAudioMeta {
      /**
       * Constructs a new AudioMeta.
       * @param [properties] Properties to set
       */
      constructor(properties?: sprout.phonicscourse.IAudioMeta)

      /** AudioMeta audioId. */
      public audioId: string

      /** AudioMeta karaokeWord. */
      public karaokeWord: core_course.PBAudio.IKaraokeWord[]

      /**
       * Creates a new AudioMeta instance using the specified properties.
       * @param [properties] Properties to set
       * @returns AudioMeta instance
       */
      public static create(
        properties?: sprout.phonicscourse.IAudioMeta,
      ): sprout.phonicscourse.AudioMeta

      /**
       * Encodes the specified AudioMeta message. Does not implicitly {@link sprout.phonicscourse.AudioMeta.verify|verify} messages.
       * @param message AudioMeta message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encode(
        message: sprout.phonicscourse.IAudioMeta,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Encodes the specified AudioMeta message, length delimited. Does not implicitly {@link sprout.phonicscourse.AudioMeta.verify|verify} messages.
       * @param message AudioMeta message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encodeDelimited(
        message: sprout.phonicscourse.IAudioMeta,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Decodes an AudioMeta message from the specified reader or buffer.
       * @param reader Reader or buffer to decode from
       * @param [length] Message length if known beforehand
       * @returns AudioMeta
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decode(
        reader: $protobuf.Reader | Uint8Array,
        length?: number,
      ): sprout.phonicscourse.AudioMeta

      /**
       * Decodes an AudioMeta message from the specified reader or buffer, length delimited.
       * @param reader Reader or buffer to decode from
       * @returns AudioMeta
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decodeDelimited(
        reader: $protobuf.Reader | Uint8Array,
      ): sprout.phonicscourse.AudioMeta

      /**
       * Verifies an AudioMeta message.
       * @param message Plain object to verify
       * @returns `null` if valid, otherwise the reason why it is not
       */
      public static verify(message: { [k: string]: any }): string | null

      /**
       * Creates an AudioMeta message from a plain object. Also converts values to their respective internal types.
       * @param object Plain object
       * @returns AudioMeta
       */
      public static fromObject(object: {
        [k: string]: any
      }): sprout.phonicscourse.AudioMeta

      /**
       * Creates a plain object from an AudioMeta message. Also converts values to other types if specified.
       * @param message AudioMeta
       * @param [options] Conversion options
       * @returns Plain object
       */
      public static toObject(
        message: sprout.phonicscourse.AudioMeta,
        options?: $protobuf.IConversionOptions,
      ): { [k: string]: any }

      /**
       * Converts this AudioMeta to JSON.
       * @returns JSON object
       */
      public toJSON(): { [k: string]: any }
    }

    /** Properties of a SpeakWords. */
    interface ISpeakWords {
      /** SpeakWords questionPart */
      questionPart?: sprout.phonicscourse.SpeakWords.IQuestionPart[] | null
    }

    /** Represents a SpeakWords. */
    class SpeakWords implements ISpeakWords {
      /**
       * Constructs a new SpeakWords.
       * @param [properties] Properties to set
       */
      constructor(properties?: sprout.phonicscourse.ISpeakWords)

      /** SpeakWords questionPart. */
      public questionPart: sprout.phonicscourse.SpeakWords.IQuestionPart[]

      /**
       * Creates a new SpeakWords instance using the specified properties.
       * @param [properties] Properties to set
       * @returns SpeakWords instance
       */
      public static create(
        properties?: sprout.phonicscourse.ISpeakWords,
      ): sprout.phonicscourse.SpeakWords

      /**
       * Encodes the specified SpeakWords message. Does not implicitly {@link sprout.phonicscourse.SpeakWords.verify|verify} messages.
       * @param message SpeakWords message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encode(
        message: sprout.phonicscourse.ISpeakWords,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Encodes the specified SpeakWords message, length delimited. Does not implicitly {@link sprout.phonicscourse.SpeakWords.verify|verify} messages.
       * @param message SpeakWords message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encodeDelimited(
        message: sprout.phonicscourse.ISpeakWords,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Decodes a SpeakWords message from the specified reader or buffer.
       * @param reader Reader or buffer to decode from
       * @param [length] Message length if known beforehand
       * @returns SpeakWords
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decode(
        reader: $protobuf.Reader | Uint8Array,
        length?: number,
      ): sprout.phonicscourse.SpeakWords

      /**
       * Decodes a SpeakWords message from the specified reader or buffer, length delimited.
       * @param reader Reader or buffer to decode from
       * @returns SpeakWords
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decodeDelimited(
        reader: $protobuf.Reader | Uint8Array,
      ): sprout.phonicscourse.SpeakWords

      /**
       * Verifies a SpeakWords message.
       * @param message Plain object to verify
       * @returns `null` if valid, otherwise the reason why it is not
       */
      public static verify(message: { [k: string]: any }): string | null

      /**
       * Creates a SpeakWords message from a plain object. Also converts values to their respective internal types.
       * @param object Plain object
       * @returns SpeakWords
       */
      public static fromObject(object: {
        [k: string]: any
      }): sprout.phonicscourse.SpeakWords

      /**
       * Creates a plain object from a SpeakWords message. Also converts values to other types if specified.
       * @param message SpeakWords
       * @param [options] Conversion options
       * @returns Plain object
       */
      public static toObject(
        message: sprout.phonicscourse.SpeakWords,
        options?: $protobuf.IConversionOptions,
      ): { [k: string]: any }

      /**
       * Converts this SpeakWords to JSON.
       * @returns JSON object
       */
      public toJSON(): { [k: string]: any }
    }

    namespace SpeakWords {
      /** Properties of a QuestionPart. */
      interface IQuestionPart {
        /** QuestionPart pictureId */
        pictureId?: string | null

        /** QuestionPart audioId */
        audioId?: string | null

        /** QuestionPart text */
        text?: string | null
      }

      /** Represents a QuestionPart. */
      class QuestionPart implements IQuestionPart {
        /**
         * Constructs a new QuestionPart.
         * @param [properties] Properties to set
         */
        constructor(properties?: sprout.phonicscourse.SpeakWords.IQuestionPart)

        /** QuestionPart pictureId. */
        public pictureId: string

        /** QuestionPart audioId. */
        public audioId: string

        /** QuestionPart text. */
        public text: string

        /**
         * Creates a new QuestionPart instance using the specified properties.
         * @param [properties] Properties to set
         * @returns QuestionPart instance
         */
        public static create(
          properties?: sprout.phonicscourse.SpeakWords.IQuestionPart,
        ): sprout.phonicscourse.SpeakWords.QuestionPart

        /**
         * Encodes the specified QuestionPart message. Does not implicitly {@link sprout.phonicscourse.SpeakWords.QuestionPart.verify|verify} messages.
         * @param message QuestionPart message or plain object to encode
         * @param [writer] Writer to encode to
         * @returns Writer
         */
        public static encode(
          message: sprout.phonicscourse.SpeakWords.IQuestionPart,
          writer?: $protobuf.Writer,
        ): $protobuf.Writer

        /**
         * Encodes the specified QuestionPart message, length delimited. Does not implicitly {@link sprout.phonicscourse.SpeakWords.QuestionPart.verify|verify} messages.
         * @param message QuestionPart message or plain object to encode
         * @param [writer] Writer to encode to
         * @returns Writer
         */
        public static encodeDelimited(
          message: sprout.phonicscourse.SpeakWords.IQuestionPart,
          writer?: $protobuf.Writer,
        ): $protobuf.Writer

        /**
         * Decodes a QuestionPart message from the specified reader or buffer.
         * @param reader Reader or buffer to decode from
         * @param [length] Message length if known beforehand
         * @returns QuestionPart
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        public static decode(
          reader: $protobuf.Reader | Uint8Array,
          length?: number,
        ): sprout.phonicscourse.SpeakWords.QuestionPart

        /**
         * Decodes a QuestionPart message from the specified reader or buffer, length delimited.
         * @param reader Reader or buffer to decode from
         * @returns QuestionPart
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        public static decodeDelimited(
          reader: $protobuf.Reader | Uint8Array,
        ): sprout.phonicscourse.SpeakWords.QuestionPart

        /**
         * Verifies a QuestionPart message.
         * @param message Plain object to verify
         * @returns `null` if valid, otherwise the reason why it is not
         */
        public static verify(message: { [k: string]: any }): string | null

        /**
         * Creates a QuestionPart message from a plain object. Also converts values to their respective internal types.
         * @param object Plain object
         * @returns QuestionPart
         */
        public static fromObject(object: {
          [k: string]: any
        }): sprout.phonicscourse.SpeakWords.QuestionPart

        /**
         * Creates a plain object from a QuestionPart message. Also converts values to other types if specified.
         * @param message QuestionPart
         * @param [options] Conversion options
         * @returns Plain object
         */
        public static toObject(
          message: sprout.phonicscourse.SpeakWords.QuestionPart,
          options?: $protobuf.IConversionOptions,
        ): { [k: string]: any }

        /**
         * Converts this QuestionPart to JSON.
         * @returns JSON object
         */
        public toJSON(): { [k: string]: any }
      }
    }

    /** Properties of a SpeakWords1. */
    interface ISpeakWords1 {
      /** SpeakWords1 speakWords */
      speakWords?: sprout.phonicscourse.ISpeakWords | null
    }

    /** Represents a SpeakWords1. */
    class SpeakWords1 implements ISpeakWords1 {
      /**
       * Constructs a new SpeakWords1.
       * @param [properties] Properties to set
       */
      constructor(properties?: sprout.phonicscourse.ISpeakWords1)

      /** SpeakWords1 speakWords. */
      public speakWords?: sprout.phonicscourse.ISpeakWords | null

      /**
       * Creates a new SpeakWords1 instance using the specified properties.
       * @param [properties] Properties to set
       * @returns SpeakWords1 instance
       */
      public static create(
        properties?: sprout.phonicscourse.ISpeakWords1,
      ): sprout.phonicscourse.SpeakWords1

      /**
       * Encodes the specified SpeakWords1 message. Does not implicitly {@link sprout.phonicscourse.SpeakWords1.verify|verify} messages.
       * @param message SpeakWords1 message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encode(
        message: sprout.phonicscourse.ISpeakWords1,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Encodes the specified SpeakWords1 message, length delimited. Does not implicitly {@link sprout.phonicscourse.SpeakWords1.verify|verify} messages.
       * @param message SpeakWords1 message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encodeDelimited(
        message: sprout.phonicscourse.ISpeakWords1,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Decodes a SpeakWords1 message from the specified reader or buffer.
       * @param reader Reader or buffer to decode from
       * @param [length] Message length if known beforehand
       * @returns SpeakWords1
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decode(
        reader: $protobuf.Reader | Uint8Array,
        length?: number,
      ): sprout.phonicscourse.SpeakWords1

      /**
       * Decodes a SpeakWords1 message from the specified reader or buffer, length delimited.
       * @param reader Reader or buffer to decode from
       * @returns SpeakWords1
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decodeDelimited(
        reader: $protobuf.Reader | Uint8Array,
      ): sprout.phonicscourse.SpeakWords1

      /**
       * Verifies a SpeakWords1 message.
       * @param message Plain object to verify
       * @returns `null` if valid, otherwise the reason why it is not
       */
      public static verify(message: { [k: string]: any }): string | null

      /**
       * Creates a SpeakWords1 message from a plain object. Also converts values to their respective internal types.
       * @param object Plain object
       * @returns SpeakWords1
       */
      public static fromObject(object: {
        [k: string]: any
      }): sprout.phonicscourse.SpeakWords1

      /**
       * Creates a plain object from a SpeakWords1 message. Also converts values to other types if specified.
       * @param message SpeakWords1
       * @param [options] Conversion options
       * @returns Plain object
       */
      public static toObject(
        message: sprout.phonicscourse.SpeakWords1,
        options?: $protobuf.IConversionOptions,
      ): { [k: string]: any }

      /**
       * Converts this SpeakWords1 to JSON.
       * @returns JSON object
       */
      public toJSON(): { [k: string]: any }
    }

    /** Properties of a BlockA2P. */
    interface IBlockA2P {
      /** BlockA2P multiChoicePicture_1 */
      multiChoicePicture_1?: darwincourse.IMultiChoicePicture1 | null
    }

    /** Represents a BlockA2P. */
    class BlockA2P implements IBlockA2P {
      /**
       * Constructs a new BlockA2P.
       * @param [properties] Properties to set
       */
      constructor(properties?: sprout.phonicscourse.IBlockA2P)

      /** BlockA2P multiChoicePicture_1. */
      public multiChoicePicture_1?: darwincourse.IMultiChoicePicture1 | null

      /**
       * Creates a new BlockA2P instance using the specified properties.
       * @param [properties] Properties to set
       * @returns BlockA2P instance
       */
      public static create(
        properties?: sprout.phonicscourse.IBlockA2P,
      ): sprout.phonicscourse.BlockA2P

      /**
       * Encodes the specified BlockA2P message. Does not implicitly {@link sprout.phonicscourse.BlockA2P.verify|verify} messages.
       * @param message BlockA2P message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encode(
        message: sprout.phonicscourse.IBlockA2P,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Encodes the specified BlockA2P message, length delimited. Does not implicitly {@link sprout.phonicscourse.BlockA2P.verify|verify} messages.
       * @param message BlockA2P message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encodeDelimited(
        message: sprout.phonicscourse.IBlockA2P,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Decodes a BlockA2P message from the specified reader or buffer.
       * @param reader Reader or buffer to decode from
       * @param [length] Message length if known beforehand
       * @returns BlockA2P
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decode(
        reader: $protobuf.Reader | Uint8Array,
        length?: number,
      ): sprout.phonicscourse.BlockA2P

      /**
       * Decodes a BlockA2P message from the specified reader or buffer, length delimited.
       * @param reader Reader or buffer to decode from
       * @returns BlockA2P
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decodeDelimited(
        reader: $protobuf.Reader | Uint8Array,
      ): sprout.phonicscourse.BlockA2P

      /**
       * Verifies a BlockA2P message.
       * @param message Plain object to verify
       * @returns `null` if valid, otherwise the reason why it is not
       */
      public static verify(message: { [k: string]: any }): string | null

      /**
       * Creates a BlockA2P message from a plain object. Also converts values to their respective internal types.
       * @param object Plain object
       * @returns BlockA2P
       */
      public static fromObject(object: {
        [k: string]: any
      }): sprout.phonicscourse.BlockA2P

      /**
       * Creates a plain object from a BlockA2P message. Also converts values to other types if specified.
       * @param message BlockA2P
       * @param [options] Conversion options
       * @returns Plain object
       */
      public static toObject(
        message: sprout.phonicscourse.BlockA2P,
        options?: $protobuf.IConversionOptions,
      ): { [k: string]: any }

      /**
       * Converts this BlockA2P to JSON.
       * @returns JSON object
       */
      public toJSON(): { [k: string]: any }
    }

    /** Properties of a BlockA2T. */
    interface IBlockA2T {
      /** BlockA2T multiChoiceQuestion_1 */
      multiChoiceQuestion_1?: darwincourse.IMultiChoiceQuestion1 | null
    }

    /** Represents a BlockA2T. */
    class BlockA2T implements IBlockA2T {
      /**
       * Constructs a new BlockA2T.
       * @param [properties] Properties to set
       */
      constructor(properties?: sprout.phonicscourse.IBlockA2T)

      /** BlockA2T multiChoiceQuestion_1. */
      public multiChoiceQuestion_1?: darwincourse.IMultiChoiceQuestion1 | null

      /**
       * Creates a new BlockA2T instance using the specified properties.
       * @param [properties] Properties to set
       * @returns BlockA2T instance
       */
      public static create(
        properties?: sprout.phonicscourse.IBlockA2T,
      ): sprout.phonicscourse.BlockA2T

      /**
       * Encodes the specified BlockA2T message. Does not implicitly {@link sprout.phonicscourse.BlockA2T.verify|verify} messages.
       * @param message BlockA2T message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encode(
        message: sprout.phonicscourse.IBlockA2T,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Encodes the specified BlockA2T message, length delimited. Does not implicitly {@link sprout.phonicscourse.BlockA2T.verify|verify} messages.
       * @param message BlockA2T message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encodeDelimited(
        message: sprout.phonicscourse.IBlockA2T,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Decodes a BlockA2T message from the specified reader or buffer.
       * @param reader Reader or buffer to decode from
       * @param [length] Message length if known beforehand
       * @returns BlockA2T
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decode(
        reader: $protobuf.Reader | Uint8Array,
        length?: number,
      ): sprout.phonicscourse.BlockA2T

      /**
       * Decodes a BlockA2T message from the specified reader or buffer, length delimited.
       * @param reader Reader or buffer to decode from
       * @returns BlockA2T
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decodeDelimited(
        reader: $protobuf.Reader | Uint8Array,
      ): sprout.phonicscourse.BlockA2T

      /**
       * Verifies a BlockA2T message.
       * @param message Plain object to verify
       * @returns `null` if valid, otherwise the reason why it is not
       */
      public static verify(message: { [k: string]: any }): string | null

      /**
       * Creates a BlockA2T message from a plain object. Also converts values to their respective internal types.
       * @param object Plain object
       * @returns BlockA2T
       */
      public static fromObject(object: {
        [k: string]: any
      }): sprout.phonicscourse.BlockA2T

      /**
       * Creates a plain object from a BlockA2T message. Also converts values to other types if specified.
       * @param message BlockA2T
       * @param [options] Conversion options
       * @returns Plain object
       */
      public static toObject(
        message: sprout.phonicscourse.BlockA2T,
        options?: $protobuf.IConversionOptions,
      ): { [k: string]: any }

      /**
       * Converts this BlockA2T to JSON.
       * @returns JSON object
       */
      public toJSON(): { [k: string]: any }
    }

    /** Properties of a BlockA2PT. */
    interface IBlockA2PT {
      /** BlockA2PT audioId */
      audioId?: string | null

      /** BlockA2PT mixChoice */
      mixChoice?: sprout.phonicscourse.IMixChoice[] | null
    }

    /** Represents a BlockA2PT. */
    class BlockA2PT implements IBlockA2PT {
      /**
       * Constructs a new BlockA2PT.
       * @param [properties] Properties to set
       */
      constructor(properties?: sprout.phonicscourse.IBlockA2PT)

      /** BlockA2PT audioId. */
      public audioId: string

      /** BlockA2PT mixChoice. */
      public mixChoice: sprout.phonicscourse.IMixChoice[]

      /**
       * Creates a new BlockA2PT instance using the specified properties.
       * @param [properties] Properties to set
       * @returns BlockA2PT instance
       */
      public static create(
        properties?: sprout.phonicscourse.IBlockA2PT,
      ): sprout.phonicscourse.BlockA2PT

      /**
       * Encodes the specified BlockA2PT message. Does not implicitly {@link sprout.phonicscourse.BlockA2PT.verify|verify} messages.
       * @param message BlockA2PT message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encode(
        message: sprout.phonicscourse.IBlockA2PT,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Encodes the specified BlockA2PT message, length delimited. Does not implicitly {@link sprout.phonicscourse.BlockA2PT.verify|verify} messages.
       * @param message BlockA2PT message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encodeDelimited(
        message: sprout.phonicscourse.IBlockA2PT,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Decodes a BlockA2PT message from the specified reader or buffer.
       * @param reader Reader or buffer to decode from
       * @param [length] Message length if known beforehand
       * @returns BlockA2PT
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decode(
        reader: $protobuf.Reader | Uint8Array,
        length?: number,
      ): sprout.phonicscourse.BlockA2PT

      /**
       * Decodes a BlockA2PT message from the specified reader or buffer, length delimited.
       * @param reader Reader or buffer to decode from
       * @returns BlockA2PT
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decodeDelimited(
        reader: $protobuf.Reader | Uint8Array,
      ): sprout.phonicscourse.BlockA2PT

      /**
       * Verifies a BlockA2PT message.
       * @param message Plain object to verify
       * @returns `null` if valid, otherwise the reason why it is not
       */
      public static verify(message: { [k: string]: any }): string | null

      /**
       * Creates a BlockA2PT message from a plain object. Also converts values to their respective internal types.
       * @param object Plain object
       * @returns BlockA2PT
       */
      public static fromObject(object: {
        [k: string]: any
      }): sprout.phonicscourse.BlockA2PT

      /**
       * Creates a plain object from a BlockA2PT message. Also converts values to other types if specified.
       * @param message BlockA2PT
       * @param [options] Conversion options
       * @returns Plain object
       */
      public static toObject(
        message: sprout.phonicscourse.BlockA2PT,
        options?: $protobuf.IConversionOptions,
      ): { [k: string]: any }

      /**
       * Converts this BlockA2PT to JSON.
       * @returns JSON object
       */
      public toJSON(): { [k: string]: any }
    }

    /** Properties of a BlockP. */
    interface IBlockP {
      /** BlockP pictureId */
      pictureId?: string | null

      /** BlockP audioId */
      audioId?: string | null

      /** BlockP deliteAudioId */
      deliteAudioId?: string | null
    }

    /** Represents a BlockP. */
    class BlockP implements IBlockP {
      /**
       * Constructs a new BlockP.
       * @param [properties] Properties to set
       */
      constructor(properties?: sprout.phonicscourse.IBlockP)

      /** BlockP pictureId. */
      public pictureId: string

      /** BlockP audioId. */
      public audioId: string

      /** BlockP deliteAudioId. */
      public deliteAudioId: string

      /**
       * Creates a new BlockP instance using the specified properties.
       * @param [properties] Properties to set
       * @returns BlockP instance
       */
      public static create(
        properties?: sprout.phonicscourse.IBlockP,
      ): sprout.phonicscourse.BlockP

      /**
       * Encodes the specified BlockP message. Does not implicitly {@link sprout.phonicscourse.BlockP.verify|verify} messages.
       * @param message BlockP message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encode(
        message: sprout.phonicscourse.IBlockP,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Encodes the specified BlockP message, length delimited. Does not implicitly {@link sprout.phonicscourse.BlockP.verify|verify} messages.
       * @param message BlockP message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encodeDelimited(
        message: sprout.phonicscourse.IBlockP,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Decodes a BlockP message from the specified reader or buffer.
       * @param reader Reader or buffer to decode from
       * @param [length] Message length if known beforehand
       * @returns BlockP
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decode(
        reader: $protobuf.Reader | Uint8Array,
        length?: number,
      ): sprout.phonicscourse.BlockP

      /**
       * Decodes a BlockP message from the specified reader or buffer, length delimited.
       * @param reader Reader or buffer to decode from
       * @returns BlockP
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decodeDelimited(
        reader: $protobuf.Reader | Uint8Array,
      ): sprout.phonicscourse.BlockP

      /**
       * Verifies a BlockP message.
       * @param message Plain object to verify
       * @returns `null` if valid, otherwise the reason why it is not
       */
      public static verify(message: { [k: string]: any }): string | null

      /**
       * Creates a BlockP message from a plain object. Also converts values to their respective internal types.
       * @param object Plain object
       * @returns BlockP
       */
      public static fromObject(object: {
        [k: string]: any
      }): sprout.phonicscourse.BlockP

      /**
       * Creates a plain object from a BlockP message. Also converts values to other types if specified.
       * @param message BlockP
       * @param [options] Conversion options
       * @returns Plain object
       */
      public static toObject(
        message: sprout.phonicscourse.BlockP,
        options?: $protobuf.IConversionOptions,
      ): { [k: string]: any }

      /**
       * Converts this BlockP to JSON.
       * @returns JSON object
       */
      public toJSON(): { [k: string]: any }
    }

    /** Properties of a BlockT. */
    interface IBlockT {
      /** BlockT text */
      text?: string | null

      /** BlockT audioId */
      audioId?: string | null

      /** BlockT deliteAudioId */
      deliteAudioId?: string | null
    }

    /** Represents a BlockT. */
    class BlockT implements IBlockT {
      /**
       * Constructs a new BlockT.
       * @param [properties] Properties to set
       */
      constructor(properties?: sprout.phonicscourse.IBlockT)

      /** BlockT text. */
      public text: string

      /** BlockT audioId. */
      public audioId: string

      /** BlockT deliteAudioId. */
      public deliteAudioId: string

      /**
       * Creates a new BlockT instance using the specified properties.
       * @param [properties] Properties to set
       * @returns BlockT instance
       */
      public static create(
        properties?: sprout.phonicscourse.IBlockT,
      ): sprout.phonicscourse.BlockT

      /**
       * Encodes the specified BlockT message. Does not implicitly {@link sprout.phonicscourse.BlockT.verify|verify} messages.
       * @param message BlockT message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encode(
        message: sprout.phonicscourse.IBlockT,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Encodes the specified BlockT message, length delimited. Does not implicitly {@link sprout.phonicscourse.BlockT.verify|verify} messages.
       * @param message BlockT message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encodeDelimited(
        message: sprout.phonicscourse.IBlockT,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Decodes a BlockT message from the specified reader or buffer.
       * @param reader Reader or buffer to decode from
       * @param [length] Message length if known beforehand
       * @returns BlockT
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decode(
        reader: $protobuf.Reader | Uint8Array,
        length?: number,
      ): sprout.phonicscourse.BlockT

      /**
       * Decodes a BlockT message from the specified reader or buffer, length delimited.
       * @param reader Reader or buffer to decode from
       * @returns BlockT
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decodeDelimited(
        reader: $protobuf.Reader | Uint8Array,
      ): sprout.phonicscourse.BlockT

      /**
       * Verifies a BlockT message.
       * @param message Plain object to verify
       * @returns `null` if valid, otherwise the reason why it is not
       */
      public static verify(message: { [k: string]: any }): string | null

      /**
       * Creates a BlockT message from a plain object. Also converts values to their respective internal types.
       * @param object Plain object
       * @returns BlockT
       */
      public static fromObject(object: {
        [k: string]: any
      }): sprout.phonicscourse.BlockT

      /**
       * Creates a plain object from a BlockT message. Also converts values to other types if specified.
       * @param message BlockT
       * @param [options] Conversion options
       * @returns Plain object
       */
      public static toObject(
        message: sprout.phonicscourse.BlockT,
        options?: $protobuf.IConversionOptions,
      ): { [k: string]: any }

      /**
       * Converts this BlockT to JSON.
       * @returns JSON object
       */
      public toJSON(): { [k: string]: any }
    }

    /** Properties of a BlockPT. */
    interface IBlockPT {
      /** BlockPT pictureId */
      pictureId?: string | null

      /** BlockPT text */
      text?: string | null

      /** BlockPT audioId */
      audioId?: string | null

      /** BlockPT deliteAudioId */
      deliteAudioId?: string | null
    }

    /** Represents a BlockPT. */
    class BlockPT implements IBlockPT {
      /**
       * Constructs a new BlockPT.
       * @param [properties] Properties to set
       */
      constructor(properties?: sprout.phonicscourse.IBlockPT)

      /** BlockPT pictureId. */
      public pictureId: string

      /** BlockPT text. */
      public text: string

      /** BlockPT audioId. */
      public audioId: string

      /** BlockPT deliteAudioId. */
      public deliteAudioId: string

      /**
       * Creates a new BlockPT instance using the specified properties.
       * @param [properties] Properties to set
       * @returns BlockPT instance
       */
      public static create(
        properties?: sprout.phonicscourse.IBlockPT,
      ): sprout.phonicscourse.BlockPT

      /**
       * Encodes the specified BlockPT message. Does not implicitly {@link sprout.phonicscourse.BlockPT.verify|verify} messages.
       * @param message BlockPT message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encode(
        message: sprout.phonicscourse.IBlockPT,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Encodes the specified BlockPT message, length delimited. Does not implicitly {@link sprout.phonicscourse.BlockPT.verify|verify} messages.
       * @param message BlockPT message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encodeDelimited(
        message: sprout.phonicscourse.IBlockPT,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Decodes a BlockPT message from the specified reader or buffer.
       * @param reader Reader or buffer to decode from
       * @param [length] Message length if known beforehand
       * @returns BlockPT
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decode(
        reader: $protobuf.Reader | Uint8Array,
        length?: number,
      ): sprout.phonicscourse.BlockPT

      /**
       * Decodes a BlockPT message from the specified reader or buffer, length delimited.
       * @param reader Reader or buffer to decode from
       * @returns BlockPT
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decodeDelimited(
        reader: $protobuf.Reader | Uint8Array,
      ): sprout.phonicscourse.BlockPT

      /**
       * Verifies a BlockPT message.
       * @param message Plain object to verify
       * @returns `null` if valid, otherwise the reason why it is not
       */
      public static verify(message: { [k: string]: any }): string | null

      /**
       * Creates a BlockPT message from a plain object. Also converts values to their respective internal types.
       * @param object Plain object
       * @returns BlockPT
       */
      public static fromObject(object: {
        [k: string]: any
      }): sprout.phonicscourse.BlockPT

      /**
       * Creates a plain object from a BlockPT message. Also converts values to other types if specified.
       * @param message BlockPT
       * @param [options] Conversion options
       * @returns Plain object
       */
      public static toObject(
        message: sprout.phonicscourse.BlockPT,
        options?: $protobuf.IConversionOptions,
      ): { [k: string]: any }

      /**
       * Converts this BlockPT to JSON.
       * @returns JSON object
       */
      public toJSON(): { [k: string]: any }
    }

    /** Properties of a BlockTS. */
    interface IBlockTS {
      /** BlockTS text */
      text?: string | null

      /** BlockTS audioMeta */
      audioMeta?: sprout.phonicscourse.IAudioMeta | null
    }

    /** Represents a BlockTS. */
    class BlockTS implements IBlockTS {
      /**
       * Constructs a new BlockTS.
       * @param [properties] Properties to set
       */
      constructor(properties?: sprout.phonicscourse.IBlockTS)

      /** BlockTS text. */
      public text: string

      /** BlockTS audioMeta. */
      public audioMeta?: sprout.phonicscourse.IAudioMeta | null

      /**
       * Creates a new BlockTS instance using the specified properties.
       * @param [properties] Properties to set
       * @returns BlockTS instance
       */
      public static create(
        properties?: sprout.phonicscourse.IBlockTS,
      ): sprout.phonicscourse.BlockTS

      /**
       * Encodes the specified BlockTS message. Does not implicitly {@link sprout.phonicscourse.BlockTS.verify|verify} messages.
       * @param message BlockTS message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encode(
        message: sprout.phonicscourse.IBlockTS,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Encodes the specified BlockTS message, length delimited. Does not implicitly {@link sprout.phonicscourse.BlockTS.verify|verify} messages.
       * @param message BlockTS message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encodeDelimited(
        message: sprout.phonicscourse.IBlockTS,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Decodes a BlockTS message from the specified reader or buffer.
       * @param reader Reader or buffer to decode from
       * @param [length] Message length if known beforehand
       * @returns BlockTS
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decode(
        reader: $protobuf.Reader | Uint8Array,
        length?: number,
      ): sprout.phonicscourse.BlockTS

      /**
       * Decodes a BlockTS message from the specified reader or buffer, length delimited.
       * @param reader Reader or buffer to decode from
       * @returns BlockTS
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decodeDelimited(
        reader: $protobuf.Reader | Uint8Array,
      ): sprout.phonicscourse.BlockTS

      /**
       * Verifies a BlockTS message.
       * @param message Plain object to verify
       * @returns `null` if valid, otherwise the reason why it is not
       */
      public static verify(message: { [k: string]: any }): string | null

      /**
       * Creates a BlockTS message from a plain object. Also converts values to their respective internal types.
       * @param object Plain object
       * @returns BlockTS
       */
      public static fromObject(object: {
        [k: string]: any
      }): sprout.phonicscourse.BlockTS

      /**
       * Creates a plain object from a BlockTS message. Also converts values to other types if specified.
       * @param message BlockTS
       * @param [options] Conversion options
       * @returns Plain object
       */
      public static toObject(
        message: sprout.phonicscourse.BlockTS,
        options?: $protobuf.IConversionOptions,
      ): { [k: string]: any }

      /**
       * Converts this BlockTS to JSON.
       * @returns JSON object
       */
      public toJSON(): { [k: string]: any }
    }

    /** Properties of a BlockTWP. */
    interface IBlockTWP {
      /** BlockTWP audioId */
      audioId?: string | null

      /** BlockTWP letterAudioIds */
      letterAudioIds?: string[] | null
    }

    /** Represents a BlockTWP. */
    class BlockTWP implements IBlockTWP {
      /**
       * Constructs a new BlockTWP.
       * @param [properties] Properties to set
       */
      constructor(properties?: sprout.phonicscourse.IBlockTWP)

      /** BlockTWP audioId. */
      public audioId: string

      /** BlockTWP letterAudioIds. */
      public letterAudioIds: string[]

      /**
       * Creates a new BlockTWP instance using the specified properties.
       * @param [properties] Properties to set
       * @returns BlockTWP instance
       */
      public static create(
        properties?: sprout.phonicscourse.IBlockTWP,
      ): sprout.phonicscourse.BlockTWP

      /**
       * Encodes the specified BlockTWP message. Does not implicitly {@link sprout.phonicscourse.BlockTWP.verify|verify} messages.
       * @param message BlockTWP message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encode(
        message: sprout.phonicscourse.IBlockTWP,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Encodes the specified BlockTWP message, length delimited. Does not implicitly {@link sprout.phonicscourse.BlockTWP.verify|verify} messages.
       * @param message BlockTWP message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encodeDelimited(
        message: sprout.phonicscourse.IBlockTWP,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Decodes a BlockTWP message from the specified reader or buffer.
       * @param reader Reader or buffer to decode from
       * @param [length] Message length if known beforehand
       * @returns BlockTWP
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decode(
        reader: $protobuf.Reader | Uint8Array,
        length?: number,
      ): sprout.phonicscourse.BlockTWP

      /**
       * Decodes a BlockTWP message from the specified reader or buffer, length delimited.
       * @param reader Reader or buffer to decode from
       * @returns BlockTWP
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decodeDelimited(
        reader: $protobuf.Reader | Uint8Array,
      ): sprout.phonicscourse.BlockTWP

      /**
       * Verifies a BlockTWP message.
       * @param message Plain object to verify
       * @returns `null` if valid, otherwise the reason why it is not
       */
      public static verify(message: { [k: string]: any }): string | null

      /**
       * Creates a BlockTWP message from a plain object. Also converts values to their respective internal types.
       * @param object Plain object
       * @returns BlockTWP
       */
      public static fromObject(object: {
        [k: string]: any
      }): sprout.phonicscourse.BlockTWP

      /**
       * Creates a plain object from a BlockTWP message. Also converts values to other types if specified.
       * @param message BlockTWP
       * @param [options] Conversion options
       * @returns Plain object
       */
      public static toObject(
        message: sprout.phonicscourse.BlockTWP,
        options?: $protobuf.IConversionOptions,
      ): { [k: string]: any }

      /**
       * Converts this BlockTWP to JSON.
       * @returns JSON object
       */
      public toJSON(): { [k: string]: any }
    }

    /** Properties of an Answers. */
    interface IAnswers {
      /** Answers answer */
      answer?: sprout.phonicscourse.IAnswer[] | null
    }

    /** Represents an Answers. */
    class Answers implements IAnswers {
      /**
       * Constructs a new Answers.
       * @param [properties] Properties to set
       */
      constructor(properties?: sprout.phonicscourse.IAnswers)

      /** Answers answer. */
      public answer: sprout.phonicscourse.IAnswer[]

      /**
       * Creates a new Answers instance using the specified properties.
       * @param [properties] Properties to set
       * @returns Answers instance
       */
      public static create(
        properties?: sprout.phonicscourse.IAnswers,
      ): sprout.phonicscourse.Answers

      /**
       * Encodes the specified Answers message. Does not implicitly {@link sprout.phonicscourse.Answers.verify|verify} messages.
       * @param message Answers message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encode(
        message: sprout.phonicscourse.IAnswers,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Encodes the specified Answers message, length delimited. Does not implicitly {@link sprout.phonicscourse.Answers.verify|verify} messages.
       * @param message Answers message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encodeDelimited(
        message: sprout.phonicscourse.IAnswers,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Decodes an Answers message from the specified reader or buffer.
       * @param reader Reader or buffer to decode from
       * @param [length] Message length if known beforehand
       * @returns Answers
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decode(
        reader: $protobuf.Reader | Uint8Array,
        length?: number,
      ): sprout.phonicscourse.Answers

      /**
       * Decodes an Answers message from the specified reader or buffer, length delimited.
       * @param reader Reader or buffer to decode from
       * @returns Answers
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decodeDelimited(
        reader: $protobuf.Reader | Uint8Array,
      ): sprout.phonicscourse.Answers

      /**
       * Verifies an Answers message.
       * @param message Plain object to verify
       * @returns `null` if valid, otherwise the reason why it is not
       */
      public static verify(message: { [k: string]: any }): string | null

      /**
       * Creates an Answers message from a plain object. Also converts values to their respective internal types.
       * @param object Plain object
       * @returns Answers
       */
      public static fromObject(object: {
        [k: string]: any
      }): sprout.phonicscourse.Answers

      /**
       * Creates a plain object from an Answers message. Also converts values to other types if specified.
       * @param message Answers
       * @param [options] Conversion options
       * @returns Plain object
       */
      public static toObject(
        message: sprout.phonicscourse.Answers,
        options?: $protobuf.IConversionOptions,
      ): { [k: string]: any }

      /**
       * Converts this Answers to JSON.
       * @returns JSON object
       */
      public toJSON(): { [k: string]: any }
    }

    /** Properties of an Answer. */
    interface IAnswer {
      /** Answer timestampUsec */
      timestampUsec?: number | Long | null

      /** Answer activityId */
      activityId?: number | Long | null

      /** Answer activityType */
      activityType?: core_course.ActivityType.Enum | null

      /** Answer multiChoice */
      multiChoice?: sprout.phonicscourse.IMultiChoiceAnswer | null

      /** Answer audioRecord */
      audioRecord?: sprout.phonicscourse.IAudioRecordAnswer | null

      /** Answer value */
      value?: sprout.phonicscourse.IValueAnswer | null

      /** Answer multiAnswers */
      multiAnswers?: sprout.phonicscourse.IMultiAnswersAnswer | null

      /** Answer dubAnswer */
      dubAnswer?: sprout.phonicscourse.IDubAnswer | null

      /** Answer wfAnswer */
      wfAnswer?: sprout.phonicscourse.IWordFormationAnswer | null

      /** Answer multiPartAnswer */
      multiPartAnswer?: sprout.phonicscourse.IMultiPartAnswer | null

      /** Answer multiAudioRecord */
      multiAudioRecord?: sprout.phonicscourse.IMultiAudioRecordAnswer | null

      /** Answer mcqBlock1Answer */
      mcqBlock1Answer?: sprout.phonicscourse.IMCQBlock1Answser | null

      /** Answer mcqBlock2Answer */
      mcqBlock2Answer?: sprout.phonicscourse.IMCQBlock2Answser | null

      /** Answer mcqBlock3Answer */
      mcqBlock3Answer?: sprout.phonicscourse.IMCQBlock3Answser | null

      /** Answer rwBlock1Answer */
      rwBlock1Answer?: sprout.phonicscourse.IRWBlock1Answer | null

      /** Answer rwBlock2Answer */
      rwBlock2Answer?: sprout.phonicscourse.IRWBlock2Answer | null

      /** Answer rsBlock1Answer */
      rsBlock1Answer?: sprout.phonicscourse.IRSBlock1Answer | null

      /** Answer roBlock1Answer */
      roBlock1Answer?: sprout.phonicscourse.IROBlock1Answer | null
    }

    /** Represents an Answer. */
    class Answer implements IAnswer {
      /**
       * Constructs a new Answer.
       * @param [properties] Properties to set
       */
      constructor(properties?: sprout.phonicscourse.IAnswer)

      /** Answer timestampUsec. */
      public timestampUsec: number | Long

      /** Answer activityId. */
      public activityId: number | Long

      /** Answer activityType. */
      public activityType: core_course.ActivityType.Enum

      /** Answer multiChoice. */
      public multiChoice?: sprout.phonicscourse.IMultiChoiceAnswer | null

      /** Answer audioRecord. */
      public audioRecord?: sprout.phonicscourse.IAudioRecordAnswer | null

      /** Answer value. */
      public value?: sprout.phonicscourse.IValueAnswer | null

      /** Answer multiAnswers. */
      public multiAnswers?: sprout.phonicscourse.IMultiAnswersAnswer | null

      /** Answer dubAnswer. */
      public dubAnswer?: sprout.phonicscourse.IDubAnswer | null

      /** Answer wfAnswer. */
      public wfAnswer?: sprout.phonicscourse.IWordFormationAnswer | null

      /** Answer multiPartAnswer. */
      public multiPartAnswer?: sprout.phonicscourse.IMultiPartAnswer | null

      /** Answer multiAudioRecord. */
      public multiAudioRecord?: sprout.phonicscourse.IMultiAudioRecordAnswer | null

      /** Answer mcqBlock1Answer. */
      public mcqBlock1Answer?: sprout.phonicscourse.IMCQBlock1Answser | null

      /** Answer mcqBlock2Answer. */
      public mcqBlock2Answer?: sprout.phonicscourse.IMCQBlock2Answser | null

      /** Answer mcqBlock3Answer. */
      public mcqBlock3Answer?: sprout.phonicscourse.IMCQBlock3Answser | null

      /** Answer rwBlock1Answer. */
      public rwBlock1Answer?: sprout.phonicscourse.IRWBlock1Answer | null

      /** Answer rwBlock2Answer. */
      public rwBlock2Answer?: sprout.phonicscourse.IRWBlock2Answer | null

      /** Answer rsBlock1Answer. */
      public rsBlock1Answer?: sprout.phonicscourse.IRSBlock1Answer | null

      /** Answer roBlock1Answer. */
      public roBlock1Answer?: sprout.phonicscourse.IROBlock1Answer | null

      /** Answer answerOneof. */
      public answerOneof?:
        | 'multiChoice'
        | 'audioRecord'
        | 'value'
        | 'multiAnswers'
        | 'dubAnswer'
        | 'wfAnswer'
        | 'multiPartAnswer'
        | 'multiAudioRecord'
        | 'mcqBlock1Answer'
        | 'mcqBlock2Answer'
        | 'mcqBlock3Answer'
        | 'rwBlock1Answer'
        | 'rwBlock2Answer'
        | 'rsBlock1Answer'
        | 'roBlock1Answer'

      /**
       * Creates a new Answer instance using the specified properties.
       * @param [properties] Properties to set
       * @returns Answer instance
       */
      public static create(
        properties?: sprout.phonicscourse.IAnswer,
      ): sprout.phonicscourse.Answer

      /**
       * Encodes the specified Answer message. Does not implicitly {@link sprout.phonicscourse.Answer.verify|verify} messages.
       * @param message Answer message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encode(
        message: sprout.phonicscourse.IAnswer,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Encodes the specified Answer message, length delimited. Does not implicitly {@link sprout.phonicscourse.Answer.verify|verify} messages.
       * @param message Answer message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encodeDelimited(
        message: sprout.phonicscourse.IAnswer,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Decodes an Answer message from the specified reader or buffer.
       * @param reader Reader or buffer to decode from
       * @param [length] Message length if known beforehand
       * @returns Answer
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decode(
        reader: $protobuf.Reader | Uint8Array,
        length?: number,
      ): sprout.phonicscourse.Answer

      /**
       * Decodes an Answer message from the specified reader or buffer, length delimited.
       * @param reader Reader or buffer to decode from
       * @returns Answer
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decodeDelimited(
        reader: $protobuf.Reader | Uint8Array,
      ): sprout.phonicscourse.Answer

      /**
       * Verifies an Answer message.
       * @param message Plain object to verify
       * @returns `null` if valid, otherwise the reason why it is not
       */
      public static verify(message: { [k: string]: any }): string | null

      /**
       * Creates an Answer message from a plain object. Also converts values to their respective internal types.
       * @param object Plain object
       * @returns Answer
       */
      public static fromObject(object: {
        [k: string]: any
      }): sprout.phonicscourse.Answer

      /**
       * Creates a plain object from an Answer message. Also converts values to other types if specified.
       * @param message Answer
       * @param [options] Conversion options
       * @returns Plain object
       */
      public static toObject(
        message: sprout.phonicscourse.Answer,
        options?: $protobuf.IConversionOptions,
      ): { [k: string]: any }

      /**
       * Converts this Answer to JSON.
       * @returns JSON object
       */
      public toJSON(): { [k: string]: any }
    }

    /** Properties of a MultiChoiceAnswer. */
    interface IMultiChoiceAnswer {
      /** MultiChoiceAnswer choiceId */
      choiceId?: number | null

      /** MultiChoiceAnswer correct */
      correct?: boolean | null
    }

    /** Represents a MultiChoiceAnswer. */
    class MultiChoiceAnswer implements IMultiChoiceAnswer {
      /**
       * Constructs a new MultiChoiceAnswer.
       * @param [properties] Properties to set
       */
      constructor(properties?: sprout.phonicscourse.IMultiChoiceAnswer)

      /** MultiChoiceAnswer choiceId. */
      public choiceId: number

      /** MultiChoiceAnswer correct. */
      public correct: boolean

      /**
       * Creates a new MultiChoiceAnswer instance using the specified properties.
       * @param [properties] Properties to set
       * @returns MultiChoiceAnswer instance
       */
      public static create(
        properties?: sprout.phonicscourse.IMultiChoiceAnswer,
      ): sprout.phonicscourse.MultiChoiceAnswer

      /**
       * Encodes the specified MultiChoiceAnswer message. Does not implicitly {@link sprout.phonicscourse.MultiChoiceAnswer.verify|verify} messages.
       * @param message MultiChoiceAnswer message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encode(
        message: sprout.phonicscourse.IMultiChoiceAnswer,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Encodes the specified MultiChoiceAnswer message, length delimited. Does not implicitly {@link sprout.phonicscourse.MultiChoiceAnswer.verify|verify} messages.
       * @param message MultiChoiceAnswer message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encodeDelimited(
        message: sprout.phonicscourse.IMultiChoiceAnswer,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Decodes a MultiChoiceAnswer message from the specified reader or buffer.
       * @param reader Reader or buffer to decode from
       * @param [length] Message length if known beforehand
       * @returns MultiChoiceAnswer
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decode(
        reader: $protobuf.Reader | Uint8Array,
        length?: number,
      ): sprout.phonicscourse.MultiChoiceAnswer

      /**
       * Decodes a MultiChoiceAnswer message from the specified reader or buffer, length delimited.
       * @param reader Reader or buffer to decode from
       * @returns MultiChoiceAnswer
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decodeDelimited(
        reader: $protobuf.Reader | Uint8Array,
      ): sprout.phonicscourse.MultiChoiceAnswer

      /**
       * Verifies a MultiChoiceAnswer message.
       * @param message Plain object to verify
       * @returns `null` if valid, otherwise the reason why it is not
       */
      public static verify(message: { [k: string]: any }): string | null

      /**
       * Creates a MultiChoiceAnswer message from a plain object. Also converts values to their respective internal types.
       * @param object Plain object
       * @returns MultiChoiceAnswer
       */
      public static fromObject(object: {
        [k: string]: any
      }): sprout.phonicscourse.MultiChoiceAnswer

      /**
       * Creates a plain object from a MultiChoiceAnswer message. Also converts values to other types if specified.
       * @param message MultiChoiceAnswer
       * @param [options] Conversion options
       * @returns Plain object
       */
      public static toObject(
        message: sprout.phonicscourse.MultiChoiceAnswer,
        options?: $protobuf.IConversionOptions,
      ): { [k: string]: any }

      /**
       * Converts this MultiChoiceAnswer to JSON.
       * @returns JSON object
       */
      public toJSON(): { [k: string]: any }
    }

    /** Properties of an AudioRecordAnswer. */
    interface IAudioRecordAnswer {
      /** AudioRecordAnswer rawScore */
      rawScore?: number | null

      /** AudioRecordAnswer audioScoreDetail */
      audioScoreDetail?: dolemgo.scorer.IScore | null

      /** AudioRecordAnswer audioId */
      audioId?: string | null
    }

    /** Represents an AudioRecordAnswer. */
    class AudioRecordAnswer implements IAudioRecordAnswer {
      /**
       * Constructs a new AudioRecordAnswer.
       * @param [properties] Properties to set
       */
      constructor(properties?: sprout.phonicscourse.IAudioRecordAnswer)

      /** AudioRecordAnswer rawScore. */
      public rawScore: number

      /** AudioRecordAnswer audioScoreDetail. */
      public audioScoreDetail?: dolemgo.scorer.IScore | null

      /** AudioRecordAnswer audioId. */
      public audioId: string

      /**
       * Creates a new AudioRecordAnswer instance using the specified properties.
       * @param [properties] Properties to set
       * @returns AudioRecordAnswer instance
       */
      public static create(
        properties?: sprout.phonicscourse.IAudioRecordAnswer,
      ): sprout.phonicscourse.AudioRecordAnswer

      /**
       * Encodes the specified AudioRecordAnswer message. Does not implicitly {@link sprout.phonicscourse.AudioRecordAnswer.verify|verify} messages.
       * @param message AudioRecordAnswer message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encode(
        message: sprout.phonicscourse.IAudioRecordAnswer,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Encodes the specified AudioRecordAnswer message, length delimited. Does not implicitly {@link sprout.phonicscourse.AudioRecordAnswer.verify|verify} messages.
       * @param message AudioRecordAnswer message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encodeDelimited(
        message: sprout.phonicscourse.IAudioRecordAnswer,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Decodes an AudioRecordAnswer message from the specified reader or buffer.
       * @param reader Reader or buffer to decode from
       * @param [length] Message length if known beforehand
       * @returns AudioRecordAnswer
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decode(
        reader: $protobuf.Reader | Uint8Array,
        length?: number,
      ): sprout.phonicscourse.AudioRecordAnswer

      /**
       * Decodes an AudioRecordAnswer message from the specified reader or buffer, length delimited.
       * @param reader Reader or buffer to decode from
       * @returns AudioRecordAnswer
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decodeDelimited(
        reader: $protobuf.Reader | Uint8Array,
      ): sprout.phonicscourse.AudioRecordAnswer

      /**
       * Verifies an AudioRecordAnswer message.
       * @param message Plain object to verify
       * @returns `null` if valid, otherwise the reason why it is not
       */
      public static verify(message: { [k: string]: any }): string | null

      /**
       * Creates an AudioRecordAnswer message from a plain object. Also converts values to their respective internal types.
       * @param object Plain object
       * @returns AudioRecordAnswer
       */
      public static fromObject(object: {
        [k: string]: any
      }): sprout.phonicscourse.AudioRecordAnswer

      /**
       * Creates a plain object from an AudioRecordAnswer message. Also converts values to other types if specified.
       * @param message AudioRecordAnswer
       * @param [options] Conversion options
       * @returns Plain object
       */
      public static toObject(
        message: sprout.phonicscourse.AudioRecordAnswer,
        options?: $protobuf.IConversionOptions,
      ): { [k: string]: any }

      /**
       * Converts this AudioRecordAnswer to JSON.
       * @returns JSON object
       */
      public toJSON(): { [k: string]: any }
    }

    /** Properties of a ValueAnswer. */
    interface IValueAnswer {
      /** ValueAnswer correct */
      correct?: boolean | null
    }

    /** Represents a ValueAnswer. */
    class ValueAnswer implements IValueAnswer {
      /**
       * Constructs a new ValueAnswer.
       * @param [properties] Properties to set
       */
      constructor(properties?: sprout.phonicscourse.IValueAnswer)

      /** ValueAnswer correct. */
      public correct: boolean

      /**
       * Creates a new ValueAnswer instance using the specified properties.
       * @param [properties] Properties to set
       * @returns ValueAnswer instance
       */
      public static create(
        properties?: sprout.phonicscourse.IValueAnswer,
      ): sprout.phonicscourse.ValueAnswer

      /**
       * Encodes the specified ValueAnswer message. Does not implicitly {@link sprout.phonicscourse.ValueAnswer.verify|verify} messages.
       * @param message ValueAnswer message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encode(
        message: sprout.phonicscourse.IValueAnswer,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Encodes the specified ValueAnswer message, length delimited. Does not implicitly {@link sprout.phonicscourse.ValueAnswer.verify|verify} messages.
       * @param message ValueAnswer message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encodeDelimited(
        message: sprout.phonicscourse.IValueAnswer,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Decodes a ValueAnswer message from the specified reader or buffer.
       * @param reader Reader or buffer to decode from
       * @param [length] Message length if known beforehand
       * @returns ValueAnswer
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decode(
        reader: $protobuf.Reader | Uint8Array,
        length?: number,
      ): sprout.phonicscourse.ValueAnswer

      /**
       * Decodes a ValueAnswer message from the specified reader or buffer, length delimited.
       * @param reader Reader or buffer to decode from
       * @returns ValueAnswer
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decodeDelimited(
        reader: $protobuf.Reader | Uint8Array,
      ): sprout.phonicscourse.ValueAnswer

      /**
       * Verifies a ValueAnswer message.
       * @param message Plain object to verify
       * @returns `null` if valid, otherwise the reason why it is not
       */
      public static verify(message: { [k: string]: any }): string | null

      /**
       * Creates a ValueAnswer message from a plain object. Also converts values to their respective internal types.
       * @param object Plain object
       * @returns ValueAnswer
       */
      public static fromObject(object: {
        [k: string]: any
      }): sprout.phonicscourse.ValueAnswer

      /**
       * Creates a plain object from a ValueAnswer message. Also converts values to other types if specified.
       * @param message ValueAnswer
       * @param [options] Conversion options
       * @returns Plain object
       */
      public static toObject(
        message: sprout.phonicscourse.ValueAnswer,
        options?: $protobuf.IConversionOptions,
      ): { [k: string]: any }

      /**
       * Converts this ValueAnswer to JSON.
       * @returns JSON object
       */
      public toJSON(): { [k: string]: any }
    }

    /** Properties of a MultiAnswersAnswer. */
    interface IMultiAnswersAnswer {
      /** MultiAnswersAnswer choice */
      choice?: string[] | null

      /** MultiAnswersAnswer correct */
      correct?: boolean | null
    }

    /** Represents a MultiAnswersAnswer. */
    class MultiAnswersAnswer implements IMultiAnswersAnswer {
      /**
       * Constructs a new MultiAnswersAnswer.
       * @param [properties] Properties to set
       */
      constructor(properties?: sprout.phonicscourse.IMultiAnswersAnswer)

      /** MultiAnswersAnswer choice. */
      public choice: string[]

      /** MultiAnswersAnswer correct. */
      public correct: boolean

      /**
       * Creates a new MultiAnswersAnswer instance using the specified properties.
       * @param [properties] Properties to set
       * @returns MultiAnswersAnswer instance
       */
      public static create(
        properties?: sprout.phonicscourse.IMultiAnswersAnswer,
      ): sprout.phonicscourse.MultiAnswersAnswer

      /**
       * Encodes the specified MultiAnswersAnswer message. Does not implicitly {@link sprout.phonicscourse.MultiAnswersAnswer.verify|verify} messages.
       * @param message MultiAnswersAnswer message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encode(
        message: sprout.phonicscourse.IMultiAnswersAnswer,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Encodes the specified MultiAnswersAnswer message, length delimited. Does not implicitly {@link sprout.phonicscourse.MultiAnswersAnswer.verify|verify} messages.
       * @param message MultiAnswersAnswer message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encodeDelimited(
        message: sprout.phonicscourse.IMultiAnswersAnswer,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Decodes a MultiAnswersAnswer message from the specified reader or buffer.
       * @param reader Reader or buffer to decode from
       * @param [length] Message length if known beforehand
       * @returns MultiAnswersAnswer
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decode(
        reader: $protobuf.Reader | Uint8Array,
        length?: number,
      ): sprout.phonicscourse.MultiAnswersAnswer

      /**
       * Decodes a MultiAnswersAnswer message from the specified reader or buffer, length delimited.
       * @param reader Reader or buffer to decode from
       * @returns MultiAnswersAnswer
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decodeDelimited(
        reader: $protobuf.Reader | Uint8Array,
      ): sprout.phonicscourse.MultiAnswersAnswer

      /**
       * Verifies a MultiAnswersAnswer message.
       * @param message Plain object to verify
       * @returns `null` if valid, otherwise the reason why it is not
       */
      public static verify(message: { [k: string]: any }): string | null

      /**
       * Creates a MultiAnswersAnswer message from a plain object. Also converts values to their respective internal types.
       * @param object Plain object
       * @returns MultiAnswersAnswer
       */
      public static fromObject(object: {
        [k: string]: any
      }): sprout.phonicscourse.MultiAnswersAnswer

      /**
       * Creates a plain object from a MultiAnswersAnswer message. Also converts values to other types if specified.
       * @param message MultiAnswersAnswer
       * @param [options] Conversion options
       * @returns Plain object
       */
      public static toObject(
        message: sprout.phonicscourse.MultiAnswersAnswer,
        options?: $protobuf.IConversionOptions,
      ): { [k: string]: any }

      /**
       * Converts this MultiAnswersAnswer to JSON.
       * @returns JSON object
       */
      public toJSON(): { [k: string]: any }
    }

    /** Properties of a DubAnswer. */
    interface IDubAnswer {
      /** DubAnswer clipAnswer */
      clipAnswer?: sprout.phonicscourse.IAudioRecordAnswer[] | null
    }

    /** Represents a DubAnswer. */
    class DubAnswer implements IDubAnswer {
      /**
       * Constructs a new DubAnswer.
       * @param [properties] Properties to set
       */
      constructor(properties?: sprout.phonicscourse.IDubAnswer)

      /** DubAnswer clipAnswer. */
      public clipAnswer: sprout.phonicscourse.IAudioRecordAnswer[]

      /**
       * Creates a new DubAnswer instance using the specified properties.
       * @param [properties] Properties to set
       * @returns DubAnswer instance
       */
      public static create(
        properties?: sprout.phonicscourse.IDubAnswer,
      ): sprout.phonicscourse.DubAnswer

      /**
       * Encodes the specified DubAnswer message. Does not implicitly {@link sprout.phonicscourse.DubAnswer.verify|verify} messages.
       * @param message DubAnswer message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encode(
        message: sprout.phonicscourse.IDubAnswer,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Encodes the specified DubAnswer message, length delimited. Does not implicitly {@link sprout.phonicscourse.DubAnswer.verify|verify} messages.
       * @param message DubAnswer message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encodeDelimited(
        message: sprout.phonicscourse.IDubAnswer,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Decodes a DubAnswer message from the specified reader or buffer.
       * @param reader Reader or buffer to decode from
       * @param [length] Message length if known beforehand
       * @returns DubAnswer
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decode(
        reader: $protobuf.Reader | Uint8Array,
        length?: number,
      ): sprout.phonicscourse.DubAnswer

      /**
       * Decodes a DubAnswer message from the specified reader or buffer, length delimited.
       * @param reader Reader or buffer to decode from
       * @returns DubAnswer
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decodeDelimited(
        reader: $protobuf.Reader | Uint8Array,
      ): sprout.phonicscourse.DubAnswer

      /**
       * Verifies a DubAnswer message.
       * @param message Plain object to verify
       * @returns `null` if valid, otherwise the reason why it is not
       */
      public static verify(message: { [k: string]: any }): string | null

      /**
       * Creates a DubAnswer message from a plain object. Also converts values to their respective internal types.
       * @param object Plain object
       * @returns DubAnswer
       */
      public static fromObject(object: {
        [k: string]: any
      }): sprout.phonicscourse.DubAnswer

      /**
       * Creates a plain object from a DubAnswer message. Also converts values to other types if specified.
       * @param message DubAnswer
       * @param [options] Conversion options
       * @returns Plain object
       */
      public static toObject(
        message: sprout.phonicscourse.DubAnswer,
        options?: $protobuf.IConversionOptions,
      ): { [k: string]: any }

      /**
       * Converts this DubAnswer to JSON.
       * @returns JSON object
       */
      public toJSON(): { [k: string]: any }
    }

    /** Properties of a WordFormationAnswer. */
    interface IWordFormationAnswer {
      /** WordFormationAnswer answer */
      answer?: sprout.phonicscourse.IAnswerDetail[] | null

      /** WordFormationAnswer correct */
      correct?: boolean | null
    }

    /** Represents a WordFormationAnswer. */
    class WordFormationAnswer implements IWordFormationAnswer {
      /**
       * Constructs a new WordFormationAnswer.
       * @param [properties] Properties to set
       */
      constructor(properties?: sprout.phonicscourse.IWordFormationAnswer)

      /** WordFormationAnswer answer. */
      public answer: sprout.phonicscourse.IAnswerDetail[]

      /** WordFormationAnswer correct. */
      public correct: boolean

      /**
       * Creates a new WordFormationAnswer instance using the specified properties.
       * @param [properties] Properties to set
       * @returns WordFormationAnswer instance
       */
      public static create(
        properties?: sprout.phonicscourse.IWordFormationAnswer,
      ): sprout.phonicscourse.WordFormationAnswer

      /**
       * Encodes the specified WordFormationAnswer message. Does not implicitly {@link sprout.phonicscourse.WordFormationAnswer.verify|verify} messages.
       * @param message WordFormationAnswer message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encode(
        message: sprout.phonicscourse.IWordFormationAnswer,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Encodes the specified WordFormationAnswer message, length delimited. Does not implicitly {@link sprout.phonicscourse.WordFormationAnswer.verify|verify} messages.
       * @param message WordFormationAnswer message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encodeDelimited(
        message: sprout.phonicscourse.IWordFormationAnswer,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Decodes a WordFormationAnswer message from the specified reader or buffer.
       * @param reader Reader or buffer to decode from
       * @param [length] Message length if known beforehand
       * @returns WordFormationAnswer
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decode(
        reader: $protobuf.Reader | Uint8Array,
        length?: number,
      ): sprout.phonicscourse.WordFormationAnswer

      /**
       * Decodes a WordFormationAnswer message from the specified reader or buffer, length delimited.
       * @param reader Reader or buffer to decode from
       * @returns WordFormationAnswer
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decodeDelimited(
        reader: $protobuf.Reader | Uint8Array,
      ): sprout.phonicscourse.WordFormationAnswer

      /**
       * Verifies a WordFormationAnswer message.
       * @param message Plain object to verify
       * @returns `null` if valid, otherwise the reason why it is not
       */
      public static verify(message: { [k: string]: any }): string | null

      /**
       * Creates a WordFormationAnswer message from a plain object. Also converts values to their respective internal types.
       * @param object Plain object
       * @returns WordFormationAnswer
       */
      public static fromObject(object: {
        [k: string]: any
      }): sprout.phonicscourse.WordFormationAnswer

      /**
       * Creates a plain object from a WordFormationAnswer message. Also converts values to other types if specified.
       * @param message WordFormationAnswer
       * @param [options] Conversion options
       * @returns Plain object
       */
      public static toObject(
        message: sprout.phonicscourse.WordFormationAnswer,
        options?: $protobuf.IConversionOptions,
      ): { [k: string]: any }

      /**
       * Converts this WordFormationAnswer to JSON.
       * @returns JSON object
       */
      public toJSON(): { [k: string]: any }
    }

    /** Properties of an AnswerDetail. */
    interface IAnswerDetail {
      /** AnswerDetail text */
      text?: string | null

      /** AnswerDetail correct */
      correct?: boolean | null
    }

    /** Represents an AnswerDetail. */
    class AnswerDetail implements IAnswerDetail {
      /**
       * Constructs a new AnswerDetail.
       * @param [properties] Properties to set
       */
      constructor(properties?: sprout.phonicscourse.IAnswerDetail)

      /** AnswerDetail text. */
      public text: string

      /** AnswerDetail correct. */
      public correct: boolean

      /**
       * Creates a new AnswerDetail instance using the specified properties.
       * @param [properties] Properties to set
       * @returns AnswerDetail instance
       */
      public static create(
        properties?: sprout.phonicscourse.IAnswerDetail,
      ): sprout.phonicscourse.AnswerDetail

      /**
       * Encodes the specified AnswerDetail message. Does not implicitly {@link sprout.phonicscourse.AnswerDetail.verify|verify} messages.
       * @param message AnswerDetail message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encode(
        message: sprout.phonicscourse.IAnswerDetail,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Encodes the specified AnswerDetail message, length delimited. Does not implicitly {@link sprout.phonicscourse.AnswerDetail.verify|verify} messages.
       * @param message AnswerDetail message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encodeDelimited(
        message: sprout.phonicscourse.IAnswerDetail,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Decodes an AnswerDetail message from the specified reader or buffer.
       * @param reader Reader or buffer to decode from
       * @param [length] Message length if known beforehand
       * @returns AnswerDetail
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decode(
        reader: $protobuf.Reader | Uint8Array,
        length?: number,
      ): sprout.phonicscourse.AnswerDetail

      /**
       * Decodes an AnswerDetail message from the specified reader or buffer, length delimited.
       * @param reader Reader or buffer to decode from
       * @returns AnswerDetail
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decodeDelimited(
        reader: $protobuf.Reader | Uint8Array,
      ): sprout.phonicscourse.AnswerDetail

      /**
       * Verifies an AnswerDetail message.
       * @param message Plain object to verify
       * @returns `null` if valid, otherwise the reason why it is not
       */
      public static verify(message: { [k: string]: any }): string | null

      /**
       * Creates an AnswerDetail message from a plain object. Also converts values to their respective internal types.
       * @param object Plain object
       * @returns AnswerDetail
       */
      public static fromObject(object: {
        [k: string]: any
      }): sprout.phonicscourse.AnswerDetail

      /**
       * Creates a plain object from an AnswerDetail message. Also converts values to other types if specified.
       * @param message AnswerDetail
       * @param [options] Conversion options
       * @returns Plain object
       */
      public static toObject(
        message: sprout.phonicscourse.AnswerDetail,
        options?: $protobuf.IConversionOptions,
      ): { [k: string]: any }

      /**
       * Converts this AnswerDetail to JSON.
       * @returns JSON object
       */
      public toJSON(): { [k: string]: any }
    }

    /** Properties of a MultiPartAnswer. */
    interface IMultiPartAnswer {
      /** MultiPartAnswer partAnswer */
      partAnswer?: sprout.phonicscourse.MultiPartAnswer.IPartAnswer[] | null

      /** MultiPartAnswer correct */
      correct?: boolean | null
    }

    /** Represents a MultiPartAnswer. */
    class MultiPartAnswer implements IMultiPartAnswer {
      /**
       * Constructs a new MultiPartAnswer.
       * @param [properties] Properties to set
       */
      constructor(properties?: sprout.phonicscourse.IMultiPartAnswer)

      /** MultiPartAnswer partAnswer. */
      public partAnswer: sprout.phonicscourse.MultiPartAnswer.IPartAnswer[]

      /** MultiPartAnswer correct. */
      public correct: boolean

      /**
       * Creates a new MultiPartAnswer instance using the specified properties.
       * @param [properties] Properties to set
       * @returns MultiPartAnswer instance
       */
      public static create(
        properties?: sprout.phonicscourse.IMultiPartAnswer,
      ): sprout.phonicscourse.MultiPartAnswer

      /**
       * Encodes the specified MultiPartAnswer message. Does not implicitly {@link sprout.phonicscourse.MultiPartAnswer.verify|verify} messages.
       * @param message MultiPartAnswer message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encode(
        message: sprout.phonicscourse.IMultiPartAnswer,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Encodes the specified MultiPartAnswer message, length delimited. Does not implicitly {@link sprout.phonicscourse.MultiPartAnswer.verify|verify} messages.
       * @param message MultiPartAnswer message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encodeDelimited(
        message: sprout.phonicscourse.IMultiPartAnswer,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Decodes a MultiPartAnswer message from the specified reader or buffer.
       * @param reader Reader or buffer to decode from
       * @param [length] Message length if known beforehand
       * @returns MultiPartAnswer
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decode(
        reader: $protobuf.Reader | Uint8Array,
        length?: number,
      ): sprout.phonicscourse.MultiPartAnswer

      /**
       * Decodes a MultiPartAnswer message from the specified reader or buffer, length delimited.
       * @param reader Reader or buffer to decode from
       * @returns MultiPartAnswer
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decodeDelimited(
        reader: $protobuf.Reader | Uint8Array,
      ): sprout.phonicscourse.MultiPartAnswer

      /**
       * Verifies a MultiPartAnswer message.
       * @param message Plain object to verify
       * @returns `null` if valid, otherwise the reason why it is not
       */
      public static verify(message: { [k: string]: any }): string | null

      /**
       * Creates a MultiPartAnswer message from a plain object. Also converts values to their respective internal types.
       * @param object Plain object
       * @returns MultiPartAnswer
       */
      public static fromObject(object: {
        [k: string]: any
      }): sprout.phonicscourse.MultiPartAnswer

      /**
       * Creates a plain object from a MultiPartAnswer message. Also converts values to other types if specified.
       * @param message MultiPartAnswer
       * @param [options] Conversion options
       * @returns Plain object
       */
      public static toObject(
        message: sprout.phonicscourse.MultiPartAnswer,
        options?: $protobuf.IConversionOptions,
      ): { [k: string]: any }

      /**
       * Converts this MultiPartAnswer to JSON.
       * @returns JSON object
       */
      public toJSON(): { [k: string]: any }
    }

    namespace MultiPartAnswer {
      /** Properties of a PartAnswer. */
      interface IPartAnswer {
        /** PartAnswer choice */
        choice?: string[] | null

        /** PartAnswer correct */
        correct?: boolean | null
      }

      /** Represents a PartAnswer. */
      class PartAnswer implements IPartAnswer {
        /**
         * Constructs a new PartAnswer.
         * @param [properties] Properties to set
         */
        constructor(
          properties?: sprout.phonicscourse.MultiPartAnswer.IPartAnswer,
        )

        /** PartAnswer choice. */
        public choice: string[]

        /** PartAnswer correct. */
        public correct: boolean

        /**
         * Creates a new PartAnswer instance using the specified properties.
         * @param [properties] Properties to set
         * @returns PartAnswer instance
         */
        public static create(
          properties?: sprout.phonicscourse.MultiPartAnswer.IPartAnswer,
        ): sprout.phonicscourse.MultiPartAnswer.PartAnswer

        /**
         * Encodes the specified PartAnswer message. Does not implicitly {@link sprout.phonicscourse.MultiPartAnswer.PartAnswer.verify|verify} messages.
         * @param message PartAnswer message or plain object to encode
         * @param [writer] Writer to encode to
         * @returns Writer
         */
        public static encode(
          message: sprout.phonicscourse.MultiPartAnswer.IPartAnswer,
          writer?: $protobuf.Writer,
        ): $protobuf.Writer

        /**
         * Encodes the specified PartAnswer message, length delimited. Does not implicitly {@link sprout.phonicscourse.MultiPartAnswer.PartAnswer.verify|verify} messages.
         * @param message PartAnswer message or plain object to encode
         * @param [writer] Writer to encode to
         * @returns Writer
         */
        public static encodeDelimited(
          message: sprout.phonicscourse.MultiPartAnswer.IPartAnswer,
          writer?: $protobuf.Writer,
        ): $protobuf.Writer

        /**
         * Decodes a PartAnswer message from the specified reader or buffer.
         * @param reader Reader or buffer to decode from
         * @param [length] Message length if known beforehand
         * @returns PartAnswer
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        public static decode(
          reader: $protobuf.Reader | Uint8Array,
          length?: number,
        ): sprout.phonicscourse.MultiPartAnswer.PartAnswer

        /**
         * Decodes a PartAnswer message from the specified reader or buffer, length delimited.
         * @param reader Reader or buffer to decode from
         * @returns PartAnswer
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        public static decodeDelimited(
          reader: $protobuf.Reader | Uint8Array,
        ): sprout.phonicscourse.MultiPartAnswer.PartAnswer

        /**
         * Verifies a PartAnswer message.
         * @param message Plain object to verify
         * @returns `null` if valid, otherwise the reason why it is not
         */
        public static verify(message: { [k: string]: any }): string | null

        /**
         * Creates a PartAnswer message from a plain object. Also converts values to their respective internal types.
         * @param object Plain object
         * @returns PartAnswer
         */
        public static fromObject(object: {
          [k: string]: any
        }): sprout.phonicscourse.MultiPartAnswer.PartAnswer

        /**
         * Creates a plain object from a PartAnswer message. Also converts values to other types if specified.
         * @param message PartAnswer
         * @param [options] Conversion options
         * @returns Plain object
         */
        public static toObject(
          message: sprout.phonicscourse.MultiPartAnswer.PartAnswer,
          options?: $protobuf.IConversionOptions,
        ): { [k: string]: any }

        /**
         * Converts this PartAnswer to JSON.
         * @returns JSON object
         */
        public toJSON(): { [k: string]: any }
      }
    }

    /** Properties of a MultiAudioRecordAnswer. */
    interface IMultiAudioRecordAnswer {
      /** MultiAudioRecordAnswer answer */
      answer?: sprout.phonicscourse.IAudioRecordAnswer[] | null
    }

    /** Represents a MultiAudioRecordAnswer. */
    class MultiAudioRecordAnswer implements IMultiAudioRecordAnswer {
      /**
       * Constructs a new MultiAudioRecordAnswer.
       * @param [properties] Properties to set
       */
      constructor(properties?: sprout.phonicscourse.IMultiAudioRecordAnswer)

      /** MultiAudioRecordAnswer answer. */
      public answer: sprout.phonicscourse.IAudioRecordAnswer[]

      /**
       * Creates a new MultiAudioRecordAnswer instance using the specified properties.
       * @param [properties] Properties to set
       * @returns MultiAudioRecordAnswer instance
       */
      public static create(
        properties?: sprout.phonicscourse.IMultiAudioRecordAnswer,
      ): sprout.phonicscourse.MultiAudioRecordAnswer

      /**
       * Encodes the specified MultiAudioRecordAnswer message. Does not implicitly {@link sprout.phonicscourse.MultiAudioRecordAnswer.verify|verify} messages.
       * @param message MultiAudioRecordAnswer message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encode(
        message: sprout.phonicscourse.IMultiAudioRecordAnswer,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Encodes the specified MultiAudioRecordAnswer message, length delimited. Does not implicitly {@link sprout.phonicscourse.MultiAudioRecordAnswer.verify|verify} messages.
       * @param message MultiAudioRecordAnswer message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encodeDelimited(
        message: sprout.phonicscourse.IMultiAudioRecordAnswer,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Decodes a MultiAudioRecordAnswer message from the specified reader or buffer.
       * @param reader Reader or buffer to decode from
       * @param [length] Message length if known beforehand
       * @returns MultiAudioRecordAnswer
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decode(
        reader: $protobuf.Reader | Uint8Array,
        length?: number,
      ): sprout.phonicscourse.MultiAudioRecordAnswer

      /**
       * Decodes a MultiAudioRecordAnswer message from the specified reader or buffer, length delimited.
       * @param reader Reader or buffer to decode from
       * @returns MultiAudioRecordAnswer
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decodeDelimited(
        reader: $protobuf.Reader | Uint8Array,
      ): sprout.phonicscourse.MultiAudioRecordAnswer

      /**
       * Verifies a MultiAudioRecordAnswer message.
       * @param message Plain object to verify
       * @returns `null` if valid, otherwise the reason why it is not
       */
      public static verify(message: { [k: string]: any }): string | null

      /**
       * Creates a MultiAudioRecordAnswer message from a plain object. Also converts values to their respective internal types.
       * @param object Plain object
       * @returns MultiAudioRecordAnswer
       */
      public static fromObject(object: {
        [k: string]: any
      }): sprout.phonicscourse.MultiAudioRecordAnswer

      /**
       * Creates a plain object from a MultiAudioRecordAnswer message. Also converts values to other types if specified.
       * @param message MultiAudioRecordAnswer
       * @param [options] Conversion options
       * @returns Plain object
       */
      public static toObject(
        message: sprout.phonicscourse.MultiAudioRecordAnswer,
        options?: $protobuf.IConversionOptions,
      ): { [k: string]: any }

      /**
       * Converts this MultiAudioRecordAnswer to JSON.
       * @returns JSON object
       */
      public toJSON(): { [k: string]: any }
    }

    /** Properties of a MCQBlockAnswser. */
    interface IMCQBlockAnswser {
      /** MCQBlockAnswser correct */
      correct?: boolean | null

      /** MCQBlockAnswser score */
      score?: number | null

      /** MCQBlockAnswser choice */
      choice?: string[] | null
    }

    /** Represents a MCQBlockAnswser. */
    class MCQBlockAnswser implements IMCQBlockAnswser {
      /**
       * Constructs a new MCQBlockAnswser.
       * @param [properties] Properties to set
       */
      constructor(properties?: sprout.phonicscourse.IMCQBlockAnswser)

      /** MCQBlockAnswser correct. */
      public correct: boolean

      /** MCQBlockAnswser score. */
      public score: number

      /** MCQBlockAnswser choice. */
      public choice: string[]

      /**
       * Creates a new MCQBlockAnswser instance using the specified properties.
       * @param [properties] Properties to set
       * @returns MCQBlockAnswser instance
       */
      public static create(
        properties?: sprout.phonicscourse.IMCQBlockAnswser,
      ): sprout.phonicscourse.MCQBlockAnswser

      /**
       * Encodes the specified MCQBlockAnswser message. Does not implicitly {@link sprout.phonicscourse.MCQBlockAnswser.verify|verify} messages.
       * @param message MCQBlockAnswser message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encode(
        message: sprout.phonicscourse.IMCQBlockAnswser,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Encodes the specified MCQBlockAnswser message, length delimited. Does not implicitly {@link sprout.phonicscourse.MCQBlockAnswser.verify|verify} messages.
       * @param message MCQBlockAnswser message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encodeDelimited(
        message: sprout.phonicscourse.IMCQBlockAnswser,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Decodes a MCQBlockAnswser message from the specified reader or buffer.
       * @param reader Reader or buffer to decode from
       * @param [length] Message length if known beforehand
       * @returns MCQBlockAnswser
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decode(
        reader: $protobuf.Reader | Uint8Array,
        length?: number,
      ): sprout.phonicscourse.MCQBlockAnswser

      /**
       * Decodes a MCQBlockAnswser message from the specified reader or buffer, length delimited.
       * @param reader Reader or buffer to decode from
       * @returns MCQBlockAnswser
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decodeDelimited(
        reader: $protobuf.Reader | Uint8Array,
      ): sprout.phonicscourse.MCQBlockAnswser

      /**
       * Verifies a MCQBlockAnswser message.
       * @param message Plain object to verify
       * @returns `null` if valid, otherwise the reason why it is not
       */
      public static verify(message: { [k: string]: any }): string | null

      /**
       * Creates a MCQBlockAnswser message from a plain object. Also converts values to their respective internal types.
       * @param object Plain object
       * @returns MCQBlockAnswser
       */
      public static fromObject(object: {
        [k: string]: any
      }): sprout.phonicscourse.MCQBlockAnswser

      /**
       * Creates a plain object from a MCQBlockAnswser message. Also converts values to other types if specified.
       * @param message MCQBlockAnswser
       * @param [options] Conversion options
       * @returns Plain object
       */
      public static toObject(
        message: sprout.phonicscourse.MCQBlockAnswser,
        options?: $protobuf.IConversionOptions,
      ): { [k: string]: any }

      /**
       * Converts this MCQBlockAnswser to JSON.
       * @returns JSON object
       */
      public toJSON(): { [k: string]: any }
    }

    /** Properties of a MCQBlock1Answser. */
    interface IMCQBlock1Answser {
      /** MCQBlock1Answser mcqBlockAnswer */
      mcqBlockAnswer?: sprout.phonicscourse.IMCQBlockAnswser | null
    }

    /** Represents a MCQBlock1Answser. */
    class MCQBlock1Answser implements IMCQBlock1Answser {
      /**
       * Constructs a new MCQBlock1Answser.
       * @param [properties] Properties to set
       */
      constructor(properties?: sprout.phonicscourse.IMCQBlock1Answser)

      /** MCQBlock1Answser mcqBlockAnswer. */
      public mcqBlockAnswer?: sprout.phonicscourse.IMCQBlockAnswser | null

      /**
       * Creates a new MCQBlock1Answser instance using the specified properties.
       * @param [properties] Properties to set
       * @returns MCQBlock1Answser instance
       */
      public static create(
        properties?: sprout.phonicscourse.IMCQBlock1Answser,
      ): sprout.phonicscourse.MCQBlock1Answser

      /**
       * Encodes the specified MCQBlock1Answser message. Does not implicitly {@link sprout.phonicscourse.MCQBlock1Answser.verify|verify} messages.
       * @param message MCQBlock1Answser message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encode(
        message: sprout.phonicscourse.IMCQBlock1Answser,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Encodes the specified MCQBlock1Answser message, length delimited. Does not implicitly {@link sprout.phonicscourse.MCQBlock1Answser.verify|verify} messages.
       * @param message MCQBlock1Answser message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encodeDelimited(
        message: sprout.phonicscourse.IMCQBlock1Answser,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Decodes a MCQBlock1Answser message from the specified reader or buffer.
       * @param reader Reader or buffer to decode from
       * @param [length] Message length if known beforehand
       * @returns MCQBlock1Answser
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decode(
        reader: $protobuf.Reader | Uint8Array,
        length?: number,
      ): sprout.phonicscourse.MCQBlock1Answser

      /**
       * Decodes a MCQBlock1Answser message from the specified reader or buffer, length delimited.
       * @param reader Reader or buffer to decode from
       * @returns MCQBlock1Answser
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decodeDelimited(
        reader: $protobuf.Reader | Uint8Array,
      ): sprout.phonicscourse.MCQBlock1Answser

      /**
       * Verifies a MCQBlock1Answser message.
       * @param message Plain object to verify
       * @returns `null` if valid, otherwise the reason why it is not
       */
      public static verify(message: { [k: string]: any }): string | null

      /**
       * Creates a MCQBlock1Answser message from a plain object. Also converts values to their respective internal types.
       * @param object Plain object
       * @returns MCQBlock1Answser
       */
      public static fromObject(object: {
        [k: string]: any
      }): sprout.phonicscourse.MCQBlock1Answser

      /**
       * Creates a plain object from a MCQBlock1Answser message. Also converts values to other types if specified.
       * @param message MCQBlock1Answser
       * @param [options] Conversion options
       * @returns Plain object
       */
      public static toObject(
        message: sprout.phonicscourse.MCQBlock1Answser,
        options?: $protobuf.IConversionOptions,
      ): { [k: string]: any }

      /**
       * Converts this MCQBlock1Answser to JSON.
       * @returns JSON object
       */
      public toJSON(): { [k: string]: any }
    }

    /** Properties of a MCQBlock2Answser. */
    interface IMCQBlock2Answser {
      /** MCQBlock2Answser mcqBlockAnswer */
      mcqBlockAnswer?: sprout.phonicscourse.IMCQBlockAnswser | null
    }

    /** Represents a MCQBlock2Answser. */
    class MCQBlock2Answser implements IMCQBlock2Answser {
      /**
       * Constructs a new MCQBlock2Answser.
       * @param [properties] Properties to set
       */
      constructor(properties?: sprout.phonicscourse.IMCQBlock2Answser)

      /** MCQBlock2Answser mcqBlockAnswer. */
      public mcqBlockAnswer?: sprout.phonicscourse.IMCQBlockAnswser | null

      /**
       * Creates a new MCQBlock2Answser instance using the specified properties.
       * @param [properties] Properties to set
       * @returns MCQBlock2Answser instance
       */
      public static create(
        properties?: sprout.phonicscourse.IMCQBlock2Answser,
      ): sprout.phonicscourse.MCQBlock2Answser

      /**
       * Encodes the specified MCQBlock2Answser message. Does not implicitly {@link sprout.phonicscourse.MCQBlock2Answser.verify|verify} messages.
       * @param message MCQBlock2Answser message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encode(
        message: sprout.phonicscourse.IMCQBlock2Answser,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Encodes the specified MCQBlock2Answser message, length delimited. Does not implicitly {@link sprout.phonicscourse.MCQBlock2Answser.verify|verify} messages.
       * @param message MCQBlock2Answser message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encodeDelimited(
        message: sprout.phonicscourse.IMCQBlock2Answser,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Decodes a MCQBlock2Answser message from the specified reader or buffer.
       * @param reader Reader or buffer to decode from
       * @param [length] Message length if known beforehand
       * @returns MCQBlock2Answser
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decode(
        reader: $protobuf.Reader | Uint8Array,
        length?: number,
      ): sprout.phonicscourse.MCQBlock2Answser

      /**
       * Decodes a MCQBlock2Answser message from the specified reader or buffer, length delimited.
       * @param reader Reader or buffer to decode from
       * @returns MCQBlock2Answser
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decodeDelimited(
        reader: $protobuf.Reader | Uint8Array,
      ): sprout.phonicscourse.MCQBlock2Answser

      /**
       * Verifies a MCQBlock2Answser message.
       * @param message Plain object to verify
       * @returns `null` if valid, otherwise the reason why it is not
       */
      public static verify(message: { [k: string]: any }): string | null

      /**
       * Creates a MCQBlock2Answser message from a plain object. Also converts values to their respective internal types.
       * @param object Plain object
       * @returns MCQBlock2Answser
       */
      public static fromObject(object: {
        [k: string]: any
      }): sprout.phonicscourse.MCQBlock2Answser

      /**
       * Creates a plain object from a MCQBlock2Answser message. Also converts values to other types if specified.
       * @param message MCQBlock2Answser
       * @param [options] Conversion options
       * @returns Plain object
       */
      public static toObject(
        message: sprout.phonicscourse.MCQBlock2Answser,
        options?: $protobuf.IConversionOptions,
      ): { [k: string]: any }

      /**
       * Converts this MCQBlock2Answser to JSON.
       * @returns JSON object
       */
      public toJSON(): { [k: string]: any }
    }

    /** Properties of a MCQBlock3Answser. */
    interface IMCQBlock3Answser {
      /** MCQBlock3Answser mcqBlockAnswer */
      mcqBlockAnswer?: sprout.phonicscourse.IMCQBlockAnswser | null
    }

    /** Represents a MCQBlock3Answser. */
    class MCQBlock3Answser implements IMCQBlock3Answser {
      /**
       * Constructs a new MCQBlock3Answser.
       * @param [properties] Properties to set
       */
      constructor(properties?: sprout.phonicscourse.IMCQBlock3Answser)

      /** MCQBlock3Answser mcqBlockAnswer. */
      public mcqBlockAnswer?: sprout.phonicscourse.IMCQBlockAnswser | null

      /**
       * Creates a new MCQBlock3Answser instance using the specified properties.
       * @param [properties] Properties to set
       * @returns MCQBlock3Answser instance
       */
      public static create(
        properties?: sprout.phonicscourse.IMCQBlock3Answser,
      ): sprout.phonicscourse.MCQBlock3Answser

      /**
       * Encodes the specified MCQBlock3Answser message. Does not implicitly {@link sprout.phonicscourse.MCQBlock3Answser.verify|verify} messages.
       * @param message MCQBlock3Answser message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encode(
        message: sprout.phonicscourse.IMCQBlock3Answser,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Encodes the specified MCQBlock3Answser message, length delimited. Does not implicitly {@link sprout.phonicscourse.MCQBlock3Answser.verify|verify} messages.
       * @param message MCQBlock3Answser message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encodeDelimited(
        message: sprout.phonicscourse.IMCQBlock3Answser,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Decodes a MCQBlock3Answser message from the specified reader or buffer.
       * @param reader Reader or buffer to decode from
       * @param [length] Message length if known beforehand
       * @returns MCQBlock3Answser
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decode(
        reader: $protobuf.Reader | Uint8Array,
        length?: number,
      ): sprout.phonicscourse.MCQBlock3Answser

      /**
       * Decodes a MCQBlock3Answser message from the specified reader or buffer, length delimited.
       * @param reader Reader or buffer to decode from
       * @returns MCQBlock3Answser
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decodeDelimited(
        reader: $protobuf.Reader | Uint8Array,
      ): sprout.phonicscourse.MCQBlock3Answser

      /**
       * Verifies a MCQBlock3Answser message.
       * @param message Plain object to verify
       * @returns `null` if valid, otherwise the reason why it is not
       */
      public static verify(message: { [k: string]: any }): string | null

      /**
       * Creates a MCQBlock3Answser message from a plain object. Also converts values to their respective internal types.
       * @param object Plain object
       * @returns MCQBlock3Answser
       */
      public static fromObject(object: {
        [k: string]: any
      }): sprout.phonicscourse.MCQBlock3Answser

      /**
       * Creates a plain object from a MCQBlock3Answser message. Also converts values to other types if specified.
       * @param message MCQBlock3Answser
       * @param [options] Conversion options
       * @returns Plain object
       */
      public static toObject(
        message: sprout.phonicscourse.MCQBlock3Answser,
        options?: $protobuf.IConversionOptions,
      ): { [k: string]: any }

      /**
       * Converts this MCQBlock3Answser to JSON.
       * @returns JSON object
       */
      public toJSON(): { [k: string]: any }
    }

    /** Properties of a RWBlockAnswer. */
    interface IRWBlockAnswer {
      /** RWBlockAnswer correct */
      correct?: boolean | null

      /** RWBlockAnswer score */
      score?: number[] | null
    }

    /** Represents a RWBlockAnswer. */
    class RWBlockAnswer implements IRWBlockAnswer {
      /**
       * Constructs a new RWBlockAnswer.
       * @param [properties] Properties to set
       */
      constructor(properties?: sprout.phonicscourse.IRWBlockAnswer)

      /** RWBlockAnswer correct. */
      public correct: boolean

      /** RWBlockAnswer score. */
      public score: number[]

      /**
       * Creates a new RWBlockAnswer instance using the specified properties.
       * @param [properties] Properties to set
       * @returns RWBlockAnswer instance
       */
      public static create(
        properties?: sprout.phonicscourse.IRWBlockAnswer,
      ): sprout.phonicscourse.RWBlockAnswer

      /**
       * Encodes the specified RWBlockAnswer message. Does not implicitly {@link sprout.phonicscourse.RWBlockAnswer.verify|verify} messages.
       * @param message RWBlockAnswer message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encode(
        message: sprout.phonicscourse.IRWBlockAnswer,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Encodes the specified RWBlockAnswer message, length delimited. Does not implicitly {@link sprout.phonicscourse.RWBlockAnswer.verify|verify} messages.
       * @param message RWBlockAnswer message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encodeDelimited(
        message: sprout.phonicscourse.IRWBlockAnswer,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Decodes a RWBlockAnswer message from the specified reader or buffer.
       * @param reader Reader or buffer to decode from
       * @param [length] Message length if known beforehand
       * @returns RWBlockAnswer
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decode(
        reader: $protobuf.Reader | Uint8Array,
        length?: number,
      ): sprout.phonicscourse.RWBlockAnswer

      /**
       * Decodes a RWBlockAnswer message from the specified reader or buffer, length delimited.
       * @param reader Reader or buffer to decode from
       * @returns RWBlockAnswer
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decodeDelimited(
        reader: $protobuf.Reader | Uint8Array,
      ): sprout.phonicscourse.RWBlockAnswer

      /**
       * Verifies a RWBlockAnswer message.
       * @param message Plain object to verify
       * @returns `null` if valid, otherwise the reason why it is not
       */
      public static verify(message: { [k: string]: any }): string | null

      /**
       * Creates a RWBlockAnswer message from a plain object. Also converts values to their respective internal types.
       * @param object Plain object
       * @returns RWBlockAnswer
       */
      public static fromObject(object: {
        [k: string]: any
      }): sprout.phonicscourse.RWBlockAnswer

      /**
       * Creates a plain object from a RWBlockAnswer message. Also converts values to other types if specified.
       * @param message RWBlockAnswer
       * @param [options] Conversion options
       * @returns Plain object
       */
      public static toObject(
        message: sprout.phonicscourse.RWBlockAnswer,
        options?: $protobuf.IConversionOptions,
      ): { [k: string]: any }

      /**
       * Converts this RWBlockAnswer to JSON.
       * @returns JSON object
       */
      public toJSON(): { [k: string]: any }
    }

    /** Properties of a RWBlock1Answer. */
    interface IRWBlock1Answer {
      /** RWBlock1Answer rwBlockAnswer */
      rwBlockAnswer?: sprout.phonicscourse.IRWBlockAnswer | null
    }

    /** Represents a RWBlock1Answer. */
    class RWBlock1Answer implements IRWBlock1Answer {
      /**
       * Constructs a new RWBlock1Answer.
       * @param [properties] Properties to set
       */
      constructor(properties?: sprout.phonicscourse.IRWBlock1Answer)

      /** RWBlock1Answer rwBlockAnswer. */
      public rwBlockAnswer?: sprout.phonicscourse.IRWBlockAnswer | null

      /**
       * Creates a new RWBlock1Answer instance using the specified properties.
       * @param [properties] Properties to set
       * @returns RWBlock1Answer instance
       */
      public static create(
        properties?: sprout.phonicscourse.IRWBlock1Answer,
      ): sprout.phonicscourse.RWBlock1Answer

      /**
       * Encodes the specified RWBlock1Answer message. Does not implicitly {@link sprout.phonicscourse.RWBlock1Answer.verify|verify} messages.
       * @param message RWBlock1Answer message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encode(
        message: sprout.phonicscourse.IRWBlock1Answer,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Encodes the specified RWBlock1Answer message, length delimited. Does not implicitly {@link sprout.phonicscourse.RWBlock1Answer.verify|verify} messages.
       * @param message RWBlock1Answer message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encodeDelimited(
        message: sprout.phonicscourse.IRWBlock1Answer,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Decodes a RWBlock1Answer message from the specified reader or buffer.
       * @param reader Reader or buffer to decode from
       * @param [length] Message length if known beforehand
       * @returns RWBlock1Answer
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decode(
        reader: $protobuf.Reader | Uint8Array,
        length?: number,
      ): sprout.phonicscourse.RWBlock1Answer

      /**
       * Decodes a RWBlock1Answer message from the specified reader or buffer, length delimited.
       * @param reader Reader or buffer to decode from
       * @returns RWBlock1Answer
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decodeDelimited(
        reader: $protobuf.Reader | Uint8Array,
      ): sprout.phonicscourse.RWBlock1Answer

      /**
       * Verifies a RWBlock1Answer message.
       * @param message Plain object to verify
       * @returns `null` if valid, otherwise the reason why it is not
       */
      public static verify(message: { [k: string]: any }): string | null

      /**
       * Creates a RWBlock1Answer message from a plain object. Also converts values to their respective internal types.
       * @param object Plain object
       * @returns RWBlock1Answer
       */
      public static fromObject(object: {
        [k: string]: any
      }): sprout.phonicscourse.RWBlock1Answer

      /**
       * Creates a plain object from a RWBlock1Answer message. Also converts values to other types if specified.
       * @param message RWBlock1Answer
       * @param [options] Conversion options
       * @returns Plain object
       */
      public static toObject(
        message: sprout.phonicscourse.RWBlock1Answer,
        options?: $protobuf.IConversionOptions,
      ): { [k: string]: any }

      /**
       * Converts this RWBlock1Answer to JSON.
       * @returns JSON object
       */
      public toJSON(): { [k: string]: any }
    }

    /** Properties of a RWBlock2Answer. */
    interface IRWBlock2Answer {
      /** RWBlock2Answer rwBlockAnswer */
      rwBlockAnswer?: sprout.phonicscourse.IRWBlockAnswer | null
    }

    /** Represents a RWBlock2Answer. */
    class RWBlock2Answer implements IRWBlock2Answer {
      /**
       * Constructs a new RWBlock2Answer.
       * @param [properties] Properties to set
       */
      constructor(properties?: sprout.phonicscourse.IRWBlock2Answer)

      /** RWBlock2Answer rwBlockAnswer. */
      public rwBlockAnswer?: sprout.phonicscourse.IRWBlockAnswer | null

      /**
       * Creates a new RWBlock2Answer instance using the specified properties.
       * @param [properties] Properties to set
       * @returns RWBlock2Answer instance
       */
      public static create(
        properties?: sprout.phonicscourse.IRWBlock2Answer,
      ): sprout.phonicscourse.RWBlock2Answer

      /**
       * Encodes the specified RWBlock2Answer message. Does not implicitly {@link sprout.phonicscourse.RWBlock2Answer.verify|verify} messages.
       * @param message RWBlock2Answer message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encode(
        message: sprout.phonicscourse.IRWBlock2Answer,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Encodes the specified RWBlock2Answer message, length delimited. Does not implicitly {@link sprout.phonicscourse.RWBlock2Answer.verify|verify} messages.
       * @param message RWBlock2Answer message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encodeDelimited(
        message: sprout.phonicscourse.IRWBlock2Answer,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Decodes a RWBlock2Answer message from the specified reader or buffer.
       * @param reader Reader or buffer to decode from
       * @param [length] Message length if known beforehand
       * @returns RWBlock2Answer
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decode(
        reader: $protobuf.Reader | Uint8Array,
        length?: number,
      ): sprout.phonicscourse.RWBlock2Answer

      /**
       * Decodes a RWBlock2Answer message from the specified reader or buffer, length delimited.
       * @param reader Reader or buffer to decode from
       * @returns RWBlock2Answer
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decodeDelimited(
        reader: $protobuf.Reader | Uint8Array,
      ): sprout.phonicscourse.RWBlock2Answer

      /**
       * Verifies a RWBlock2Answer message.
       * @param message Plain object to verify
       * @returns `null` if valid, otherwise the reason why it is not
       */
      public static verify(message: { [k: string]: any }): string | null

      /**
       * Creates a RWBlock2Answer message from a plain object. Also converts values to their respective internal types.
       * @param object Plain object
       * @returns RWBlock2Answer
       */
      public static fromObject(object: {
        [k: string]: any
      }): sprout.phonicscourse.RWBlock2Answer

      /**
       * Creates a plain object from a RWBlock2Answer message. Also converts values to other types if specified.
       * @param message RWBlock2Answer
       * @param [options] Conversion options
       * @returns Plain object
       */
      public static toObject(
        message: sprout.phonicscourse.RWBlock2Answer,
        options?: $protobuf.IConversionOptions,
      ): { [k: string]: any }

      /**
       * Converts this RWBlock2Answer to JSON.
       * @returns JSON object
       */
      public toJSON(): { [k: string]: any }
    }

    /** Properties of a RSBlockAnswer. */
    interface IRSBlockAnswer {
      /** RSBlockAnswer score */
      score?: number | null

      /** RSBlockAnswer badWordsCnt */
      badWordsCnt?: number | null

      /** RSBlockAnswer totalWordsCnt */
      totalWordsCnt?: number | null
    }

    /** Represents a RSBlockAnswer. */
    class RSBlockAnswer implements IRSBlockAnswer {
      /**
       * Constructs a new RSBlockAnswer.
       * @param [properties] Properties to set
       */
      constructor(properties?: sprout.phonicscourse.IRSBlockAnswer)

      /** RSBlockAnswer score. */
      public score: number

      /** RSBlockAnswer badWordsCnt. */
      public badWordsCnt: number

      /** RSBlockAnswer totalWordsCnt. */
      public totalWordsCnt: number

      /**
       * Creates a new RSBlockAnswer instance using the specified properties.
       * @param [properties] Properties to set
       * @returns RSBlockAnswer instance
       */
      public static create(
        properties?: sprout.phonicscourse.IRSBlockAnswer,
      ): sprout.phonicscourse.RSBlockAnswer

      /**
       * Encodes the specified RSBlockAnswer message. Does not implicitly {@link sprout.phonicscourse.RSBlockAnswer.verify|verify} messages.
       * @param message RSBlockAnswer message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encode(
        message: sprout.phonicscourse.IRSBlockAnswer,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Encodes the specified RSBlockAnswer message, length delimited. Does not implicitly {@link sprout.phonicscourse.RSBlockAnswer.verify|verify} messages.
       * @param message RSBlockAnswer message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encodeDelimited(
        message: sprout.phonicscourse.IRSBlockAnswer,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Decodes a RSBlockAnswer message from the specified reader or buffer.
       * @param reader Reader or buffer to decode from
       * @param [length] Message length if known beforehand
       * @returns RSBlockAnswer
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decode(
        reader: $protobuf.Reader | Uint8Array,
        length?: number,
      ): sprout.phonicscourse.RSBlockAnswer

      /**
       * Decodes a RSBlockAnswer message from the specified reader or buffer, length delimited.
       * @param reader Reader or buffer to decode from
       * @returns RSBlockAnswer
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decodeDelimited(
        reader: $protobuf.Reader | Uint8Array,
      ): sprout.phonicscourse.RSBlockAnswer

      /**
       * Verifies a RSBlockAnswer message.
       * @param message Plain object to verify
       * @returns `null` if valid, otherwise the reason why it is not
       */
      public static verify(message: { [k: string]: any }): string | null

      /**
       * Creates a RSBlockAnswer message from a plain object. Also converts values to their respective internal types.
       * @param object Plain object
       * @returns RSBlockAnswer
       */
      public static fromObject(object: {
        [k: string]: any
      }): sprout.phonicscourse.RSBlockAnswer

      /**
       * Creates a plain object from a RSBlockAnswer message. Also converts values to other types if specified.
       * @param message RSBlockAnswer
       * @param [options] Conversion options
       * @returns Plain object
       */
      public static toObject(
        message: sprout.phonicscourse.RSBlockAnswer,
        options?: $protobuf.IConversionOptions,
      ): { [k: string]: any }

      /**
       * Converts this RSBlockAnswer to JSON.
       * @returns JSON object
       */
      public toJSON(): { [k: string]: any }
    }

    /** Properties of a RSBlock1Answer. */
    interface IRSBlock1Answer {
      /** RSBlock1Answer rsBlockAnswer */
      rsBlockAnswer?: sprout.phonicscourse.IRSBlockAnswer | null
    }

    /** Represents a RSBlock1Answer. */
    class RSBlock1Answer implements IRSBlock1Answer {
      /**
       * Constructs a new RSBlock1Answer.
       * @param [properties] Properties to set
       */
      constructor(properties?: sprout.phonicscourse.IRSBlock1Answer)

      /** RSBlock1Answer rsBlockAnswer. */
      public rsBlockAnswer?: sprout.phonicscourse.IRSBlockAnswer | null

      /**
       * Creates a new RSBlock1Answer instance using the specified properties.
       * @param [properties] Properties to set
       * @returns RSBlock1Answer instance
       */
      public static create(
        properties?: sprout.phonicscourse.IRSBlock1Answer,
      ): sprout.phonicscourse.RSBlock1Answer

      /**
       * Encodes the specified RSBlock1Answer message. Does not implicitly {@link sprout.phonicscourse.RSBlock1Answer.verify|verify} messages.
       * @param message RSBlock1Answer message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encode(
        message: sprout.phonicscourse.IRSBlock1Answer,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Encodes the specified RSBlock1Answer message, length delimited. Does not implicitly {@link sprout.phonicscourse.RSBlock1Answer.verify|verify} messages.
       * @param message RSBlock1Answer message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encodeDelimited(
        message: sprout.phonicscourse.IRSBlock1Answer,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Decodes a RSBlock1Answer message from the specified reader or buffer.
       * @param reader Reader or buffer to decode from
       * @param [length] Message length if known beforehand
       * @returns RSBlock1Answer
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decode(
        reader: $protobuf.Reader | Uint8Array,
        length?: number,
      ): sprout.phonicscourse.RSBlock1Answer

      /**
       * Decodes a RSBlock1Answer message from the specified reader or buffer, length delimited.
       * @param reader Reader or buffer to decode from
       * @returns RSBlock1Answer
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decodeDelimited(
        reader: $protobuf.Reader | Uint8Array,
      ): sprout.phonicscourse.RSBlock1Answer

      /**
       * Verifies a RSBlock1Answer message.
       * @param message Plain object to verify
       * @returns `null` if valid, otherwise the reason why it is not
       */
      public static verify(message: { [k: string]: any }): string | null

      /**
       * Creates a RSBlock1Answer message from a plain object. Also converts values to their respective internal types.
       * @param object Plain object
       * @returns RSBlock1Answer
       */
      public static fromObject(object: {
        [k: string]: any
      }): sprout.phonicscourse.RSBlock1Answer

      /**
       * Creates a plain object from a RSBlock1Answer message. Also converts values to other types if specified.
       * @param message RSBlock1Answer
       * @param [options] Conversion options
       * @returns Plain object
       */
      public static toObject(
        message: sprout.phonicscourse.RSBlock1Answer,
        options?: $protobuf.IConversionOptions,
      ): { [k: string]: any }

      /**
       * Converts this RSBlock1Answer to JSON.
       * @returns JSON object
       */
      public toJSON(): { [k: string]: any }
    }

    /** Properties of a ROBlockAnswer. */
    interface IROBlockAnswer {
      /** ROBlockAnswer score */
      score?: number[] | null
    }

    /** Represents a ROBlockAnswer. */
    class ROBlockAnswer implements IROBlockAnswer {
      /**
       * Constructs a new ROBlockAnswer.
       * @param [properties] Properties to set
       */
      constructor(properties?: sprout.phonicscourse.IROBlockAnswer)

      /** ROBlockAnswer score. */
      public score: number[]

      /**
       * Creates a new ROBlockAnswer instance using the specified properties.
       * @param [properties] Properties to set
       * @returns ROBlockAnswer instance
       */
      public static create(
        properties?: sprout.phonicscourse.IROBlockAnswer,
      ): sprout.phonicscourse.ROBlockAnswer

      /**
       * Encodes the specified ROBlockAnswer message. Does not implicitly {@link sprout.phonicscourse.ROBlockAnswer.verify|verify} messages.
       * @param message ROBlockAnswer message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encode(
        message: sprout.phonicscourse.IROBlockAnswer,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Encodes the specified ROBlockAnswer message, length delimited. Does not implicitly {@link sprout.phonicscourse.ROBlockAnswer.verify|verify} messages.
       * @param message ROBlockAnswer message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encodeDelimited(
        message: sprout.phonicscourse.IROBlockAnswer,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Decodes a ROBlockAnswer message from the specified reader or buffer.
       * @param reader Reader or buffer to decode from
       * @param [length] Message length if known beforehand
       * @returns ROBlockAnswer
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decode(
        reader: $protobuf.Reader | Uint8Array,
        length?: number,
      ): sprout.phonicscourse.ROBlockAnswer

      /**
       * Decodes a ROBlockAnswer message from the specified reader or buffer, length delimited.
       * @param reader Reader or buffer to decode from
       * @returns ROBlockAnswer
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decodeDelimited(
        reader: $protobuf.Reader | Uint8Array,
      ): sprout.phonicscourse.ROBlockAnswer

      /**
       * Verifies a ROBlockAnswer message.
       * @param message Plain object to verify
       * @returns `null` if valid, otherwise the reason why it is not
       */
      public static verify(message: { [k: string]: any }): string | null

      /**
       * Creates a ROBlockAnswer message from a plain object. Also converts values to their respective internal types.
       * @param object Plain object
       * @returns ROBlockAnswer
       */
      public static fromObject(object: {
        [k: string]: any
      }): sprout.phonicscourse.ROBlockAnswer

      /**
       * Creates a plain object from a ROBlockAnswer message. Also converts values to other types if specified.
       * @param message ROBlockAnswer
       * @param [options] Conversion options
       * @returns Plain object
       */
      public static toObject(
        message: sprout.phonicscourse.ROBlockAnswer,
        options?: $protobuf.IConversionOptions,
      ): { [k: string]: any }

      /**
       * Converts this ROBlockAnswer to JSON.
       * @returns JSON object
       */
      public toJSON(): { [k: string]: any }
    }

    /** Properties of a ROBlock1Answer. */
    interface IROBlock1Answer {
      /** ROBlock1Answer roBlockAnswer */
      roBlockAnswer?: sprout.phonicscourse.IROBlockAnswer | null
    }

    /** Represents a ROBlock1Answer. */
    class ROBlock1Answer implements IROBlock1Answer {
      /**
       * Constructs a new ROBlock1Answer.
       * @param [properties] Properties to set
       */
      constructor(properties?: sprout.phonicscourse.IROBlock1Answer)

      /** ROBlock1Answer roBlockAnswer. */
      public roBlockAnswer?: sprout.phonicscourse.IROBlockAnswer | null

      /**
       * Creates a new ROBlock1Answer instance using the specified properties.
       * @param [properties] Properties to set
       * @returns ROBlock1Answer instance
       */
      public static create(
        properties?: sprout.phonicscourse.IROBlock1Answer,
      ): sprout.phonicscourse.ROBlock1Answer

      /**
       * Encodes the specified ROBlock1Answer message. Does not implicitly {@link sprout.phonicscourse.ROBlock1Answer.verify|verify} messages.
       * @param message ROBlock1Answer message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encode(
        message: sprout.phonicscourse.IROBlock1Answer,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Encodes the specified ROBlock1Answer message, length delimited. Does not implicitly {@link sprout.phonicscourse.ROBlock1Answer.verify|verify} messages.
       * @param message ROBlock1Answer message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encodeDelimited(
        message: sprout.phonicscourse.IROBlock1Answer,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Decodes a ROBlock1Answer message from the specified reader or buffer.
       * @param reader Reader or buffer to decode from
       * @param [length] Message length if known beforehand
       * @returns ROBlock1Answer
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decode(
        reader: $protobuf.Reader | Uint8Array,
        length?: number,
      ): sprout.phonicscourse.ROBlock1Answer

      /**
       * Decodes a ROBlock1Answer message from the specified reader or buffer, length delimited.
       * @param reader Reader or buffer to decode from
       * @returns ROBlock1Answer
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decodeDelimited(
        reader: $protobuf.Reader | Uint8Array,
      ): sprout.phonicscourse.ROBlock1Answer

      /**
       * Verifies a ROBlock1Answer message.
       * @param message Plain object to verify
       * @returns `null` if valid, otherwise the reason why it is not
       */
      public static verify(message: { [k: string]: any }): string | null

      /**
       * Creates a ROBlock1Answer message from a plain object. Also converts values to their respective internal types.
       * @param object Plain object
       * @returns ROBlock1Answer
       */
      public static fromObject(object: {
        [k: string]: any
      }): sprout.phonicscourse.ROBlock1Answer

      /**
       * Creates a plain object from a ROBlock1Answer message. Also converts values to other types if specified.
       * @param message ROBlock1Answer
       * @param [options] Conversion options
       * @returns Plain object
       */
      public static toObject(
        message: sprout.phonicscourse.ROBlock1Answer,
        options?: $protobuf.IConversionOptions,
      ): { [k: string]: any }

      /**
       * Converts this ROBlock1Answer to JSON.
       * @returns JSON object
       */
      public toJSON(): { [k: string]: any }
    }
  }

  /** Namespace aixclass. */
  namespace aixclass {
    /** Properties of a ContentReq. */
    interface IContentReq {
      /** ContentReq ready */
      ready?: sprout.aixclass.IReady | null

      /** ContentReq streamAnswer */
      streamAnswer?: sprout.aixcourse.IAIXStreamAnswer | null

      /** ContentReq quit */
      quit?: sprout.aixclass.IQuit | null

      /** ContentReq pong */
      pong?: sprout.aixclass.IPong | null

      /** ContentReq segmentPhaseAck */
      segmentPhaseAck?: sprout.aixclass.ISegmentPhaseACK | null
    }

    /** Represents a ContentReq. */
    class ContentReq implements IContentReq {
      /**
       * Constructs a new ContentReq.
       * @param [properties] Properties to set
       */
      constructor(properties?: sprout.aixclass.IContentReq)

      /** ContentReq ready. */
      public ready?: sprout.aixclass.IReady | null

      /** ContentReq streamAnswer. */
      public streamAnswer?: sprout.aixcourse.IAIXStreamAnswer | null

      /** ContentReq quit. */
      public quit?: sprout.aixclass.IQuit | null

      /** ContentReq pong. */
      public pong?: sprout.aixclass.IPong | null

      /** ContentReq segmentPhaseAck. */
      public segmentPhaseAck?: sprout.aixclass.ISegmentPhaseACK | null

      /** ContentReq contentOneof. */
      public contentOneof?:
        | 'ready'
        | 'streamAnswer'
        | 'quit'
        | 'pong'
        | 'segmentPhaseAck'

      /**
       * Creates a new ContentReq instance using the specified properties.
       * @param [properties] Properties to set
       * @returns ContentReq instance
       */
      public static create(
        properties?: sprout.aixclass.IContentReq,
      ): sprout.aixclass.ContentReq

      /**
       * Encodes the specified ContentReq message. Does not implicitly {@link sprout.aixclass.ContentReq.verify|verify} messages.
       * @param message ContentReq message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encode(
        message: sprout.aixclass.IContentReq,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Encodes the specified ContentReq message, length delimited. Does not implicitly {@link sprout.aixclass.ContentReq.verify|verify} messages.
       * @param message ContentReq message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encodeDelimited(
        message: sprout.aixclass.IContentReq,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Decodes a ContentReq message from the specified reader or buffer.
       * @param reader Reader or buffer to decode from
       * @param [length] Message length if known beforehand
       * @returns ContentReq
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decode(
        reader: $protobuf.Reader | Uint8Array,
        length?: number,
      ): sprout.aixclass.ContentReq

      /**
       * Decodes a ContentReq message from the specified reader or buffer, length delimited.
       * @param reader Reader or buffer to decode from
       * @returns ContentReq
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decodeDelimited(
        reader: $protobuf.Reader | Uint8Array,
      ): sprout.aixclass.ContentReq

      /**
       * Verifies a ContentReq message.
       * @param message Plain object to verify
       * @returns `null` if valid, otherwise the reason why it is not
       */
      public static verify(message: { [k: string]: any }): string | null

      /**
       * Creates a ContentReq message from a plain object. Also converts values to their respective internal types.
       * @param object Plain object
       * @returns ContentReq
       */
      public static fromObject(object: {
        [k: string]: any
      }): sprout.aixclass.ContentReq

      /**
       * Creates a plain object from a ContentReq message. Also converts values to other types if specified.
       * @param message ContentReq
       * @param [options] Conversion options
       * @returns Plain object
       */
      public static toObject(
        message: sprout.aixclass.ContentReq,
        options?: $protobuf.IConversionOptions,
      ): { [k: string]: any }

      /**
       * Converts this ContentReq to JSON.
       * @returns JSON object
       */
      public toJSON(): { [k: string]: any }
    }

    /** Properties of a ContentResp. */
    interface IContentResp {
      /** ContentResp error */
      error?: google.rpc.IStatus | null

      /** ContentResp roomInfo */
      roomInfo?: sprout.aixclass.IRoomInfo | null

      /** ContentResp segment */
      segment?: sprout.aixclass.ISegmentPhase | null

      /** ContentResp recover */
      recover?: sprout.aixclass.IRecoverSegmentPhases | null

      /** ContentResp classEnd */
      classEnd?: sprout.aixclass.IClassEnd | null

      /** ContentResp ping */
      ping?: sprout.aixclass.IPing | null

      /** ContentResp roomClosed */
      roomClosed?: sprout.aixclass.IRoomClosed | null

      /** ContentResp quitAck */
      quitAck?: sprout.aixclass.IQuitACK | null
    }

    /** Represents a ContentResp. */
    class ContentResp implements IContentResp {
      /**
       * Constructs a new ContentResp.
       * @param [properties] Properties to set
       */
      constructor(properties?: sprout.aixclass.IContentResp)

      /** ContentResp error. */
      public error?: google.rpc.IStatus | null

      /** ContentResp roomInfo. */
      public roomInfo?: sprout.aixclass.IRoomInfo | null

      /** ContentResp segment. */
      public segment?: sprout.aixclass.ISegmentPhase | null

      /** ContentResp recover. */
      public recover?: sprout.aixclass.IRecoverSegmentPhases | null

      /** ContentResp classEnd. */
      public classEnd?: sprout.aixclass.IClassEnd | null

      /** ContentResp ping. */
      public ping?: sprout.aixclass.IPing | null

      /** ContentResp roomClosed. */
      public roomClosed?: sprout.aixclass.IRoomClosed | null

      /** ContentResp quitAck. */
      public quitAck?: sprout.aixclass.IQuitACK | null

      /** ContentResp contentOneof. */
      public contentOneof?:
        | 'error'
        | 'roomInfo'
        | 'segment'
        | 'recover'
        | 'classEnd'
        | 'ping'
        | 'roomClosed'
        | 'quitAck'

      /**
       * Creates a new ContentResp instance using the specified properties.
       * @param [properties] Properties to set
       * @returns ContentResp instance
       */
      public static create(
        properties?: sprout.aixclass.IContentResp,
      ): sprout.aixclass.ContentResp

      /**
       * Encodes the specified ContentResp message. Does not implicitly {@link sprout.aixclass.ContentResp.verify|verify} messages.
       * @param message ContentResp message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encode(
        message: sprout.aixclass.IContentResp,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Encodes the specified ContentResp message, length delimited. Does not implicitly {@link sprout.aixclass.ContentResp.verify|verify} messages.
       * @param message ContentResp message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encodeDelimited(
        message: sprout.aixclass.IContentResp,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Decodes a ContentResp message from the specified reader or buffer.
       * @param reader Reader or buffer to decode from
       * @param [length] Message length if known beforehand
       * @returns ContentResp
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decode(
        reader: $protobuf.Reader | Uint8Array,
        length?: number,
      ): sprout.aixclass.ContentResp

      /**
       * Decodes a ContentResp message from the specified reader or buffer, length delimited.
       * @param reader Reader or buffer to decode from
       * @returns ContentResp
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decodeDelimited(
        reader: $protobuf.Reader | Uint8Array,
      ): sprout.aixclass.ContentResp

      /**
       * Verifies a ContentResp message.
       * @param message Plain object to verify
       * @returns `null` if valid, otherwise the reason why it is not
       */
      public static verify(message: { [k: string]: any }): string | null

      /**
       * Creates a ContentResp message from a plain object. Also converts values to their respective internal types.
       * @param object Plain object
       * @returns ContentResp
       */
      public static fromObject(object: {
        [k: string]: any
      }): sprout.aixclass.ContentResp

      /**
       * Creates a plain object from a ContentResp message. Also converts values to other types if specified.
       * @param message ContentResp
       * @param [options] Conversion options
       * @returns Plain object
       */
      public static toObject(
        message: sprout.aixclass.ContentResp,
        options?: $protobuf.IConversionOptions,
      ): { [k: string]: any }

      /**
       * Converts this ContentResp to JSON.
       * @returns JSON object
       */
      public toJSON(): { [k: string]: any }
    }

    /** Properties of a ClassEnd. */
    interface IClassEnd {}

    /** Represents a ClassEnd. */
    class ClassEnd implements IClassEnd {
      /**
       * Constructs a new ClassEnd.
       * @param [properties] Properties to set
       */
      constructor(properties?: sprout.aixclass.IClassEnd)

      /**
       * Creates a new ClassEnd instance using the specified properties.
       * @param [properties] Properties to set
       * @returns ClassEnd instance
       */
      public static create(
        properties?: sprout.aixclass.IClassEnd,
      ): sprout.aixclass.ClassEnd

      /**
       * Encodes the specified ClassEnd message. Does not implicitly {@link sprout.aixclass.ClassEnd.verify|verify} messages.
       * @param message ClassEnd message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encode(
        message: sprout.aixclass.IClassEnd,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Encodes the specified ClassEnd message, length delimited. Does not implicitly {@link sprout.aixclass.ClassEnd.verify|verify} messages.
       * @param message ClassEnd message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encodeDelimited(
        message: sprout.aixclass.IClassEnd,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Decodes a ClassEnd message from the specified reader or buffer.
       * @param reader Reader or buffer to decode from
       * @param [length] Message length if known beforehand
       * @returns ClassEnd
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decode(
        reader: $protobuf.Reader | Uint8Array,
        length?: number,
      ): sprout.aixclass.ClassEnd

      /**
       * Decodes a ClassEnd message from the specified reader or buffer, length delimited.
       * @param reader Reader or buffer to decode from
       * @returns ClassEnd
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decodeDelimited(
        reader: $protobuf.Reader | Uint8Array,
      ): sprout.aixclass.ClassEnd

      /**
       * Verifies a ClassEnd message.
       * @param message Plain object to verify
       * @returns `null` if valid, otherwise the reason why it is not
       */
      public static verify(message: { [k: string]: any }): string | null

      /**
       * Creates a ClassEnd message from a plain object. Also converts values to their respective internal types.
       * @param object Plain object
       * @returns ClassEnd
       */
      public static fromObject(object: {
        [k: string]: any
      }): sprout.aixclass.ClassEnd

      /**
       * Creates a plain object from a ClassEnd message. Also converts values to other types if specified.
       * @param message ClassEnd
       * @param [options] Conversion options
       * @returns Plain object
       */
      public static toObject(
        message: sprout.aixclass.ClassEnd,
        options?: $protobuf.IConversionOptions,
      ): { [k: string]: any }

      /**
       * Converts this ClassEnd to JSON.
       * @returns JSON object
       */
      public toJSON(): { [k: string]: any }
    }

    /** Properties of a RecoverSegmentPhases. */
    interface IRecoverSegmentPhases {
      /** RecoverSegmentPhases timestampUsec */
      timestampUsec?: number | Long | null

      /** RecoverSegmentPhases latestSegmentPhase */
      latestSegmentPhase?: sprout.aixclass.ISegmentPhase | null

      /** RecoverSegmentPhases awardSegmentPhase */
      awardSegmentPhase?: sprout.aixclass.ISegmentPhase | null

      /** RecoverSegmentPhases latestTeacherStreamLayout */
      latestTeacherStreamLayout?: sprout.aixclass.ISegmentPhase | null

      /** RecoverSegmentPhases musicStart */
      musicStart?: sprout.aixclass.ISegmentPhase | null
    }

    /** Represents a RecoverSegmentPhases. */
    class RecoverSegmentPhases implements IRecoverSegmentPhases {
      /**
       * Constructs a new RecoverSegmentPhases.
       * @param [properties] Properties to set
       */
      constructor(properties?: sprout.aixclass.IRecoverSegmentPhases)

      /** RecoverSegmentPhases timestampUsec. */
      public timestampUsec: number | Long

      /** RecoverSegmentPhases latestSegmentPhase. */
      public latestSegmentPhase?: sprout.aixclass.ISegmentPhase | null

      /** RecoverSegmentPhases awardSegmentPhase. */
      public awardSegmentPhase?: sprout.aixclass.ISegmentPhase | null

      /** RecoverSegmentPhases latestTeacherStreamLayout. */
      public latestTeacherStreamLayout?: sprout.aixclass.ISegmentPhase | null

      /** RecoverSegmentPhases musicStart. */
      public musicStart?: sprout.aixclass.ISegmentPhase | null

      /**
       * Creates a new RecoverSegmentPhases instance using the specified properties.
       * @param [properties] Properties to set
       * @returns RecoverSegmentPhases instance
       */
      public static create(
        properties?: sprout.aixclass.IRecoverSegmentPhases,
      ): sprout.aixclass.RecoverSegmentPhases

      /**
       * Encodes the specified RecoverSegmentPhases message. Does not implicitly {@link sprout.aixclass.RecoverSegmentPhases.verify|verify} messages.
       * @param message RecoverSegmentPhases message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encode(
        message: sprout.aixclass.IRecoverSegmentPhases,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Encodes the specified RecoverSegmentPhases message, length delimited. Does not implicitly {@link sprout.aixclass.RecoverSegmentPhases.verify|verify} messages.
       * @param message RecoverSegmentPhases message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encodeDelimited(
        message: sprout.aixclass.IRecoverSegmentPhases,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Decodes a RecoverSegmentPhases message from the specified reader or buffer.
       * @param reader Reader or buffer to decode from
       * @param [length] Message length if known beforehand
       * @returns RecoverSegmentPhases
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decode(
        reader: $protobuf.Reader | Uint8Array,
        length?: number,
      ): sprout.aixclass.RecoverSegmentPhases

      /**
       * Decodes a RecoverSegmentPhases message from the specified reader or buffer, length delimited.
       * @param reader Reader or buffer to decode from
       * @returns RecoverSegmentPhases
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decodeDelimited(
        reader: $protobuf.Reader | Uint8Array,
      ): sprout.aixclass.RecoverSegmentPhases

      /**
       * Verifies a RecoverSegmentPhases message.
       * @param message Plain object to verify
       * @returns `null` if valid, otherwise the reason why it is not
       */
      public static verify(message: { [k: string]: any }): string | null

      /**
       * Creates a RecoverSegmentPhases message from a plain object. Also converts values to their respective internal types.
       * @param object Plain object
       * @returns RecoverSegmentPhases
       */
      public static fromObject(object: {
        [k: string]: any
      }): sprout.aixclass.RecoverSegmentPhases

      /**
       * Creates a plain object from a RecoverSegmentPhases message. Also converts values to other types if specified.
       * @param message RecoverSegmentPhases
       * @param [options] Conversion options
       * @returns Plain object
       */
      public static toObject(
        message: sprout.aixclass.RecoverSegmentPhases,
        options?: $protobuf.IConversionOptions,
      ): { [k: string]: any }

      /**
       * Converts this RecoverSegmentPhases to JSON.
       * @returns JSON object
       */
      public toJSON(): { [k: string]: any }
    }

    /** Properties of a Ready. */
    interface IReady {}

    /** Represents a Ready. */
    class Ready implements IReady {
      /**
       * Constructs a new Ready.
       * @param [properties] Properties to set
       */
      constructor(properties?: sprout.aixclass.IReady)

      /**
       * Creates a new Ready instance using the specified properties.
       * @param [properties] Properties to set
       * @returns Ready instance
       */
      public static create(
        properties?: sprout.aixclass.IReady,
      ): sprout.aixclass.Ready

      /**
       * Encodes the specified Ready message. Does not implicitly {@link sprout.aixclass.Ready.verify|verify} messages.
       * @param message Ready message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encode(
        message: sprout.aixclass.IReady,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Encodes the specified Ready message, length delimited. Does not implicitly {@link sprout.aixclass.Ready.verify|verify} messages.
       * @param message Ready message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encodeDelimited(
        message: sprout.aixclass.IReady,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Decodes a Ready message from the specified reader or buffer.
       * @param reader Reader or buffer to decode from
       * @param [length] Message length if known beforehand
       * @returns Ready
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decode(
        reader: $protobuf.Reader | Uint8Array,
        length?: number,
      ): sprout.aixclass.Ready

      /**
       * Decodes a Ready message from the specified reader or buffer, length delimited.
       * @param reader Reader or buffer to decode from
       * @returns Ready
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decodeDelimited(
        reader: $protobuf.Reader | Uint8Array,
      ): sprout.aixclass.Ready

      /**
       * Verifies a Ready message.
       * @param message Plain object to verify
       * @returns `null` if valid, otherwise the reason why it is not
       */
      public static verify(message: { [k: string]: any }): string | null

      /**
       * Creates a Ready message from a plain object. Also converts values to their respective internal types.
       * @param object Plain object
       * @returns Ready
       */
      public static fromObject(object: {
        [k: string]: any
      }): sprout.aixclass.Ready

      /**
       * Creates a plain object from a Ready message. Also converts values to other types if specified.
       * @param message Ready
       * @param [options] Conversion options
       * @returns Plain object
       */
      public static toObject(
        message: sprout.aixclass.Ready,
        options?: $protobuf.IConversionOptions,
      ): { [k: string]: any }

      /**
       * Converts this Ready to JSON.
       * @returns JSON object
       */
      public toJSON(): { [k: string]: any }
    }

    /** Properties of a RoomInfo. */
    interface IRoomInfo {
      /** RoomInfo roomId */
      roomId?: string | null

      /** RoomInfo streamId */
      streamId?: string | null

      /** RoomInfo teacherThirdPartyUserId */
      teacherThirdPartyUserId?: string | null

      /** RoomInfo teacherStreamId */
      teacherStreamId?: string | null
    }

    /** Represents a RoomInfo. */
    class RoomInfo implements IRoomInfo {
      /**
       * Constructs a new RoomInfo.
       * @param [properties] Properties to set
       */
      constructor(properties?: sprout.aixclass.IRoomInfo)

      /** RoomInfo roomId. */
      public roomId: string

      /** RoomInfo streamId. */
      public streamId: string

      /** RoomInfo teacherThirdPartyUserId. */
      public teacherThirdPartyUserId: string

      /** RoomInfo teacherStreamId. */
      public teacherStreamId: string

      /**
       * Creates a new RoomInfo instance using the specified properties.
       * @param [properties] Properties to set
       * @returns RoomInfo instance
       */
      public static create(
        properties?: sprout.aixclass.IRoomInfo,
      ): sprout.aixclass.RoomInfo

      /**
       * Encodes the specified RoomInfo message. Does not implicitly {@link sprout.aixclass.RoomInfo.verify|verify} messages.
       * @param message RoomInfo message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encode(
        message: sprout.aixclass.IRoomInfo,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Encodes the specified RoomInfo message, length delimited. Does not implicitly {@link sprout.aixclass.RoomInfo.verify|verify} messages.
       * @param message RoomInfo message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encodeDelimited(
        message: sprout.aixclass.IRoomInfo,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Decodes a RoomInfo message from the specified reader or buffer.
       * @param reader Reader or buffer to decode from
       * @param [length] Message length if known beforehand
       * @returns RoomInfo
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decode(
        reader: $protobuf.Reader | Uint8Array,
        length?: number,
      ): sprout.aixclass.RoomInfo

      /**
       * Decodes a RoomInfo message from the specified reader or buffer, length delimited.
       * @param reader Reader or buffer to decode from
       * @returns RoomInfo
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decodeDelimited(
        reader: $protobuf.Reader | Uint8Array,
      ): sprout.aixclass.RoomInfo

      /**
       * Verifies a RoomInfo message.
       * @param message Plain object to verify
       * @returns `null` if valid, otherwise the reason why it is not
       */
      public static verify(message: { [k: string]: any }): string | null

      /**
       * Creates a RoomInfo message from a plain object. Also converts values to their respective internal types.
       * @param object Plain object
       * @returns RoomInfo
       */
      public static fromObject(object: {
        [k: string]: any
      }): sprout.aixclass.RoomInfo

      /**
       * Creates a plain object from a RoomInfo message. Also converts values to other types if specified.
       * @param message RoomInfo
       * @param [options] Conversion options
       * @returns Plain object
       */
      public static toObject(
        message: sprout.aixclass.RoomInfo,
        options?: $protobuf.IConversionOptions,
      ): { [k: string]: any }

      /**
       * Converts this RoomInfo to JSON.
       * @returns JSON object
       */
      public toJSON(): { [k: string]: any }
    }

    /** Properties of a Quit. */
    interface IQuit {}

    /** Represents a Quit. */
    class Quit implements IQuit {
      /**
       * Constructs a new Quit.
       * @param [properties] Properties to set
       */
      constructor(properties?: sprout.aixclass.IQuit)

      /**
       * Creates a new Quit instance using the specified properties.
       * @param [properties] Properties to set
       * @returns Quit instance
       */
      public static create(
        properties?: sprout.aixclass.IQuit,
      ): sprout.aixclass.Quit

      /**
       * Encodes the specified Quit message. Does not implicitly {@link sprout.aixclass.Quit.verify|verify} messages.
       * @param message Quit message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encode(
        message: sprout.aixclass.IQuit,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Encodes the specified Quit message, length delimited. Does not implicitly {@link sprout.aixclass.Quit.verify|verify} messages.
       * @param message Quit message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encodeDelimited(
        message: sprout.aixclass.IQuit,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Decodes a Quit message from the specified reader or buffer.
       * @param reader Reader or buffer to decode from
       * @param [length] Message length if known beforehand
       * @returns Quit
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decode(
        reader: $protobuf.Reader | Uint8Array,
        length?: number,
      ): sprout.aixclass.Quit

      /**
       * Decodes a Quit message from the specified reader or buffer, length delimited.
       * @param reader Reader or buffer to decode from
       * @returns Quit
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decodeDelimited(
        reader: $protobuf.Reader | Uint8Array,
      ): sprout.aixclass.Quit

      /**
       * Verifies a Quit message.
       * @param message Plain object to verify
       * @returns `null` if valid, otherwise the reason why it is not
       */
      public static verify(message: { [k: string]: any }): string | null

      /**
       * Creates a Quit message from a plain object. Also converts values to their respective internal types.
       * @param object Plain object
       * @returns Quit
       */
      public static fromObject(object: {
        [k: string]: any
      }): sprout.aixclass.Quit

      /**
       * Creates a plain object from a Quit message. Also converts values to other types if specified.
       * @param message Quit
       * @param [options] Conversion options
       * @returns Plain object
       */
      public static toObject(
        message: sprout.aixclass.Quit,
        options?: $protobuf.IConversionOptions,
      ): { [k: string]: any }

      /**
       * Converts this Quit to JSON.
       * @returns JSON object
       */
      public toJSON(): { [k: string]: any }
    }

    /** Properties of a Ping. */
    interface IPing {
      /** Ping timestampUsec */
      timestampUsec?: number | Long | null
    }

    /** Represents a Ping. */
    class Ping implements IPing {
      /**
       * Constructs a new Ping.
       * @param [properties] Properties to set
       */
      constructor(properties?: sprout.aixclass.IPing)

      /** Ping timestampUsec. */
      public timestampUsec: number | Long

      /**
       * Creates a new Ping instance using the specified properties.
       * @param [properties] Properties to set
       * @returns Ping instance
       */
      public static create(
        properties?: sprout.aixclass.IPing,
      ): sprout.aixclass.Ping

      /**
       * Encodes the specified Ping message. Does not implicitly {@link sprout.aixclass.Ping.verify|verify} messages.
       * @param message Ping message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encode(
        message: sprout.aixclass.IPing,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Encodes the specified Ping message, length delimited. Does not implicitly {@link sprout.aixclass.Ping.verify|verify} messages.
       * @param message Ping message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encodeDelimited(
        message: sprout.aixclass.IPing,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Decodes a Ping message from the specified reader or buffer.
       * @param reader Reader or buffer to decode from
       * @param [length] Message length if known beforehand
       * @returns Ping
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decode(
        reader: $protobuf.Reader | Uint8Array,
        length?: number,
      ): sprout.aixclass.Ping

      /**
       * Decodes a Ping message from the specified reader or buffer, length delimited.
       * @param reader Reader or buffer to decode from
       * @returns Ping
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decodeDelimited(
        reader: $protobuf.Reader | Uint8Array,
      ): sprout.aixclass.Ping

      /**
       * Verifies a Ping message.
       * @param message Plain object to verify
       * @returns `null` if valid, otherwise the reason why it is not
       */
      public static verify(message: { [k: string]: any }): string | null

      /**
       * Creates a Ping message from a plain object. Also converts values to their respective internal types.
       * @param object Plain object
       * @returns Ping
       */
      public static fromObject(object: {
        [k: string]: any
      }): sprout.aixclass.Ping

      /**
       * Creates a plain object from a Ping message. Also converts values to other types if specified.
       * @param message Ping
       * @param [options] Conversion options
       * @returns Plain object
       */
      public static toObject(
        message: sprout.aixclass.Ping,
        options?: $protobuf.IConversionOptions,
      ): { [k: string]: any }

      /**
       * Converts this Ping to JSON.
       * @returns JSON object
       */
      public toJSON(): { [k: string]: any }
    }

    /** Properties of a Pong. */
    interface IPong {
      /** Pong serverTimestampUsec */
      serverTimestampUsec?: number | Long | null
    }

    /** Represents a Pong. */
    class Pong implements IPong {
      /**
       * Constructs a new Pong.
       * @param [properties] Properties to set
       */
      constructor(properties?: sprout.aixclass.IPong)

      /** Pong serverTimestampUsec. */
      public serverTimestampUsec: number | Long

      /**
       * Creates a new Pong instance using the specified properties.
       * @param [properties] Properties to set
       * @returns Pong instance
       */
      public static create(
        properties?: sprout.aixclass.IPong,
      ): sprout.aixclass.Pong

      /**
       * Encodes the specified Pong message. Does not implicitly {@link sprout.aixclass.Pong.verify|verify} messages.
       * @param message Pong message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encode(
        message: sprout.aixclass.IPong,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Encodes the specified Pong message, length delimited. Does not implicitly {@link sprout.aixclass.Pong.verify|verify} messages.
       * @param message Pong message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encodeDelimited(
        message: sprout.aixclass.IPong,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Decodes a Pong message from the specified reader or buffer.
       * @param reader Reader or buffer to decode from
       * @param [length] Message length if known beforehand
       * @returns Pong
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decode(
        reader: $protobuf.Reader | Uint8Array,
        length?: number,
      ): sprout.aixclass.Pong

      /**
       * Decodes a Pong message from the specified reader or buffer, length delimited.
       * @param reader Reader or buffer to decode from
       * @returns Pong
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decodeDelimited(
        reader: $protobuf.Reader | Uint8Array,
      ): sprout.aixclass.Pong

      /**
       * Verifies a Pong message.
       * @param message Plain object to verify
       * @returns `null` if valid, otherwise the reason why it is not
       */
      public static verify(message: { [k: string]: any }): string | null

      /**
       * Creates a Pong message from a plain object. Also converts values to their respective internal types.
       * @param object Plain object
       * @returns Pong
       */
      public static fromObject(object: {
        [k: string]: any
      }): sprout.aixclass.Pong

      /**
       * Creates a plain object from a Pong message. Also converts values to other types if specified.
       * @param message Pong
       * @param [options] Conversion options
       * @returns Plain object
       */
      public static toObject(
        message: sprout.aixclass.Pong,
        options?: $protobuf.IConversionOptions,
      ): { [k: string]: any }

      /**
       * Converts this Pong to JSON.
       * @returns JSON object
       */
      public toJSON(): { [k: string]: any }
    }

    /** Properties of a SegmentPhaseACK. */
    interface ISegmentPhaseACK {
      /** SegmentPhaseACK serverTimestampUsec */
      serverTimestampUsec?: number | Long | null
    }

    /** Represents a SegmentPhaseACK. */
    class SegmentPhaseACK implements ISegmentPhaseACK {
      /**
       * Constructs a new SegmentPhaseACK.
       * @param [properties] Properties to set
       */
      constructor(properties?: sprout.aixclass.ISegmentPhaseACK)

      /** SegmentPhaseACK serverTimestampUsec. */
      public serverTimestampUsec: number | Long

      /**
       * Creates a new SegmentPhaseACK instance using the specified properties.
       * @param [properties] Properties to set
       * @returns SegmentPhaseACK instance
       */
      public static create(
        properties?: sprout.aixclass.ISegmentPhaseACK,
      ): sprout.aixclass.SegmentPhaseACK

      /**
       * Encodes the specified SegmentPhaseACK message. Does not implicitly {@link sprout.aixclass.SegmentPhaseACK.verify|verify} messages.
       * @param message SegmentPhaseACK message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encode(
        message: sprout.aixclass.ISegmentPhaseACK,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Encodes the specified SegmentPhaseACK message, length delimited. Does not implicitly {@link sprout.aixclass.SegmentPhaseACK.verify|verify} messages.
       * @param message SegmentPhaseACK message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encodeDelimited(
        message: sprout.aixclass.ISegmentPhaseACK,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Decodes a SegmentPhaseACK message from the specified reader or buffer.
       * @param reader Reader or buffer to decode from
       * @param [length] Message length if known beforehand
       * @returns SegmentPhaseACK
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decode(
        reader: $protobuf.Reader | Uint8Array,
        length?: number,
      ): sprout.aixclass.SegmentPhaseACK

      /**
       * Decodes a SegmentPhaseACK message from the specified reader or buffer, length delimited.
       * @param reader Reader or buffer to decode from
       * @returns SegmentPhaseACK
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decodeDelimited(
        reader: $protobuf.Reader | Uint8Array,
      ): sprout.aixclass.SegmentPhaseACK

      /**
       * Verifies a SegmentPhaseACK message.
       * @param message Plain object to verify
       * @returns `null` if valid, otherwise the reason why it is not
       */
      public static verify(message: { [k: string]: any }): string | null

      /**
       * Creates a SegmentPhaseACK message from a plain object. Also converts values to their respective internal types.
       * @param object Plain object
       * @returns SegmentPhaseACK
       */
      public static fromObject(object: {
        [k: string]: any
      }): sprout.aixclass.SegmentPhaseACK

      /**
       * Creates a plain object from a SegmentPhaseACK message. Also converts values to other types if specified.
       * @param message SegmentPhaseACK
       * @param [options] Conversion options
       * @returns Plain object
       */
      public static toObject(
        message: sprout.aixclass.SegmentPhaseACK,
        options?: $protobuf.IConversionOptions,
      ): { [k: string]: any }

      /**
       * Converts this SegmentPhaseACK to JSON.
       * @returns JSON object
       */
      public toJSON(): { [k: string]: any }
    }

    /** Properties of a RoomClosed. */
    interface IRoomClosed {}

    /** Represents a RoomClosed. */
    class RoomClosed implements IRoomClosed {
      /**
       * Constructs a new RoomClosed.
       * @param [properties] Properties to set
       */
      constructor(properties?: sprout.aixclass.IRoomClosed)

      /**
       * Creates a new RoomClosed instance using the specified properties.
       * @param [properties] Properties to set
       * @returns RoomClosed instance
       */
      public static create(
        properties?: sprout.aixclass.IRoomClosed,
      ): sprout.aixclass.RoomClosed

      /**
       * Encodes the specified RoomClosed message. Does not implicitly {@link sprout.aixclass.RoomClosed.verify|verify} messages.
       * @param message RoomClosed message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encode(
        message: sprout.aixclass.IRoomClosed,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Encodes the specified RoomClosed message, length delimited. Does not implicitly {@link sprout.aixclass.RoomClosed.verify|verify} messages.
       * @param message RoomClosed message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encodeDelimited(
        message: sprout.aixclass.IRoomClosed,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Decodes a RoomClosed message from the specified reader or buffer.
       * @param reader Reader or buffer to decode from
       * @param [length] Message length if known beforehand
       * @returns RoomClosed
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decode(
        reader: $protobuf.Reader | Uint8Array,
        length?: number,
      ): sprout.aixclass.RoomClosed

      /**
       * Decodes a RoomClosed message from the specified reader or buffer, length delimited.
       * @param reader Reader or buffer to decode from
       * @returns RoomClosed
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decodeDelimited(
        reader: $protobuf.Reader | Uint8Array,
      ): sprout.aixclass.RoomClosed

      /**
       * Verifies a RoomClosed message.
       * @param message Plain object to verify
       * @returns `null` if valid, otherwise the reason why it is not
       */
      public static verify(message: { [k: string]: any }): string | null

      /**
       * Creates a RoomClosed message from a plain object. Also converts values to their respective internal types.
       * @param object Plain object
       * @returns RoomClosed
       */
      public static fromObject(object: {
        [k: string]: any
      }): sprout.aixclass.RoomClosed

      /**
       * Creates a plain object from a RoomClosed message. Also converts values to other types if specified.
       * @param message RoomClosed
       * @param [options] Conversion options
       * @returns Plain object
       */
      public static toObject(
        message: sprout.aixclass.RoomClosed,
        options?: $protobuf.IConversionOptions,
      ): { [k: string]: any }

      /**
       * Converts this RoomClosed to JSON.
       * @returns JSON object
       */
      public toJSON(): { [k: string]: any }
    }

    /** Properties of a QuitACK. */
    interface IQuitACK {
      /** QuitACK classFinished */
      classFinished?: boolean | null
    }

    /** Represents a QuitACK. */
    class QuitACK implements IQuitACK {
      /**
       * Constructs a new QuitACK.
       * @param [properties] Properties to set
       */
      constructor(properties?: sprout.aixclass.IQuitACK)

      /** QuitACK classFinished. */
      public classFinished: boolean

      /**
       * Creates a new QuitACK instance using the specified properties.
       * @param [properties] Properties to set
       * @returns QuitACK instance
       */
      public static create(
        properties?: sprout.aixclass.IQuitACK,
      ): sprout.aixclass.QuitACK

      /**
       * Encodes the specified QuitACK message. Does not implicitly {@link sprout.aixclass.QuitACK.verify|verify} messages.
       * @param message QuitACK message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encode(
        message: sprout.aixclass.IQuitACK,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Encodes the specified QuitACK message, length delimited. Does not implicitly {@link sprout.aixclass.QuitACK.verify|verify} messages.
       * @param message QuitACK message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encodeDelimited(
        message: sprout.aixclass.IQuitACK,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Decodes a QuitACK message from the specified reader or buffer.
       * @param reader Reader or buffer to decode from
       * @param [length] Message length if known beforehand
       * @returns QuitACK
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decode(
        reader: $protobuf.Reader | Uint8Array,
        length?: number,
      ): sprout.aixclass.QuitACK

      /**
       * Decodes a QuitACK message from the specified reader or buffer, length delimited.
       * @param reader Reader or buffer to decode from
       * @returns QuitACK
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decodeDelimited(
        reader: $protobuf.Reader | Uint8Array,
      ): sprout.aixclass.QuitACK

      /**
       * Verifies a QuitACK message.
       * @param message Plain object to verify
       * @returns `null` if valid, otherwise the reason why it is not
       */
      public static verify(message: { [k: string]: any }): string | null

      /**
       * Creates a QuitACK message from a plain object. Also converts values to their respective internal types.
       * @param object Plain object
       * @returns QuitACK
       */
      public static fromObject(object: {
        [k: string]: any
      }): sprout.aixclass.QuitACK

      /**
       * Creates a plain object from a QuitACK message. Also converts values to other types if specified.
       * @param message QuitACK
       * @param [options] Conversion options
       * @returns Plain object
       */
      public static toObject(
        message: sprout.aixclass.QuitACK,
        options?: $protobuf.IConversionOptions,
      ): { [k: string]: any }

      /**
       * Converts this QuitACK to JSON.
       * @returns JSON object
       */
      public toJSON(): { [k: string]: any }
    }

    /** Properties of a SegmentPhase. */
    interface ISegmentPhase {
      /** SegmentPhase segmentId */
      segmentId?: number | Long | null

      /** SegmentPhase timestampUsec */
      timestampUsec?: number | Long | null

      /** SegmentPhase segmentStart */
      segmentStart?: sprout.aixclass.ISegmentStart | null

      /** SegmentPhase segmentEnd */
      segmentEnd?: sprout.aixclass.ISegmentEnd | null

      /** SegmentPhase activityGroupPhase */
      activityGroupPhase?: sprout.aixclass.IActivityGroupPhase | null
    }

    /** Represents a SegmentPhase. */
    class SegmentPhase implements ISegmentPhase {
      /**
       * Constructs a new SegmentPhase.
       * @param [properties] Properties to set
       */
      constructor(properties?: sprout.aixclass.ISegmentPhase)

      /** SegmentPhase segmentId. */
      public segmentId: number | Long

      /** SegmentPhase timestampUsec. */
      public timestampUsec: number | Long

      /** SegmentPhase segmentStart. */
      public segmentStart?: sprout.aixclass.ISegmentStart | null

      /** SegmentPhase segmentEnd. */
      public segmentEnd?: sprout.aixclass.ISegmentEnd | null

      /** SegmentPhase activityGroupPhase. */
      public activityGroupPhase?: sprout.aixclass.IActivityGroupPhase | null

      /** SegmentPhase actionOneof. */
      public actionOneof?: 'segmentStart' | 'segmentEnd' | 'activityGroupPhase'

      /**
       * Creates a new SegmentPhase instance using the specified properties.
       * @param [properties] Properties to set
       * @returns SegmentPhase instance
       */
      public static create(
        properties?: sprout.aixclass.ISegmentPhase,
      ): sprout.aixclass.SegmentPhase

      /**
       * Encodes the specified SegmentPhase message. Does not implicitly {@link sprout.aixclass.SegmentPhase.verify|verify} messages.
       * @param message SegmentPhase message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encode(
        message: sprout.aixclass.ISegmentPhase,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Encodes the specified SegmentPhase message, length delimited. Does not implicitly {@link sprout.aixclass.SegmentPhase.verify|verify} messages.
       * @param message SegmentPhase message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encodeDelimited(
        message: sprout.aixclass.ISegmentPhase,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Decodes a SegmentPhase message from the specified reader or buffer.
       * @param reader Reader or buffer to decode from
       * @param [length] Message length if known beforehand
       * @returns SegmentPhase
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decode(
        reader: $protobuf.Reader | Uint8Array,
        length?: number,
      ): sprout.aixclass.SegmentPhase

      /**
       * Decodes a SegmentPhase message from the specified reader or buffer, length delimited.
       * @param reader Reader or buffer to decode from
       * @returns SegmentPhase
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decodeDelimited(
        reader: $protobuf.Reader | Uint8Array,
      ): sprout.aixclass.SegmentPhase

      /**
       * Verifies a SegmentPhase message.
       * @param message Plain object to verify
       * @returns `null` if valid, otherwise the reason why it is not
       */
      public static verify(message: { [k: string]: any }): string | null

      /**
       * Creates a SegmentPhase message from a plain object. Also converts values to their respective internal types.
       * @param object Plain object
       * @returns SegmentPhase
       */
      public static fromObject(object: {
        [k: string]: any
      }): sprout.aixclass.SegmentPhase

      /**
       * Creates a plain object from a SegmentPhase message. Also converts values to other types if specified.
       * @param message SegmentPhase
       * @param [options] Conversion options
       * @returns Plain object
       */
      public static toObject(
        message: sprout.aixclass.SegmentPhase,
        options?: $protobuf.IConversionOptions,
      ): { [k: string]: any }

      /**
       * Converts this SegmentPhase to JSON.
       * @returns JSON object
       */
      public toJSON(): { [k: string]: any }
    }

    /** Properties of a SegmentStart. */
    interface ISegmentStart {}

    /** Represents a SegmentStart. */
    class SegmentStart implements ISegmentStart {
      /**
       * Constructs a new SegmentStart.
       * @param [properties] Properties to set
       */
      constructor(properties?: sprout.aixclass.ISegmentStart)

      /**
       * Creates a new SegmentStart instance using the specified properties.
       * @param [properties] Properties to set
       * @returns SegmentStart instance
       */
      public static create(
        properties?: sprout.aixclass.ISegmentStart,
      ): sprout.aixclass.SegmentStart

      /**
       * Encodes the specified SegmentStart message. Does not implicitly {@link sprout.aixclass.SegmentStart.verify|verify} messages.
       * @param message SegmentStart message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encode(
        message: sprout.aixclass.ISegmentStart,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Encodes the specified SegmentStart message, length delimited. Does not implicitly {@link sprout.aixclass.SegmentStart.verify|verify} messages.
       * @param message SegmentStart message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encodeDelimited(
        message: sprout.aixclass.ISegmentStart,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Decodes a SegmentStart message from the specified reader or buffer.
       * @param reader Reader or buffer to decode from
       * @param [length] Message length if known beforehand
       * @returns SegmentStart
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decode(
        reader: $protobuf.Reader | Uint8Array,
        length?: number,
      ): sprout.aixclass.SegmentStart

      /**
       * Decodes a SegmentStart message from the specified reader or buffer, length delimited.
       * @param reader Reader or buffer to decode from
       * @returns SegmentStart
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decodeDelimited(
        reader: $protobuf.Reader | Uint8Array,
      ): sprout.aixclass.SegmentStart

      /**
       * Verifies a SegmentStart message.
       * @param message Plain object to verify
       * @returns `null` if valid, otherwise the reason why it is not
       */
      public static verify(message: { [k: string]: any }): string | null

      /**
       * Creates a SegmentStart message from a plain object. Also converts values to their respective internal types.
       * @param object Plain object
       * @returns SegmentStart
       */
      public static fromObject(object: {
        [k: string]: any
      }): sprout.aixclass.SegmentStart

      /**
       * Creates a plain object from a SegmentStart message. Also converts values to other types if specified.
       * @param message SegmentStart
       * @param [options] Conversion options
       * @returns Plain object
       */
      public static toObject(
        message: sprout.aixclass.SegmentStart,
        options?: $protobuf.IConversionOptions,
      ): { [k: string]: any }

      /**
       * Converts this SegmentStart to JSON.
       * @returns JSON object
       */
      public toJSON(): { [k: string]: any }
    }

    /** Properties of a SegmentEnd. */
    interface ISegmentEnd {}

    /** Represents a SegmentEnd. */
    class SegmentEnd implements ISegmentEnd {
      /**
       * Constructs a new SegmentEnd.
       * @param [properties] Properties to set
       */
      constructor(properties?: sprout.aixclass.ISegmentEnd)

      /**
       * Creates a new SegmentEnd instance using the specified properties.
       * @param [properties] Properties to set
       * @returns SegmentEnd instance
       */
      public static create(
        properties?: sprout.aixclass.ISegmentEnd,
      ): sprout.aixclass.SegmentEnd

      /**
       * Encodes the specified SegmentEnd message. Does not implicitly {@link sprout.aixclass.SegmentEnd.verify|verify} messages.
       * @param message SegmentEnd message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encode(
        message: sprout.aixclass.ISegmentEnd,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Encodes the specified SegmentEnd message, length delimited. Does not implicitly {@link sprout.aixclass.SegmentEnd.verify|verify} messages.
       * @param message SegmentEnd message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encodeDelimited(
        message: sprout.aixclass.ISegmentEnd,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Decodes a SegmentEnd message from the specified reader or buffer.
       * @param reader Reader or buffer to decode from
       * @param [length] Message length if known beforehand
       * @returns SegmentEnd
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decode(
        reader: $protobuf.Reader | Uint8Array,
        length?: number,
      ): sprout.aixclass.SegmentEnd

      /**
       * Decodes a SegmentEnd message from the specified reader or buffer, length delimited.
       * @param reader Reader or buffer to decode from
       * @returns SegmentEnd
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decodeDelimited(
        reader: $protobuf.Reader | Uint8Array,
      ): sprout.aixclass.SegmentEnd

      /**
       * Verifies a SegmentEnd message.
       * @param message Plain object to verify
       * @returns `null` if valid, otherwise the reason why it is not
       */
      public static verify(message: { [k: string]: any }): string | null

      /**
       * Creates a SegmentEnd message from a plain object. Also converts values to their respective internal types.
       * @param object Plain object
       * @returns SegmentEnd
       */
      public static fromObject(object: {
        [k: string]: any
      }): sprout.aixclass.SegmentEnd

      /**
       * Creates a plain object from a SegmentEnd message. Also converts values to other types if specified.
       * @param message SegmentEnd
       * @param [options] Conversion options
       * @returns Plain object
       */
      public static toObject(
        message: sprout.aixclass.SegmentEnd,
        options?: $protobuf.IConversionOptions,
      ): { [k: string]: any }

      /**
       * Converts this SegmentEnd to JSON.
       * @returns JSON object
       */
      public toJSON(): { [k: string]: any }
    }

    /** Properties of an ActivityGroupPhase. */
    interface IActivityGroupPhase {
      /** ActivityGroupPhase activityGroupId */
      activityGroupId?: number | Long | null

      /** ActivityGroupPhase startPhase */
      startPhase?: sprout.aixclass.IActivityGroupPhaseStart | null

      /** ActivityGroupPhase endPhase */
      endPhase?: sprout.aixclass.IActivityGroupPhaseEnd | null

      /** ActivityGroupPhase activityPhase */
      activityPhase?: sprout.aixclass.IActivityPhase | null
    }

    /** Represents an ActivityGroupPhase. */
    class ActivityGroupPhase implements IActivityGroupPhase {
      /**
       * Constructs a new ActivityGroupPhase.
       * @param [properties] Properties to set
       */
      constructor(properties?: sprout.aixclass.IActivityGroupPhase)

      /** ActivityGroupPhase activityGroupId. */
      public activityGroupId: number | Long

      /** ActivityGroupPhase startPhase. */
      public startPhase?: sprout.aixclass.IActivityGroupPhaseStart | null

      /** ActivityGroupPhase endPhase. */
      public endPhase?: sprout.aixclass.IActivityGroupPhaseEnd | null

      /** ActivityGroupPhase activityPhase. */
      public activityPhase?: sprout.aixclass.IActivityPhase | null

      /** ActivityGroupPhase actionOneof. */
      public actionOneof?: 'startPhase' | 'endPhase' | 'activityPhase'

      /**
       * Creates a new ActivityGroupPhase instance using the specified properties.
       * @param [properties] Properties to set
       * @returns ActivityGroupPhase instance
       */
      public static create(
        properties?: sprout.aixclass.IActivityGroupPhase,
      ): sprout.aixclass.ActivityGroupPhase

      /**
       * Encodes the specified ActivityGroupPhase message. Does not implicitly {@link sprout.aixclass.ActivityGroupPhase.verify|verify} messages.
       * @param message ActivityGroupPhase message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encode(
        message: sprout.aixclass.IActivityGroupPhase,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Encodes the specified ActivityGroupPhase message, length delimited. Does not implicitly {@link sprout.aixclass.ActivityGroupPhase.verify|verify} messages.
       * @param message ActivityGroupPhase message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encodeDelimited(
        message: sprout.aixclass.IActivityGroupPhase,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Decodes an ActivityGroupPhase message from the specified reader or buffer.
       * @param reader Reader or buffer to decode from
       * @param [length] Message length if known beforehand
       * @returns ActivityGroupPhase
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decode(
        reader: $protobuf.Reader | Uint8Array,
        length?: number,
      ): sprout.aixclass.ActivityGroupPhase

      /**
       * Decodes an ActivityGroupPhase message from the specified reader or buffer, length delimited.
       * @param reader Reader or buffer to decode from
       * @returns ActivityGroupPhase
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decodeDelimited(
        reader: $protobuf.Reader | Uint8Array,
      ): sprout.aixclass.ActivityGroupPhase

      /**
       * Verifies an ActivityGroupPhase message.
       * @param message Plain object to verify
       * @returns `null` if valid, otherwise the reason why it is not
       */
      public static verify(message: { [k: string]: any }): string | null

      /**
       * Creates an ActivityGroupPhase message from a plain object. Also converts values to their respective internal types.
       * @param object Plain object
       * @returns ActivityGroupPhase
       */
      public static fromObject(object: {
        [k: string]: any
      }): sprout.aixclass.ActivityGroupPhase

      /**
       * Creates a plain object from an ActivityGroupPhase message. Also converts values to other types if specified.
       * @param message ActivityGroupPhase
       * @param [options] Conversion options
       * @returns Plain object
       */
      public static toObject(
        message: sprout.aixclass.ActivityGroupPhase,
        options?: $protobuf.IConversionOptions,
      ): { [k: string]: any }

      /**
       * Converts this ActivityGroupPhase to JSON.
       * @returns JSON object
       */
      public toJSON(): { [k: string]: any }
    }

    /** Properties of an ActivityGroupPhaseStart. */
    interface IActivityGroupPhaseStart {}

    /** Represents an ActivityGroupPhaseStart. */
    class ActivityGroupPhaseStart implements IActivityGroupPhaseStart {
      /**
       * Constructs a new ActivityGroupPhaseStart.
       * @param [properties] Properties to set
       */
      constructor(properties?: sprout.aixclass.IActivityGroupPhaseStart)

      /**
       * Creates a new ActivityGroupPhaseStart instance using the specified properties.
       * @param [properties] Properties to set
       * @returns ActivityGroupPhaseStart instance
       */
      public static create(
        properties?: sprout.aixclass.IActivityGroupPhaseStart,
      ): sprout.aixclass.ActivityGroupPhaseStart

      /**
       * Encodes the specified ActivityGroupPhaseStart message. Does not implicitly {@link sprout.aixclass.ActivityGroupPhaseStart.verify|verify} messages.
       * @param message ActivityGroupPhaseStart message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encode(
        message: sprout.aixclass.IActivityGroupPhaseStart,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Encodes the specified ActivityGroupPhaseStart message, length delimited. Does not implicitly {@link sprout.aixclass.ActivityGroupPhaseStart.verify|verify} messages.
       * @param message ActivityGroupPhaseStart message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encodeDelimited(
        message: sprout.aixclass.IActivityGroupPhaseStart,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Decodes an ActivityGroupPhaseStart message from the specified reader or buffer.
       * @param reader Reader or buffer to decode from
       * @param [length] Message length if known beforehand
       * @returns ActivityGroupPhaseStart
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decode(
        reader: $protobuf.Reader | Uint8Array,
        length?: number,
      ): sprout.aixclass.ActivityGroupPhaseStart

      /**
       * Decodes an ActivityGroupPhaseStart message from the specified reader or buffer, length delimited.
       * @param reader Reader or buffer to decode from
       * @returns ActivityGroupPhaseStart
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decodeDelimited(
        reader: $protobuf.Reader | Uint8Array,
      ): sprout.aixclass.ActivityGroupPhaseStart

      /**
       * Verifies an ActivityGroupPhaseStart message.
       * @param message Plain object to verify
       * @returns `null` if valid, otherwise the reason why it is not
       */
      public static verify(message: { [k: string]: any }): string | null

      /**
       * Creates an ActivityGroupPhaseStart message from a plain object. Also converts values to their respective internal types.
       * @param object Plain object
       * @returns ActivityGroupPhaseStart
       */
      public static fromObject(object: {
        [k: string]: any
      }): sprout.aixclass.ActivityGroupPhaseStart

      /**
       * Creates a plain object from an ActivityGroupPhaseStart message. Also converts values to other types if specified.
       * @param message ActivityGroupPhaseStart
       * @param [options] Conversion options
       * @returns Plain object
       */
      public static toObject(
        message: sprout.aixclass.ActivityGroupPhaseStart,
        options?: $protobuf.IConversionOptions,
      ): { [k: string]: any }

      /**
       * Converts this ActivityGroupPhaseStart to JSON.
       * @returns JSON object
       */
      public toJSON(): { [k: string]: any }
    }

    /** Properties of an ActivityGroupPhaseEnd. */
    interface IActivityGroupPhaseEnd {}

    /** Represents an ActivityGroupPhaseEnd. */
    class ActivityGroupPhaseEnd implements IActivityGroupPhaseEnd {
      /**
       * Constructs a new ActivityGroupPhaseEnd.
       * @param [properties] Properties to set
       */
      constructor(properties?: sprout.aixclass.IActivityGroupPhaseEnd)

      /**
       * Creates a new ActivityGroupPhaseEnd instance using the specified properties.
       * @param [properties] Properties to set
       * @returns ActivityGroupPhaseEnd instance
       */
      public static create(
        properties?: sprout.aixclass.IActivityGroupPhaseEnd,
      ): sprout.aixclass.ActivityGroupPhaseEnd

      /**
       * Encodes the specified ActivityGroupPhaseEnd message. Does not implicitly {@link sprout.aixclass.ActivityGroupPhaseEnd.verify|verify} messages.
       * @param message ActivityGroupPhaseEnd message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encode(
        message: sprout.aixclass.IActivityGroupPhaseEnd,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Encodes the specified ActivityGroupPhaseEnd message, length delimited. Does not implicitly {@link sprout.aixclass.ActivityGroupPhaseEnd.verify|verify} messages.
       * @param message ActivityGroupPhaseEnd message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encodeDelimited(
        message: sprout.aixclass.IActivityGroupPhaseEnd,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Decodes an ActivityGroupPhaseEnd message from the specified reader or buffer.
       * @param reader Reader or buffer to decode from
       * @param [length] Message length if known beforehand
       * @returns ActivityGroupPhaseEnd
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decode(
        reader: $protobuf.Reader | Uint8Array,
        length?: number,
      ): sprout.aixclass.ActivityGroupPhaseEnd

      /**
       * Decodes an ActivityGroupPhaseEnd message from the specified reader or buffer, length delimited.
       * @param reader Reader or buffer to decode from
       * @returns ActivityGroupPhaseEnd
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decodeDelimited(
        reader: $protobuf.Reader | Uint8Array,
      ): sprout.aixclass.ActivityGroupPhaseEnd

      /**
       * Verifies an ActivityGroupPhaseEnd message.
       * @param message Plain object to verify
       * @returns `null` if valid, otherwise the reason why it is not
       */
      public static verify(message: { [k: string]: any }): string | null

      /**
       * Creates an ActivityGroupPhaseEnd message from a plain object. Also converts values to their respective internal types.
       * @param object Plain object
       * @returns ActivityGroupPhaseEnd
       */
      public static fromObject(object: {
        [k: string]: any
      }): sprout.aixclass.ActivityGroupPhaseEnd

      /**
       * Creates a plain object from an ActivityGroupPhaseEnd message. Also converts values to other types if specified.
       * @param message ActivityGroupPhaseEnd
       * @param [options] Conversion options
       * @returns Plain object
       */
      public static toObject(
        message: sprout.aixclass.ActivityGroupPhaseEnd,
        options?: $protobuf.IConversionOptions,
      ): { [k: string]: any }

      /**
       * Converts this ActivityGroupPhaseEnd to JSON.
       * @returns JSON object
       */
      public toJSON(): { [k: string]: any }
    }

    /** Properties of an ActivityPhase. */
    interface IActivityPhase {
      /** ActivityPhase activityId */
      activityId?: number | Long | null

      /** ActivityPhase startPhase */
      startPhase?: sprout.aixclass.IActivityPhaseStart | null

      /** ActivityPhase endPhase */
      endPhase?: sprout.aixclass.IActivityPhaseEnd | null

      /** ActivityPhase partStartPhase */
      partStartPhase?: sprout.aixclass.IActivityPartPhaseStart | null

      /** ActivityPhase partEndPhase */
      partEndPhase?: sprout.aixclass.IActivityPartPhaseEnd | null

      /** ActivityPhase partPromptPhase */
      partPromptPhase?: sprout.aixclass.IActivityPartPhasePrompt | null

      /** ActivityPhase partWaitingPhase */
      partWaitingPhase?: sprout.aixclass.IActivityPartPhaseWaiting | null

      /** ActivityPhase partTrPhase */
      partTrPhase?: sprout.aixclass.IActivityPartPhaseTeachingResponse | null

      /** ActivityPhase awardPhase */
      awardPhase?: sprout.aixclass.IActivityPhaseAward | null

      /** ActivityPhase exchangePhase */
      exchangePhase?: sprout.aixclass.IActivityPhaseExchange | null

      /** ActivityPhase tts */
      tts?: sprout.aixclass.ITTS | null

      /** ActivityPhase leo */
      leo?: sprout.aixclass.ILeo | null

      /** ActivityPhase videoStart */
      videoStart?: sprout.aixclass.IVideoStart | null

      /** ActivityPhase teacherStreamLayout */
      teacherStreamLayout?: sprout.aixclass.ITeacherStreamLayout | null

      /** ActivityPhase musicStart */
      musicStart?: sprout.aixclass.IMusicStart | null

      /** ActivityPhase animatedAction */
      animatedAction?: sprout.aixclass.IAnimatedAction | null
    }

    /** Represents an ActivityPhase. */
    class ActivityPhase implements IActivityPhase {
      /**
       * Constructs a new ActivityPhase.
       * @param [properties] Properties to set
       */
      constructor(properties?: sprout.aixclass.IActivityPhase)

      /** ActivityPhase activityId. */
      public activityId: number | Long

      /** ActivityPhase startPhase. */
      public startPhase?: sprout.aixclass.IActivityPhaseStart | null

      /** ActivityPhase endPhase. */
      public endPhase?: sprout.aixclass.IActivityPhaseEnd | null

      /** ActivityPhase partStartPhase. */
      public partStartPhase?: sprout.aixclass.IActivityPartPhaseStart | null

      /** ActivityPhase partEndPhase. */
      public partEndPhase?: sprout.aixclass.IActivityPartPhaseEnd | null

      /** ActivityPhase partPromptPhase. */
      public partPromptPhase?: sprout.aixclass.IActivityPartPhasePrompt | null

      /** ActivityPhase partWaitingPhase. */
      public partWaitingPhase?: sprout.aixclass.IActivityPartPhaseWaiting | null

      /** ActivityPhase partTrPhase. */
      public partTrPhase?: sprout.aixclass.IActivityPartPhaseTeachingResponse | null

      /** ActivityPhase awardPhase. */
      public awardPhase?: sprout.aixclass.IActivityPhaseAward | null

      /** ActivityPhase exchangePhase. */
      public exchangePhase?: sprout.aixclass.IActivityPhaseExchange | null

      /** ActivityPhase tts. */
      public tts?: sprout.aixclass.ITTS | null

      /** ActivityPhase leo. */
      public leo?: sprout.aixclass.ILeo | null

      /** ActivityPhase videoStart. */
      public videoStart?: sprout.aixclass.IVideoStart | null

      /** ActivityPhase teacherStreamLayout. */
      public teacherStreamLayout?: sprout.aixclass.ITeacherStreamLayout | null

      /** ActivityPhase musicStart. */
      public musicStart?: sprout.aixclass.IMusicStart | null

      /** ActivityPhase animatedAction. */
      public animatedAction?: sprout.aixclass.IAnimatedAction | null

      /** ActivityPhase actionOneof. */
      public actionOneof?:
        | 'startPhase'
        | 'endPhase'
        | 'partStartPhase'
        | 'partEndPhase'
        | 'partPromptPhase'
        | 'partWaitingPhase'
        | 'partTrPhase'
        | 'awardPhase'
        | 'exchangePhase'
        | 'tts'
        | 'leo'
        | 'videoStart'
        | 'teacherStreamLayout'
        | 'musicStart'
        | 'animatedAction'

      /**
       * Creates a new ActivityPhase instance using the specified properties.
       * @param [properties] Properties to set
       * @returns ActivityPhase instance
       */
      public static create(
        properties?: sprout.aixclass.IActivityPhase,
      ): sprout.aixclass.ActivityPhase

      /**
       * Encodes the specified ActivityPhase message. Does not implicitly {@link sprout.aixclass.ActivityPhase.verify|verify} messages.
       * @param message ActivityPhase message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encode(
        message: sprout.aixclass.IActivityPhase,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Encodes the specified ActivityPhase message, length delimited. Does not implicitly {@link sprout.aixclass.ActivityPhase.verify|verify} messages.
       * @param message ActivityPhase message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encodeDelimited(
        message: sprout.aixclass.IActivityPhase,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Decodes an ActivityPhase message from the specified reader or buffer.
       * @param reader Reader or buffer to decode from
       * @param [length] Message length if known beforehand
       * @returns ActivityPhase
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decode(
        reader: $protobuf.Reader | Uint8Array,
        length?: number,
      ): sprout.aixclass.ActivityPhase

      /**
       * Decodes an ActivityPhase message from the specified reader or buffer, length delimited.
       * @param reader Reader or buffer to decode from
       * @returns ActivityPhase
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decodeDelimited(
        reader: $protobuf.Reader | Uint8Array,
      ): sprout.aixclass.ActivityPhase

      /**
       * Verifies an ActivityPhase message.
       * @param message Plain object to verify
       * @returns `null` if valid, otherwise the reason why it is not
       */
      public static verify(message: { [k: string]: any }): string | null

      /**
       * Creates an ActivityPhase message from a plain object. Also converts values to their respective internal types.
       * @param object Plain object
       * @returns ActivityPhase
       */
      public static fromObject(object: {
        [k: string]: any
      }): sprout.aixclass.ActivityPhase

      /**
       * Creates a plain object from an ActivityPhase message. Also converts values to other types if specified.
       * @param message ActivityPhase
       * @param [options] Conversion options
       * @returns Plain object
       */
      public static toObject(
        message: sprout.aixclass.ActivityPhase,
        options?: $protobuf.IConversionOptions,
      ): { [k: string]: any }

      /**
       * Converts this ActivityPhase to JSON.
       * @returns JSON object
       */
      public toJSON(): { [k: string]: any }
    }

    /** Properties of an ActivityPhaseStart. */
    interface IActivityPhaseStart {}

    /** Represents an ActivityPhaseStart. */
    class ActivityPhaseStart implements IActivityPhaseStart {
      /**
       * Constructs a new ActivityPhaseStart.
       * @param [properties] Properties to set
       */
      constructor(properties?: sprout.aixclass.IActivityPhaseStart)

      /**
       * Creates a new ActivityPhaseStart instance using the specified properties.
       * @param [properties] Properties to set
       * @returns ActivityPhaseStart instance
       */
      public static create(
        properties?: sprout.aixclass.IActivityPhaseStart,
      ): sprout.aixclass.ActivityPhaseStart

      /**
       * Encodes the specified ActivityPhaseStart message. Does not implicitly {@link sprout.aixclass.ActivityPhaseStart.verify|verify} messages.
       * @param message ActivityPhaseStart message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encode(
        message: sprout.aixclass.IActivityPhaseStart,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Encodes the specified ActivityPhaseStart message, length delimited. Does not implicitly {@link sprout.aixclass.ActivityPhaseStart.verify|verify} messages.
       * @param message ActivityPhaseStart message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encodeDelimited(
        message: sprout.aixclass.IActivityPhaseStart,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Decodes an ActivityPhaseStart message from the specified reader or buffer.
       * @param reader Reader or buffer to decode from
       * @param [length] Message length if known beforehand
       * @returns ActivityPhaseStart
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decode(
        reader: $protobuf.Reader | Uint8Array,
        length?: number,
      ): sprout.aixclass.ActivityPhaseStart

      /**
       * Decodes an ActivityPhaseStart message from the specified reader or buffer, length delimited.
       * @param reader Reader or buffer to decode from
       * @returns ActivityPhaseStart
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decodeDelimited(
        reader: $protobuf.Reader | Uint8Array,
      ): sprout.aixclass.ActivityPhaseStart

      /**
       * Verifies an ActivityPhaseStart message.
       * @param message Plain object to verify
       * @returns `null` if valid, otherwise the reason why it is not
       */
      public static verify(message: { [k: string]: any }): string | null

      /**
       * Creates an ActivityPhaseStart message from a plain object. Also converts values to their respective internal types.
       * @param object Plain object
       * @returns ActivityPhaseStart
       */
      public static fromObject(object: {
        [k: string]: any
      }): sprout.aixclass.ActivityPhaseStart

      /**
       * Creates a plain object from an ActivityPhaseStart message. Also converts values to other types if specified.
       * @param message ActivityPhaseStart
       * @param [options] Conversion options
       * @returns Plain object
       */
      public static toObject(
        message: sprout.aixclass.ActivityPhaseStart,
        options?: $protobuf.IConversionOptions,
      ): { [k: string]: any }

      /**
       * Converts this ActivityPhaseStart to JSON.
       * @returns JSON object
       */
      public toJSON(): { [k: string]: any }
    }

    /** Properties of an ActivityPhaseEnd. */
    interface IActivityPhaseEnd {}

    /** Represents an ActivityPhaseEnd. */
    class ActivityPhaseEnd implements IActivityPhaseEnd {
      /**
       * Constructs a new ActivityPhaseEnd.
       * @param [properties] Properties to set
       */
      constructor(properties?: sprout.aixclass.IActivityPhaseEnd)

      /**
       * Creates a new ActivityPhaseEnd instance using the specified properties.
       * @param [properties] Properties to set
       * @returns ActivityPhaseEnd instance
       */
      public static create(
        properties?: sprout.aixclass.IActivityPhaseEnd,
      ): sprout.aixclass.ActivityPhaseEnd

      /**
       * Encodes the specified ActivityPhaseEnd message. Does not implicitly {@link sprout.aixclass.ActivityPhaseEnd.verify|verify} messages.
       * @param message ActivityPhaseEnd message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encode(
        message: sprout.aixclass.IActivityPhaseEnd,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Encodes the specified ActivityPhaseEnd message, length delimited. Does not implicitly {@link sprout.aixclass.ActivityPhaseEnd.verify|verify} messages.
       * @param message ActivityPhaseEnd message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encodeDelimited(
        message: sprout.aixclass.IActivityPhaseEnd,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Decodes an ActivityPhaseEnd message from the specified reader or buffer.
       * @param reader Reader or buffer to decode from
       * @param [length] Message length if known beforehand
       * @returns ActivityPhaseEnd
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decode(
        reader: $protobuf.Reader | Uint8Array,
        length?: number,
      ): sprout.aixclass.ActivityPhaseEnd

      /**
       * Decodes an ActivityPhaseEnd message from the specified reader or buffer, length delimited.
       * @param reader Reader or buffer to decode from
       * @returns ActivityPhaseEnd
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decodeDelimited(
        reader: $protobuf.Reader | Uint8Array,
      ): sprout.aixclass.ActivityPhaseEnd

      /**
       * Verifies an ActivityPhaseEnd message.
       * @param message Plain object to verify
       * @returns `null` if valid, otherwise the reason why it is not
       */
      public static verify(message: { [k: string]: any }): string | null

      /**
       * Creates an ActivityPhaseEnd message from a plain object. Also converts values to their respective internal types.
       * @param object Plain object
       * @returns ActivityPhaseEnd
       */
      public static fromObject(object: {
        [k: string]: any
      }): sprout.aixclass.ActivityPhaseEnd

      /**
       * Creates a plain object from an ActivityPhaseEnd message. Also converts values to other types if specified.
       * @param message ActivityPhaseEnd
       * @param [options] Conversion options
       * @returns Plain object
       */
      public static toObject(
        message: sprout.aixclass.ActivityPhaseEnd,
        options?: $protobuf.IConversionOptions,
      ): { [k: string]: any }

      /**
       * Converts this ActivityPhaseEnd to JSON.
       * @returns JSON object
       */
      public toJSON(): { [k: string]: any }
    }

    /** Properties of an ActivityPartPhaseStart. */
    interface IActivityPartPhaseStart {
      /** ActivityPartPhaseStart partIndex */
      partIndex?: number | null
    }

    /** Represents an ActivityPartPhaseStart. */
    class ActivityPartPhaseStart implements IActivityPartPhaseStart {
      /**
       * Constructs a new ActivityPartPhaseStart.
       * @param [properties] Properties to set
       */
      constructor(properties?: sprout.aixclass.IActivityPartPhaseStart)

      /** ActivityPartPhaseStart partIndex. */
      public partIndex: number

      /**
       * Creates a new ActivityPartPhaseStart instance using the specified properties.
       * @param [properties] Properties to set
       * @returns ActivityPartPhaseStart instance
       */
      public static create(
        properties?: sprout.aixclass.IActivityPartPhaseStart,
      ): sprout.aixclass.ActivityPartPhaseStart

      /**
       * Encodes the specified ActivityPartPhaseStart message. Does not implicitly {@link sprout.aixclass.ActivityPartPhaseStart.verify|verify} messages.
       * @param message ActivityPartPhaseStart message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encode(
        message: sprout.aixclass.IActivityPartPhaseStart,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Encodes the specified ActivityPartPhaseStart message, length delimited. Does not implicitly {@link sprout.aixclass.ActivityPartPhaseStart.verify|verify} messages.
       * @param message ActivityPartPhaseStart message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encodeDelimited(
        message: sprout.aixclass.IActivityPartPhaseStart,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Decodes an ActivityPartPhaseStart message from the specified reader or buffer.
       * @param reader Reader or buffer to decode from
       * @param [length] Message length if known beforehand
       * @returns ActivityPartPhaseStart
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decode(
        reader: $protobuf.Reader | Uint8Array,
        length?: number,
      ): sprout.aixclass.ActivityPartPhaseStart

      /**
       * Decodes an ActivityPartPhaseStart message from the specified reader or buffer, length delimited.
       * @param reader Reader or buffer to decode from
       * @returns ActivityPartPhaseStart
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decodeDelimited(
        reader: $protobuf.Reader | Uint8Array,
      ): sprout.aixclass.ActivityPartPhaseStart

      /**
       * Verifies an ActivityPartPhaseStart message.
       * @param message Plain object to verify
       * @returns `null` if valid, otherwise the reason why it is not
       */
      public static verify(message: { [k: string]: any }): string | null

      /**
       * Creates an ActivityPartPhaseStart message from a plain object. Also converts values to their respective internal types.
       * @param object Plain object
       * @returns ActivityPartPhaseStart
       */
      public static fromObject(object: {
        [k: string]: any
      }): sprout.aixclass.ActivityPartPhaseStart

      /**
       * Creates a plain object from an ActivityPartPhaseStart message. Also converts values to other types if specified.
       * @param message ActivityPartPhaseStart
       * @param [options] Conversion options
       * @returns Plain object
       */
      public static toObject(
        message: sprout.aixclass.ActivityPartPhaseStart,
        options?: $protobuf.IConversionOptions,
      ): { [k: string]: any }

      /**
       * Converts this ActivityPartPhaseStart to JSON.
       * @returns JSON object
       */
      public toJSON(): { [k: string]: any }
    }

    /** Properties of an ActivityPartPhaseEnd. */
    interface IActivityPartPhaseEnd {
      /** ActivityPartPhaseEnd partIndex */
      partIndex?: number | null
    }

    /** Represents an ActivityPartPhaseEnd. */
    class ActivityPartPhaseEnd implements IActivityPartPhaseEnd {
      /**
       * Constructs a new ActivityPartPhaseEnd.
       * @param [properties] Properties to set
       */
      constructor(properties?: sprout.aixclass.IActivityPartPhaseEnd)

      /** ActivityPartPhaseEnd partIndex. */
      public partIndex: number

      /**
       * Creates a new ActivityPartPhaseEnd instance using the specified properties.
       * @param [properties] Properties to set
       * @returns ActivityPartPhaseEnd instance
       */
      public static create(
        properties?: sprout.aixclass.IActivityPartPhaseEnd,
      ): sprout.aixclass.ActivityPartPhaseEnd

      /**
       * Encodes the specified ActivityPartPhaseEnd message. Does not implicitly {@link sprout.aixclass.ActivityPartPhaseEnd.verify|verify} messages.
       * @param message ActivityPartPhaseEnd message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encode(
        message: sprout.aixclass.IActivityPartPhaseEnd,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Encodes the specified ActivityPartPhaseEnd message, length delimited. Does not implicitly {@link sprout.aixclass.ActivityPartPhaseEnd.verify|verify} messages.
       * @param message ActivityPartPhaseEnd message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encodeDelimited(
        message: sprout.aixclass.IActivityPartPhaseEnd,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Decodes an ActivityPartPhaseEnd message from the specified reader or buffer.
       * @param reader Reader or buffer to decode from
       * @param [length] Message length if known beforehand
       * @returns ActivityPartPhaseEnd
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decode(
        reader: $protobuf.Reader | Uint8Array,
        length?: number,
      ): sprout.aixclass.ActivityPartPhaseEnd

      /**
       * Decodes an ActivityPartPhaseEnd message from the specified reader or buffer, length delimited.
       * @param reader Reader or buffer to decode from
       * @returns ActivityPartPhaseEnd
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decodeDelimited(
        reader: $protobuf.Reader | Uint8Array,
      ): sprout.aixclass.ActivityPartPhaseEnd

      /**
       * Verifies an ActivityPartPhaseEnd message.
       * @param message Plain object to verify
       * @returns `null` if valid, otherwise the reason why it is not
       */
      public static verify(message: { [k: string]: any }): string | null

      /**
       * Creates an ActivityPartPhaseEnd message from a plain object. Also converts values to their respective internal types.
       * @param object Plain object
       * @returns ActivityPartPhaseEnd
       */
      public static fromObject(object: {
        [k: string]: any
      }): sprout.aixclass.ActivityPartPhaseEnd

      /**
       * Creates a plain object from an ActivityPartPhaseEnd message. Also converts values to other types if specified.
       * @param message ActivityPartPhaseEnd
       * @param [options] Conversion options
       * @returns Plain object
       */
      public static toObject(
        message: sprout.aixclass.ActivityPartPhaseEnd,
        options?: $protobuf.IConversionOptions,
      ): { [k: string]: any }

      /**
       * Converts this ActivityPartPhaseEnd to JSON.
       * @returns JSON object
       */
      public toJSON(): { [k: string]: any }
    }

    /** Properties of an ActivityPartPhasePrompt. */
    interface IActivityPartPhasePrompt {
      /** ActivityPartPhasePrompt round */
      round?: number | null

      /** ActivityPartPhasePrompt partIndex */
      partIndex?: number | null
    }

    /** Represents an ActivityPartPhasePrompt. */
    class ActivityPartPhasePrompt implements IActivityPartPhasePrompt {
      /**
       * Constructs a new ActivityPartPhasePrompt.
       * @param [properties] Properties to set
       */
      constructor(properties?: sprout.aixclass.IActivityPartPhasePrompt)

      /** ActivityPartPhasePrompt round. */
      public round: number

      /** ActivityPartPhasePrompt partIndex. */
      public partIndex: number

      /**
       * Creates a new ActivityPartPhasePrompt instance using the specified properties.
       * @param [properties] Properties to set
       * @returns ActivityPartPhasePrompt instance
       */
      public static create(
        properties?: sprout.aixclass.IActivityPartPhasePrompt,
      ): sprout.aixclass.ActivityPartPhasePrompt

      /**
       * Encodes the specified ActivityPartPhasePrompt message. Does not implicitly {@link sprout.aixclass.ActivityPartPhasePrompt.verify|verify} messages.
       * @param message ActivityPartPhasePrompt message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encode(
        message: sprout.aixclass.IActivityPartPhasePrompt,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Encodes the specified ActivityPartPhasePrompt message, length delimited. Does not implicitly {@link sprout.aixclass.ActivityPartPhasePrompt.verify|verify} messages.
       * @param message ActivityPartPhasePrompt message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encodeDelimited(
        message: sprout.aixclass.IActivityPartPhasePrompt,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Decodes an ActivityPartPhasePrompt message from the specified reader or buffer.
       * @param reader Reader or buffer to decode from
       * @param [length] Message length if known beforehand
       * @returns ActivityPartPhasePrompt
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decode(
        reader: $protobuf.Reader | Uint8Array,
        length?: number,
      ): sprout.aixclass.ActivityPartPhasePrompt

      /**
       * Decodes an ActivityPartPhasePrompt message from the specified reader or buffer, length delimited.
       * @param reader Reader or buffer to decode from
       * @returns ActivityPartPhasePrompt
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decodeDelimited(
        reader: $protobuf.Reader | Uint8Array,
      ): sprout.aixclass.ActivityPartPhasePrompt

      /**
       * Verifies an ActivityPartPhasePrompt message.
       * @param message Plain object to verify
       * @returns `null` if valid, otherwise the reason why it is not
       */
      public static verify(message: { [k: string]: any }): string | null

      /**
       * Creates an ActivityPartPhasePrompt message from a plain object. Also converts values to their respective internal types.
       * @param object Plain object
       * @returns ActivityPartPhasePrompt
       */
      public static fromObject(object: {
        [k: string]: any
      }): sprout.aixclass.ActivityPartPhasePrompt

      /**
       * Creates a plain object from an ActivityPartPhasePrompt message. Also converts values to other types if specified.
       * @param message ActivityPartPhasePrompt
       * @param [options] Conversion options
       * @returns Plain object
       */
      public static toObject(
        message: sprout.aixclass.ActivityPartPhasePrompt,
        options?: $protobuf.IConversionOptions,
      ): { [k: string]: any }

      /**
       * Converts this ActivityPartPhasePrompt to JSON.
       * @returns JSON object
       */
      public toJSON(): { [k: string]: any }
    }

    /** Properties of an ActivityPartPhaseWaiting. */
    interface IActivityPartPhaseWaiting {
      /** ActivityPartPhaseWaiting waitingDurationMsec */
      waitingDurationMsec?: number | null

      /** ActivityPartPhaseWaiting round */
      round?: number | null

      /** ActivityPartPhaseWaiting partIndex */
      partIndex?: number | null
    }

    /** Represents an ActivityPartPhaseWaiting. */
    class ActivityPartPhaseWaiting implements IActivityPartPhaseWaiting {
      /**
       * Constructs a new ActivityPartPhaseWaiting.
       * @param [properties] Properties to set
       */
      constructor(properties?: sprout.aixclass.IActivityPartPhaseWaiting)

      /** ActivityPartPhaseWaiting waitingDurationMsec. */
      public waitingDurationMsec: number

      /** ActivityPartPhaseWaiting round. */
      public round: number

      /** ActivityPartPhaseWaiting partIndex. */
      public partIndex: number

      /**
       * Creates a new ActivityPartPhaseWaiting instance using the specified properties.
       * @param [properties] Properties to set
       * @returns ActivityPartPhaseWaiting instance
       */
      public static create(
        properties?: sprout.aixclass.IActivityPartPhaseWaiting,
      ): sprout.aixclass.ActivityPartPhaseWaiting

      /**
       * Encodes the specified ActivityPartPhaseWaiting message. Does not implicitly {@link sprout.aixclass.ActivityPartPhaseWaiting.verify|verify} messages.
       * @param message ActivityPartPhaseWaiting message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encode(
        message: sprout.aixclass.IActivityPartPhaseWaiting,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Encodes the specified ActivityPartPhaseWaiting message, length delimited. Does not implicitly {@link sprout.aixclass.ActivityPartPhaseWaiting.verify|verify} messages.
       * @param message ActivityPartPhaseWaiting message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encodeDelimited(
        message: sprout.aixclass.IActivityPartPhaseWaiting,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Decodes an ActivityPartPhaseWaiting message from the specified reader or buffer.
       * @param reader Reader or buffer to decode from
       * @param [length] Message length if known beforehand
       * @returns ActivityPartPhaseWaiting
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decode(
        reader: $protobuf.Reader | Uint8Array,
        length?: number,
      ): sprout.aixclass.ActivityPartPhaseWaiting

      /**
       * Decodes an ActivityPartPhaseWaiting message from the specified reader or buffer, length delimited.
       * @param reader Reader or buffer to decode from
       * @returns ActivityPartPhaseWaiting
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decodeDelimited(
        reader: $protobuf.Reader | Uint8Array,
      ): sprout.aixclass.ActivityPartPhaseWaiting

      /**
       * Verifies an ActivityPartPhaseWaiting message.
       * @param message Plain object to verify
       * @returns `null` if valid, otherwise the reason why it is not
       */
      public static verify(message: { [k: string]: any }): string | null

      /**
       * Creates an ActivityPartPhaseWaiting message from a plain object. Also converts values to their respective internal types.
       * @param object Plain object
       * @returns ActivityPartPhaseWaiting
       */
      public static fromObject(object: {
        [k: string]: any
      }): sprout.aixclass.ActivityPartPhaseWaiting

      /**
       * Creates a plain object from an ActivityPartPhaseWaiting message. Also converts values to other types if specified.
       * @param message ActivityPartPhaseWaiting
       * @param [options] Conversion options
       * @returns Plain object
       */
      public static toObject(
        message: sprout.aixclass.ActivityPartPhaseWaiting,
        options?: $protobuf.IConversionOptions,
      ): { [k: string]: any }

      /**
       * Converts this ActivityPartPhaseWaiting to JSON.
       * @returns JSON object
       */
      public toJSON(): { [k: string]: any }
    }

    /** Properties of an ActivityPartPhaseTeachingResponse. */
    interface IActivityPartPhaseTeachingResponse {
      /** ActivityPartPhaseTeachingResponse grade */
      grade?: sprout.aixcourse.GradeType.Enum | null

      /** ActivityPartPhaseTeachingResponse isFinalRound */
      isFinalRound?: boolean | null

      /** ActivityPartPhaseTeachingResponse partIndex */
      partIndex?: number | null
    }

    /** Represents an ActivityPartPhaseTeachingResponse. */
    class ActivityPartPhaseTeachingResponse
      implements IActivityPartPhaseTeachingResponse {
      /**
       * Constructs a new ActivityPartPhaseTeachingResponse.
       * @param [properties] Properties to set
       */
      constructor(
        properties?: sprout.aixclass.IActivityPartPhaseTeachingResponse,
      )

      /** ActivityPartPhaseTeachingResponse grade. */
      public grade: sprout.aixcourse.GradeType.Enum

      /** ActivityPartPhaseTeachingResponse isFinalRound. */
      public isFinalRound: boolean

      /** ActivityPartPhaseTeachingResponse partIndex. */
      public partIndex: number

      /**
       * Creates a new ActivityPartPhaseTeachingResponse instance using the specified properties.
       * @param [properties] Properties to set
       * @returns ActivityPartPhaseTeachingResponse instance
       */
      public static create(
        properties?: sprout.aixclass.IActivityPartPhaseTeachingResponse,
      ): sprout.aixclass.ActivityPartPhaseTeachingResponse

      /**
       * Encodes the specified ActivityPartPhaseTeachingResponse message. Does not implicitly {@link sprout.aixclass.ActivityPartPhaseTeachingResponse.verify|verify} messages.
       * @param message ActivityPartPhaseTeachingResponse message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encode(
        message: sprout.aixclass.IActivityPartPhaseTeachingResponse,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Encodes the specified ActivityPartPhaseTeachingResponse message, length delimited. Does not implicitly {@link sprout.aixclass.ActivityPartPhaseTeachingResponse.verify|verify} messages.
       * @param message ActivityPartPhaseTeachingResponse message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encodeDelimited(
        message: sprout.aixclass.IActivityPartPhaseTeachingResponse,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Decodes an ActivityPartPhaseTeachingResponse message from the specified reader or buffer.
       * @param reader Reader or buffer to decode from
       * @param [length] Message length if known beforehand
       * @returns ActivityPartPhaseTeachingResponse
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decode(
        reader: $protobuf.Reader | Uint8Array,
        length?: number,
      ): sprout.aixclass.ActivityPartPhaseTeachingResponse

      /**
       * Decodes an ActivityPartPhaseTeachingResponse message from the specified reader or buffer, length delimited.
       * @param reader Reader or buffer to decode from
       * @returns ActivityPartPhaseTeachingResponse
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decodeDelimited(
        reader: $protobuf.Reader | Uint8Array,
      ): sprout.aixclass.ActivityPartPhaseTeachingResponse

      /**
       * Verifies an ActivityPartPhaseTeachingResponse message.
       * @param message Plain object to verify
       * @returns `null` if valid, otherwise the reason why it is not
       */
      public static verify(message: { [k: string]: any }): string | null

      /**
       * Creates an ActivityPartPhaseTeachingResponse message from a plain object. Also converts values to their respective internal types.
       * @param object Plain object
       * @returns ActivityPartPhaseTeachingResponse
       */
      public static fromObject(object: {
        [k: string]: any
      }): sprout.aixclass.ActivityPartPhaseTeachingResponse

      /**
       * Creates a plain object from an ActivityPartPhaseTeachingResponse message. Also converts values to other types if specified.
       * @param message ActivityPartPhaseTeachingResponse
       * @param [options] Conversion options
       * @returns Plain object
       */
      public static toObject(
        message: sprout.aixclass.ActivityPartPhaseTeachingResponse,
        options?: $protobuf.IConversionOptions,
      ): { [k: string]: any }

      /**
       * Converts this ActivityPartPhaseTeachingResponse to JSON.
       * @returns JSON object
       */
      public toJSON(): { [k: string]: any }
    }

    /** Properties of an ActivityPhaseAward. */
    interface IActivityPhaseAward {
      /** ActivityPhaseAward currentAward */
      currentAward?: number | null
    }

    /** Represents an ActivityPhaseAward. */
    class ActivityPhaseAward implements IActivityPhaseAward {
      /**
       * Constructs a new ActivityPhaseAward.
       * @param [properties] Properties to set
       */
      constructor(properties?: sprout.aixclass.IActivityPhaseAward)

      /** ActivityPhaseAward currentAward. */
      public currentAward: number

      /**
       * Creates a new ActivityPhaseAward instance using the specified properties.
       * @param [properties] Properties to set
       * @returns ActivityPhaseAward instance
       */
      public static create(
        properties?: sprout.aixclass.IActivityPhaseAward,
      ): sprout.aixclass.ActivityPhaseAward

      /**
       * Encodes the specified ActivityPhaseAward message. Does not implicitly {@link sprout.aixclass.ActivityPhaseAward.verify|verify} messages.
       * @param message ActivityPhaseAward message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encode(
        message: sprout.aixclass.IActivityPhaseAward,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Encodes the specified ActivityPhaseAward message, length delimited. Does not implicitly {@link sprout.aixclass.ActivityPhaseAward.verify|verify} messages.
       * @param message ActivityPhaseAward message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encodeDelimited(
        message: sprout.aixclass.IActivityPhaseAward,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Decodes an ActivityPhaseAward message from the specified reader or buffer.
       * @param reader Reader or buffer to decode from
       * @param [length] Message length if known beforehand
       * @returns ActivityPhaseAward
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decode(
        reader: $protobuf.Reader | Uint8Array,
        length?: number,
      ): sprout.aixclass.ActivityPhaseAward

      /**
       * Decodes an ActivityPhaseAward message from the specified reader or buffer, length delimited.
       * @param reader Reader or buffer to decode from
       * @returns ActivityPhaseAward
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decodeDelimited(
        reader: $protobuf.Reader | Uint8Array,
      ): sprout.aixclass.ActivityPhaseAward

      /**
       * Verifies an ActivityPhaseAward message.
       * @param message Plain object to verify
       * @returns `null` if valid, otherwise the reason why it is not
       */
      public static verify(message: { [k: string]: any }): string | null

      /**
       * Creates an ActivityPhaseAward message from a plain object. Also converts values to their respective internal types.
       * @param object Plain object
       * @returns ActivityPhaseAward
       */
      public static fromObject(object: {
        [k: string]: any
      }): sprout.aixclass.ActivityPhaseAward

      /**
       * Creates a plain object from an ActivityPhaseAward message. Also converts values to other types if specified.
       * @param message ActivityPhaseAward
       * @param [options] Conversion options
       * @returns Plain object
       */
      public static toObject(
        message: sprout.aixclass.ActivityPhaseAward,
        options?: $protobuf.IConversionOptions,
      ): { [k: string]: any }

      /**
       * Converts this ActivityPhaseAward to JSON.
       * @returns JSON object
       */
      public toJSON(): { [k: string]: any }
    }

    /** Properties of an ActivityPhaseExchange. */
    interface IActivityPhaseExchange {
      /** ActivityPhaseExchange totalAward */
      totalAward?: number | null

      /** ActivityPhaseExchange coin */
      coin?: number | null
    }

    /** Represents an ActivityPhaseExchange. */
    class ActivityPhaseExchange implements IActivityPhaseExchange {
      /**
       * Constructs a new ActivityPhaseExchange.
       * @param [properties] Properties to set
       */
      constructor(properties?: sprout.aixclass.IActivityPhaseExchange)

      /** ActivityPhaseExchange totalAward. */
      public totalAward: number

      /** ActivityPhaseExchange coin. */
      public coin: number

      /**
       * Creates a new ActivityPhaseExchange instance using the specified properties.
       * @param [properties] Properties to set
       * @returns ActivityPhaseExchange instance
       */
      public static create(
        properties?: sprout.aixclass.IActivityPhaseExchange,
      ): sprout.aixclass.ActivityPhaseExchange

      /**
       * Encodes the specified ActivityPhaseExchange message. Does not implicitly {@link sprout.aixclass.ActivityPhaseExchange.verify|verify} messages.
       * @param message ActivityPhaseExchange message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encode(
        message: sprout.aixclass.IActivityPhaseExchange,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Encodes the specified ActivityPhaseExchange message, length delimited. Does not implicitly {@link sprout.aixclass.ActivityPhaseExchange.verify|verify} messages.
       * @param message ActivityPhaseExchange message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encodeDelimited(
        message: sprout.aixclass.IActivityPhaseExchange,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Decodes an ActivityPhaseExchange message from the specified reader or buffer.
       * @param reader Reader or buffer to decode from
       * @param [length] Message length if known beforehand
       * @returns ActivityPhaseExchange
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decode(
        reader: $protobuf.Reader | Uint8Array,
        length?: number,
      ): sprout.aixclass.ActivityPhaseExchange

      /**
       * Decodes an ActivityPhaseExchange message from the specified reader or buffer, length delimited.
       * @param reader Reader or buffer to decode from
       * @returns ActivityPhaseExchange
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decodeDelimited(
        reader: $protobuf.Reader | Uint8Array,
      ): sprout.aixclass.ActivityPhaseExchange

      /**
       * Verifies an ActivityPhaseExchange message.
       * @param message Plain object to verify
       * @returns `null` if valid, otherwise the reason why it is not
       */
      public static verify(message: { [k: string]: any }): string | null

      /**
       * Creates an ActivityPhaseExchange message from a plain object. Also converts values to their respective internal types.
       * @param object Plain object
       * @returns ActivityPhaseExchange
       */
      public static fromObject(object: {
        [k: string]: any
      }): sprout.aixclass.ActivityPhaseExchange

      /**
       * Creates a plain object from an ActivityPhaseExchange message. Also converts values to other types if specified.
       * @param message ActivityPhaseExchange
       * @param [options] Conversion options
       * @returns Plain object
       */
      public static toObject(
        message: sprout.aixclass.ActivityPhaseExchange,
        options?: $protobuf.IConversionOptions,
      ): { [k: string]: any }

      /**
       * Converts this ActivityPhaseExchange to JSON.
       * @returns JSON object
       */
      public toJSON(): { [k: string]: any }
    }

    /** Properties of a TTS. */
    interface ITTS {
      /** TTS textFormat */
      textFormat?: string | null

      /** TTS defaultAudioId */
      defaultAudioId?: string | null
    }

    /** Represents a TTS. */
    class TTS implements ITTS {
      /**
       * Constructs a new TTS.
       * @param [properties] Properties to set
       */
      constructor(properties?: sprout.aixclass.ITTS)

      /** TTS textFormat. */
      public textFormat: string

      /** TTS defaultAudioId. */
      public defaultAudioId: string

      /**
       * Creates a new TTS instance using the specified properties.
       * @param [properties] Properties to set
       * @returns TTS instance
       */
      public static create(
        properties?: sprout.aixclass.ITTS,
      ): sprout.aixclass.TTS

      /**
       * Encodes the specified TTS message. Does not implicitly {@link sprout.aixclass.TTS.verify|verify} messages.
       * @param message TTS message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encode(
        message: sprout.aixclass.ITTS,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Encodes the specified TTS message, length delimited. Does not implicitly {@link sprout.aixclass.TTS.verify|verify} messages.
       * @param message TTS message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encodeDelimited(
        message: sprout.aixclass.ITTS,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Decodes a TTS message from the specified reader or buffer.
       * @param reader Reader or buffer to decode from
       * @param [length] Message length if known beforehand
       * @returns TTS
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decode(
        reader: $protobuf.Reader | Uint8Array,
        length?: number,
      ): sprout.aixclass.TTS

      /**
       * Decodes a TTS message from the specified reader or buffer, length delimited.
       * @param reader Reader or buffer to decode from
       * @returns TTS
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decodeDelimited(
        reader: $protobuf.Reader | Uint8Array,
      ): sprout.aixclass.TTS

      /**
       * Verifies a TTS message.
       * @param message Plain object to verify
       * @returns `null` if valid, otherwise the reason why it is not
       */
      public static verify(message: { [k: string]: any }): string | null

      /**
       * Creates a TTS message from a plain object. Also converts values to their respective internal types.
       * @param object Plain object
       * @returns TTS
       */
      public static fromObject(object: {
        [k: string]: any
      }): sprout.aixclass.TTS

      /**
       * Creates a plain object from a TTS message. Also converts values to other types if specified.
       * @param message TTS
       * @param [options] Conversion options
       * @returns Plain object
       */
      public static toObject(
        message: sprout.aixclass.TTS,
        options?: $protobuf.IConversionOptions,
      ): { [k: string]: any }

      /**
       * Converts this TTS to JSON.
       * @returns JSON object
       */
      public toJSON(): { [k: string]: any }
    }

    /** Properties of a Leo. */
    interface ILeo {
      /** Leo audioId */
      audioId?: string | null
    }

    /** Represents a Leo. */
    class Leo implements ILeo {
      /**
       * Constructs a new Leo.
       * @param [properties] Properties to set
       */
      constructor(properties?: sprout.aixclass.ILeo)

      /** Leo audioId. */
      public audioId: string

      /**
       * Creates a new Leo instance using the specified properties.
       * @param [properties] Properties to set
       * @returns Leo instance
       */
      public static create(
        properties?: sprout.aixclass.ILeo,
      ): sprout.aixclass.Leo

      /**
       * Encodes the specified Leo message. Does not implicitly {@link sprout.aixclass.Leo.verify|verify} messages.
       * @param message Leo message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encode(
        message: sprout.aixclass.ILeo,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Encodes the specified Leo message, length delimited. Does not implicitly {@link sprout.aixclass.Leo.verify|verify} messages.
       * @param message Leo message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encodeDelimited(
        message: sprout.aixclass.ILeo,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Decodes a Leo message from the specified reader or buffer.
       * @param reader Reader or buffer to decode from
       * @param [length] Message length if known beforehand
       * @returns Leo
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decode(
        reader: $protobuf.Reader | Uint8Array,
        length?: number,
      ): sprout.aixclass.Leo

      /**
       * Decodes a Leo message from the specified reader or buffer, length delimited.
       * @param reader Reader or buffer to decode from
       * @returns Leo
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decodeDelimited(
        reader: $protobuf.Reader | Uint8Array,
      ): sprout.aixclass.Leo

      /**
       * Verifies a Leo message.
       * @param message Plain object to verify
       * @returns `null` if valid, otherwise the reason why it is not
       */
      public static verify(message: { [k: string]: any }): string | null

      /**
       * Creates a Leo message from a plain object. Also converts values to their respective internal types.
       * @param object Plain object
       * @returns Leo
       */
      public static fromObject(object: {
        [k: string]: any
      }): sprout.aixclass.Leo

      /**
       * Creates a plain object from a Leo message. Also converts values to other types if specified.
       * @param message Leo
       * @param [options] Conversion options
       * @returns Plain object
       */
      public static toObject(
        message: sprout.aixclass.Leo,
        options?: $protobuf.IConversionOptions,
      ): { [k: string]: any }

      /**
       * Converts this Leo to JSON.
       * @returns JSON object
       */
      public toJSON(): { [k: string]: any }
    }

    /** Properties of a VideoStart. */
    interface IVideoStart {
      /** VideoStart videoId */
      videoId?: string | null
    }

    /** Represents a VideoStart. */
    class VideoStart implements IVideoStart {
      /**
       * Constructs a new VideoStart.
       * @param [properties] Properties to set
       */
      constructor(properties?: sprout.aixclass.IVideoStart)

      /** VideoStart videoId. */
      public videoId: string

      /**
       * Creates a new VideoStart instance using the specified properties.
       * @param [properties] Properties to set
       * @returns VideoStart instance
       */
      public static create(
        properties?: sprout.aixclass.IVideoStart,
      ): sprout.aixclass.VideoStart

      /**
       * Encodes the specified VideoStart message. Does not implicitly {@link sprout.aixclass.VideoStart.verify|verify} messages.
       * @param message VideoStart message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encode(
        message: sprout.aixclass.IVideoStart,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Encodes the specified VideoStart message, length delimited. Does not implicitly {@link sprout.aixclass.VideoStart.verify|verify} messages.
       * @param message VideoStart message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encodeDelimited(
        message: sprout.aixclass.IVideoStart,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Decodes a VideoStart message from the specified reader or buffer.
       * @param reader Reader or buffer to decode from
       * @param [length] Message length if known beforehand
       * @returns VideoStart
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decode(
        reader: $protobuf.Reader | Uint8Array,
        length?: number,
      ): sprout.aixclass.VideoStart

      /**
       * Decodes a VideoStart message from the specified reader or buffer, length delimited.
       * @param reader Reader or buffer to decode from
       * @returns VideoStart
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decodeDelimited(
        reader: $protobuf.Reader | Uint8Array,
      ): sprout.aixclass.VideoStart

      /**
       * Verifies a VideoStart message.
       * @param message Plain object to verify
       * @returns `null` if valid, otherwise the reason why it is not
       */
      public static verify(message: { [k: string]: any }): string | null

      /**
       * Creates a VideoStart message from a plain object. Also converts values to their respective internal types.
       * @param object Plain object
       * @returns VideoStart
       */
      public static fromObject(object: {
        [k: string]: any
      }): sprout.aixclass.VideoStart

      /**
       * Creates a plain object from a VideoStart message. Also converts values to other types if specified.
       * @param message VideoStart
       * @param [options] Conversion options
       * @returns Plain object
       */
      public static toObject(
        message: sprout.aixclass.VideoStart,
        options?: $protobuf.IConversionOptions,
      ): { [k: string]: any }

      /**
       * Converts this VideoStart to JSON.
       * @returns JSON object
       */
      public toJSON(): { [k: string]: any }
    }

    /** Properties of a TeacherStreamLayout. */
    interface ITeacherStreamLayout {
      /** TeacherStreamLayout layout */
      layout?: core_course.PBAixVideo.Layout.Enum | null
    }

    /** Represents a TeacherStreamLayout. */
    class TeacherStreamLayout implements ITeacherStreamLayout {
      /**
       * Constructs a new TeacherStreamLayout.
       * @param [properties] Properties to set
       */
      constructor(properties?: sprout.aixclass.ITeacherStreamLayout)

      /** TeacherStreamLayout layout. */
      public layout: core_course.PBAixVideo.Layout.Enum

      /**
       * Creates a new TeacherStreamLayout instance using the specified properties.
       * @param [properties] Properties to set
       * @returns TeacherStreamLayout instance
       */
      public static create(
        properties?: sprout.aixclass.ITeacherStreamLayout,
      ): sprout.aixclass.TeacherStreamLayout

      /**
       * Encodes the specified TeacherStreamLayout message. Does not implicitly {@link sprout.aixclass.TeacherStreamLayout.verify|verify} messages.
       * @param message TeacherStreamLayout message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encode(
        message: sprout.aixclass.ITeacherStreamLayout,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Encodes the specified TeacherStreamLayout message, length delimited. Does not implicitly {@link sprout.aixclass.TeacherStreamLayout.verify|verify} messages.
       * @param message TeacherStreamLayout message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encodeDelimited(
        message: sprout.aixclass.ITeacherStreamLayout,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Decodes a TeacherStreamLayout message from the specified reader or buffer.
       * @param reader Reader or buffer to decode from
       * @param [length] Message length if known beforehand
       * @returns TeacherStreamLayout
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decode(
        reader: $protobuf.Reader | Uint8Array,
        length?: number,
      ): sprout.aixclass.TeacherStreamLayout

      /**
       * Decodes a TeacherStreamLayout message from the specified reader or buffer, length delimited.
       * @param reader Reader or buffer to decode from
       * @returns TeacherStreamLayout
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decodeDelimited(
        reader: $protobuf.Reader | Uint8Array,
      ): sprout.aixclass.TeacherStreamLayout

      /**
       * Verifies a TeacherStreamLayout message.
       * @param message Plain object to verify
       * @returns `null` if valid, otherwise the reason why it is not
       */
      public static verify(message: { [k: string]: any }): string | null

      /**
       * Creates a TeacherStreamLayout message from a plain object. Also converts values to their respective internal types.
       * @param object Plain object
       * @returns TeacherStreamLayout
       */
      public static fromObject(object: {
        [k: string]: any
      }): sprout.aixclass.TeacherStreamLayout

      /**
       * Creates a plain object from a TeacherStreamLayout message. Also converts values to other types if specified.
       * @param message TeacherStreamLayout
       * @param [options] Conversion options
       * @returns Plain object
       */
      public static toObject(
        message: sprout.aixclass.TeacherStreamLayout,
        options?: $protobuf.IConversionOptions,
      ): { [k: string]: any }

      /**
       * Converts this TeacherStreamLayout to JSON.
       * @returns JSON object
       */
      public toJSON(): { [k: string]: any }
    }

    /** Properties of a MusicStart. */
    interface IMusicStart {
      /** MusicStart audioId */
      audioId?: string | null
    }

    /** Represents a MusicStart. */
    class MusicStart implements IMusicStart {
      /**
       * Constructs a new MusicStart.
       * @param [properties] Properties to set
       */
      constructor(properties?: sprout.aixclass.IMusicStart)

      /** MusicStart audioId. */
      public audioId: string

      /**
       * Creates a new MusicStart instance using the specified properties.
       * @param [properties] Properties to set
       * @returns MusicStart instance
       */
      public static create(
        properties?: sprout.aixclass.IMusicStart,
      ): sprout.aixclass.MusicStart

      /**
       * Encodes the specified MusicStart message. Does not implicitly {@link sprout.aixclass.MusicStart.verify|verify} messages.
       * @param message MusicStart message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encode(
        message: sprout.aixclass.IMusicStart,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Encodes the specified MusicStart message, length delimited. Does not implicitly {@link sprout.aixclass.MusicStart.verify|verify} messages.
       * @param message MusicStart message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encodeDelimited(
        message: sprout.aixclass.IMusicStart,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Decodes a MusicStart message from the specified reader or buffer.
       * @param reader Reader or buffer to decode from
       * @param [length] Message length if known beforehand
       * @returns MusicStart
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decode(
        reader: $protobuf.Reader | Uint8Array,
        length?: number,
      ): sprout.aixclass.MusicStart

      /**
       * Decodes a MusicStart message from the specified reader or buffer, length delimited.
       * @param reader Reader or buffer to decode from
       * @returns MusicStart
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decodeDelimited(
        reader: $protobuf.Reader | Uint8Array,
      ): sprout.aixclass.MusicStart

      /**
       * Verifies a MusicStart message.
       * @param message Plain object to verify
       * @returns `null` if valid, otherwise the reason why it is not
       */
      public static verify(message: { [k: string]: any }): string | null

      /**
       * Creates a MusicStart message from a plain object. Also converts values to their respective internal types.
       * @param object Plain object
       * @returns MusicStart
       */
      public static fromObject(object: {
        [k: string]: any
      }): sprout.aixclass.MusicStart

      /**
       * Creates a plain object from a MusicStart message. Also converts values to other types if specified.
       * @param message MusicStart
       * @param [options] Conversion options
       * @returns Plain object
       */
      public static toObject(
        message: sprout.aixclass.MusicStart,
        options?: $protobuf.IConversionOptions,
      ): { [k: string]: any }

      /**
       * Converts this MusicStart to JSON.
       * @returns JSON object
       */
      public toJSON(): { [k: string]: any }
    }

    /** Properties of an AnimatedAction. */
    interface IAnimatedAction {
      /** AnimatedAction tag */
      tag?: string | null

      /** AnimatedAction actionType */
      actionType?: sprout.aixcourse.AixVideoPoint.ActionType | null
    }

    /** Represents an AnimatedAction. */
    class AnimatedAction implements IAnimatedAction {
      /**
       * Constructs a new AnimatedAction.
       * @param [properties] Properties to set
       */
      constructor(properties?: sprout.aixclass.IAnimatedAction)

      /** AnimatedAction tag. */
      public tag: string

      /** AnimatedAction actionType. */
      public actionType: sprout.aixcourse.AixVideoPoint.ActionType

      /**
       * Creates a new AnimatedAction instance using the specified properties.
       * @param [properties] Properties to set
       * @returns AnimatedAction instance
       */
      public static create(
        properties?: sprout.aixclass.IAnimatedAction,
      ): sprout.aixclass.AnimatedAction

      /**
       * Encodes the specified AnimatedAction message. Does not implicitly {@link sprout.aixclass.AnimatedAction.verify|verify} messages.
       * @param message AnimatedAction message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encode(
        message: sprout.aixclass.IAnimatedAction,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Encodes the specified AnimatedAction message, length delimited. Does not implicitly {@link sprout.aixclass.AnimatedAction.verify|verify} messages.
       * @param message AnimatedAction message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encodeDelimited(
        message: sprout.aixclass.IAnimatedAction,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Decodes an AnimatedAction message from the specified reader or buffer.
       * @param reader Reader or buffer to decode from
       * @param [length] Message length if known beforehand
       * @returns AnimatedAction
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decode(
        reader: $protobuf.Reader | Uint8Array,
        length?: number,
      ): sprout.aixclass.AnimatedAction

      /**
       * Decodes an AnimatedAction message from the specified reader or buffer, length delimited.
       * @param reader Reader or buffer to decode from
       * @returns AnimatedAction
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decodeDelimited(
        reader: $protobuf.Reader | Uint8Array,
      ): sprout.aixclass.AnimatedAction

      /**
       * Verifies an AnimatedAction message.
       * @param message Plain object to verify
       * @returns `null` if valid, otherwise the reason why it is not
       */
      public static verify(message: { [k: string]: any }): string | null

      /**
       * Creates an AnimatedAction message from a plain object. Also converts values to their respective internal types.
       * @param object Plain object
       * @returns AnimatedAction
       */
      public static fromObject(object: {
        [k: string]: any
      }): sprout.aixclass.AnimatedAction

      /**
       * Creates a plain object from an AnimatedAction message. Also converts values to other types if specified.
       * @param message AnimatedAction
       * @param [options] Conversion options
       * @returns Plain object
       */
      public static toObject(
        message: sprout.aixclass.AnimatedAction,
        options?: $protobuf.IConversionOptions,
      ): { [k: string]: any }

      /**
       * Converts this AnimatedAction to JSON.
       * @returns JSON object
       */
      public toJSON(): { [k: string]: any }
    }

    /** Properties of a ReliableMessageType. */
    interface IReliableMessageType {}

    /** Represents a ReliableMessageType. */
    class ReliableMessageType implements IReliableMessageType {
      /**
       * Constructs a new ReliableMessageType.
       * @param [properties] Properties to set
       */
      constructor(properties?: sprout.aixclass.IReliableMessageType)

      /**
       * Creates a new ReliableMessageType instance using the specified properties.
       * @param [properties] Properties to set
       * @returns ReliableMessageType instance
       */
      public static create(
        properties?: sprout.aixclass.IReliableMessageType,
      ): sprout.aixclass.ReliableMessageType

      /**
       * Encodes the specified ReliableMessageType message. Does not implicitly {@link sprout.aixclass.ReliableMessageType.verify|verify} messages.
       * @param message ReliableMessageType message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encode(
        message: sprout.aixclass.IReliableMessageType,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Encodes the specified ReliableMessageType message, length delimited. Does not implicitly {@link sprout.aixclass.ReliableMessageType.verify|verify} messages.
       * @param message ReliableMessageType message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encodeDelimited(
        message: sprout.aixclass.IReliableMessageType,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Decodes a ReliableMessageType message from the specified reader or buffer.
       * @param reader Reader or buffer to decode from
       * @param [length] Message length if known beforehand
       * @returns ReliableMessageType
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decode(
        reader: $protobuf.Reader | Uint8Array,
        length?: number,
      ): sprout.aixclass.ReliableMessageType

      /**
       * Decodes a ReliableMessageType message from the specified reader or buffer, length delimited.
       * @param reader Reader or buffer to decode from
       * @returns ReliableMessageType
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decodeDelimited(
        reader: $protobuf.Reader | Uint8Array,
      ): sprout.aixclass.ReliableMessageType

      /**
       * Verifies a ReliableMessageType message.
       * @param message Plain object to verify
       * @returns `null` if valid, otherwise the reason why it is not
       */
      public static verify(message: { [k: string]: any }): string | null

      /**
       * Creates a ReliableMessageType message from a plain object. Also converts values to their respective internal types.
       * @param object Plain object
       * @returns ReliableMessageType
       */
      public static fromObject(object: {
        [k: string]: any
      }): sprout.aixclass.ReliableMessageType

      /**
       * Creates a plain object from a ReliableMessageType message. Also converts values to other types if specified.
       * @param message ReliableMessageType
       * @param [options] Conversion options
       * @returns Plain object
       */
      public static toObject(
        message: sprout.aixclass.ReliableMessageType,
        options?: $protobuf.IConversionOptions,
      ): { [k: string]: any }

      /**
       * Converts this ReliableMessageType to JSON.
       * @returns JSON object
       */
      public toJSON(): { [k: string]: any }
    }

    namespace ReliableMessageType {
      /** Enum enum. */
      enum Enum {
        UNKNOWN = 0,
        ROOM_CLOSED = 1,
      }
    }
  }
}

/** Namespace core_course. */
export namespace core_course {
  /** Properties of a CourseType. */
  interface ICourseType {}

  /** Represents a CourseType. */
  class CourseType implements ICourseType {
    /**
     * Constructs a new CourseType.
     * @param [properties] Properties to set
     */
    constructor(properties?: core_course.ICourseType)

    /**
     * Creates a new CourseType instance using the specified properties.
     * @param [properties] Properties to set
     * @returns CourseType instance
     */
    public static create(
      properties?: core_course.ICourseType,
    ): core_course.CourseType

    /**
     * Encodes the specified CourseType message. Does not implicitly {@link core_course.CourseType.verify|verify} messages.
     * @param message CourseType message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encode(
      message: core_course.ICourseType,
      writer?: $protobuf.Writer,
    ): $protobuf.Writer

    /**
     * Encodes the specified CourseType message, length delimited. Does not implicitly {@link core_course.CourseType.verify|verify} messages.
     * @param message CourseType message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encodeDelimited(
      message: core_course.ICourseType,
      writer?: $protobuf.Writer,
    ): $protobuf.Writer

    /**
     * Decodes a CourseType message from the specified reader or buffer.
     * @param reader Reader or buffer to decode from
     * @param [length] Message length if known beforehand
     * @returns CourseType
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decode(
      reader: $protobuf.Reader | Uint8Array,
      length?: number,
    ): core_course.CourseType

    /**
     * Decodes a CourseType message from the specified reader or buffer, length delimited.
     * @param reader Reader or buffer to decode from
     * @returns CourseType
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decodeDelimited(
      reader: $protobuf.Reader | Uint8Array,
    ): core_course.CourseType

    /**
     * Verifies a CourseType message.
     * @param message Plain object to verify
     * @returns `null` if valid, otherwise the reason why it is not
     */
    public static verify(message: { [k: string]: any }): string | null

    /**
     * Creates a CourseType message from a plain object. Also converts values to their respective internal types.
     * @param object Plain object
     * @returns CourseType
     */
    public static fromObject(object: {
      [k: string]: any
    }): core_course.CourseType

    /**
     * Creates a plain object from a CourseType message. Also converts values to other types if specified.
     * @param message CourseType
     * @param [options] Conversion options
     * @returns Plain object
     */
    public static toObject(
      message: core_course.CourseType,
      options?: $protobuf.IConversionOptions,
    ): { [k: string]: any }

    /**
     * Converts this CourseType to JSON.
     * @returns JSON object
     */
    public toJSON(): { [k: string]: any }
  }

  namespace CourseType {
    /** Enum enum. */
    enum Enum {
      UNKNOWN = 0,
      CORE = 1,
      PRONCO = 2,
      PLACEMENT_TEST = 6,
      SPROUT_YOUNG = 3,
      SPROUT_JUNIOR = 4,
      SPROUT_SENIOR = 5,
      BUSINESS_ENGLISH = 7,
      PILOT_ENGLISH_INTRO = 8,
      PILOT_ENGLISH = 9,
      BELL = 10,
      TOURISM = 11,
      HIFI = 12,
      KION = 13,
      DARWIN_HOMEWORK = 14,
      DARWIN_PVP = 15,
      DARWIN_BE = 16,
    }
  }

  /** Properties of a SessionType. */
  interface ISessionType {}

  /** Represents a SessionType. */
  class SessionType implements ISessionType {
    /**
     * Constructs a new SessionType.
     * @param [properties] Properties to set
     */
    constructor(properties?: core_course.ISessionType)

    /**
     * Creates a new SessionType instance using the specified properties.
     * @param [properties] Properties to set
     * @returns SessionType instance
     */
    public static create(
      properties?: core_course.ISessionType,
    ): core_course.SessionType

    /**
     * Encodes the specified SessionType message. Does not implicitly {@link core_course.SessionType.verify|verify} messages.
     * @param message SessionType message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encode(
      message: core_course.ISessionType,
      writer?: $protobuf.Writer,
    ): $protobuf.Writer

    /**
     * Encodes the specified SessionType message, length delimited. Does not implicitly {@link core_course.SessionType.verify|verify} messages.
     * @param message SessionType message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encodeDelimited(
      message: core_course.ISessionType,
      writer?: $protobuf.Writer,
    ): $protobuf.Writer

    /**
     * Decodes a SessionType message from the specified reader or buffer.
     * @param reader Reader or buffer to decode from
     * @param [length] Message length if known beforehand
     * @returns SessionType
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decode(
      reader: $protobuf.Reader | Uint8Array,
      length?: number,
    ): core_course.SessionType

    /**
     * Decodes a SessionType message from the specified reader or buffer, length delimited.
     * @param reader Reader or buffer to decode from
     * @returns SessionType
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decodeDelimited(
      reader: $protobuf.Reader | Uint8Array,
    ): core_course.SessionType

    /**
     * Verifies a SessionType message.
     * @param message Plain object to verify
     * @returns `null` if valid, otherwise the reason why it is not
     */
    public static verify(message: { [k: string]: any }): string | null

    /**
     * Creates a SessionType message from a plain object. Also converts values to their respective internal types.
     * @param object Plain object
     * @returns SessionType
     */
    public static fromObject(object: {
      [k: string]: any
    }): core_course.SessionType

    /**
     * Creates a plain object from a SessionType message. Also converts values to other types if specified.
     * @param message SessionType
     * @param [options] Conversion options
     * @returns Plain object
     */
    public static toObject(
      message: core_course.SessionType,
      options?: $protobuf.IConversionOptions,
    ): { [k: string]: any }

    /**
     * Converts this SessionType to JSON.
     * @returns JSON object
     */
    public toJSON(): { [k: string]: any }
  }

  namespace SessionType {
    /** Enum enum. */
    enum Enum {
      PRESENTATION = 0,
      SUPPORT = 1,
      AUTO_GENERATED_MIX = 2,
      MISTAKES_COLLECTION = 3,
    }
  }

  /** Properties of a SessionKind. */
  interface ISessionKind {}

  /** Represents a SessionKind. */
  class SessionKind implements ISessionKind {
    /**
     * Constructs a new SessionKind.
     * @param [properties] Properties to set
     */
    constructor(properties?: core_course.ISessionKind)

    /**
     * Creates a new SessionKind instance using the specified properties.
     * @param [properties] Properties to set
     * @returns SessionKind instance
     */
    public static create(
      properties?: core_course.ISessionKind,
    ): core_course.SessionKind

    /**
     * Encodes the specified SessionKind message. Does not implicitly {@link core_course.SessionKind.verify|verify} messages.
     * @param message SessionKind message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encode(
      message: core_course.ISessionKind,
      writer?: $protobuf.Writer,
    ): $protobuf.Writer

    /**
     * Encodes the specified SessionKind message, length delimited. Does not implicitly {@link core_course.SessionKind.verify|verify} messages.
     * @param message SessionKind message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encodeDelimited(
      message: core_course.ISessionKind,
      writer?: $protobuf.Writer,
    ): $protobuf.Writer

    /**
     * Decodes a SessionKind message from the specified reader or buffer.
     * @param reader Reader or buffer to decode from
     * @param [length] Message length if known beforehand
     * @returns SessionKind
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decode(
      reader: $protobuf.Reader | Uint8Array,
      length?: number,
    ): core_course.SessionKind

    /**
     * Decodes a SessionKind message from the specified reader or buffer, length delimited.
     * @param reader Reader or buffer to decode from
     * @returns SessionKind
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decodeDelimited(
      reader: $protobuf.Reader | Uint8Array,
    ): core_course.SessionKind

    /**
     * Verifies a SessionKind message.
     * @param message Plain object to verify
     * @returns `null` if valid, otherwise the reason why it is not
     */
    public static verify(message: { [k: string]: any }): string | null

    /**
     * Creates a SessionKind message from a plain object. Also converts values to their respective internal types.
     * @param object Plain object
     * @returns SessionKind
     */
    public static fromObject(object: {
      [k: string]: any
    }): core_course.SessionKind

    /**
     * Creates a plain object from a SessionKind message. Also converts values to other types if specified.
     * @param message SessionKind
     * @param [options] Conversion options
     * @returns Plain object
     */
    public static toObject(
      message: core_course.SessionKind,
      options?: $protobuf.IConversionOptions,
    ): { [k: string]: any }

    /**
     * Converts this SessionKind to JSON.
     * @returns JSON object
     */
    public toJSON(): { [k: string]: any }
  }

  namespace SessionKind {
    /** Enum enum. */
    enum Enum {
      LISTENING = 0,
      VOCABULARY = 1,
      DIALOG = 2,
      SPEAKING = 3,
      READING = 4,
      GRAMMAR = 5,
      LETTERS_AND_NUMBERS = 6,
      MATCHING = 7,
      LESSON_DICTATION = 8,
      AUTO_GENERATED_MIX = 9,
      VIDEO = 10,
      ALPHABET = 11,
      PHONICS = 12,
      NON_SPEAKING = 13,
    }
  }

  /** Properties of a SessionModule. */
  interface ISessionModule {}

  /** Represents a SessionModule. */
  class SessionModule implements ISessionModule {
    /**
     * Constructs a new SessionModule.
     * @param [properties] Properties to set
     */
    constructor(properties?: core_course.ISessionModule)

    /**
     * Creates a new SessionModule instance using the specified properties.
     * @param [properties] Properties to set
     * @returns SessionModule instance
     */
    public static create(
      properties?: core_course.ISessionModule,
    ): core_course.SessionModule

    /**
     * Encodes the specified SessionModule message. Does not implicitly {@link core_course.SessionModule.verify|verify} messages.
     * @param message SessionModule message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encode(
      message: core_course.ISessionModule,
      writer?: $protobuf.Writer,
    ): $protobuf.Writer

    /**
     * Encodes the specified SessionModule message, length delimited. Does not implicitly {@link core_course.SessionModule.verify|verify} messages.
     * @param message SessionModule message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encodeDelimited(
      message: core_course.ISessionModule,
      writer?: $protobuf.Writer,
    ): $protobuf.Writer

    /**
     * Decodes a SessionModule message from the specified reader or buffer.
     * @param reader Reader or buffer to decode from
     * @param [length] Message length if known beforehand
     * @returns SessionModule
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decode(
      reader: $protobuf.Reader | Uint8Array,
      length?: number,
    ): core_course.SessionModule

    /**
     * Decodes a SessionModule message from the specified reader or buffer, length delimited.
     * @param reader Reader or buffer to decode from
     * @returns SessionModule
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decodeDelimited(
      reader: $protobuf.Reader | Uint8Array,
    ): core_course.SessionModule

    /**
     * Verifies a SessionModule message.
     * @param message Plain object to verify
     * @returns `null` if valid, otherwise the reason why it is not
     */
    public static verify(message: { [k: string]: any }): string | null

    /**
     * Creates a SessionModule message from a plain object. Also converts values to their respective internal types.
     * @param object Plain object
     * @returns SessionModule
     */
    public static fromObject(object: {
      [k: string]: any
    }): core_course.SessionModule

    /**
     * Creates a plain object from a SessionModule message. Also converts values to other types if specified.
     * @param message SessionModule
     * @param [options] Conversion options
     * @returns Plain object
     */
    public static toObject(
      message: core_course.SessionModule,
      options?: $protobuf.IConversionOptions,
    ): { [k: string]: any }

    /**
     * Converts this SessionModule to JSON.
     * @returns JSON object
     */
    public toJSON(): { [k: string]: any }
  }

  namespace SessionModule {
    /** Enum enum. */
    enum Enum {
      UNKNOWN = 0,
      VOCABULARY = 1,
      GRAMMAR = 2,
      LISTENING = 3,
      SPEAKING = 4,
      FULL = 5,
      TE_APPETIZER = 6,
      HIFI = 7,
      MILESTONE_ASSESSMENT = 8,
      DHOMEWORK = 9,
      LEVEL_TEST = 10,
    }
  }

  /** Properties of an EpisodeType. */
  interface IEpisodeType {}

  /** Represents an EpisodeType. */
  class EpisodeType implements IEpisodeType {
    /**
     * Constructs a new EpisodeType.
     * @param [properties] Properties to set
     */
    constructor(properties?: core_course.IEpisodeType)

    /**
     * Creates a new EpisodeType instance using the specified properties.
     * @param [properties] Properties to set
     * @returns EpisodeType instance
     */
    public static create(
      properties?: core_course.IEpisodeType,
    ): core_course.EpisodeType

    /**
     * Encodes the specified EpisodeType message. Does not implicitly {@link core_course.EpisodeType.verify|verify} messages.
     * @param message EpisodeType message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encode(
      message: core_course.IEpisodeType,
      writer?: $protobuf.Writer,
    ): $protobuf.Writer

    /**
     * Encodes the specified EpisodeType message, length delimited. Does not implicitly {@link core_course.EpisodeType.verify|verify} messages.
     * @param message EpisodeType message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encodeDelimited(
      message: core_course.IEpisodeType,
      writer?: $protobuf.Writer,
    ): $protobuf.Writer

    /**
     * Decodes an EpisodeType message from the specified reader or buffer.
     * @param reader Reader or buffer to decode from
     * @param [length] Message length if known beforehand
     * @returns EpisodeType
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decode(
      reader: $protobuf.Reader | Uint8Array,
      length?: number,
    ): core_course.EpisodeType

    /**
     * Decodes an EpisodeType message from the specified reader or buffer, length delimited.
     * @param reader Reader or buffer to decode from
     * @returns EpisodeType
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decodeDelimited(
      reader: $protobuf.Reader | Uint8Array,
    ): core_course.EpisodeType

    /**
     * Verifies an EpisodeType message.
     * @param message Plain object to verify
     * @returns `null` if valid, otherwise the reason why it is not
     */
    public static verify(message: { [k: string]: any }): string | null

    /**
     * Creates an EpisodeType message from a plain object. Also converts values to their respective internal types.
     * @param object Plain object
     * @returns EpisodeType
     */
    public static fromObject(object: {
      [k: string]: any
    }): core_course.EpisodeType

    /**
     * Creates a plain object from an EpisodeType message. Also converts values to other types if specified.
     * @param message EpisodeType
     * @param [options] Conversion options
     * @returns Plain object
     */
    public static toObject(
      message: core_course.EpisodeType,
      options?: $protobuf.IConversionOptions,
    ): { [k: string]: any }

    /**
     * Converts this EpisodeType to JSON.
     * @returns JSON object
     */
    public toJSON(): { [k: string]: any }
  }

  namespace EpisodeType {
    /** Enum enum. */
    enum Enum {
      UNKNOWN = 0,
      SHOW = 1,
      COMP = 2,
      DRILL = 3,
      PRACTICE = 4,
      VOCABULARY_FLASH_CARD = 5,
      PLAY = 6,
    }
  }

  /** Properties of an EpisodePart. */
  interface IEpisodePart {}

  /** Represents an EpisodePart. */
  class EpisodePart implements IEpisodePart {
    /**
     * Constructs a new EpisodePart.
     * @param [properties] Properties to set
     */
    constructor(properties?: core_course.IEpisodePart)

    /**
     * Creates a new EpisodePart instance using the specified properties.
     * @param [properties] Properties to set
     * @returns EpisodePart instance
     */
    public static create(
      properties?: core_course.IEpisodePart,
    ): core_course.EpisodePart

    /**
     * Encodes the specified EpisodePart message. Does not implicitly {@link core_course.EpisodePart.verify|verify} messages.
     * @param message EpisodePart message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encode(
      message: core_course.IEpisodePart,
      writer?: $protobuf.Writer,
    ): $protobuf.Writer

    /**
     * Encodes the specified EpisodePart message, length delimited. Does not implicitly {@link core_course.EpisodePart.verify|verify} messages.
     * @param message EpisodePart message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encodeDelimited(
      message: core_course.IEpisodePart,
      writer?: $protobuf.Writer,
    ): $protobuf.Writer

    /**
     * Decodes an EpisodePart message from the specified reader or buffer.
     * @param reader Reader or buffer to decode from
     * @param [length] Message length if known beforehand
     * @returns EpisodePart
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decode(
      reader: $protobuf.Reader | Uint8Array,
      length?: number,
    ): core_course.EpisodePart

    /**
     * Decodes an EpisodePart message from the specified reader or buffer, length delimited.
     * @param reader Reader or buffer to decode from
     * @returns EpisodePart
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decodeDelimited(
      reader: $protobuf.Reader | Uint8Array,
    ): core_course.EpisodePart

    /**
     * Verifies an EpisodePart message.
     * @param message Plain object to verify
     * @returns `null` if valid, otherwise the reason why it is not
     */
    public static verify(message: { [k: string]: any }): string | null

    /**
     * Creates an EpisodePart message from a plain object. Also converts values to their respective internal types.
     * @param object Plain object
     * @returns EpisodePart
     */
    public static fromObject(object: {
      [k: string]: any
    }): core_course.EpisodePart

    /**
     * Creates a plain object from an EpisodePart message. Also converts values to other types if specified.
     * @param message EpisodePart
     * @param [options] Conversion options
     * @returns Plain object
     */
    public static toObject(
      message: core_course.EpisodePart,
      options?: $protobuf.IConversionOptions,
    ): { [k: string]: any }

    /**
     * Converts this EpisodePart to JSON.
     * @returns JSON object
     */
    public toJSON(): { [k: string]: any }
  }

  namespace EpisodePart {
    /** Enum enum. */
    enum Enum {
      UNKNOWN = 0,
      LISTENING = 1,
      VOCABULARY = 2,
      GRAMMAR = 3,
      SPEAKING = 4,
    }
  }

  /** Properties of an ActivityCategory. */
  interface IActivityCategory {}

  /** Represents an ActivityCategory. */
  class ActivityCategory implements IActivityCategory {
    /**
     * Constructs a new ActivityCategory.
     * @param [properties] Properties to set
     */
    constructor(properties?: core_course.IActivityCategory)

    /**
     * Creates a new ActivityCategory instance using the specified properties.
     * @param [properties] Properties to set
     * @returns ActivityCategory instance
     */
    public static create(
      properties?: core_course.IActivityCategory,
    ): core_course.ActivityCategory

    /**
     * Encodes the specified ActivityCategory message. Does not implicitly {@link core_course.ActivityCategory.verify|verify} messages.
     * @param message ActivityCategory message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encode(
      message: core_course.IActivityCategory,
      writer?: $protobuf.Writer,
    ): $protobuf.Writer

    /**
     * Encodes the specified ActivityCategory message, length delimited. Does not implicitly {@link core_course.ActivityCategory.verify|verify} messages.
     * @param message ActivityCategory message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encodeDelimited(
      message: core_course.IActivityCategory,
      writer?: $protobuf.Writer,
    ): $protobuf.Writer

    /**
     * Decodes an ActivityCategory message from the specified reader or buffer.
     * @param reader Reader or buffer to decode from
     * @param [length] Message length if known beforehand
     * @returns ActivityCategory
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decode(
      reader: $protobuf.Reader | Uint8Array,
      length?: number,
    ): core_course.ActivityCategory

    /**
     * Decodes an ActivityCategory message from the specified reader or buffer, length delimited.
     * @param reader Reader or buffer to decode from
     * @returns ActivityCategory
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decodeDelimited(
      reader: $protobuf.Reader | Uint8Array,
    ): core_course.ActivityCategory

    /**
     * Verifies an ActivityCategory message.
     * @param message Plain object to verify
     * @returns `null` if valid, otherwise the reason why it is not
     */
    public static verify(message: { [k: string]: any }): string | null

    /**
     * Creates an ActivityCategory message from a plain object. Also converts values to their respective internal types.
     * @param object Plain object
     * @returns ActivityCategory
     */
    public static fromObject(object: {
      [k: string]: any
    }): core_course.ActivityCategory

    /**
     * Creates a plain object from an ActivityCategory message. Also converts values to other types if specified.
     * @param message ActivityCategory
     * @param [options] Conversion options
     * @returns Plain object
     */
    public static toObject(
      message: core_course.ActivityCategory,
      options?: $protobuf.IConversionOptions,
    ): { [k: string]: any }

    /**
     * Converts this ActivityCategory to JSON.
     * @returns JSON object
     */
    public toJSON(): { [k: string]: any }
  }

  namespace ActivityCategory {
    /** Enum enum. */
    enum Enum {
      UNKNOWN = 0,
      PRESENTATION = 1,
      COMPREHENSION = 2,
      PLACEMENT_TEST = 3,
      LEVEL_TEST = 4,
    }
  }

  /** Properties of an ActivityType. */
  interface IActivityType {}

  /** Represents an ActivityType. */
  class ActivityType implements IActivityType {
    /**
     * Constructs a new ActivityType.
     * @param [properties] Properties to set
     */
    constructor(properties?: core_course.IActivityType)

    /**
     * Creates a new ActivityType instance using the specified properties.
     * @param [properties] Properties to set
     * @returns ActivityType instance
     */
    public static create(
      properties?: core_course.IActivityType,
    ): core_course.ActivityType

    /**
     * Encodes the specified ActivityType message. Does not implicitly {@link core_course.ActivityType.verify|verify} messages.
     * @param message ActivityType message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encode(
      message: core_course.IActivityType,
      writer?: $protobuf.Writer,
    ): $protobuf.Writer

    /**
     * Encodes the specified ActivityType message, length delimited. Does not implicitly {@link core_course.ActivityType.verify|verify} messages.
     * @param message ActivityType message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encodeDelimited(
      message: core_course.IActivityType,
      writer?: $protobuf.Writer,
    ): $protobuf.Writer

    /**
     * Decodes an ActivityType message from the specified reader or buffer.
     * @param reader Reader or buffer to decode from
     * @param [length] Message length if known beforehand
     * @returns ActivityType
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decode(
      reader: $protobuf.Reader | Uint8Array,
      length?: number,
    ): core_course.ActivityType

    /**
     * Decodes an ActivityType message from the specified reader or buffer, length delimited.
     * @param reader Reader or buffer to decode from
     * @returns ActivityType
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decodeDelimited(
      reader: $protobuf.Reader | Uint8Array,
    ): core_course.ActivityType

    /**
     * Verifies an ActivityType message.
     * @param message Plain object to verify
     * @returns `null` if valid, otherwise the reason why it is not
     */
    public static verify(message: { [k: string]: any }): string | null

    /**
     * Creates an ActivityType message from a plain object. Also converts values to their respective internal types.
     * @param object Plain object
     * @returns ActivityType
     */
    public static fromObject(object: {
      [k: string]: any
    }): core_course.ActivityType

    /**
     * Creates a plain object from an ActivityType message. Also converts values to other types if specified.
     * @param message ActivityType
     * @param [options] Conversion options
     * @returns Plain object
     */
    public static toObject(
      message: core_course.ActivityType,
      options?: $protobuf.IConversionOptions,
    ): { [k: string]: any }

    /**
     * Converts this ActivityType to JSON.
     * @returns JSON object
     */
    public toJSON(): { [k: string]: any }
  }

  namespace ActivityType {
    /** Enum enum. */
    enum Enum {
      UNKNOWN_ACTIVITY_TYPE = 0,
      PRESENTATION_TYPE = 0,
      MULTI_CHOICE_PICTURE_1 = 1,
      MULTI_CHOICE_PICTURE_2 = 2,
      MULTI_CHOICE_QUESTION_1 = 3,
      MULTI_CHOICE_QUESTION_2 = 4,
      MULTI_CHOICE_QUESTION_6 = 5,
      MULTI_CHOICE_QUESTION_4A = 6,
      MULTI_CHOICE_QUESTION_4B = 7,
      MULTI_CHOICE_QUESTION_5 = 8,
      CLICK_AND_DRAG = 9,
      SENTENCE_REPETITION = 10,
      ORAL_READING = 11,
      ROLE_PLAY = 12,
      AUDIO_MATCHING = 13,
      TEXT_SEQUENCE = 14,
      DICTATION = 15,
      OPEN_QUESTION = 16,
      CLOZE = 17,
      MULTI_CHOICE_QUESTION_7 = 18,
      MULTI_CHOICE_QUESTION_3 = 19,
      MULTI_CHOICE_PICTURE_3 = 20,
      MULTI_CHOICE_QUESTION_1A = 21,
      MULTI_CHOICE_QUESTION_2A = 22,
      MULTI_CHOICE_QUESTION_6A = 23,
      LOCATING = 24,
      SPOT_ERRORS = 25,
      SENTENCE_FRAGMENTS = 26,
      VERBAL_READING = 27,
      WORD_FRAGMENTS = 28,
      ERROR_HUNTING = 29,
      SENTENCE_COMPLETION = 30,
      WORD_GUESS = 31,
      CHOOSE_ALL_WORDS = 32,
      SPELLING = 33,
      READ_AFTER = 34,
      SPEAKING_LINK = 35,
      SPEAKING_QA = 36,
      VIDEO_TEACHING = 37,
      HAND_WRITING = 38,
      AUDIO_TO_PICTURE = 39,
      TEXT_TO_PICTURE = 40,
      AUDIO_TO_TEXT = 41,
      SPEAK_OUT_1 = 42,
      AUDIO_TO_PICTURE_GAME_1 = 43,
      SPEAKING_MCQ = 44,
      AUDIO_TO_PICTURE_SQMA = 45,
      AUDIO_TO_PICTURE_MQSA = 46,
      VOCABULARY_FLASH_CARD = 47,
      MULTI_CHOICE_QUESTION_X = 48,
      SPEAK_OUT_2 = 49,
      SPEAK_OUT_3 = 50,
      AUDIO_TO_TEXT_2 = 51,
      PICTURE_TO_TEXT = 52,
      DUB_SHOW = 53,
      SPEAK_OUT_4 = 54,
      Word_Formation = 55,
      SPEAK_OUT_0 = 56,
      TAP_TAP = 57,
      CROSSING_RIVER_MQ = 58,
      CROSSING_RIVER_SQ = 59,
      AUDIO_TO_PICTURE_2 = 60,
      SPEAK_SENTENCE = 61,
      CROSSING_RIVER_SQ_2 = 62,
      WORD_FORMATION_2 = 63,
      C2E_TRANSLATE = 64,
      SEMI_SENT_CONSTRUCT = 65,
      MATCHING = 66,
      MULTI_CHOICE_PICTURE = 67,
      MULTI_CHOICE_TEXT = 68,
      MULTI_CHOICE_AUDIO = 69,
      DIALOGUE_PRACTICE = 70,
      OPEN_SPEAKING = 71,
      C2C_WARM_UP = 72,
      C2C_CHOOSE = 73,
      PRESENT_PRACTICE = 100,
      PRESENT_VIDEO = 101,
      PRESENT_TEACHING = 102,
      WORD_QUIZ = 103,
      SENTENCE_QUIZ = 104,
      PHONEME_PRACTICE = 105,
      WORD_PRONOUN = 106,
      MP_LISTENING_PRACTICE = 107,
      MP_TEACHING_VIDEO = 108,
      MP_PRONOUN_PRACTICE = 109,
      TEACHING_VIDEO = 110,
      RIME_PRONOUN = 111,
      CONSONANT_PRACTICE = 112,
      SYLLABLE_PRACTICE = 113,
      SYLLABLE_STRESS = 114,
      RHYTHM_IN_GROUP = 115,
      RHYTHM_IN_GROUP_S = 116,
      WORD_INTONATION = 117,
      INTONATION_IN_GROUP = 118,
      INTONATION_IN_GROUP_S = 119,
      LINKING_CV = 120,
      LOSS_OF_PLOSION = 121,
      REDUCING_PRONOUN = 122,
      CONSECUTIVE_LINKINGS = 123,
      MULTIPLE_LINKINGS = 124,
      SENTENCE_PRONOUN = 125,
      T2A = 126,
      ORBell = 127,
      TEACHING = 128,
      SPEAKING = 129,
      AUDIO_TO_AUDIO = 130,
      READ_AFTER_2 = 131,
      PICTURE_TO_SPEAK = 132,
      ORAL_READING_2 = 133,
      ORAL_READING_3 = 134,
      ORAL_READING_4 = 135,
      SITUATIONAL_QA = 136,
      TOPIC_PARAPHRASE = 137,
      FOUR_PIC_SPEAK = 138,
      OPEN_QUESTION_PARTS = 139,
      LISTEN_AND_RETELL = 140,
      DIALOGUE_SELECT_OPEN_QUESTIONS = 141,
      OPEN_TEXT_QUESTION_PARTS = 142,
      DIALOGUE_MCQP = 143,
      DIALOGUE_OPEN_QUESTION_PARTS = 144,
      LISTEN_READ_AND_FITB = 145,
      LISTEN_AND_TRUE_FALSE = 146,
      LISTEN_AND_MCPT = 147,
      OPEN_P2S = 148,
      STRESS_WORD_PRONOUN = 149,
      PICTURE_TOPIC_PARAPHRASE = 1006,
      SUPER_RESOURCE = 1007,
      MULTI_CHOICE = 1008,
      MATCHING_AP = 1009,
      OPEN_QUESTION_OPTIONS = 1010,
      VOCABULARY_BANK = 1011,
      LOCATING_1 = 150,
      LOCATING_2 = 151,
      LOCATING_3 = 152,
      CLICK_AND_DRAG_1 = 153,
      WORD_FILL_IN_THE_BLANK = 154,
      LETTER_FILL_IN_THE_BLANK = 155,
      ORAL_READING_5 = 156,
      SENT_TRANS_PARTS = 157,
      BUBBLES_1 = 158,
      MULTI_CHOICE_QUESTION_3B = 159,
      WRITING_PARAPHRASE = 160,
      SPEAK_WORDS_1 = 200,
      BLOCK_A2P = 201,
      BLOCK_A2T = 202,
      BLOCK_P = 203,
      BLOCK_T = 204,
      BLOCK_PT = 205,
      BLOCK_TS = 206,
      BLOCK_TWP = 207,
      BLOCK_A2PT = 300,
      AIX_PRESENTATION_TEACHING = 301,
      AIX_PRESENTATION_AWARD = 302,
      AIX_PRESENTATION_EXCHANGE = 303,
      AIX_A2A = 304,
      AIX_A2A_FREE = 305,
      AIX_A2P_PUZZLE = 306,
      AIX_A2P_TOOL = 307,
      AIX_A2P_DRAG_2 = 308,
      AIX_A2P_TAP_1 = 309,
      AIX_PA2A_BUILD_1 = 310,
      AIX_A2P_DRAG_1 = 311,
      AIX_PA2A_FREE = 312,
      AIX_PA2A_TRIGGER = 313,
      AIX_PA2A_JET_1 = 314,
      AIX_PA2A_JET_2 = 315,
      AIX_PAT2P_FALL = 316,
      AIX_A2P_DRAG_3 = 317,
      AIX_A2P_TAP_2 = 318,
      AIX_PA2A_BUILD_2 = 319,
      AIX_PA2P_REVEAL = 320,
      AIX_A2P_MOLE = 321,
      AIX_T2P_MOLE = 322,
      AIX_PA2A_ROLE_PLAY_1 = 323,
      AIX_PA2A_ROLE_PLAY_2 = 324,
      AIX_A2P_FREE = 325,
      AIX_VIDEO_PLAY = 326,
      AIX_PAT2A_X = 327,
      AIX_AT2P_X = 328,
      AIX_VIDEO_PLAY_X = 329,
      AIX_A2P_DRAG_2_X = 330,
      AIX_A2P_DRAG_3_X = 331,
      AIX_PA2A_BUILD_1_X = 332,
      AIX_PA2A_BUILD_2_X = 333,
      AIX_PA2A_WHEEL_1 = 334,
      AIX_PA2A_WHEEL_2 = 335,
      AIX_AT2P_BUMP = 336,
      AIX_PAT2T_X = 337,
      AIX_A2P_PUZZLE_X = 338,
      AIX_A2P_TOOL_X = 339,
      AIX_A2P_TAP_1_X = 340,
      AIX_A2P_TAP_2_X = 341,
      AIX_PA2A_JET_1_X = 342,
      AIX_PA2A_JET_2_X = 343,
      AIX_PAT2P_FALL_X = 344,
      AIX_PA2A_WHEEL_1_X = 345,
      AIX_PA2A_WHEEL_2_X = 346,
      AIX_AT2P_BUMP_X = 347,
      AIX_A2P_MOLE_X = 348,
      AIX_A2P_DRAG_1_X = 349,
      AIX_PA2P_REVEAL_X = 350,
      AIX_PAT2T_BRIDGE_X = 351,
      AIX_AT2P_PASS_BY = 352,
      AIX_AT2P_PASS_BY_X = 353,
      AIX_ANIMATED_PRESENTATION = 354,
      AIX_PAT2A_REPEAT_1 = 355,
      AIX_PAT2A_REPEAT_1_X = 356,
      AIX_AT2P_ADVENTURE = 357,
      AIX_A2P_VOTE_X = 358,
      AIX_PA2A_VOTE_X = 359,
      AIX_A2A_RECORD_FREE_X = 360,
      AIX_PA2A_ROLE_PLAY_1_X = 361,
      AIX_A2P_FREE_X = 362,
      AIX_PA2A_FREE_X = 363,
      LINGOKIDS_KARAOKE_READER = 401,
      LINGOKIDS_WORD_CARD = 402,
      LINGOKIDS_EXTENSION = 403,
      PRES_AUDIO = 1001,
      PRES_VIDEO = 1002,
      PRES_READING = 1003,
      PRES_DIALOGUE_PLAY = 1004,
      PRES_TEXT_TEACHING = 1005,
      BELL_MCT = 1100,
      BELL_SPEAKING_MCQ = 1101,
      BELL_MCA = 1102,
      BELL_PHONEME_PRO = 1103,
    }
  }

  /** Properties of a PhoneticType. */
  interface IPhoneticType {}

  /** Represents a PhoneticType. */
  class PhoneticType implements IPhoneticType {
    /**
     * Constructs a new PhoneticType.
     * @param [properties] Properties to set
     */
    constructor(properties?: core_course.IPhoneticType)

    /**
     * Creates a new PhoneticType instance using the specified properties.
     * @param [properties] Properties to set
     * @returns PhoneticType instance
     */
    public static create(
      properties?: core_course.IPhoneticType,
    ): core_course.PhoneticType

    /**
     * Encodes the specified PhoneticType message. Does not implicitly {@link core_course.PhoneticType.verify|verify} messages.
     * @param message PhoneticType message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encode(
      message: core_course.IPhoneticType,
      writer?: $protobuf.Writer,
    ): $protobuf.Writer

    /**
     * Encodes the specified PhoneticType message, length delimited. Does not implicitly {@link core_course.PhoneticType.verify|verify} messages.
     * @param message PhoneticType message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encodeDelimited(
      message: core_course.IPhoneticType,
      writer?: $protobuf.Writer,
    ): $protobuf.Writer

    /**
     * Decodes a PhoneticType message from the specified reader or buffer.
     * @param reader Reader or buffer to decode from
     * @param [length] Message length if known beforehand
     * @returns PhoneticType
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decode(
      reader: $protobuf.Reader | Uint8Array,
      length?: number,
    ): core_course.PhoneticType

    /**
     * Decodes a PhoneticType message from the specified reader or buffer, length delimited.
     * @param reader Reader or buffer to decode from
     * @returns PhoneticType
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decodeDelimited(
      reader: $protobuf.Reader | Uint8Array,
    ): core_course.PhoneticType

    /**
     * Verifies a PhoneticType message.
     * @param message Plain object to verify
     * @returns `null` if valid, otherwise the reason why it is not
     */
    public static verify(message: { [k: string]: any }): string | null

    /**
     * Creates a PhoneticType message from a plain object. Also converts values to their respective internal types.
     * @param object Plain object
     * @returns PhoneticType
     */
    public static fromObject(object: {
      [k: string]: any
    }): core_course.PhoneticType

    /**
     * Creates a plain object from a PhoneticType message. Also converts values to other types if specified.
     * @param message PhoneticType
     * @param [options] Conversion options
     * @returns Plain object
     */
    public static toObject(
      message: core_course.PhoneticType,
      options?: $protobuf.IConversionOptions,
    ): { [k: string]: any }

    /**
     * Converts this PhoneticType to JSON.
     * @returns JSON object
     */
    public toJSON(): { [k: string]: any }
  }

  namespace PhoneticType {
    /** Enum enum. */
    enum Enum {
      UNKNOWN = 0,
      GLOBAL = 1,
      US = 2,
    }
  }

  /** Properties of a TopicType. */
  interface ITopicType {}

  /** Represents a TopicType. */
  class TopicType implements ITopicType {
    /**
     * Constructs a new TopicType.
     * @param [properties] Properties to set
     */
    constructor(properties?: core_course.ITopicType)

    /**
     * Creates a new TopicType instance using the specified properties.
     * @param [properties] Properties to set
     * @returns TopicType instance
     */
    public static create(
      properties?: core_course.ITopicType,
    ): core_course.TopicType

    /**
     * Encodes the specified TopicType message. Does not implicitly {@link core_course.TopicType.verify|verify} messages.
     * @param message TopicType message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encode(
      message: core_course.ITopicType,
      writer?: $protobuf.Writer,
    ): $protobuf.Writer

    /**
     * Encodes the specified TopicType message, length delimited. Does not implicitly {@link core_course.TopicType.verify|verify} messages.
     * @param message TopicType message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encodeDelimited(
      message: core_course.ITopicType,
      writer?: $protobuf.Writer,
    ): $protobuf.Writer

    /**
     * Decodes a TopicType message from the specified reader or buffer.
     * @param reader Reader or buffer to decode from
     * @param [length] Message length if known beforehand
     * @returns TopicType
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decode(
      reader: $protobuf.Reader | Uint8Array,
      length?: number,
    ): core_course.TopicType

    /**
     * Decodes a TopicType message from the specified reader or buffer, length delimited.
     * @param reader Reader or buffer to decode from
     * @returns TopicType
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decodeDelimited(
      reader: $protobuf.Reader | Uint8Array,
    ): core_course.TopicType

    /**
     * Verifies a TopicType message.
     * @param message Plain object to verify
     * @returns `null` if valid, otherwise the reason why it is not
     */
    public static verify(message: { [k: string]: any }): string | null

    /**
     * Creates a TopicType message from a plain object. Also converts values to their respective internal types.
     * @param object Plain object
     * @returns TopicType
     */
    public static fromObject(object: {
      [k: string]: any
    }): core_course.TopicType

    /**
     * Creates a plain object from a TopicType message. Also converts values to other types if specified.
     * @param message TopicType
     * @param [options] Conversion options
     * @returns Plain object
     */
    public static toObject(
      message: core_course.TopicType,
      options?: $protobuf.IConversionOptions,
    ): { [k: string]: any }

    /**
     * Converts this TopicType to JSON.
     * @returns JSON object
     */
    public toJSON(): { [k: string]: any }
  }

  namespace TopicType {
    /** Enum enum. */
    enum Enum {
      UNKNOWN = 0,
      JOB_HUNT = 1,
      MEETING = 2,
      PRESENT = 3,
      NEGOTIATE = 4,
      EMAIL = 5,
      INTRO = 6,
      WORKPLACE = 7,
      SALES = 8,
      SOFT_SKILL = 9,
      LEADER_SHIP = 10,
      MANAGE = 11,
      MANUFACTURE = 12,
    }
  }

  /** Properties of a PackDifficulty. */
  interface IPackDifficulty {}

  /** Represents a PackDifficulty. */
  class PackDifficulty implements IPackDifficulty {
    /**
     * Constructs a new PackDifficulty.
     * @param [properties] Properties to set
     */
    constructor(properties?: core_course.IPackDifficulty)

    /**
     * Creates a new PackDifficulty instance using the specified properties.
     * @param [properties] Properties to set
     * @returns PackDifficulty instance
     */
    public static create(
      properties?: core_course.IPackDifficulty,
    ): core_course.PackDifficulty

    /**
     * Encodes the specified PackDifficulty message. Does not implicitly {@link core_course.PackDifficulty.verify|verify} messages.
     * @param message PackDifficulty message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encode(
      message: core_course.IPackDifficulty,
      writer?: $protobuf.Writer,
    ): $protobuf.Writer

    /**
     * Encodes the specified PackDifficulty message, length delimited. Does not implicitly {@link core_course.PackDifficulty.verify|verify} messages.
     * @param message PackDifficulty message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encodeDelimited(
      message: core_course.IPackDifficulty,
      writer?: $protobuf.Writer,
    ): $protobuf.Writer

    /**
     * Decodes a PackDifficulty message from the specified reader or buffer.
     * @param reader Reader or buffer to decode from
     * @param [length] Message length if known beforehand
     * @returns PackDifficulty
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decode(
      reader: $protobuf.Reader | Uint8Array,
      length?: number,
    ): core_course.PackDifficulty

    /**
     * Decodes a PackDifficulty message from the specified reader or buffer, length delimited.
     * @param reader Reader or buffer to decode from
     * @returns PackDifficulty
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decodeDelimited(
      reader: $protobuf.Reader | Uint8Array,
    ): core_course.PackDifficulty

    /**
     * Verifies a PackDifficulty message.
     * @param message Plain object to verify
     * @returns `null` if valid, otherwise the reason why it is not
     */
    public static verify(message: { [k: string]: any }): string | null

    /**
     * Creates a PackDifficulty message from a plain object. Also converts values to their respective internal types.
     * @param object Plain object
     * @returns PackDifficulty
     */
    public static fromObject(object: {
      [k: string]: any
    }): core_course.PackDifficulty

    /**
     * Creates a plain object from a PackDifficulty message. Also converts values to other types if specified.
     * @param message PackDifficulty
     * @param [options] Conversion options
     * @returns Plain object
     */
    public static toObject(
      message: core_course.PackDifficulty,
      options?: $protobuf.IConversionOptions,
    ): { [k: string]: any }

    /**
     * Converts this PackDifficulty to JSON.
     * @returns JSON object
     */
    public toJSON(): { [k: string]: any }
  }

  namespace PackDifficulty {
    /** Enum enum. */
    enum Enum {
      UNKNOWN = 0,
      EASY = 1,
      MEDIUM = 2,
      HARD = 3,
      EXPERT = 4,
    }
  }

  /** Properties of a PBAudio. */
  interface IPBAudio {
    /** PBAudio resourceId */
    resourceId?: string | null

    /** PBAudio text */
    text?: string | null

    /** PBAudio duration */
    duration?: number | null

    /** PBAudio filename */
    filename?: string | null

    /** PBAudio filesize */
    filesize?: number | null

    /** PBAudio spokenText */
    spokenText?: string | null

    /** PBAudio url */
    url?: string | null

    /** PBAudio scorerUrl */
    scorerUrl?: string | null

    /** PBAudio scorerPbUrl */
    scorerPbUrl?: string | null

    /** PBAudio scorerVersion */
    scorerVersion?: string | null

    /** PBAudio chksum */
    chksum?: string | null

    /** PBAudio scorerFilename */
    scorerFilename?: string | null

    /** PBAudio scorerPbFilename */
    scorerPbFilename?: string | null

    /** PBAudio isConcatenated */
    isConcatenated?: boolean | null

    /** PBAudio createdAtSec */
    createdAtSec?: number | null

    /** PBAudio updatedAtSec */
    updatedAtSec?: number | null

    /** PBAudio originFilename */
    originFilename?: string | null

    /** PBAudio karaokeWord */
    karaokeWord?: core_course.PBAudio.IKaraokeWord[] | null

    /** PBAudio isDelite */
    isDelite?: boolean | null

    /** PBAudio refText */
    refText?: string | null

    /** PBAudio questionType */
    questionType?: telis.Score.QuestionType | null

    /** PBAudio richText */
    richText?: string | null
  }

  /** Represents a PBAudio. */
  class PBAudio implements IPBAudio {
    /**
     * Constructs a new PBAudio.
     * @param [properties] Properties to set
     */
    constructor(properties?: core_course.IPBAudio)

    /** PBAudio resourceId. */
    public resourceId: string

    /** PBAudio text. */
    public text: string

    /** PBAudio duration. */
    public duration: number

    /** PBAudio filename. */
    public filename: string

    /** PBAudio filesize. */
    public filesize: number

    /** PBAudio spokenText. */
    public spokenText: string

    /** PBAudio url. */
    public url: string

    /** PBAudio scorerUrl. */
    public scorerUrl: string

    /** PBAudio scorerPbUrl. */
    public scorerPbUrl: string

    /** PBAudio scorerVersion. */
    public scorerVersion: string

    /** PBAudio chksum. */
    public chksum: string

    /** PBAudio scorerFilename. */
    public scorerFilename: string

    /** PBAudio scorerPbFilename. */
    public scorerPbFilename: string

    /** PBAudio isConcatenated. */
    public isConcatenated: boolean

    /** PBAudio createdAtSec. */
    public createdAtSec: number

    /** PBAudio updatedAtSec. */
    public updatedAtSec: number

    /** PBAudio originFilename. */
    public originFilename: string

    /** PBAudio karaokeWord. */
    public karaokeWord: core_course.PBAudio.IKaraokeWord[]

    /** PBAudio isDelite. */
    public isDelite: boolean

    /** PBAudio refText. */
    public refText: string

    /** PBAudio questionType. */
    public questionType: telis.Score.QuestionType

    /** PBAudio richText. */
    public richText: string

    /**
     * Creates a new PBAudio instance using the specified properties.
     * @param [properties] Properties to set
     * @returns PBAudio instance
     */
    public static create(properties?: core_course.IPBAudio): core_course.PBAudio

    /**
     * Encodes the specified PBAudio message. Does not implicitly {@link core_course.PBAudio.verify|verify} messages.
     * @param message PBAudio message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encode(
      message: core_course.IPBAudio,
      writer?: $protobuf.Writer,
    ): $protobuf.Writer

    /**
     * Encodes the specified PBAudio message, length delimited. Does not implicitly {@link core_course.PBAudio.verify|verify} messages.
     * @param message PBAudio message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encodeDelimited(
      message: core_course.IPBAudio,
      writer?: $protobuf.Writer,
    ): $protobuf.Writer

    /**
     * Decodes a PBAudio message from the specified reader or buffer.
     * @param reader Reader or buffer to decode from
     * @param [length] Message length if known beforehand
     * @returns PBAudio
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decode(
      reader: $protobuf.Reader | Uint8Array,
      length?: number,
    ): core_course.PBAudio

    /**
     * Decodes a PBAudio message from the specified reader or buffer, length delimited.
     * @param reader Reader or buffer to decode from
     * @returns PBAudio
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decodeDelimited(
      reader: $protobuf.Reader | Uint8Array,
    ): core_course.PBAudio

    /**
     * Verifies a PBAudio message.
     * @param message Plain object to verify
     * @returns `null` if valid, otherwise the reason why it is not
     */
    public static verify(message: { [k: string]: any }): string | null

    /**
     * Creates a PBAudio message from a plain object. Also converts values to their respective internal types.
     * @param object Plain object
     * @returns PBAudio
     */
    public static fromObject(object: { [k: string]: any }): core_course.PBAudio

    /**
     * Creates a plain object from a PBAudio message. Also converts values to other types if specified.
     * @param message PBAudio
     * @param [options] Conversion options
     * @returns Plain object
     */
    public static toObject(
      message: core_course.PBAudio,
      options?: $protobuf.IConversionOptions,
    ): { [k: string]: any }

    /**
     * Converts this PBAudio to JSON.
     * @returns JSON object
     */
    public toJSON(): { [k: string]: any }
  }

  namespace PBAudio {
    /** Properties of a KaraokeWord. */
    interface IKaraokeWord {
      /** KaraokeWord word */
      word?: string | null

      /** KaraokeWord startMsec */
      startMsec?: number | Long | null

      /** KaraokeWord endMsec */
      endMsec?: number | Long | null
    }

    /** Represents a KaraokeWord. */
    class KaraokeWord implements IKaraokeWord {
      /**
       * Constructs a new KaraokeWord.
       * @param [properties] Properties to set
       */
      constructor(properties?: core_course.PBAudio.IKaraokeWord)

      /** KaraokeWord word. */
      public word: string

      /** KaraokeWord startMsec. */
      public startMsec: number | Long

      /** KaraokeWord endMsec. */
      public endMsec: number | Long

      /**
       * Creates a new KaraokeWord instance using the specified properties.
       * @param [properties] Properties to set
       * @returns KaraokeWord instance
       */
      public static create(
        properties?: core_course.PBAudio.IKaraokeWord,
      ): core_course.PBAudio.KaraokeWord

      /**
       * Encodes the specified KaraokeWord message. Does not implicitly {@link core_course.PBAudio.KaraokeWord.verify|verify} messages.
       * @param message KaraokeWord message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encode(
        message: core_course.PBAudio.IKaraokeWord,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Encodes the specified KaraokeWord message, length delimited. Does not implicitly {@link core_course.PBAudio.KaraokeWord.verify|verify} messages.
       * @param message KaraokeWord message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encodeDelimited(
        message: core_course.PBAudio.IKaraokeWord,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Decodes a KaraokeWord message from the specified reader or buffer.
       * @param reader Reader or buffer to decode from
       * @param [length] Message length if known beforehand
       * @returns KaraokeWord
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decode(
        reader: $protobuf.Reader | Uint8Array,
        length?: number,
      ): core_course.PBAudio.KaraokeWord

      /**
       * Decodes a KaraokeWord message from the specified reader or buffer, length delimited.
       * @param reader Reader or buffer to decode from
       * @returns KaraokeWord
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decodeDelimited(
        reader: $protobuf.Reader | Uint8Array,
      ): core_course.PBAudio.KaraokeWord

      /**
       * Verifies a KaraokeWord message.
       * @param message Plain object to verify
       * @returns `null` if valid, otherwise the reason why it is not
       */
      public static verify(message: { [k: string]: any }): string | null

      /**
       * Creates a KaraokeWord message from a plain object. Also converts values to their respective internal types.
       * @param object Plain object
       * @returns KaraokeWord
       */
      public static fromObject(object: {
        [k: string]: any
      }): core_course.PBAudio.KaraokeWord

      /**
       * Creates a plain object from a KaraokeWord message. Also converts values to other types if specified.
       * @param message KaraokeWord
       * @param [options] Conversion options
       * @returns Plain object
       */
      public static toObject(
        message: core_course.PBAudio.KaraokeWord,
        options?: $protobuf.IConversionOptions,
      ): { [k: string]: any }

      /**
       * Converts this KaraokeWord to JSON.
       * @returns JSON object
       */
      public toJSON(): { [k: string]: any }
    }
  }

  /** Properties of a PBPicture. */
  interface IPBPicture {
    /** PBPicture resourceId */
    resourceId?: string | null

    /** PBPicture filesize */
    filesize?: number | null

    /** PBPicture filename */
    filename?: string | null

    /** PBPicture url */
    url?: string | null

    /** PBPicture originFilename */
    originFilename?: string | null

    /** PBPicture chksum */
    chksum?: string | null

    /** PBPicture createdAtSec */
    createdAtSec?: number | null

    /** PBPicture updatedAtSec */
    updatedAtSec?: number | null
  }

  /** Represents a PBPicture. */
  class PBPicture implements IPBPicture {
    /**
     * Constructs a new PBPicture.
     * @param [properties] Properties to set
     */
    constructor(properties?: core_course.IPBPicture)

    /** PBPicture resourceId. */
    public resourceId: string

    /** PBPicture filesize. */
    public filesize: number

    /** PBPicture filename. */
    public filename: string

    /** PBPicture url. */
    public url: string

    /** PBPicture originFilename. */
    public originFilename: string

    /** PBPicture chksum. */
    public chksum: string

    /** PBPicture createdAtSec. */
    public createdAtSec: number

    /** PBPicture updatedAtSec. */
    public updatedAtSec: number

    /**
     * Creates a new PBPicture instance using the specified properties.
     * @param [properties] Properties to set
     * @returns PBPicture instance
     */
    public static create(
      properties?: core_course.IPBPicture,
    ): core_course.PBPicture

    /**
     * Encodes the specified PBPicture message. Does not implicitly {@link core_course.PBPicture.verify|verify} messages.
     * @param message PBPicture message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encode(
      message: core_course.IPBPicture,
      writer?: $protobuf.Writer,
    ): $protobuf.Writer

    /**
     * Encodes the specified PBPicture message, length delimited. Does not implicitly {@link core_course.PBPicture.verify|verify} messages.
     * @param message PBPicture message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encodeDelimited(
      message: core_course.IPBPicture,
      writer?: $protobuf.Writer,
    ): $protobuf.Writer

    /**
     * Decodes a PBPicture message from the specified reader or buffer.
     * @param reader Reader or buffer to decode from
     * @param [length] Message length if known beforehand
     * @returns PBPicture
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decode(
      reader: $protobuf.Reader | Uint8Array,
      length?: number,
    ): core_course.PBPicture

    /**
     * Decodes a PBPicture message from the specified reader or buffer, length delimited.
     * @param reader Reader or buffer to decode from
     * @returns PBPicture
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decodeDelimited(
      reader: $protobuf.Reader | Uint8Array,
    ): core_course.PBPicture

    /**
     * Verifies a PBPicture message.
     * @param message Plain object to verify
     * @returns `null` if valid, otherwise the reason why it is not
     */
    public static verify(message: { [k: string]: any }): string | null

    /**
     * Creates a PBPicture message from a plain object. Also converts values to their respective internal types.
     * @param object Plain object
     * @returns PBPicture
     */
    public static fromObject(object: {
      [k: string]: any
    }): core_course.PBPicture

    /**
     * Creates a plain object from a PBPicture message. Also converts values to other types if specified.
     * @param message PBPicture
     * @param [options] Conversion options
     * @returns Plain object
     */
    public static toObject(
      message: core_course.PBPicture,
      options?: $protobuf.IConversionOptions,
    ): { [k: string]: any }

    /**
     * Converts this PBPicture to JSON.
     * @returns JSON object
     */
    public toJSON(): { [k: string]: any }
  }

  /** Properties of a PBAixVideo. */
  interface IPBAixVideo {
    /** PBAixVideo resourceId */
    resourceId?: string | null

    /** PBAixVideo videoFilesize */
    videoFilesize?: number | null

    /** PBAixVideo videoFilename */
    videoFilename?: string | null

    /** PBAixVideo videoUrl */
    videoUrl?: string | null

    /** PBAixVideo videoOriginFilename */
    videoOriginFilename?: string | null

    /** PBAixVideo videoDurationMsec */
    videoDurationMsec?: number | null

    /** PBAixVideo mediaFilesize */
    mediaFilesize?: number | null

    /** PBAixVideo mediaFilename */
    mediaFilename?: string | null

    /** PBAixVideo mediaUrl */
    mediaUrl?: string | null

    /** PBAixVideo mediaOriginFilename */
    mediaOriginFilename?: string | null

    /** PBAixVideo createdAtSec */
    createdAtSec?: number | null

    /** PBAixVideo updatedAtSec */
    updatedAtSec?: number | null

    /** PBAixVideo thumbnailUrl */
    thumbnailUrl?: string | null

    /** PBAixVideo layout */
    layout?: core_course.PBAixVideo.Layout.Enum | null

    /** PBAixVideo videoZegoFilename */
    videoZegoFilename?: string | null

    /** PBAixVideo videoAgoraFilename */
    videoAgoraFilename?: string | null
  }

  /** Represents a PBAixVideo. */
  class PBAixVideo implements IPBAixVideo {
    /**
     * Constructs a new PBAixVideo.
     * @param [properties] Properties to set
     */
    constructor(properties?: core_course.IPBAixVideo)

    /** PBAixVideo resourceId. */
    public resourceId: string

    /** PBAixVideo videoFilesize. */
    public videoFilesize: number

    /** PBAixVideo videoFilename. */
    public videoFilename: string

    /** PBAixVideo videoUrl. */
    public videoUrl: string

    /** PBAixVideo videoOriginFilename. */
    public videoOriginFilename: string

    /** PBAixVideo videoDurationMsec. */
    public videoDurationMsec: number

    /** PBAixVideo mediaFilesize. */
    public mediaFilesize: number

    /** PBAixVideo mediaFilename. */
    public mediaFilename: string

    /** PBAixVideo mediaUrl. */
    public mediaUrl: string

    /** PBAixVideo mediaOriginFilename. */
    public mediaOriginFilename: string

    /** PBAixVideo createdAtSec. */
    public createdAtSec: number

    /** PBAixVideo updatedAtSec. */
    public updatedAtSec: number

    /** PBAixVideo thumbnailUrl. */
    public thumbnailUrl: string

    /** PBAixVideo layout. */
    public layout: core_course.PBAixVideo.Layout.Enum

    /** PBAixVideo videoZegoFilename. */
    public videoZegoFilename: string

    /** PBAixVideo videoAgoraFilename. */
    public videoAgoraFilename: string

    /**
     * Creates a new PBAixVideo instance using the specified properties.
     * @param [properties] Properties to set
     * @returns PBAixVideo instance
     */
    public static create(
      properties?: core_course.IPBAixVideo,
    ): core_course.PBAixVideo

    /**
     * Encodes the specified PBAixVideo message. Does not implicitly {@link core_course.PBAixVideo.verify|verify} messages.
     * @param message PBAixVideo message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encode(
      message: core_course.IPBAixVideo,
      writer?: $protobuf.Writer,
    ): $protobuf.Writer

    /**
     * Encodes the specified PBAixVideo message, length delimited. Does not implicitly {@link core_course.PBAixVideo.verify|verify} messages.
     * @param message PBAixVideo message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encodeDelimited(
      message: core_course.IPBAixVideo,
      writer?: $protobuf.Writer,
    ): $protobuf.Writer

    /**
     * Decodes a PBAixVideo message from the specified reader or buffer.
     * @param reader Reader or buffer to decode from
     * @param [length] Message length if known beforehand
     * @returns PBAixVideo
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decode(
      reader: $protobuf.Reader | Uint8Array,
      length?: number,
    ): core_course.PBAixVideo

    /**
     * Decodes a PBAixVideo message from the specified reader or buffer, length delimited.
     * @param reader Reader or buffer to decode from
     * @returns PBAixVideo
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decodeDelimited(
      reader: $protobuf.Reader | Uint8Array,
    ): core_course.PBAixVideo

    /**
     * Verifies a PBAixVideo message.
     * @param message Plain object to verify
     * @returns `null` if valid, otherwise the reason why it is not
     */
    public static verify(message: { [k: string]: any }): string | null

    /**
     * Creates a PBAixVideo message from a plain object. Also converts values to their respective internal types.
     * @param object Plain object
     * @returns PBAixVideo
     */
    public static fromObject(object: {
      [k: string]: any
    }): core_course.PBAixVideo

    /**
     * Creates a plain object from a PBAixVideo message. Also converts values to other types if specified.
     * @param message PBAixVideo
     * @param [options] Conversion options
     * @returns Plain object
     */
    public static toObject(
      message: core_course.PBAixVideo,
      options?: $protobuf.IConversionOptions,
    ): { [k: string]: any }

    /**
     * Converts this PBAixVideo to JSON.
     * @returns JSON object
     */
    public toJSON(): { [k: string]: any }
  }

  namespace PBAixVideo {
    /** Properties of a Layout. */
    interface ILayout {}

    /** Represents a Layout. */
    class Layout implements ILayout {
      /**
       * Constructs a new Layout.
       * @param [properties] Properties to set
       */
      constructor(properties?: core_course.PBAixVideo.ILayout)

      /**
       * Creates a new Layout instance using the specified properties.
       * @param [properties] Properties to set
       * @returns Layout instance
       */
      public static create(
        properties?: core_course.PBAixVideo.ILayout,
      ): core_course.PBAixVideo.Layout

      /**
       * Encodes the specified Layout message. Does not implicitly {@link core_course.PBAixVideo.Layout.verify|verify} messages.
       * @param message Layout message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encode(
        message: core_course.PBAixVideo.ILayout,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Encodes the specified Layout message, length delimited. Does not implicitly {@link core_course.PBAixVideo.Layout.verify|verify} messages.
       * @param message Layout message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encodeDelimited(
        message: core_course.PBAixVideo.ILayout,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Decodes a Layout message from the specified reader or buffer.
       * @param reader Reader or buffer to decode from
       * @param [length] Message length if known beforehand
       * @returns Layout
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decode(
        reader: $protobuf.Reader | Uint8Array,
        length?: number,
      ): core_course.PBAixVideo.Layout

      /**
       * Decodes a Layout message from the specified reader or buffer, length delimited.
       * @param reader Reader or buffer to decode from
       * @returns Layout
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decodeDelimited(
        reader: $protobuf.Reader | Uint8Array,
      ): core_course.PBAixVideo.Layout

      /**
       * Verifies a Layout message.
       * @param message Plain object to verify
       * @returns `null` if valid, otherwise the reason why it is not
       */
      public static verify(message: { [k: string]: any }): string | null

      /**
       * Creates a Layout message from a plain object. Also converts values to their respective internal types.
       * @param object Plain object
       * @returns Layout
       */
      public static fromObject(object: {
        [k: string]: any
      }): core_course.PBAixVideo.Layout

      /**
       * Creates a plain object from a Layout message. Also converts values to other types if specified.
       * @param message Layout
       * @param [options] Conversion options
       * @returns Plain object
       */
      public static toObject(
        message: core_course.PBAixVideo.Layout,
        options?: $protobuf.IConversionOptions,
      ): { [k: string]: any }

      /**
       * Converts this Layout to JSON.
       * @returns JSON object
       */
      public toJSON(): { [k: string]: any }
    }

    namespace Layout {
      /** Enum enum. */
      enum Enum {
        Small = 0,
        Medium = 1,
        Large = 2,
      }
    }
  }

  /** Properties of a PBVideo. */
  interface IPBVideo {
    /** PBVideo resourceId */
    resourceId?: string | null

    /** PBVideo filesize */
    filesize?: number | null

    /** PBVideo filename */
    filename?: string | null

    /** PBVideo url */
    url?: string | null

    /** PBVideo assUrl */
    assUrl?: string | null

    /** PBVideo coverImageUrl */
    coverImageUrl?: string | null

    /** PBVideo chksum */
    chksum?: string | null

    /** PBVideo scorers */
    scorers?: core_course.IPBScorer[] | null

    /** PBVideo pbScorers */
    pbScorers?: core_course.IPBScorer[] | null

    /** PBVideo clips */
    clips?: core_course.IPBVideoClip[] | null

    /** PBVideo durationMsec */
    durationMsec?: number | null

    /** PBVideo originFilename */
    originFilename?: string | null

    /** PBVideo createdAtSec */
    createdAtSec?: number | null

    /** PBVideo updatedAtSec */
    updatedAtSec?: number | null

    /** PBVideo originalClips */
    originalClips?: core_course.IPBVideoClip[] | null
  }

  /** Represents a PBVideo. */
  class PBVideo implements IPBVideo {
    /**
     * Constructs a new PBVideo.
     * @param [properties] Properties to set
     */
    constructor(properties?: core_course.IPBVideo)

    /** PBVideo resourceId. */
    public resourceId: string

    /** PBVideo filesize. */
    public filesize: number

    /** PBVideo filename. */
    public filename: string

    /** PBVideo url. */
    public url: string

    /** PBVideo assUrl. */
    public assUrl: string

    /** PBVideo coverImageUrl. */
    public coverImageUrl: string

    /** PBVideo chksum. */
    public chksum: string

    /** PBVideo scorers. */
    public scorers: core_course.IPBScorer[]

    /** PBVideo pbScorers. */
    public pbScorers: core_course.IPBScorer[]

    /** PBVideo clips. */
    public clips: core_course.IPBVideoClip[]

    /** PBVideo durationMsec. */
    public durationMsec: number

    /** PBVideo originFilename. */
    public originFilename: string

    /** PBVideo createdAtSec. */
    public createdAtSec: number

    /** PBVideo updatedAtSec. */
    public updatedAtSec: number

    /** PBVideo originalClips. */
    public originalClips: core_course.IPBVideoClip[]

    /**
     * Creates a new PBVideo instance using the specified properties.
     * @param [properties] Properties to set
     * @returns PBVideo instance
     */
    public static create(properties?: core_course.IPBVideo): core_course.PBVideo

    /**
     * Encodes the specified PBVideo message. Does not implicitly {@link core_course.PBVideo.verify|verify} messages.
     * @param message PBVideo message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encode(
      message: core_course.IPBVideo,
      writer?: $protobuf.Writer,
    ): $protobuf.Writer

    /**
     * Encodes the specified PBVideo message, length delimited. Does not implicitly {@link core_course.PBVideo.verify|verify} messages.
     * @param message PBVideo message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encodeDelimited(
      message: core_course.IPBVideo,
      writer?: $protobuf.Writer,
    ): $protobuf.Writer

    /**
     * Decodes a PBVideo message from the specified reader or buffer.
     * @param reader Reader or buffer to decode from
     * @param [length] Message length if known beforehand
     * @returns PBVideo
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decode(
      reader: $protobuf.Reader | Uint8Array,
      length?: number,
    ): core_course.PBVideo

    /**
     * Decodes a PBVideo message from the specified reader or buffer, length delimited.
     * @param reader Reader or buffer to decode from
     * @returns PBVideo
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decodeDelimited(
      reader: $protobuf.Reader | Uint8Array,
    ): core_course.PBVideo

    /**
     * Verifies a PBVideo message.
     * @param message Plain object to verify
     * @returns `null` if valid, otherwise the reason why it is not
     */
    public static verify(message: { [k: string]: any }): string | null

    /**
     * Creates a PBVideo message from a plain object. Also converts values to their respective internal types.
     * @param object Plain object
     * @returns PBVideo
     */
    public static fromObject(object: { [k: string]: any }): core_course.PBVideo

    /**
     * Creates a plain object from a PBVideo message. Also converts values to other types if specified.
     * @param message PBVideo
     * @param [options] Conversion options
     * @returns Plain object
     */
    public static toObject(
      message: core_course.PBVideo,
      options?: $protobuf.IConversionOptions,
    ): { [k: string]: any }

    /**
     * Converts this PBVideo to JSON.
     * @returns JSON object
     */
    public toJSON(): { [k: string]: any }
  }

  /** Properties of a PBVideoClip. */
  interface IPBVideoClip {
    /** PBVideoClip sourceVideoId */
    sourceVideoId?: string | null

    /** PBVideoClip startAt */
    startAt?: number | null

    /** PBVideoClip endAt */
    endAt?: number | null

    /** PBVideoClip spokenText */
    spokenText?: string | null

    /** PBVideoClip scorerFilename */
    scorerFilename?: string | null

    /** PBVideoClip scorerPbFilename */
    scorerPbFilename?: string | null

    /** PBVideoClip resourceId */
    resourceId?: string | null

    /** PBVideoClip text */
    text?: string | null

    /** PBVideoClip richText */
    richText?: string | null

    /** PBVideoClip karaokeWord */
    karaokeWord?: core_course.PBVideoClip.IKaraokeWord[] | null
  }

  /** Represents a PBVideoClip. */
  class PBVideoClip implements IPBVideoClip {
    /**
     * Constructs a new PBVideoClip.
     * @param [properties] Properties to set
     */
    constructor(properties?: core_course.IPBVideoClip)

    /** PBVideoClip sourceVideoId. */
    public sourceVideoId: string

    /** PBVideoClip startAt. */
    public startAt: number

    /** PBVideoClip endAt. */
    public endAt: number

    /** PBVideoClip spokenText. */
    public spokenText: string

    /** PBVideoClip scorerFilename. */
    public scorerFilename: string

    /** PBVideoClip scorerPbFilename. */
    public scorerPbFilename: string

    /** PBVideoClip resourceId. */
    public resourceId: string

    /** PBVideoClip text. */
    public text: string

    /** PBVideoClip richText. */
    public richText: string

    /** PBVideoClip karaokeWord. */
    public karaokeWord: core_course.PBVideoClip.IKaraokeWord[]

    /**
     * Creates a new PBVideoClip instance using the specified properties.
     * @param [properties] Properties to set
     * @returns PBVideoClip instance
     */
    public static create(
      properties?: core_course.IPBVideoClip,
    ): core_course.PBVideoClip

    /**
     * Encodes the specified PBVideoClip message. Does not implicitly {@link core_course.PBVideoClip.verify|verify} messages.
     * @param message PBVideoClip message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encode(
      message: core_course.IPBVideoClip,
      writer?: $protobuf.Writer,
    ): $protobuf.Writer

    /**
     * Encodes the specified PBVideoClip message, length delimited. Does not implicitly {@link core_course.PBVideoClip.verify|verify} messages.
     * @param message PBVideoClip message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encodeDelimited(
      message: core_course.IPBVideoClip,
      writer?: $protobuf.Writer,
    ): $protobuf.Writer

    /**
     * Decodes a PBVideoClip message from the specified reader or buffer.
     * @param reader Reader or buffer to decode from
     * @param [length] Message length if known beforehand
     * @returns PBVideoClip
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decode(
      reader: $protobuf.Reader | Uint8Array,
      length?: number,
    ): core_course.PBVideoClip

    /**
     * Decodes a PBVideoClip message from the specified reader or buffer, length delimited.
     * @param reader Reader or buffer to decode from
     * @returns PBVideoClip
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decodeDelimited(
      reader: $protobuf.Reader | Uint8Array,
    ): core_course.PBVideoClip

    /**
     * Verifies a PBVideoClip message.
     * @param message Plain object to verify
     * @returns `null` if valid, otherwise the reason why it is not
     */
    public static verify(message: { [k: string]: any }): string | null

    /**
     * Creates a PBVideoClip message from a plain object. Also converts values to their respective internal types.
     * @param object Plain object
     * @returns PBVideoClip
     */
    public static fromObject(object: {
      [k: string]: any
    }): core_course.PBVideoClip

    /**
     * Creates a plain object from a PBVideoClip message. Also converts values to other types if specified.
     * @param message PBVideoClip
     * @param [options] Conversion options
     * @returns Plain object
     */
    public static toObject(
      message: core_course.PBVideoClip,
      options?: $protobuf.IConversionOptions,
    ): { [k: string]: any }

    /**
     * Converts this PBVideoClip to JSON.
     * @returns JSON object
     */
    public toJSON(): { [k: string]: any }
  }

  namespace PBVideoClip {
    /** Properties of a KaraokeWord. */
    interface IKaraokeWord {
      /** KaraokeWord word */
      word?: string | null

      /** KaraokeWord startMsec */
      startMsec?: number | Long | null

      /** KaraokeWord endMsec */
      endMsec?: number | Long | null
    }

    /** Represents a KaraokeWord. */
    class KaraokeWord implements IKaraokeWord {
      /**
       * Constructs a new KaraokeWord.
       * @param [properties] Properties to set
       */
      constructor(properties?: core_course.PBVideoClip.IKaraokeWord)

      /** KaraokeWord word. */
      public word: string

      /** KaraokeWord startMsec. */
      public startMsec: number | Long

      /** KaraokeWord endMsec. */
      public endMsec: number | Long

      /**
       * Creates a new KaraokeWord instance using the specified properties.
       * @param [properties] Properties to set
       * @returns KaraokeWord instance
       */
      public static create(
        properties?: core_course.PBVideoClip.IKaraokeWord,
      ): core_course.PBVideoClip.KaraokeWord

      /**
       * Encodes the specified KaraokeWord message. Does not implicitly {@link core_course.PBVideoClip.KaraokeWord.verify|verify} messages.
       * @param message KaraokeWord message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encode(
        message: core_course.PBVideoClip.IKaraokeWord,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Encodes the specified KaraokeWord message, length delimited. Does not implicitly {@link core_course.PBVideoClip.KaraokeWord.verify|verify} messages.
       * @param message KaraokeWord message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encodeDelimited(
        message: core_course.PBVideoClip.IKaraokeWord,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Decodes a KaraokeWord message from the specified reader or buffer.
       * @param reader Reader or buffer to decode from
       * @param [length] Message length if known beforehand
       * @returns KaraokeWord
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decode(
        reader: $protobuf.Reader | Uint8Array,
        length?: number,
      ): core_course.PBVideoClip.KaraokeWord

      /**
       * Decodes a KaraokeWord message from the specified reader or buffer, length delimited.
       * @param reader Reader or buffer to decode from
       * @returns KaraokeWord
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decodeDelimited(
        reader: $protobuf.Reader | Uint8Array,
      ): core_course.PBVideoClip.KaraokeWord

      /**
       * Verifies a KaraokeWord message.
       * @param message Plain object to verify
       * @returns `null` if valid, otherwise the reason why it is not
       */
      public static verify(message: { [k: string]: any }): string | null

      /**
       * Creates a KaraokeWord message from a plain object. Also converts values to their respective internal types.
       * @param object Plain object
       * @returns KaraokeWord
       */
      public static fromObject(object: {
        [k: string]: any
      }): core_course.PBVideoClip.KaraokeWord

      /**
       * Creates a plain object from a KaraokeWord message. Also converts values to other types if specified.
       * @param message KaraokeWord
       * @param [options] Conversion options
       * @returns Plain object
       */
      public static toObject(
        message: core_course.PBVideoClip.KaraokeWord,
        options?: $protobuf.IConversionOptions,
      ): { [k: string]: any }

      /**
       * Converts this KaraokeWord to JSON.
       * @returns JSON object
       */
      public toJSON(): { [k: string]: any }
    }
  }

  /** Properties of a PBAsset. */
  interface IPBAsset {
    /** PBAsset pictures */
    pictures?: core_course.IPBPicture[] | null

    /** PBAsset audios */
    audios?: core_course.IPBAudio[] | null

    /** PBAsset videos */
    videos?: core_course.IPBVideo[] | null

    /** PBAsset aixVideos */
    aixVideos?: core_course.IPBAixVideo[] | null
  }

  /** Represents a PBAsset. */
  class PBAsset implements IPBAsset {
    /**
     * Constructs a new PBAsset.
     * @param [properties] Properties to set
     */
    constructor(properties?: core_course.IPBAsset)

    /** PBAsset pictures. */
    public pictures: core_course.IPBPicture[]

    /** PBAsset audios. */
    public audios: core_course.IPBAudio[]

    /** PBAsset videos. */
    public videos: core_course.IPBVideo[]

    /** PBAsset aixVideos. */
    public aixVideos: core_course.IPBAixVideo[]

    /**
     * Creates a new PBAsset instance using the specified properties.
     * @param [properties] Properties to set
     * @returns PBAsset instance
     */
    public static create(properties?: core_course.IPBAsset): core_course.PBAsset

    /**
     * Encodes the specified PBAsset message. Does not implicitly {@link core_course.PBAsset.verify|verify} messages.
     * @param message PBAsset message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encode(
      message: core_course.IPBAsset,
      writer?: $protobuf.Writer,
    ): $protobuf.Writer

    /**
     * Encodes the specified PBAsset message, length delimited. Does not implicitly {@link core_course.PBAsset.verify|verify} messages.
     * @param message PBAsset message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encodeDelimited(
      message: core_course.IPBAsset,
      writer?: $protobuf.Writer,
    ): $protobuf.Writer

    /**
     * Decodes a PBAsset message from the specified reader or buffer.
     * @param reader Reader or buffer to decode from
     * @param [length] Message length if known beforehand
     * @returns PBAsset
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decode(
      reader: $protobuf.Reader | Uint8Array,
      length?: number,
    ): core_course.PBAsset

    /**
     * Decodes a PBAsset message from the specified reader or buffer, length delimited.
     * @param reader Reader or buffer to decode from
     * @returns PBAsset
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decodeDelimited(
      reader: $protobuf.Reader | Uint8Array,
    ): core_course.PBAsset

    /**
     * Verifies a PBAsset message.
     * @param message Plain object to verify
     * @returns `null` if valid, otherwise the reason why it is not
     */
    public static verify(message: { [k: string]: any }): string | null

    /**
     * Creates a PBAsset message from a plain object. Also converts values to their respective internal types.
     * @param object Plain object
     * @returns PBAsset
     */
    public static fromObject(object: { [k: string]: any }): core_course.PBAsset

    /**
     * Creates a plain object from a PBAsset message. Also converts values to other types if specified.
     * @param message PBAsset
     * @param [options] Conversion options
     * @returns Plain object
     */
    public static toObject(
      message: core_course.PBAsset,
      options?: $protobuf.IConversionOptions,
    ): { [k: string]: any }

    /**
     * Converts this PBAsset to JSON.
     * @returns JSON object
     */
    public toJSON(): { [k: string]: any }
  }

  /** Properties of a PBScorer. */
  interface IPBScorer {
    /** PBScorer filesize */
    filesize?: number | null

    /** PBScorer filename */
    filename?: string | null

    /** PBScorer url */
    url?: string | null

    /** PBScorer version */
    version?: string | null
  }

  /** Represents a PBScorer. */
  class PBScorer implements IPBScorer {
    /**
     * Constructs a new PBScorer.
     * @param [properties] Properties to set
     */
    constructor(properties?: core_course.IPBScorer)

    /** PBScorer filesize. */
    public filesize: number

    /** PBScorer filename. */
    public filename: string

    /** PBScorer url. */
    public url: string

    /** PBScorer version. */
    public version: string

    /**
     * Creates a new PBScorer instance using the specified properties.
     * @param [properties] Properties to set
     * @returns PBScorer instance
     */
    public static create(
      properties?: core_course.IPBScorer,
    ): core_course.PBScorer

    /**
     * Encodes the specified PBScorer message. Does not implicitly {@link core_course.PBScorer.verify|verify} messages.
     * @param message PBScorer message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encode(
      message: core_course.IPBScorer,
      writer?: $protobuf.Writer,
    ): $protobuf.Writer

    /**
     * Encodes the specified PBScorer message, length delimited. Does not implicitly {@link core_course.PBScorer.verify|verify} messages.
     * @param message PBScorer message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encodeDelimited(
      message: core_course.IPBScorer,
      writer?: $protobuf.Writer,
    ): $protobuf.Writer

    /**
     * Decodes a PBScorer message from the specified reader or buffer.
     * @param reader Reader or buffer to decode from
     * @param [length] Message length if known beforehand
     * @returns PBScorer
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decode(
      reader: $protobuf.Reader | Uint8Array,
      length?: number,
    ): core_course.PBScorer

    /**
     * Decodes a PBScorer message from the specified reader or buffer, length delimited.
     * @param reader Reader or buffer to decode from
     * @returns PBScorer
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decodeDelimited(
      reader: $protobuf.Reader | Uint8Array,
    ): core_course.PBScorer

    /**
     * Verifies a PBScorer message.
     * @param message Plain object to verify
     * @returns `null` if valid, otherwise the reason why it is not
     */
    public static verify(message: { [k: string]: any }): string | null

    /**
     * Creates a PBScorer message from a plain object. Also converts values to their respective internal types.
     * @param object Plain object
     * @returns PBScorer
     */
    public static fromObject(object: { [k: string]: any }): core_course.PBScorer

    /**
     * Creates a plain object from a PBScorer message. Also converts values to other types if specified.
     * @param message PBScorer
     * @param [options] Conversion options
     * @returns Plain object
     */
    public static toObject(
      message: core_course.PBScorer,
      options?: $protobuf.IConversionOptions,
    ): { [k: string]: any }

    /**
     * Converts this PBScorer to JSON.
     * @returns JSON object
     */
    public toJSON(): { [k: string]: any }
  }

  /** Properties of a PBDisplayFormat. */
  interface IPBDisplayFormat {
    /** PBDisplayFormat name */
    name?: string | null

    /** PBDisplayFormat itemCount */
    itemCount?: number | null

    /** PBDisplayFormat styles */
    styles?: core_course.PBDisplayFormat.IPBDisplayFormatStyle[] | null

    /** PBDisplayFormat speakerCount */
    speakerCount?: number | null
  }

  /** Represents a PBDisplayFormat. */
  class PBDisplayFormat implements IPBDisplayFormat {
    /**
     * Constructs a new PBDisplayFormat.
     * @param [properties] Properties to set
     */
    constructor(properties?: core_course.IPBDisplayFormat)

    /** PBDisplayFormat name. */
    public name: string

    /** PBDisplayFormat itemCount. */
    public itemCount: number

    /** PBDisplayFormat styles. */
    public styles: core_course.PBDisplayFormat.IPBDisplayFormatStyle[]

    /** PBDisplayFormat speakerCount. */
    public speakerCount: number

    /**
     * Creates a new PBDisplayFormat instance using the specified properties.
     * @param [properties] Properties to set
     * @returns PBDisplayFormat instance
     */
    public static create(
      properties?: core_course.IPBDisplayFormat,
    ): core_course.PBDisplayFormat

    /**
     * Encodes the specified PBDisplayFormat message. Does not implicitly {@link core_course.PBDisplayFormat.verify|verify} messages.
     * @param message PBDisplayFormat message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encode(
      message: core_course.IPBDisplayFormat,
      writer?: $protobuf.Writer,
    ): $protobuf.Writer

    /**
     * Encodes the specified PBDisplayFormat message, length delimited. Does not implicitly {@link core_course.PBDisplayFormat.verify|verify} messages.
     * @param message PBDisplayFormat message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encodeDelimited(
      message: core_course.IPBDisplayFormat,
      writer?: $protobuf.Writer,
    ): $protobuf.Writer

    /**
     * Decodes a PBDisplayFormat message from the specified reader or buffer.
     * @param reader Reader or buffer to decode from
     * @param [length] Message length if known beforehand
     * @returns PBDisplayFormat
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decode(
      reader: $protobuf.Reader | Uint8Array,
      length?: number,
    ): core_course.PBDisplayFormat

    /**
     * Decodes a PBDisplayFormat message from the specified reader or buffer, length delimited.
     * @param reader Reader or buffer to decode from
     * @returns PBDisplayFormat
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decodeDelimited(
      reader: $protobuf.Reader | Uint8Array,
    ): core_course.PBDisplayFormat

    /**
     * Verifies a PBDisplayFormat message.
     * @param message Plain object to verify
     * @returns `null` if valid, otherwise the reason why it is not
     */
    public static verify(message: { [k: string]: any }): string | null

    /**
     * Creates a PBDisplayFormat message from a plain object. Also converts values to their respective internal types.
     * @param object Plain object
     * @returns PBDisplayFormat
     */
    public static fromObject(object: {
      [k: string]: any
    }): core_course.PBDisplayFormat

    /**
     * Creates a plain object from a PBDisplayFormat message. Also converts values to other types if specified.
     * @param message PBDisplayFormat
     * @param [options] Conversion options
     * @returns Plain object
     */
    public static toObject(
      message: core_course.PBDisplayFormat,
      options?: $protobuf.IConversionOptions,
    ): { [k: string]: any }

    /**
     * Converts this PBDisplayFormat to JSON.
     * @returns JSON object
     */
    public toJSON(): { [k: string]: any }
  }

  namespace PBDisplayFormat {
    /** Properties of a PBDisplayFormatStyle. */
    interface IPBDisplayFormatStyle {
      /** PBDisplayFormatStyle index */
      index?: number | null

      /** PBDisplayFormatStyle display */
      display?: string | null
    }

    /** Represents a PBDisplayFormatStyle. */
    class PBDisplayFormatStyle implements IPBDisplayFormatStyle {
      /**
       * Constructs a new PBDisplayFormatStyle.
       * @param [properties] Properties to set
       */
      constructor(
        properties?: core_course.PBDisplayFormat.IPBDisplayFormatStyle,
      )

      /** PBDisplayFormatStyle index. */
      public index: number

      /** PBDisplayFormatStyle display. */
      public display: string

      /**
       * Creates a new PBDisplayFormatStyle instance using the specified properties.
       * @param [properties] Properties to set
       * @returns PBDisplayFormatStyle instance
       */
      public static create(
        properties?: core_course.PBDisplayFormat.IPBDisplayFormatStyle,
      ): core_course.PBDisplayFormat.PBDisplayFormatStyle

      /**
       * Encodes the specified PBDisplayFormatStyle message. Does not implicitly {@link core_course.PBDisplayFormat.PBDisplayFormatStyle.verify|verify} messages.
       * @param message PBDisplayFormatStyle message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encode(
        message: core_course.PBDisplayFormat.IPBDisplayFormatStyle,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Encodes the specified PBDisplayFormatStyle message, length delimited. Does not implicitly {@link core_course.PBDisplayFormat.PBDisplayFormatStyle.verify|verify} messages.
       * @param message PBDisplayFormatStyle message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encodeDelimited(
        message: core_course.PBDisplayFormat.IPBDisplayFormatStyle,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Decodes a PBDisplayFormatStyle message from the specified reader or buffer.
       * @param reader Reader or buffer to decode from
       * @param [length] Message length if known beforehand
       * @returns PBDisplayFormatStyle
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decode(
        reader: $protobuf.Reader | Uint8Array,
        length?: number,
      ): core_course.PBDisplayFormat.PBDisplayFormatStyle

      /**
       * Decodes a PBDisplayFormatStyle message from the specified reader or buffer, length delimited.
       * @param reader Reader or buffer to decode from
       * @returns PBDisplayFormatStyle
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decodeDelimited(
        reader: $protobuf.Reader | Uint8Array,
      ): core_course.PBDisplayFormat.PBDisplayFormatStyle

      /**
       * Verifies a PBDisplayFormatStyle message.
       * @param message Plain object to verify
       * @returns `null` if valid, otherwise the reason why it is not
       */
      public static verify(message: { [k: string]: any }): string | null

      /**
       * Creates a PBDisplayFormatStyle message from a plain object. Also converts values to their respective internal types.
       * @param object Plain object
       * @returns PBDisplayFormatStyle
       */
      public static fromObject(object: {
        [k: string]: any
      }): core_course.PBDisplayFormat.PBDisplayFormatStyle

      /**
       * Creates a plain object from a PBDisplayFormatStyle message. Also converts values to other types if specified.
       * @param message PBDisplayFormatStyle
       * @param [options] Conversion options
       * @returns Plain object
       */
      public static toObject(
        message: core_course.PBDisplayFormat.PBDisplayFormatStyle,
        options?: $protobuf.IConversionOptions,
      ): { [k: string]: any }

      /**
       * Converts this PBDisplayFormatStyle to JSON.
       * @returns JSON object
       */
      public toJSON(): { [k: string]: any }
    }
  }

  /** Properties of a PBDisplayFormatItem. */
  interface IPBDisplayFormatItem {
    /** PBDisplayFormatItem type */
    type?: string | null

    /** PBDisplayFormatItem pictureId */
    pictureId?: string | null

    /** PBDisplayFormatItem text */
    text?: string | null

    /** PBDisplayFormatItem speakerRole */
    speakerRole?: string | null
  }

  /** Represents a PBDisplayFormatItem. */
  class PBDisplayFormatItem implements IPBDisplayFormatItem {
    /**
     * Constructs a new PBDisplayFormatItem.
     * @param [properties] Properties to set
     */
    constructor(properties?: core_course.IPBDisplayFormatItem)

    /** PBDisplayFormatItem type. */
    public type: string

    /** PBDisplayFormatItem pictureId. */
    public pictureId: string

    /** PBDisplayFormatItem text. */
    public text: string

    /** PBDisplayFormatItem speakerRole. */
    public speakerRole: string

    /**
     * Creates a new PBDisplayFormatItem instance using the specified properties.
     * @param [properties] Properties to set
     * @returns PBDisplayFormatItem instance
     */
    public static create(
      properties?: core_course.IPBDisplayFormatItem,
    ): core_course.PBDisplayFormatItem

    /**
     * Encodes the specified PBDisplayFormatItem message. Does not implicitly {@link core_course.PBDisplayFormatItem.verify|verify} messages.
     * @param message PBDisplayFormatItem message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encode(
      message: core_course.IPBDisplayFormatItem,
      writer?: $protobuf.Writer,
    ): $protobuf.Writer

    /**
     * Encodes the specified PBDisplayFormatItem message, length delimited. Does not implicitly {@link core_course.PBDisplayFormatItem.verify|verify} messages.
     * @param message PBDisplayFormatItem message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encodeDelimited(
      message: core_course.IPBDisplayFormatItem,
      writer?: $protobuf.Writer,
    ): $protobuf.Writer

    /**
     * Decodes a PBDisplayFormatItem message from the specified reader or buffer.
     * @param reader Reader or buffer to decode from
     * @param [length] Message length if known beforehand
     * @returns PBDisplayFormatItem
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decode(
      reader: $protobuf.Reader | Uint8Array,
      length?: number,
    ): core_course.PBDisplayFormatItem

    /**
     * Decodes a PBDisplayFormatItem message from the specified reader or buffer, length delimited.
     * @param reader Reader or buffer to decode from
     * @returns PBDisplayFormatItem
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decodeDelimited(
      reader: $protobuf.Reader | Uint8Array,
    ): core_course.PBDisplayFormatItem

    /**
     * Verifies a PBDisplayFormatItem message.
     * @param message Plain object to verify
     * @returns `null` if valid, otherwise the reason why it is not
     */
    public static verify(message: { [k: string]: any }): string | null

    /**
     * Creates a PBDisplayFormatItem message from a plain object. Also converts values to their respective internal types.
     * @param object Plain object
     * @returns PBDisplayFormatItem
     */
    public static fromObject(object: {
      [k: string]: any
    }): core_course.PBDisplayFormatItem

    /**
     * Creates a plain object from a PBDisplayFormatItem message. Also converts values to other types if specified.
     * @param message PBDisplayFormatItem
     * @param [options] Conversion options
     * @returns Plain object
     */
    public static toObject(
      message: core_course.PBDisplayFormatItem,
      options?: $protobuf.IConversionOptions,
    ): { [k: string]: any }

    /**
     * Converts this PBDisplayFormatItem to JSON.
     * @returns JSON object
     */
    public toJSON(): { [k: string]: any }
  }

  /** Properties of a PBAudioElement. */
  interface IPBAudioElement {
    /** PBAudioElement audioId */
    audioId?: string | null

    /** PBAudioElement speakerPictureId */
    speakerPictureId?: string | null

    /** PBAudioElement animations */
    animations?: core_course.PBAudioElement.IPBAnimation[] | null

    /** PBAudioElement extraPictureIds */
    extraPictureIds?: string[] | null

    /** PBAudioElement text */
    text?: string | null
  }

  /** Represents a PBAudioElement. */
  class PBAudioElement implements IPBAudioElement {
    /**
     * Constructs a new PBAudioElement.
     * @param [properties] Properties to set
     */
    constructor(properties?: core_course.IPBAudioElement)

    /** PBAudioElement audioId. */
    public audioId: string

    /** PBAudioElement speakerPictureId. */
    public speakerPictureId: string

    /** PBAudioElement animations. */
    public animations: core_course.PBAudioElement.IPBAnimation[]

    /** PBAudioElement extraPictureIds. */
    public extraPictureIds: string[]

    /** PBAudioElement text. */
    public text: string

    /**
     * Creates a new PBAudioElement instance using the specified properties.
     * @param [properties] Properties to set
     * @returns PBAudioElement instance
     */
    public static create(
      properties?: core_course.IPBAudioElement,
    ): core_course.PBAudioElement

    /**
     * Encodes the specified PBAudioElement message. Does not implicitly {@link core_course.PBAudioElement.verify|verify} messages.
     * @param message PBAudioElement message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encode(
      message: core_course.IPBAudioElement,
      writer?: $protobuf.Writer,
    ): $protobuf.Writer

    /**
     * Encodes the specified PBAudioElement message, length delimited. Does not implicitly {@link core_course.PBAudioElement.verify|verify} messages.
     * @param message PBAudioElement message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encodeDelimited(
      message: core_course.IPBAudioElement,
      writer?: $protobuf.Writer,
    ): $protobuf.Writer

    /**
     * Decodes a PBAudioElement message from the specified reader or buffer.
     * @param reader Reader or buffer to decode from
     * @param [length] Message length if known beforehand
     * @returns PBAudioElement
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decode(
      reader: $protobuf.Reader | Uint8Array,
      length?: number,
    ): core_course.PBAudioElement

    /**
     * Decodes a PBAudioElement message from the specified reader or buffer, length delimited.
     * @param reader Reader or buffer to decode from
     * @returns PBAudioElement
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decodeDelimited(
      reader: $protobuf.Reader | Uint8Array,
    ): core_course.PBAudioElement

    /**
     * Verifies a PBAudioElement message.
     * @param message Plain object to verify
     * @returns `null` if valid, otherwise the reason why it is not
     */
    public static verify(message: { [k: string]: any }): string | null

    /**
     * Creates a PBAudioElement message from a plain object. Also converts values to their respective internal types.
     * @param object Plain object
     * @returns PBAudioElement
     */
    public static fromObject(object: {
      [k: string]: any
    }): core_course.PBAudioElement

    /**
     * Creates a plain object from a PBAudioElement message. Also converts values to other types if specified.
     * @param message PBAudioElement
     * @param [options] Conversion options
     * @returns Plain object
     */
    public static toObject(
      message: core_course.PBAudioElement,
      options?: $protobuf.IConversionOptions,
    ): { [k: string]: any }

    /**
     * Converts this PBAudioElement to JSON.
     * @returns JSON object
     */
    public toJSON(): { [k: string]: any }
  }

  namespace PBAudioElement {
    /** Properties of a PBAnimation. */
    interface IPBAnimation {
      /** PBAnimation name */
      name?: string | null

      /** PBAnimation index */
      index?: number | null

      /** PBAnimation transitionAt */
      transitionAt?: number | null

      /** PBAnimation pictureId */
      pictureId?: string | null
    }

    /** Represents a PBAnimation. */
    class PBAnimation implements IPBAnimation {
      /**
       * Constructs a new PBAnimation.
       * @param [properties] Properties to set
       */
      constructor(properties?: core_course.PBAudioElement.IPBAnimation)

      /** PBAnimation name. */
      public name: string

      /** PBAnimation index. */
      public index: number

      /** PBAnimation transitionAt. */
      public transitionAt: number

      /** PBAnimation pictureId. */
      public pictureId: string

      /**
       * Creates a new PBAnimation instance using the specified properties.
       * @param [properties] Properties to set
       * @returns PBAnimation instance
       */
      public static create(
        properties?: core_course.PBAudioElement.IPBAnimation,
      ): core_course.PBAudioElement.PBAnimation

      /**
       * Encodes the specified PBAnimation message. Does not implicitly {@link core_course.PBAudioElement.PBAnimation.verify|verify} messages.
       * @param message PBAnimation message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encode(
        message: core_course.PBAudioElement.IPBAnimation,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Encodes the specified PBAnimation message, length delimited. Does not implicitly {@link core_course.PBAudioElement.PBAnimation.verify|verify} messages.
       * @param message PBAnimation message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encodeDelimited(
        message: core_course.PBAudioElement.IPBAnimation,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Decodes a PBAnimation message from the specified reader or buffer.
       * @param reader Reader or buffer to decode from
       * @param [length] Message length if known beforehand
       * @returns PBAnimation
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decode(
        reader: $protobuf.Reader | Uint8Array,
        length?: number,
      ): core_course.PBAudioElement.PBAnimation

      /**
       * Decodes a PBAnimation message from the specified reader or buffer, length delimited.
       * @param reader Reader or buffer to decode from
       * @returns PBAnimation
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decodeDelimited(
        reader: $protobuf.Reader | Uint8Array,
      ): core_course.PBAudioElement.PBAnimation

      /**
       * Verifies a PBAnimation message.
       * @param message Plain object to verify
       * @returns `null` if valid, otherwise the reason why it is not
       */
      public static verify(message: { [k: string]: any }): string | null

      /**
       * Creates a PBAnimation message from a plain object. Also converts values to their respective internal types.
       * @param object Plain object
       * @returns PBAnimation
       */
      public static fromObject(object: {
        [k: string]: any
      }): core_course.PBAudioElement.PBAnimation

      /**
       * Creates a plain object from a PBAnimation message. Also converts values to other types if specified.
       * @param message PBAnimation
       * @param [options] Conversion options
       * @returns Plain object
       */
      public static toObject(
        message: core_course.PBAudioElement.PBAnimation,
        options?: $protobuf.IConversionOptions,
      ): { [k: string]: any }

      /**
       * Converts this PBAnimation to JSON.
       * @returns JSON object
       */
      public toJSON(): { [k: string]: any }
    }
  }

  /** Properties of a PBVideoElement. */
  interface IPBVideoElement {
    /** PBVideoElement videoId */
    videoId?: string | null

    /** PBVideoElement clips */
    clips?: core_course.IPBVideoClip[] | null

    /** PBVideoElement playControl */
    playControl?: core_course.PBVideoElement.IPlayControl | null
  }

  /** Represents a PBVideoElement. */
  class PBVideoElement implements IPBVideoElement {
    /**
     * Constructs a new PBVideoElement.
     * @param [properties] Properties to set
     */
    constructor(properties?: core_course.IPBVideoElement)

    /** PBVideoElement videoId. */
    public videoId: string

    /** PBVideoElement clips. */
    public clips: core_course.IPBVideoClip[]

    /** PBVideoElement playControl. */
    public playControl?: core_course.PBVideoElement.IPlayControl | null

    /**
     * Creates a new PBVideoElement instance using the specified properties.
     * @param [properties] Properties to set
     * @returns PBVideoElement instance
     */
    public static create(
      properties?: core_course.IPBVideoElement,
    ): core_course.PBVideoElement

    /**
     * Encodes the specified PBVideoElement message. Does not implicitly {@link core_course.PBVideoElement.verify|verify} messages.
     * @param message PBVideoElement message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encode(
      message: core_course.IPBVideoElement,
      writer?: $protobuf.Writer,
    ): $protobuf.Writer

    /**
     * Encodes the specified PBVideoElement message, length delimited. Does not implicitly {@link core_course.PBVideoElement.verify|verify} messages.
     * @param message PBVideoElement message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encodeDelimited(
      message: core_course.IPBVideoElement,
      writer?: $protobuf.Writer,
    ): $protobuf.Writer

    /**
     * Decodes a PBVideoElement message from the specified reader or buffer.
     * @param reader Reader or buffer to decode from
     * @param [length] Message length if known beforehand
     * @returns PBVideoElement
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decode(
      reader: $protobuf.Reader | Uint8Array,
      length?: number,
    ): core_course.PBVideoElement

    /**
     * Decodes a PBVideoElement message from the specified reader or buffer, length delimited.
     * @param reader Reader or buffer to decode from
     * @returns PBVideoElement
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decodeDelimited(
      reader: $protobuf.Reader | Uint8Array,
    ): core_course.PBVideoElement

    /**
     * Verifies a PBVideoElement message.
     * @param message Plain object to verify
     * @returns `null` if valid, otherwise the reason why it is not
     */
    public static verify(message: { [k: string]: any }): string | null

    /**
     * Creates a PBVideoElement message from a plain object. Also converts values to their respective internal types.
     * @param object Plain object
     * @returns PBVideoElement
     */
    public static fromObject(object: {
      [k: string]: any
    }): core_course.PBVideoElement

    /**
     * Creates a plain object from a PBVideoElement message. Also converts values to other types if specified.
     * @param message PBVideoElement
     * @param [options] Conversion options
     * @returns Plain object
     */
    public static toObject(
      message: core_course.PBVideoElement,
      options?: $protobuf.IConversionOptions,
    ): { [k: string]: any }

    /**
     * Converts this PBVideoElement to JSON.
     * @returns JSON object
     */
    public toJSON(): { [k: string]: any }
  }

  namespace PBVideoElement {
    /** Properties of a PlayControl. */
    interface IPlayControl {
      /** PlayControl startClipId */
      startClipId?: string | null

      /** PlayControl endClipId */
      endClipId?: string | null

      /** PlayControl startAt */
      startAt?: number | null

      /** PlayControl endAt */
      endAt?: number | null

      /** PlayControl clipOnly */
      clipOnly?: boolean | null
    }

    /** Represents a PlayControl. */
    class PlayControl implements IPlayControl {
      /**
       * Constructs a new PlayControl.
       * @param [properties] Properties to set
       */
      constructor(properties?: core_course.PBVideoElement.IPlayControl)

      /** PlayControl startClipId. */
      public startClipId: string

      /** PlayControl endClipId. */
      public endClipId: string

      /** PlayControl startAt. */
      public startAt: number

      /** PlayControl endAt. */
      public endAt: number

      /** PlayControl clipOnly. */
      public clipOnly: boolean

      /**
       * Creates a new PlayControl instance using the specified properties.
       * @param [properties] Properties to set
       * @returns PlayControl instance
       */
      public static create(
        properties?: core_course.PBVideoElement.IPlayControl,
      ): core_course.PBVideoElement.PlayControl

      /**
       * Encodes the specified PlayControl message. Does not implicitly {@link core_course.PBVideoElement.PlayControl.verify|verify} messages.
       * @param message PlayControl message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encode(
        message: core_course.PBVideoElement.IPlayControl,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Encodes the specified PlayControl message, length delimited. Does not implicitly {@link core_course.PBVideoElement.PlayControl.verify|verify} messages.
       * @param message PlayControl message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encodeDelimited(
        message: core_course.PBVideoElement.IPlayControl,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Decodes a PlayControl message from the specified reader or buffer.
       * @param reader Reader or buffer to decode from
       * @param [length] Message length if known beforehand
       * @returns PlayControl
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decode(
        reader: $protobuf.Reader | Uint8Array,
        length?: number,
      ): core_course.PBVideoElement.PlayControl

      /**
       * Decodes a PlayControl message from the specified reader or buffer, length delimited.
       * @param reader Reader or buffer to decode from
       * @returns PlayControl
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decodeDelimited(
        reader: $protobuf.Reader | Uint8Array,
      ): core_course.PBVideoElement.PlayControl

      /**
       * Verifies a PlayControl message.
       * @param message Plain object to verify
       * @returns `null` if valid, otherwise the reason why it is not
       */
      public static verify(message: { [k: string]: any }): string | null

      /**
       * Creates a PlayControl message from a plain object. Also converts values to their respective internal types.
       * @param object Plain object
       * @returns PlayControl
       */
      public static fromObject(object: {
        [k: string]: any
      }): core_course.PBVideoElement.PlayControl

      /**
       * Creates a plain object from a PlayControl message. Also converts values to other types if specified.
       * @param message PlayControl
       * @param [options] Conversion options
       * @returns Plain object
       */
      public static toObject(
        message: core_course.PBVideoElement.PlayControl,
        options?: $protobuf.IConversionOptions,
      ): { [k: string]: any }

      /**
       * Converts this PlayControl to JSON.
       * @returns JSON object
       */
      public toJSON(): { [k: string]: any }
    }
  }

  /** Properties of a PBPassage. */
  interface IPBPassage {
    /** PBPassage paragraphs */
    paragraphs?: core_course.PBPassage.IParagraph[] | null

    /** PBPassage audioId */
    audioId?: string | null

    /** PBPassage title */
    title?: string | null

    /** PBPassage pictureId */
    pictureId?: string | null
  }

  /** Represents a PBPassage. */
  class PBPassage implements IPBPassage {
    /**
     * Constructs a new PBPassage.
     * @param [properties] Properties to set
     */
    constructor(properties?: core_course.IPBPassage)

    /** PBPassage paragraphs. */
    public paragraphs: core_course.PBPassage.IParagraph[]

    /** PBPassage audioId. */
    public audioId: string

    /** PBPassage title. */
    public title: string

    /** PBPassage pictureId. */
    public pictureId: string

    /**
     * Creates a new PBPassage instance using the specified properties.
     * @param [properties] Properties to set
     * @returns PBPassage instance
     */
    public static create(
      properties?: core_course.IPBPassage,
    ): core_course.PBPassage

    /**
     * Encodes the specified PBPassage message. Does not implicitly {@link core_course.PBPassage.verify|verify} messages.
     * @param message PBPassage message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encode(
      message: core_course.IPBPassage,
      writer?: $protobuf.Writer,
    ): $protobuf.Writer

    /**
     * Encodes the specified PBPassage message, length delimited. Does not implicitly {@link core_course.PBPassage.verify|verify} messages.
     * @param message PBPassage message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encodeDelimited(
      message: core_course.IPBPassage,
      writer?: $protobuf.Writer,
    ): $protobuf.Writer

    /**
     * Decodes a PBPassage message from the specified reader or buffer.
     * @param reader Reader or buffer to decode from
     * @param [length] Message length if known beforehand
     * @returns PBPassage
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decode(
      reader: $protobuf.Reader | Uint8Array,
      length?: number,
    ): core_course.PBPassage

    /**
     * Decodes a PBPassage message from the specified reader or buffer, length delimited.
     * @param reader Reader or buffer to decode from
     * @returns PBPassage
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decodeDelimited(
      reader: $protobuf.Reader | Uint8Array,
    ): core_course.PBPassage

    /**
     * Verifies a PBPassage message.
     * @param message Plain object to verify
     * @returns `null` if valid, otherwise the reason why it is not
     */
    public static verify(message: { [k: string]: any }): string | null

    /**
     * Creates a PBPassage message from a plain object. Also converts values to their respective internal types.
     * @param object Plain object
     * @returns PBPassage
     */
    public static fromObject(object: {
      [k: string]: any
    }): core_course.PBPassage

    /**
     * Creates a plain object from a PBPassage message. Also converts values to other types if specified.
     * @param message PBPassage
     * @param [options] Conversion options
     * @returns Plain object
     */
    public static toObject(
      message: core_course.PBPassage,
      options?: $protobuf.IConversionOptions,
    ): { [k: string]: any }

    /**
     * Converts this PBPassage to JSON.
     * @returns JSON object
     */
    public toJSON(): { [k: string]: any }
  }

  namespace PBPassage {
    /** Properties of a Sentence. */
    interface ISentence {
      /** Sentence text */
      text?: string | null

      /** Sentence checked */
      checked?: boolean | null
    }

    /** Represents a Sentence. */
    class Sentence implements ISentence {
      /**
       * Constructs a new Sentence.
       * @param [properties] Properties to set
       */
      constructor(properties?: core_course.PBPassage.ISentence)

      /** Sentence text. */
      public text: string

      /** Sentence checked. */
      public checked: boolean

      /**
       * Creates a new Sentence instance using the specified properties.
       * @param [properties] Properties to set
       * @returns Sentence instance
       */
      public static create(
        properties?: core_course.PBPassage.ISentence,
      ): core_course.PBPassage.Sentence

      /**
       * Encodes the specified Sentence message. Does not implicitly {@link core_course.PBPassage.Sentence.verify|verify} messages.
       * @param message Sentence message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encode(
        message: core_course.PBPassage.ISentence,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Encodes the specified Sentence message, length delimited. Does not implicitly {@link core_course.PBPassage.Sentence.verify|verify} messages.
       * @param message Sentence message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encodeDelimited(
        message: core_course.PBPassage.ISentence,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Decodes a Sentence message from the specified reader or buffer.
       * @param reader Reader or buffer to decode from
       * @param [length] Message length if known beforehand
       * @returns Sentence
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decode(
        reader: $protobuf.Reader | Uint8Array,
        length?: number,
      ): core_course.PBPassage.Sentence

      /**
       * Decodes a Sentence message from the specified reader or buffer, length delimited.
       * @param reader Reader or buffer to decode from
       * @returns Sentence
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decodeDelimited(
        reader: $protobuf.Reader | Uint8Array,
      ): core_course.PBPassage.Sentence

      /**
       * Verifies a Sentence message.
       * @param message Plain object to verify
       * @returns `null` if valid, otherwise the reason why it is not
       */
      public static verify(message: { [k: string]: any }): string | null

      /**
       * Creates a Sentence message from a plain object. Also converts values to their respective internal types.
       * @param object Plain object
       * @returns Sentence
       */
      public static fromObject(object: {
        [k: string]: any
      }): core_course.PBPassage.Sentence

      /**
       * Creates a plain object from a Sentence message. Also converts values to other types if specified.
       * @param message Sentence
       * @param [options] Conversion options
       * @returns Plain object
       */
      public static toObject(
        message: core_course.PBPassage.Sentence,
        options?: $protobuf.IConversionOptions,
      ): { [k: string]: any }

      /**
       * Converts this Sentence to JSON.
       * @returns JSON object
       */
      public toJSON(): { [k: string]: any }
    }

    /** Properties of a Paragraph. */
    interface IParagraph {
      /** Paragraph sentences */
      sentences?: core_course.PBPassage.ISentence[] | null
    }

    /** Represents a Paragraph. */
    class Paragraph implements IParagraph {
      /**
       * Constructs a new Paragraph.
       * @param [properties] Properties to set
       */
      constructor(properties?: core_course.PBPassage.IParagraph)

      /** Paragraph sentences. */
      public sentences: core_course.PBPassage.ISentence[]

      /**
       * Creates a new Paragraph instance using the specified properties.
       * @param [properties] Properties to set
       * @returns Paragraph instance
       */
      public static create(
        properties?: core_course.PBPassage.IParagraph,
      ): core_course.PBPassage.Paragraph

      /**
       * Encodes the specified Paragraph message. Does not implicitly {@link core_course.PBPassage.Paragraph.verify|verify} messages.
       * @param message Paragraph message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encode(
        message: core_course.PBPassage.IParagraph,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Encodes the specified Paragraph message, length delimited. Does not implicitly {@link core_course.PBPassage.Paragraph.verify|verify} messages.
       * @param message Paragraph message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encodeDelimited(
        message: core_course.PBPassage.IParagraph,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Decodes a Paragraph message from the specified reader or buffer.
       * @param reader Reader or buffer to decode from
       * @param [length] Message length if known beforehand
       * @returns Paragraph
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decode(
        reader: $protobuf.Reader | Uint8Array,
        length?: number,
      ): core_course.PBPassage.Paragraph

      /**
       * Decodes a Paragraph message from the specified reader or buffer, length delimited.
       * @param reader Reader or buffer to decode from
       * @returns Paragraph
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decodeDelimited(
        reader: $protobuf.Reader | Uint8Array,
      ): core_course.PBPassage.Paragraph

      /**
       * Verifies a Paragraph message.
       * @param message Plain object to verify
       * @returns `null` if valid, otherwise the reason why it is not
       */
      public static verify(message: { [k: string]: any }): string | null

      /**
       * Creates a Paragraph message from a plain object. Also converts values to their respective internal types.
       * @param object Plain object
       * @returns Paragraph
       */
      public static fromObject(object: {
        [k: string]: any
      }): core_course.PBPassage.Paragraph

      /**
       * Creates a plain object from a Paragraph message. Also converts values to other types if specified.
       * @param message Paragraph
       * @param [options] Conversion options
       * @returns Plain object
       */
      public static toObject(
        message: core_course.PBPassage.Paragraph,
        options?: $protobuf.IConversionOptions,
      ): { [k: string]: any }

      /**
       * Converts this Paragraph to JSON.
       * @returns JSON object
       */
      public toJSON(): { [k: string]: any }
    }
  }

  /** Properties of a PBDialoguePlay. */
  interface IPBDialoguePlay {
    /** PBDialoguePlay pictureId */
    pictureId?: string | null

    /** PBDialoguePlay speaker */
    speaker?: core_course.PBDialoguePlay.ISpeaker[] | null
  }

  /** Represents a PBDialoguePlay. */
  class PBDialoguePlay implements IPBDialoguePlay {
    /**
     * Constructs a new PBDialoguePlay.
     * @param [properties] Properties to set
     */
    constructor(properties?: core_course.IPBDialoguePlay)

    /** PBDialoguePlay pictureId. */
    public pictureId: string

    /** PBDialoguePlay speaker. */
    public speaker: core_course.PBDialoguePlay.ISpeaker[]

    /**
     * Creates a new PBDialoguePlay instance using the specified properties.
     * @param [properties] Properties to set
     * @returns PBDialoguePlay instance
     */
    public static create(
      properties?: core_course.IPBDialoguePlay,
    ): core_course.PBDialoguePlay

    /**
     * Encodes the specified PBDialoguePlay message. Does not implicitly {@link core_course.PBDialoguePlay.verify|verify} messages.
     * @param message PBDialoguePlay message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encode(
      message: core_course.IPBDialoguePlay,
      writer?: $protobuf.Writer,
    ): $protobuf.Writer

    /**
     * Encodes the specified PBDialoguePlay message, length delimited. Does not implicitly {@link core_course.PBDialoguePlay.verify|verify} messages.
     * @param message PBDialoguePlay message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encodeDelimited(
      message: core_course.IPBDialoguePlay,
      writer?: $protobuf.Writer,
    ): $protobuf.Writer

    /**
     * Decodes a PBDialoguePlay message from the specified reader or buffer.
     * @param reader Reader or buffer to decode from
     * @param [length] Message length if known beforehand
     * @returns PBDialoguePlay
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decode(
      reader: $protobuf.Reader | Uint8Array,
      length?: number,
    ): core_course.PBDialoguePlay

    /**
     * Decodes a PBDialoguePlay message from the specified reader or buffer, length delimited.
     * @param reader Reader or buffer to decode from
     * @returns PBDialoguePlay
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decodeDelimited(
      reader: $protobuf.Reader | Uint8Array,
    ): core_course.PBDialoguePlay

    /**
     * Verifies a PBDialoguePlay message.
     * @param message Plain object to verify
     * @returns `null` if valid, otherwise the reason why it is not
     */
    public static verify(message: { [k: string]: any }): string | null

    /**
     * Creates a PBDialoguePlay message from a plain object. Also converts values to their respective internal types.
     * @param object Plain object
     * @returns PBDialoguePlay
     */
    public static fromObject(object: {
      [k: string]: any
    }): core_course.PBDialoguePlay

    /**
     * Creates a plain object from a PBDialoguePlay message. Also converts values to other types if specified.
     * @param message PBDialoguePlay
     * @param [options] Conversion options
     * @returns Plain object
     */
    public static toObject(
      message: core_course.PBDialoguePlay,
      options?: $protobuf.IConversionOptions,
    ): { [k: string]: any }

    /**
     * Converts this PBDialoguePlay to JSON.
     * @returns JSON object
     */
    public toJSON(): { [k: string]: any }
  }

  namespace PBDialoguePlay {
    /** Properties of a Speaker. */
    interface ISpeaker {
      /** Speaker audioId */
      audioId?: string | null

      /** Speaker speakerPictureId */
      speakerPictureId?: string | null

      /** Speaker speakerRole */
      speakerRole?: number | null

      /** Speaker spokenText */
      spokenText?: string | null

      /** Speaker text */
      text?: string | null
    }

    /** Represents a Speaker. */
    class Speaker implements ISpeaker {
      /**
       * Constructs a new Speaker.
       * @param [properties] Properties to set
       */
      constructor(properties?: core_course.PBDialoguePlay.ISpeaker)

      /** Speaker audioId. */
      public audioId: string

      /** Speaker speakerPictureId. */
      public speakerPictureId: string

      /** Speaker speakerRole. */
      public speakerRole: number

      /** Speaker spokenText. */
      public spokenText: string

      /** Speaker text. */
      public text: string

      /**
       * Creates a new Speaker instance using the specified properties.
       * @param [properties] Properties to set
       * @returns Speaker instance
       */
      public static create(
        properties?: core_course.PBDialoguePlay.ISpeaker,
      ): core_course.PBDialoguePlay.Speaker

      /**
       * Encodes the specified Speaker message. Does not implicitly {@link core_course.PBDialoguePlay.Speaker.verify|verify} messages.
       * @param message Speaker message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encode(
        message: core_course.PBDialoguePlay.ISpeaker,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Encodes the specified Speaker message, length delimited. Does not implicitly {@link core_course.PBDialoguePlay.Speaker.verify|verify} messages.
       * @param message Speaker message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encodeDelimited(
        message: core_course.PBDialoguePlay.ISpeaker,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Decodes a Speaker message from the specified reader or buffer.
       * @param reader Reader or buffer to decode from
       * @param [length] Message length if known beforehand
       * @returns Speaker
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decode(
        reader: $protobuf.Reader | Uint8Array,
        length?: number,
      ): core_course.PBDialoguePlay.Speaker

      /**
       * Decodes a Speaker message from the specified reader or buffer, length delimited.
       * @param reader Reader or buffer to decode from
       * @returns Speaker
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decodeDelimited(
        reader: $protobuf.Reader | Uint8Array,
      ): core_course.PBDialoguePlay.Speaker

      /**
       * Verifies a Speaker message.
       * @param message Plain object to verify
       * @returns `null` if valid, otherwise the reason why it is not
       */
      public static verify(message: { [k: string]: any }): string | null

      /**
       * Creates a Speaker message from a plain object. Also converts values to their respective internal types.
       * @param object Plain object
       * @returns Speaker
       */
      public static fromObject(object: {
        [k: string]: any
      }): core_course.PBDialoguePlay.Speaker

      /**
       * Creates a plain object from a Speaker message. Also converts values to other types if specified.
       * @param message Speaker
       * @param [options] Conversion options
       * @returns Plain object
       */
      public static toObject(
        message: core_course.PBDialoguePlay.Speaker,
        options?: $protobuf.IConversionOptions,
      ): { [k: string]: any }

      /**
       * Converts this Speaker to JSON.
       * @returns JSON object
       */
      public toJSON(): { [k: string]: any }
    }
  }

  /** Properties of a PBTextTeaching. */
  interface IPBTextTeaching {
    /** PBTextTeaching contents */
    contents?: core_course.PBTextTeaching.IContent[] | null
  }

  /** Represents a PBTextTeaching. */
  class PBTextTeaching implements IPBTextTeaching {
    /**
     * Constructs a new PBTextTeaching.
     * @param [properties] Properties to set
     */
    constructor(properties?: core_course.IPBTextTeaching)

    /** PBTextTeaching contents. */
    public contents: core_course.PBTextTeaching.IContent[]

    /**
     * Creates a new PBTextTeaching instance using the specified properties.
     * @param [properties] Properties to set
     * @returns PBTextTeaching instance
     */
    public static create(
      properties?: core_course.IPBTextTeaching,
    ): core_course.PBTextTeaching

    /**
     * Encodes the specified PBTextTeaching message. Does not implicitly {@link core_course.PBTextTeaching.verify|verify} messages.
     * @param message PBTextTeaching message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encode(
      message: core_course.IPBTextTeaching,
      writer?: $protobuf.Writer,
    ): $protobuf.Writer

    /**
     * Encodes the specified PBTextTeaching message, length delimited. Does not implicitly {@link core_course.PBTextTeaching.verify|verify} messages.
     * @param message PBTextTeaching message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encodeDelimited(
      message: core_course.IPBTextTeaching,
      writer?: $protobuf.Writer,
    ): $protobuf.Writer

    /**
     * Decodes a PBTextTeaching message from the specified reader or buffer.
     * @param reader Reader or buffer to decode from
     * @param [length] Message length if known beforehand
     * @returns PBTextTeaching
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decode(
      reader: $protobuf.Reader | Uint8Array,
      length?: number,
    ): core_course.PBTextTeaching

    /**
     * Decodes a PBTextTeaching message from the specified reader or buffer, length delimited.
     * @param reader Reader or buffer to decode from
     * @returns PBTextTeaching
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decodeDelimited(
      reader: $protobuf.Reader | Uint8Array,
    ): core_course.PBTextTeaching

    /**
     * Verifies a PBTextTeaching message.
     * @param message Plain object to verify
     * @returns `null` if valid, otherwise the reason why it is not
     */
    public static verify(message: { [k: string]: any }): string | null

    /**
     * Creates a PBTextTeaching message from a plain object. Also converts values to their respective internal types.
     * @param object Plain object
     * @returns PBTextTeaching
     */
    public static fromObject(object: {
      [k: string]: any
    }): core_course.PBTextTeaching

    /**
     * Creates a plain object from a PBTextTeaching message. Also converts values to other types if specified.
     * @param message PBTextTeaching
     * @param [options] Conversion options
     * @returns Plain object
     */
    public static toObject(
      message: core_course.PBTextTeaching,
      options?: $protobuf.IConversionOptions,
    ): { [k: string]: any }

    /**
     * Converts this PBTextTeaching to JSON.
     * @returns JSON object
     */
    public toJSON(): { [k: string]: any }
  }

  namespace PBTextTeaching {
    /** Properties of a Paragraph. */
    interface IParagraph {
      /** Paragraph title */
      title?: string | null

      /** Paragraph paragraph */
      paragraph?: string | null
    }

    /** Represents a Paragraph. */
    class Paragraph implements IParagraph {
      /**
       * Constructs a new Paragraph.
       * @param [properties] Properties to set
       */
      constructor(properties?: core_course.PBTextTeaching.IParagraph)

      /** Paragraph title. */
      public title: string

      /** Paragraph paragraph. */
      public paragraph: string

      /**
       * Creates a new Paragraph instance using the specified properties.
       * @param [properties] Properties to set
       * @returns Paragraph instance
       */
      public static create(
        properties?: core_course.PBTextTeaching.IParagraph,
      ): core_course.PBTextTeaching.Paragraph

      /**
       * Encodes the specified Paragraph message. Does not implicitly {@link core_course.PBTextTeaching.Paragraph.verify|verify} messages.
       * @param message Paragraph message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encode(
        message: core_course.PBTextTeaching.IParagraph,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Encodes the specified Paragraph message, length delimited. Does not implicitly {@link core_course.PBTextTeaching.Paragraph.verify|verify} messages.
       * @param message Paragraph message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encodeDelimited(
        message: core_course.PBTextTeaching.IParagraph,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Decodes a Paragraph message from the specified reader or buffer.
       * @param reader Reader or buffer to decode from
       * @param [length] Message length if known beforehand
       * @returns Paragraph
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decode(
        reader: $protobuf.Reader | Uint8Array,
        length?: number,
      ): core_course.PBTextTeaching.Paragraph

      /**
       * Decodes a Paragraph message from the specified reader or buffer, length delimited.
       * @param reader Reader or buffer to decode from
       * @returns Paragraph
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decodeDelimited(
        reader: $protobuf.Reader | Uint8Array,
      ): core_course.PBTextTeaching.Paragraph

      /**
       * Verifies a Paragraph message.
       * @param message Plain object to verify
       * @returns `null` if valid, otherwise the reason why it is not
       */
      public static verify(message: { [k: string]: any }): string | null

      /**
       * Creates a Paragraph message from a plain object. Also converts values to their respective internal types.
       * @param object Plain object
       * @returns Paragraph
       */
      public static fromObject(object: {
        [k: string]: any
      }): core_course.PBTextTeaching.Paragraph

      /**
       * Creates a plain object from a Paragraph message. Also converts values to other types if specified.
       * @param message Paragraph
       * @param [options] Conversion options
       * @returns Plain object
       */
      public static toObject(
        message: core_course.PBTextTeaching.Paragraph,
        options?: $protobuf.IConversionOptions,
      ): { [k: string]: any }

      /**
       * Converts this Paragraph to JSON.
       * @returns JSON object
       */
      public toJSON(): { [k: string]: any }
    }

    /** Properties of a BulletPoint. */
    interface IBulletPoint {
      /** BulletPoint title */
      title?: string | null

      /** BulletPoint bulletPoints */
      bulletPoints?: string[] | null
    }

    /** Represents a BulletPoint. */
    class BulletPoint implements IBulletPoint {
      /**
       * Constructs a new BulletPoint.
       * @param [properties] Properties to set
       */
      constructor(properties?: core_course.PBTextTeaching.IBulletPoint)

      /** BulletPoint title. */
      public title: string

      /** BulletPoint bulletPoints. */
      public bulletPoints: string[]

      /**
       * Creates a new BulletPoint instance using the specified properties.
       * @param [properties] Properties to set
       * @returns BulletPoint instance
       */
      public static create(
        properties?: core_course.PBTextTeaching.IBulletPoint,
      ): core_course.PBTextTeaching.BulletPoint

      /**
       * Encodes the specified BulletPoint message. Does not implicitly {@link core_course.PBTextTeaching.BulletPoint.verify|verify} messages.
       * @param message BulletPoint message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encode(
        message: core_course.PBTextTeaching.IBulletPoint,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Encodes the specified BulletPoint message, length delimited. Does not implicitly {@link core_course.PBTextTeaching.BulletPoint.verify|verify} messages.
       * @param message BulletPoint message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encodeDelimited(
        message: core_course.PBTextTeaching.IBulletPoint,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Decodes a BulletPoint message from the specified reader or buffer.
       * @param reader Reader or buffer to decode from
       * @param [length] Message length if known beforehand
       * @returns BulletPoint
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decode(
        reader: $protobuf.Reader | Uint8Array,
        length?: number,
      ): core_course.PBTextTeaching.BulletPoint

      /**
       * Decodes a BulletPoint message from the specified reader or buffer, length delimited.
       * @param reader Reader or buffer to decode from
       * @returns BulletPoint
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decodeDelimited(
        reader: $protobuf.Reader | Uint8Array,
      ): core_course.PBTextTeaching.BulletPoint

      /**
       * Verifies a BulletPoint message.
       * @param message Plain object to verify
       * @returns `null` if valid, otherwise the reason why it is not
       */
      public static verify(message: { [k: string]: any }): string | null

      /**
       * Creates a BulletPoint message from a plain object. Also converts values to their respective internal types.
       * @param object Plain object
       * @returns BulletPoint
       */
      public static fromObject(object: {
        [k: string]: any
      }): core_course.PBTextTeaching.BulletPoint

      /**
       * Creates a plain object from a BulletPoint message. Also converts values to other types if specified.
       * @param message BulletPoint
       * @param [options] Conversion options
       * @returns Plain object
       */
      public static toObject(
        message: core_course.PBTextTeaching.BulletPoint,
        options?: $protobuf.IConversionOptions,
      ): { [k: string]: any }

      /**
       * Converts this BulletPoint to JSON.
       * @returns JSON object
       */
      public toJSON(): { [k: string]: any }
    }

    /** Properties of a Content. */
    interface IContent {
      /** Content paragraph */
      paragraph?: core_course.PBTextTeaching.IParagraph | null

      /** Content bulletPoint */
      bulletPoint?: core_course.PBTextTeaching.IBulletPoint | null
    }

    /** Represents a Content. */
    class Content implements IContent {
      /**
       * Constructs a new Content.
       * @param [properties] Properties to set
       */
      constructor(properties?: core_course.PBTextTeaching.IContent)

      /** Content paragraph. */
      public paragraph?: core_course.PBTextTeaching.IParagraph | null

      /** Content bulletPoint. */
      public bulletPoint?: core_course.PBTextTeaching.IBulletPoint | null

      /** Content content. */
      public content?: 'paragraph' | 'bulletPoint'

      /**
       * Creates a new Content instance using the specified properties.
       * @param [properties] Properties to set
       * @returns Content instance
       */
      public static create(
        properties?: core_course.PBTextTeaching.IContent,
      ): core_course.PBTextTeaching.Content

      /**
       * Encodes the specified Content message. Does not implicitly {@link core_course.PBTextTeaching.Content.verify|verify} messages.
       * @param message Content message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encode(
        message: core_course.PBTextTeaching.IContent,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Encodes the specified Content message, length delimited. Does not implicitly {@link core_course.PBTextTeaching.Content.verify|verify} messages.
       * @param message Content message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encodeDelimited(
        message: core_course.PBTextTeaching.IContent,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Decodes a Content message from the specified reader or buffer.
       * @param reader Reader or buffer to decode from
       * @param [length] Message length if known beforehand
       * @returns Content
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decode(
        reader: $protobuf.Reader | Uint8Array,
        length?: number,
      ): core_course.PBTextTeaching.Content

      /**
       * Decodes a Content message from the specified reader or buffer, length delimited.
       * @param reader Reader or buffer to decode from
       * @returns Content
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decodeDelimited(
        reader: $protobuf.Reader | Uint8Array,
      ): core_course.PBTextTeaching.Content

      /**
       * Verifies a Content message.
       * @param message Plain object to verify
       * @returns `null` if valid, otherwise the reason why it is not
       */
      public static verify(message: { [k: string]: any }): string | null

      /**
       * Creates a Content message from a plain object. Also converts values to their respective internal types.
       * @param object Plain object
       * @returns Content
       */
      public static fromObject(object: {
        [k: string]: any
      }): core_course.PBTextTeaching.Content

      /**
       * Creates a plain object from a Content message. Also converts values to other types if specified.
       * @param message Content
       * @param [options] Conversion options
       * @returns Plain object
       */
      public static toObject(
        message: core_course.PBTextTeaching.Content,
        options?: $protobuf.IConversionOptions,
      ): { [k: string]: any }

      /**
       * Converts this Content to JSON.
       * @returns JSON object
       */
      public toJSON(): { [k: string]: any }
    }
  }

  /** Properties of an AudioMatching. */
  interface IAudioMatching {
    /** AudioMatching audioId */
    audioId?: string | null

    /** AudioMatching matchingAudioId */
    matchingAudioId?: string | null

    /** AudioMatching answer */
    answer?: core_course.AudioMatching.IAnswer | null
  }

  /** Represents an AudioMatching. */
  class AudioMatching implements IAudioMatching {
    /**
     * Constructs a new AudioMatching.
     * @param [properties] Properties to set
     */
    constructor(properties?: core_course.IAudioMatching)

    /** AudioMatching audioId. */
    public audioId: string

    /** AudioMatching matchingAudioId. */
    public matchingAudioId: string

    /** AudioMatching answer. */
    public answer?: core_course.AudioMatching.IAnswer | null

    /**
     * Creates a new AudioMatching instance using the specified properties.
     * @param [properties] Properties to set
     * @returns AudioMatching instance
     */
    public static create(
      properties?: core_course.IAudioMatching,
    ): core_course.AudioMatching

    /**
     * Encodes the specified AudioMatching message. Does not implicitly {@link core_course.AudioMatching.verify|verify} messages.
     * @param message AudioMatching message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encode(
      message: core_course.IAudioMatching,
      writer?: $protobuf.Writer,
    ): $protobuf.Writer

    /**
     * Encodes the specified AudioMatching message, length delimited. Does not implicitly {@link core_course.AudioMatching.verify|verify} messages.
     * @param message AudioMatching message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encodeDelimited(
      message: core_course.IAudioMatching,
      writer?: $protobuf.Writer,
    ): $protobuf.Writer

    /**
     * Decodes an AudioMatching message from the specified reader or buffer.
     * @param reader Reader or buffer to decode from
     * @param [length] Message length if known beforehand
     * @returns AudioMatching
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decode(
      reader: $protobuf.Reader | Uint8Array,
      length?: number,
    ): core_course.AudioMatching

    /**
     * Decodes an AudioMatching message from the specified reader or buffer, length delimited.
     * @param reader Reader or buffer to decode from
     * @returns AudioMatching
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decodeDelimited(
      reader: $protobuf.Reader | Uint8Array,
    ): core_course.AudioMatching

    /**
     * Verifies an AudioMatching message.
     * @param message Plain object to verify
     * @returns `null` if valid, otherwise the reason why it is not
     */
    public static verify(message: { [k: string]: any }): string | null

    /**
     * Creates an AudioMatching message from a plain object. Also converts values to their respective internal types.
     * @param object Plain object
     * @returns AudioMatching
     */
    public static fromObject(object: {
      [k: string]: any
    }): core_course.AudioMatching

    /**
     * Creates a plain object from an AudioMatching message. Also converts values to other types if specified.
     * @param message AudioMatching
     * @param [options] Conversion options
     * @returns Plain object
     */
    public static toObject(
      message: core_course.AudioMatching,
      options?: $protobuf.IConversionOptions,
    ): { [k: string]: any }

    /**
     * Converts this AudioMatching to JSON.
     * @returns JSON object
     */
    public toJSON(): { [k: string]: any }
  }

  namespace AudioMatching {
    /** Properties of an Answer. */
    interface IAnswer {
      /** Answer checked */
      checked?: boolean | null
    }

    /** Represents an Answer. */
    class Answer implements IAnswer {
      /**
       * Constructs a new Answer.
       * @param [properties] Properties to set
       */
      constructor(properties?: core_course.AudioMatching.IAnswer)

      /** Answer checked. */
      public checked: boolean

      /**
       * Creates a new Answer instance using the specified properties.
       * @param [properties] Properties to set
       * @returns Answer instance
       */
      public static create(
        properties?: core_course.AudioMatching.IAnswer,
      ): core_course.AudioMatching.Answer

      /**
       * Encodes the specified Answer message. Does not implicitly {@link core_course.AudioMatching.Answer.verify|verify} messages.
       * @param message Answer message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encode(
        message: core_course.AudioMatching.IAnswer,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Encodes the specified Answer message, length delimited. Does not implicitly {@link core_course.AudioMatching.Answer.verify|verify} messages.
       * @param message Answer message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encodeDelimited(
        message: core_course.AudioMatching.IAnswer,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Decodes an Answer message from the specified reader or buffer.
       * @param reader Reader or buffer to decode from
       * @param [length] Message length if known beforehand
       * @returns Answer
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decode(
        reader: $protobuf.Reader | Uint8Array,
        length?: number,
      ): core_course.AudioMatching.Answer

      /**
       * Decodes an Answer message from the specified reader or buffer, length delimited.
       * @param reader Reader or buffer to decode from
       * @returns Answer
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decodeDelimited(
        reader: $protobuf.Reader | Uint8Array,
      ): core_course.AudioMatching.Answer

      /**
       * Verifies an Answer message.
       * @param message Plain object to verify
       * @returns `null` if valid, otherwise the reason why it is not
       */
      public static verify(message: { [k: string]: any }): string | null

      /**
       * Creates an Answer message from a plain object. Also converts values to their respective internal types.
       * @param object Plain object
       * @returns Answer
       */
      public static fromObject(object: {
        [k: string]: any
      }): core_course.AudioMatching.Answer

      /**
       * Creates a plain object from an Answer message. Also converts values to other types if specified.
       * @param message Answer
       * @param [options] Conversion options
       * @returns Plain object
       */
      public static toObject(
        message: core_course.AudioMatching.Answer,
        options?: $protobuf.IConversionOptions,
      ): { [k: string]: any }

      /**
       * Converts this Answer to JSON.
       * @returns JSON object
       */
      public toJSON(): { [k: string]: any }
    }
  }

  /** Properties of a TextSequence. */
  interface ITextSequence {
    /** TextSequence answer */
    answer?: core_course.TextSequence.IAnswer[] | null
  }

  /** Represents a TextSequence. */
  class TextSequence implements ITextSequence {
    /**
     * Constructs a new TextSequence.
     * @param [properties] Properties to set
     */
    constructor(properties?: core_course.ITextSequence)

    /** TextSequence answer. */
    public answer: core_course.TextSequence.IAnswer[]

    /**
     * Creates a new TextSequence instance using the specified properties.
     * @param [properties] Properties to set
     * @returns TextSequence instance
     */
    public static create(
      properties?: core_course.ITextSequence,
    ): core_course.TextSequence

    /**
     * Encodes the specified TextSequence message. Does not implicitly {@link core_course.TextSequence.verify|verify} messages.
     * @param message TextSequence message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encode(
      message: core_course.ITextSequence,
      writer?: $protobuf.Writer,
    ): $protobuf.Writer

    /**
     * Encodes the specified TextSequence message, length delimited. Does not implicitly {@link core_course.TextSequence.verify|verify} messages.
     * @param message TextSequence message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encodeDelimited(
      message: core_course.ITextSequence,
      writer?: $protobuf.Writer,
    ): $protobuf.Writer

    /**
     * Decodes a TextSequence message from the specified reader or buffer.
     * @param reader Reader or buffer to decode from
     * @param [length] Message length if known beforehand
     * @returns TextSequence
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decode(
      reader: $protobuf.Reader | Uint8Array,
      length?: number,
    ): core_course.TextSequence

    /**
     * Decodes a TextSequence message from the specified reader or buffer, length delimited.
     * @param reader Reader or buffer to decode from
     * @returns TextSequence
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decodeDelimited(
      reader: $protobuf.Reader | Uint8Array,
    ): core_course.TextSequence

    /**
     * Verifies a TextSequence message.
     * @param message Plain object to verify
     * @returns `null` if valid, otherwise the reason why it is not
     */
    public static verify(message: { [k: string]: any }): string | null

    /**
     * Creates a TextSequence message from a plain object. Also converts values to their respective internal types.
     * @param object Plain object
     * @returns TextSequence
     */
    public static fromObject(object: {
      [k: string]: any
    }): core_course.TextSequence

    /**
     * Creates a plain object from a TextSequence message. Also converts values to other types if specified.
     * @param message TextSequence
     * @param [options] Conversion options
     * @returns Plain object
     */
    public static toObject(
      message: core_course.TextSequence,
      options?: $protobuf.IConversionOptions,
    ): { [k: string]: any }

    /**
     * Converts this TextSequence to JSON.
     * @returns JSON object
     */
    public toJSON(): { [k: string]: any }
  }

  namespace TextSequence {
    /** Properties of an Answer. */
    interface IAnswer {
      /** Answer text */
      text?: string | null

      /** Answer index */
      index?: number | null
    }

    /** Represents an Answer. */
    class Answer implements IAnswer {
      /**
       * Constructs a new Answer.
       * @param [properties] Properties to set
       */
      constructor(properties?: core_course.TextSequence.IAnswer)

      /** Answer text. */
      public text: string

      /** Answer index. */
      public index: number

      /**
       * Creates a new Answer instance using the specified properties.
       * @param [properties] Properties to set
       * @returns Answer instance
       */
      public static create(
        properties?: core_course.TextSequence.IAnswer,
      ): core_course.TextSequence.Answer

      /**
       * Encodes the specified Answer message. Does not implicitly {@link core_course.TextSequence.Answer.verify|verify} messages.
       * @param message Answer message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encode(
        message: core_course.TextSequence.IAnswer,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Encodes the specified Answer message, length delimited. Does not implicitly {@link core_course.TextSequence.Answer.verify|verify} messages.
       * @param message Answer message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encodeDelimited(
        message: core_course.TextSequence.IAnswer,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Decodes an Answer message from the specified reader or buffer.
       * @param reader Reader or buffer to decode from
       * @param [length] Message length if known beforehand
       * @returns Answer
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decode(
        reader: $protobuf.Reader | Uint8Array,
        length?: number,
      ): core_course.TextSequence.Answer

      /**
       * Decodes an Answer message from the specified reader or buffer, length delimited.
       * @param reader Reader or buffer to decode from
       * @returns Answer
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decodeDelimited(
        reader: $protobuf.Reader | Uint8Array,
      ): core_course.TextSequence.Answer

      /**
       * Verifies an Answer message.
       * @param message Plain object to verify
       * @returns `null` if valid, otherwise the reason why it is not
       */
      public static verify(message: { [k: string]: any }): string | null

      /**
       * Creates an Answer message from a plain object. Also converts values to their respective internal types.
       * @param object Plain object
       * @returns Answer
       */
      public static fromObject(object: {
        [k: string]: any
      }): core_course.TextSequence.Answer

      /**
       * Creates a plain object from an Answer message. Also converts values to other types if specified.
       * @param message Answer
       * @param [options] Conversion options
       * @returns Plain object
       */
      public static toObject(
        message: core_course.TextSequence.Answer,
        options?: $protobuf.IConversionOptions,
      ): { [k: string]: any }

      /**
       * Converts this Answer to JSON.
       * @returns JSON object
       */
      public toJSON(): { [k: string]: any }
    }
  }

  /** Properties of a Dictation. */
  interface IDictation {
    /** Dictation dictSentences */
    dictSentences?: core_course.Dictation.IDictSentence[] | null

    /** Dictation pictureId */
    pictureId?: string | null

    /** Dictation audioId */
    audioId?: string | null
  }

  /** Represents a Dictation. */
  class Dictation implements IDictation {
    /**
     * Constructs a new Dictation.
     * @param [properties] Properties to set
     */
    constructor(properties?: core_course.IDictation)

    /** Dictation dictSentences. */
    public dictSentences: core_course.Dictation.IDictSentence[]

    /** Dictation pictureId. */
    public pictureId: string

    /** Dictation audioId. */
    public audioId: string

    /**
     * Creates a new Dictation instance using the specified properties.
     * @param [properties] Properties to set
     * @returns Dictation instance
     */
    public static create(
      properties?: core_course.IDictation,
    ): core_course.Dictation

    /**
     * Encodes the specified Dictation message. Does not implicitly {@link core_course.Dictation.verify|verify} messages.
     * @param message Dictation message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encode(
      message: core_course.IDictation,
      writer?: $protobuf.Writer,
    ): $protobuf.Writer

    /**
     * Encodes the specified Dictation message, length delimited. Does not implicitly {@link core_course.Dictation.verify|verify} messages.
     * @param message Dictation message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encodeDelimited(
      message: core_course.IDictation,
      writer?: $protobuf.Writer,
    ): $protobuf.Writer

    /**
     * Decodes a Dictation message from the specified reader or buffer.
     * @param reader Reader or buffer to decode from
     * @param [length] Message length if known beforehand
     * @returns Dictation
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decode(
      reader: $protobuf.Reader | Uint8Array,
      length?: number,
    ): core_course.Dictation

    /**
     * Decodes a Dictation message from the specified reader or buffer, length delimited.
     * @param reader Reader or buffer to decode from
     * @returns Dictation
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decodeDelimited(
      reader: $protobuf.Reader | Uint8Array,
    ): core_course.Dictation

    /**
     * Verifies a Dictation message.
     * @param message Plain object to verify
     * @returns `null` if valid, otherwise the reason why it is not
     */
    public static verify(message: { [k: string]: any }): string | null

    /**
     * Creates a Dictation message from a plain object. Also converts values to their respective internal types.
     * @param object Plain object
     * @returns Dictation
     */
    public static fromObject(object: {
      [k: string]: any
    }): core_course.Dictation

    /**
     * Creates a plain object from a Dictation message. Also converts values to other types if specified.
     * @param message Dictation
     * @param [options] Conversion options
     * @returns Plain object
     */
    public static toObject(
      message: core_course.Dictation,
      options?: $protobuf.IConversionOptions,
    ): { [k: string]: any }

    /**
     * Converts this Dictation to JSON.
     * @returns JSON object
     */
    public toJSON(): { [k: string]: any }
  }

  namespace Dictation {
    /** Properties of a Stem. */
    interface IStem {
      /** Stem text */
      text?: string | null

      /** Stem checked */
      checked?: boolean | null
    }

    /** Represents a Stem. */
    class Stem implements IStem {
      /**
       * Constructs a new Stem.
       * @param [properties] Properties to set
       */
      constructor(properties?: core_course.Dictation.IStem)

      /** Stem text. */
      public text: string

      /** Stem checked. */
      public checked: boolean

      /**
       * Creates a new Stem instance using the specified properties.
       * @param [properties] Properties to set
       * @returns Stem instance
       */
      public static create(
        properties?: core_course.Dictation.IStem,
      ): core_course.Dictation.Stem

      /**
       * Encodes the specified Stem message. Does not implicitly {@link core_course.Dictation.Stem.verify|verify} messages.
       * @param message Stem message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encode(
        message: core_course.Dictation.IStem,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Encodes the specified Stem message, length delimited. Does not implicitly {@link core_course.Dictation.Stem.verify|verify} messages.
       * @param message Stem message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encodeDelimited(
        message: core_course.Dictation.IStem,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Decodes a Stem message from the specified reader or buffer.
       * @param reader Reader or buffer to decode from
       * @param [length] Message length if known beforehand
       * @returns Stem
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decode(
        reader: $protobuf.Reader | Uint8Array,
        length?: number,
      ): core_course.Dictation.Stem

      /**
       * Decodes a Stem message from the specified reader or buffer, length delimited.
       * @param reader Reader or buffer to decode from
       * @returns Stem
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decodeDelimited(
        reader: $protobuf.Reader | Uint8Array,
      ): core_course.Dictation.Stem

      /**
       * Verifies a Stem message.
       * @param message Plain object to verify
       * @returns `null` if valid, otherwise the reason why it is not
       */
      public static verify(message: { [k: string]: any }): string | null

      /**
       * Creates a Stem message from a plain object. Also converts values to their respective internal types.
       * @param object Plain object
       * @returns Stem
       */
      public static fromObject(object: {
        [k: string]: any
      }): core_course.Dictation.Stem

      /**
       * Creates a plain object from a Stem message. Also converts values to other types if specified.
       * @param message Stem
       * @param [options] Conversion options
       * @returns Plain object
       */
      public static toObject(
        message: core_course.Dictation.Stem,
        options?: $protobuf.IConversionOptions,
      ): { [k: string]: any }

      /**
       * Converts this Stem to JSON.
       * @returns JSON object
       */
      public toJSON(): { [k: string]: any }
    }

    /** Properties of a DictSentence. */
    interface IDictSentence {
      /** DictSentence audioId */
      audioId?: string | null

      /** DictSentence stems */
      stems?: core_course.Dictation.IStem[] | null
    }

    /** Represents a DictSentence. */
    class DictSentence implements IDictSentence {
      /**
       * Constructs a new DictSentence.
       * @param [properties] Properties to set
       */
      constructor(properties?: core_course.Dictation.IDictSentence)

      /** DictSentence audioId. */
      public audioId: string

      /** DictSentence stems. */
      public stems: core_course.Dictation.IStem[]

      /**
       * Creates a new DictSentence instance using the specified properties.
       * @param [properties] Properties to set
       * @returns DictSentence instance
       */
      public static create(
        properties?: core_course.Dictation.IDictSentence,
      ): core_course.Dictation.DictSentence

      /**
       * Encodes the specified DictSentence message. Does not implicitly {@link core_course.Dictation.DictSentence.verify|verify} messages.
       * @param message DictSentence message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encode(
        message: core_course.Dictation.IDictSentence,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Encodes the specified DictSentence message, length delimited. Does not implicitly {@link core_course.Dictation.DictSentence.verify|verify} messages.
       * @param message DictSentence message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encodeDelimited(
        message: core_course.Dictation.IDictSentence,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Decodes a DictSentence message from the specified reader or buffer.
       * @param reader Reader or buffer to decode from
       * @param [length] Message length if known beforehand
       * @returns DictSentence
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decode(
        reader: $protobuf.Reader | Uint8Array,
        length?: number,
      ): core_course.Dictation.DictSentence

      /**
       * Decodes a DictSentence message from the specified reader or buffer, length delimited.
       * @param reader Reader or buffer to decode from
       * @returns DictSentence
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decodeDelimited(
        reader: $protobuf.Reader | Uint8Array,
      ): core_course.Dictation.DictSentence

      /**
       * Verifies a DictSentence message.
       * @param message Plain object to verify
       * @returns `null` if valid, otherwise the reason why it is not
       */
      public static verify(message: { [k: string]: any }): string | null

      /**
       * Creates a DictSentence message from a plain object. Also converts values to their respective internal types.
       * @param object Plain object
       * @returns DictSentence
       */
      public static fromObject(object: {
        [k: string]: any
      }): core_course.Dictation.DictSentence

      /**
       * Creates a plain object from a DictSentence message. Also converts values to other types if specified.
       * @param message DictSentence
       * @param [options] Conversion options
       * @returns Plain object
       */
      public static toObject(
        message: core_course.Dictation.DictSentence,
        options?: $protobuf.IConversionOptions,
      ): { [k: string]: any }

      /**
       * Converts this DictSentence to JSON.
       * @returns JSON object
       */
      public toJSON(): { [k: string]: any }
    }
  }

  /** Properties of a BoolMatching. */
  interface IBoolMatching {
    /** BoolMatching audioId */
    audioId?: string | null

    /** BoolMatching text */
    text?: string | null

    /** BoolMatching pictureId */
    pictureId?: string | null

    /** BoolMatching answer */
    answer?: core_course.BoolMatching.IAnswer[] | null
  }

  /** Represents a BoolMatching. */
  class BoolMatching implements IBoolMatching {
    /**
     * Constructs a new BoolMatching.
     * @param [properties] Properties to set
     */
    constructor(properties?: core_course.IBoolMatching)

    /** BoolMatching audioId. */
    public audioId: string

    /** BoolMatching text. */
    public text: string

    /** BoolMatching pictureId. */
    public pictureId: string

    /** BoolMatching answer. */
    public answer: core_course.BoolMatching.IAnswer[]

    /**
     * Creates a new BoolMatching instance using the specified properties.
     * @param [properties] Properties to set
     * @returns BoolMatching instance
     */
    public static create(
      properties?: core_course.IBoolMatching,
    ): core_course.BoolMatching

    /**
     * Encodes the specified BoolMatching message. Does not implicitly {@link core_course.BoolMatching.verify|verify} messages.
     * @param message BoolMatching message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encode(
      message: core_course.IBoolMatching,
      writer?: $protobuf.Writer,
    ): $protobuf.Writer

    /**
     * Encodes the specified BoolMatching message, length delimited. Does not implicitly {@link core_course.BoolMatching.verify|verify} messages.
     * @param message BoolMatching message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encodeDelimited(
      message: core_course.IBoolMatching,
      writer?: $protobuf.Writer,
    ): $protobuf.Writer

    /**
     * Decodes a BoolMatching message from the specified reader or buffer.
     * @param reader Reader or buffer to decode from
     * @param [length] Message length if known beforehand
     * @returns BoolMatching
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decode(
      reader: $protobuf.Reader | Uint8Array,
      length?: number,
    ): core_course.BoolMatching

    /**
     * Decodes a BoolMatching message from the specified reader or buffer, length delimited.
     * @param reader Reader or buffer to decode from
     * @returns BoolMatching
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decodeDelimited(
      reader: $protobuf.Reader | Uint8Array,
    ): core_course.BoolMatching

    /**
     * Verifies a BoolMatching message.
     * @param message Plain object to verify
     * @returns `null` if valid, otherwise the reason why it is not
     */
    public static verify(message: { [k: string]: any }): string | null

    /**
     * Creates a BoolMatching message from a plain object. Also converts values to their respective internal types.
     * @param object Plain object
     * @returns BoolMatching
     */
    public static fromObject(object: {
      [k: string]: any
    }): core_course.BoolMatching

    /**
     * Creates a plain object from a BoolMatching message. Also converts values to other types if specified.
     * @param message BoolMatching
     * @param [options] Conversion options
     * @returns Plain object
     */
    public static toObject(
      message: core_course.BoolMatching,
      options?: $protobuf.IConversionOptions,
    ): { [k: string]: any }

    /**
     * Converts this BoolMatching to JSON.
     * @returns JSON object
     */
    public toJSON(): { [k: string]: any }
  }

  namespace BoolMatching {
    /** Properties of an Answer. */
    interface IAnswer {
      /** Answer text */
      text?: string | null

      /** Answer checked */
      checked?: boolean | null
    }

    /** Represents an Answer. */
    class Answer implements IAnswer {
      /**
       * Constructs a new Answer.
       * @param [properties] Properties to set
       */
      constructor(properties?: core_course.BoolMatching.IAnswer)

      /** Answer text. */
      public text: string

      /** Answer checked. */
      public checked: boolean

      /**
       * Creates a new Answer instance using the specified properties.
       * @param [properties] Properties to set
       * @returns Answer instance
       */
      public static create(
        properties?: core_course.BoolMatching.IAnswer,
      ): core_course.BoolMatching.Answer

      /**
       * Encodes the specified Answer message. Does not implicitly {@link core_course.BoolMatching.Answer.verify|verify} messages.
       * @param message Answer message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encode(
        message: core_course.BoolMatching.IAnswer,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Encodes the specified Answer message, length delimited. Does not implicitly {@link core_course.BoolMatching.Answer.verify|verify} messages.
       * @param message Answer message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encodeDelimited(
        message: core_course.BoolMatching.IAnswer,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Decodes an Answer message from the specified reader or buffer.
       * @param reader Reader or buffer to decode from
       * @param [length] Message length if known beforehand
       * @returns Answer
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decode(
        reader: $protobuf.Reader | Uint8Array,
        length?: number,
      ): core_course.BoolMatching.Answer

      /**
       * Decodes an Answer message from the specified reader or buffer, length delimited.
       * @param reader Reader or buffer to decode from
       * @returns Answer
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decodeDelimited(
        reader: $protobuf.Reader | Uint8Array,
      ): core_course.BoolMatching.Answer

      /**
       * Verifies an Answer message.
       * @param message Plain object to verify
       * @returns `null` if valid, otherwise the reason why it is not
       */
      public static verify(message: { [k: string]: any }): string | null

      /**
       * Creates an Answer message from a plain object. Also converts values to their respective internal types.
       * @param object Plain object
       * @returns Answer
       */
      public static fromObject(object: {
        [k: string]: any
      }): core_course.BoolMatching.Answer

      /**
       * Creates a plain object from an Answer message. Also converts values to other types if specified.
       * @param message Answer
       * @param [options] Conversion options
       * @returns Plain object
       */
      public static toObject(
        message: core_course.BoolMatching.Answer,
        options?: $protobuf.IConversionOptions,
      ): { [k: string]: any }

      /**
       * Converts this Answer to JSON.
       * @returns JSON object
       */
      public toJSON(): { [k: string]: any }
    }
  }

  /** Properties of a NumberMatching. */
  interface INumberMatching {
    /** NumberMatching audioId */
    audioId?: string | null

    /** NumberMatching text */
    text?: string | null

    /** NumberMatching answer */
    answer?: core_course.NumberMatching.IAnswer[] | null
  }

  /** Represents a NumberMatching. */
  class NumberMatching implements INumberMatching {
    /**
     * Constructs a new NumberMatching.
     * @param [properties] Properties to set
     */
    constructor(properties?: core_course.INumberMatching)

    /** NumberMatching audioId. */
    public audioId: string

    /** NumberMatching text. */
    public text: string

    /** NumberMatching answer. */
    public answer: core_course.NumberMatching.IAnswer[]

    /**
     * Creates a new NumberMatching instance using the specified properties.
     * @param [properties] Properties to set
     * @returns NumberMatching instance
     */
    public static create(
      properties?: core_course.INumberMatching,
    ): core_course.NumberMatching

    /**
     * Encodes the specified NumberMatching message. Does not implicitly {@link core_course.NumberMatching.verify|verify} messages.
     * @param message NumberMatching message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encode(
      message: core_course.INumberMatching,
      writer?: $protobuf.Writer,
    ): $protobuf.Writer

    /**
     * Encodes the specified NumberMatching message, length delimited. Does not implicitly {@link core_course.NumberMatching.verify|verify} messages.
     * @param message NumberMatching message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encodeDelimited(
      message: core_course.INumberMatching,
      writer?: $protobuf.Writer,
    ): $protobuf.Writer

    /**
     * Decodes a NumberMatching message from the specified reader or buffer.
     * @param reader Reader or buffer to decode from
     * @param [length] Message length if known beforehand
     * @returns NumberMatching
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decode(
      reader: $protobuf.Reader | Uint8Array,
      length?: number,
    ): core_course.NumberMatching

    /**
     * Decodes a NumberMatching message from the specified reader or buffer, length delimited.
     * @param reader Reader or buffer to decode from
     * @returns NumberMatching
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decodeDelimited(
      reader: $protobuf.Reader | Uint8Array,
    ): core_course.NumberMatching

    /**
     * Verifies a NumberMatching message.
     * @param message Plain object to verify
     * @returns `null` if valid, otherwise the reason why it is not
     */
    public static verify(message: { [k: string]: any }): string | null

    /**
     * Creates a NumberMatching message from a plain object. Also converts values to their respective internal types.
     * @param object Plain object
     * @returns NumberMatching
     */
    public static fromObject(object: {
      [k: string]: any
    }): core_course.NumberMatching

    /**
     * Creates a plain object from a NumberMatching message. Also converts values to other types if specified.
     * @param message NumberMatching
     * @param [options] Conversion options
     * @returns Plain object
     */
    public static toObject(
      message: core_course.NumberMatching,
      options?: $protobuf.IConversionOptions,
    ): { [k: string]: any }

    /**
     * Converts this NumberMatching to JSON.
     * @returns JSON object
     */
    public toJSON(): { [k: string]: any }
  }

  namespace NumberMatching {
    /** Properties of an Answer. */
    interface IAnswer {
      /** Answer number */
      number?: number | null

      /** Answer checked */
      checked?: boolean | null
    }

    /** Represents an Answer. */
    class Answer implements IAnswer {
      /**
       * Constructs a new Answer.
       * @param [properties] Properties to set
       */
      constructor(properties?: core_course.NumberMatching.IAnswer)

      /** Answer number. */
      public number: number

      /** Answer checked. */
      public checked: boolean

      /**
       * Creates a new Answer instance using the specified properties.
       * @param [properties] Properties to set
       * @returns Answer instance
       */
      public static create(
        properties?: core_course.NumberMatching.IAnswer,
      ): core_course.NumberMatching.Answer

      /**
       * Encodes the specified Answer message. Does not implicitly {@link core_course.NumberMatching.Answer.verify|verify} messages.
       * @param message Answer message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encode(
        message: core_course.NumberMatching.IAnswer,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Encodes the specified Answer message, length delimited. Does not implicitly {@link core_course.NumberMatching.Answer.verify|verify} messages.
       * @param message Answer message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encodeDelimited(
        message: core_course.NumberMatching.IAnswer,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Decodes an Answer message from the specified reader or buffer.
       * @param reader Reader or buffer to decode from
       * @param [length] Message length if known beforehand
       * @returns Answer
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decode(
        reader: $protobuf.Reader | Uint8Array,
        length?: number,
      ): core_course.NumberMatching.Answer

      /**
       * Decodes an Answer message from the specified reader or buffer, length delimited.
       * @param reader Reader or buffer to decode from
       * @returns Answer
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decodeDelimited(
        reader: $protobuf.Reader | Uint8Array,
      ): core_course.NumberMatching.Answer

      /**
       * Verifies an Answer message.
       * @param message Plain object to verify
       * @returns `null` if valid, otherwise the reason why it is not
       */
      public static verify(message: { [k: string]: any }): string | null

      /**
       * Creates an Answer message from a plain object. Also converts values to their respective internal types.
       * @param object Plain object
       * @returns Answer
       */
      public static fromObject(object: {
        [k: string]: any
      }): core_course.NumberMatching.Answer

      /**
       * Creates a plain object from an Answer message. Also converts values to other types if specified.
       * @param message Answer
       * @param [options] Conversion options
       * @returns Plain object
       */
      public static toObject(
        message: core_course.NumberMatching.Answer,
        options?: $protobuf.IConversionOptions,
      ): { [k: string]: any }

      /**
       * Converts this Answer to JSON.
       * @returns JSON object
       */
      public toJSON(): { [k: string]: any }
    }
  }

  /** Properties of a MultiChoicePicture. */
  interface IMultiChoicePicture {
    /** MultiChoicePicture audioId */
    audioId?: string | null

    /** MultiChoicePicture answer */
    answer?: core_course.MultiChoicePicture.IAnswer[] | null

    /** MultiChoicePicture text */
    text?: string | null
  }

  /** Represents a MultiChoicePicture. */
  class MultiChoicePicture implements IMultiChoicePicture {
    /**
     * Constructs a new MultiChoicePicture.
     * @param [properties] Properties to set
     */
    constructor(properties?: core_course.IMultiChoicePicture)

    /** MultiChoicePicture audioId. */
    public audioId: string

    /** MultiChoicePicture answer. */
    public answer: core_course.MultiChoicePicture.IAnswer[]

    /** MultiChoicePicture text. */
    public text: string

    /**
     * Creates a new MultiChoicePicture instance using the specified properties.
     * @param [properties] Properties to set
     * @returns MultiChoicePicture instance
     */
    public static create(
      properties?: core_course.IMultiChoicePicture,
    ): core_course.MultiChoicePicture

    /**
     * Encodes the specified MultiChoicePicture message. Does not implicitly {@link core_course.MultiChoicePicture.verify|verify} messages.
     * @param message MultiChoicePicture message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encode(
      message: core_course.IMultiChoicePicture,
      writer?: $protobuf.Writer,
    ): $protobuf.Writer

    /**
     * Encodes the specified MultiChoicePicture message, length delimited. Does not implicitly {@link core_course.MultiChoicePicture.verify|verify} messages.
     * @param message MultiChoicePicture message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encodeDelimited(
      message: core_course.IMultiChoicePicture,
      writer?: $protobuf.Writer,
    ): $protobuf.Writer

    /**
     * Decodes a MultiChoicePicture message from the specified reader or buffer.
     * @param reader Reader or buffer to decode from
     * @param [length] Message length if known beforehand
     * @returns MultiChoicePicture
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decode(
      reader: $protobuf.Reader | Uint8Array,
      length?: number,
    ): core_course.MultiChoicePicture

    /**
     * Decodes a MultiChoicePicture message from the specified reader or buffer, length delimited.
     * @param reader Reader or buffer to decode from
     * @returns MultiChoicePicture
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decodeDelimited(
      reader: $protobuf.Reader | Uint8Array,
    ): core_course.MultiChoicePicture

    /**
     * Verifies a MultiChoicePicture message.
     * @param message Plain object to verify
     * @returns `null` if valid, otherwise the reason why it is not
     */
    public static verify(message: { [k: string]: any }): string | null

    /**
     * Creates a MultiChoicePicture message from a plain object. Also converts values to their respective internal types.
     * @param object Plain object
     * @returns MultiChoicePicture
     */
    public static fromObject(object: {
      [k: string]: any
    }): core_course.MultiChoicePicture

    /**
     * Creates a plain object from a MultiChoicePicture message. Also converts values to other types if specified.
     * @param message MultiChoicePicture
     * @param [options] Conversion options
     * @returns Plain object
     */
    public static toObject(
      message: core_course.MultiChoicePicture,
      options?: $protobuf.IConversionOptions,
    ): { [k: string]: any }

    /**
     * Converts this MultiChoicePicture to JSON.
     * @returns JSON object
     */
    public toJSON(): { [k: string]: any }
  }

  namespace MultiChoicePicture {
    /** Properties of an Answer. */
    interface IAnswer {
      /** Answer pictureId */
      pictureId?: string | null

      /** Answer checked */
      checked?: boolean | null

      /** Answer text */
      text?: string | null
    }

    /** Represents an Answer. */
    class Answer implements IAnswer {
      /**
       * Constructs a new Answer.
       * @param [properties] Properties to set
       */
      constructor(properties?: core_course.MultiChoicePicture.IAnswer)

      /** Answer pictureId. */
      public pictureId: string

      /** Answer checked. */
      public checked: boolean

      /** Answer text. */
      public text: string

      /**
       * Creates a new Answer instance using the specified properties.
       * @param [properties] Properties to set
       * @returns Answer instance
       */
      public static create(
        properties?: core_course.MultiChoicePicture.IAnswer,
      ): core_course.MultiChoicePicture.Answer

      /**
       * Encodes the specified Answer message. Does not implicitly {@link core_course.MultiChoicePicture.Answer.verify|verify} messages.
       * @param message Answer message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encode(
        message: core_course.MultiChoicePicture.IAnswer,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Encodes the specified Answer message, length delimited. Does not implicitly {@link core_course.MultiChoicePicture.Answer.verify|verify} messages.
       * @param message Answer message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encodeDelimited(
        message: core_course.MultiChoicePicture.IAnswer,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Decodes an Answer message from the specified reader or buffer.
       * @param reader Reader or buffer to decode from
       * @param [length] Message length if known beforehand
       * @returns Answer
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decode(
        reader: $protobuf.Reader | Uint8Array,
        length?: number,
      ): core_course.MultiChoicePicture.Answer

      /**
       * Decodes an Answer message from the specified reader or buffer, length delimited.
       * @param reader Reader or buffer to decode from
       * @returns Answer
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decodeDelimited(
        reader: $protobuf.Reader | Uint8Array,
      ): core_course.MultiChoicePicture.Answer

      /**
       * Verifies an Answer message.
       * @param message Plain object to verify
       * @returns `null` if valid, otherwise the reason why it is not
       */
      public static verify(message: { [k: string]: any }): string | null

      /**
       * Creates an Answer message from a plain object. Also converts values to their respective internal types.
       * @param object Plain object
       * @returns Answer
       */
      public static fromObject(object: {
        [k: string]: any
      }): core_course.MultiChoicePicture.Answer

      /**
       * Creates a plain object from an Answer message. Also converts values to other types if specified.
       * @param message Answer
       * @param [options] Conversion options
       * @returns Plain object
       */
      public static toObject(
        message: core_course.MultiChoicePicture.Answer,
        options?: $protobuf.IConversionOptions,
      ): { [k: string]: any }

      /**
       * Converts this Answer to JSON.
       * @returns JSON object
       */
      public toJSON(): { [k: string]: any }
    }
  }

  /** Properties of a MultiChoiceQuestion. */
  interface IMultiChoiceQuestion {
    /** MultiChoiceQuestion audioId */
    audioId?: string | null

    /** MultiChoiceQuestion text */
    text?: string | null

    /** MultiChoiceQuestion pictureId */
    pictureId?: string[] | null

    /** MultiChoiceQuestion answer */
    answer?: core_course.MultiChoiceQuestion.IAnswer[] | null

    /** MultiChoiceQuestion trText */
    trText?: string | null

    /** MultiChoiceQuestion passage */
    passage?: string | null
  }

  /** Represents a MultiChoiceQuestion. */
  class MultiChoiceQuestion implements IMultiChoiceQuestion {
    /**
     * Constructs a new MultiChoiceQuestion.
     * @param [properties] Properties to set
     */
    constructor(properties?: core_course.IMultiChoiceQuestion)

    /** MultiChoiceQuestion audioId. */
    public audioId: string

    /** MultiChoiceQuestion text. */
    public text: string

    /** MultiChoiceQuestion pictureId. */
    public pictureId: string[]

    /** MultiChoiceQuestion answer. */
    public answer: core_course.MultiChoiceQuestion.IAnswer[]

    /** MultiChoiceQuestion trText. */
    public trText: string

    /** MultiChoiceQuestion passage. */
    public passage: string

    /**
     * Creates a new MultiChoiceQuestion instance using the specified properties.
     * @param [properties] Properties to set
     * @returns MultiChoiceQuestion instance
     */
    public static create(
      properties?: core_course.IMultiChoiceQuestion,
    ): core_course.MultiChoiceQuestion

    /**
     * Encodes the specified MultiChoiceQuestion message. Does not implicitly {@link core_course.MultiChoiceQuestion.verify|verify} messages.
     * @param message MultiChoiceQuestion message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encode(
      message: core_course.IMultiChoiceQuestion,
      writer?: $protobuf.Writer,
    ): $protobuf.Writer

    /**
     * Encodes the specified MultiChoiceQuestion message, length delimited. Does not implicitly {@link core_course.MultiChoiceQuestion.verify|verify} messages.
     * @param message MultiChoiceQuestion message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encodeDelimited(
      message: core_course.IMultiChoiceQuestion,
      writer?: $protobuf.Writer,
    ): $protobuf.Writer

    /**
     * Decodes a MultiChoiceQuestion message from the specified reader or buffer.
     * @param reader Reader or buffer to decode from
     * @param [length] Message length if known beforehand
     * @returns MultiChoiceQuestion
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decode(
      reader: $protobuf.Reader | Uint8Array,
      length?: number,
    ): core_course.MultiChoiceQuestion

    /**
     * Decodes a MultiChoiceQuestion message from the specified reader or buffer, length delimited.
     * @param reader Reader or buffer to decode from
     * @returns MultiChoiceQuestion
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decodeDelimited(
      reader: $protobuf.Reader | Uint8Array,
    ): core_course.MultiChoiceQuestion

    /**
     * Verifies a MultiChoiceQuestion message.
     * @param message Plain object to verify
     * @returns `null` if valid, otherwise the reason why it is not
     */
    public static verify(message: { [k: string]: any }): string | null

    /**
     * Creates a MultiChoiceQuestion message from a plain object. Also converts values to their respective internal types.
     * @param object Plain object
     * @returns MultiChoiceQuestion
     */
    public static fromObject(object: {
      [k: string]: any
    }): core_course.MultiChoiceQuestion

    /**
     * Creates a plain object from a MultiChoiceQuestion message. Also converts values to other types if specified.
     * @param message MultiChoiceQuestion
     * @param [options] Conversion options
     * @returns Plain object
     */
    public static toObject(
      message: core_course.MultiChoiceQuestion,
      options?: $protobuf.IConversionOptions,
    ): { [k: string]: any }

    /**
     * Converts this MultiChoiceQuestion to JSON.
     * @returns JSON object
     */
    public toJSON(): { [k: string]: any }
  }

  namespace MultiChoiceQuestion {
    /** Properties of an Answer. */
    interface IAnswer {
      /** Answer text */
      text?: string | null

      /** Answer audioId */
      audioId?: string | null

      /** Answer checked */
      checked?: boolean | null
    }

    /** Represents an Answer. */
    class Answer implements IAnswer {
      /**
       * Constructs a new Answer.
       * @param [properties] Properties to set
       */
      constructor(properties?: core_course.MultiChoiceQuestion.IAnswer)

      /** Answer text. */
      public text: string

      /** Answer audioId. */
      public audioId: string

      /** Answer checked. */
      public checked: boolean

      /**
       * Creates a new Answer instance using the specified properties.
       * @param [properties] Properties to set
       * @returns Answer instance
       */
      public static create(
        properties?: core_course.MultiChoiceQuestion.IAnswer,
      ): core_course.MultiChoiceQuestion.Answer

      /**
       * Encodes the specified Answer message. Does not implicitly {@link core_course.MultiChoiceQuestion.Answer.verify|verify} messages.
       * @param message Answer message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encode(
        message: core_course.MultiChoiceQuestion.IAnswer,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Encodes the specified Answer message, length delimited. Does not implicitly {@link core_course.MultiChoiceQuestion.Answer.verify|verify} messages.
       * @param message Answer message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encodeDelimited(
        message: core_course.MultiChoiceQuestion.IAnswer,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Decodes an Answer message from the specified reader or buffer.
       * @param reader Reader or buffer to decode from
       * @param [length] Message length if known beforehand
       * @returns Answer
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decode(
        reader: $protobuf.Reader | Uint8Array,
        length?: number,
      ): core_course.MultiChoiceQuestion.Answer

      /**
       * Decodes an Answer message from the specified reader or buffer, length delimited.
       * @param reader Reader or buffer to decode from
       * @returns Answer
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decodeDelimited(
        reader: $protobuf.Reader | Uint8Array,
      ): core_course.MultiChoiceQuestion.Answer

      /**
       * Verifies an Answer message.
       * @param message Plain object to verify
       * @returns `null` if valid, otherwise the reason why it is not
       */
      public static verify(message: { [k: string]: any }): string | null

      /**
       * Creates an Answer message from a plain object. Also converts values to their respective internal types.
       * @param object Plain object
       * @returns Answer
       */
      public static fromObject(object: {
        [k: string]: any
      }): core_course.MultiChoiceQuestion.Answer

      /**
       * Creates a plain object from an Answer message. Also converts values to other types if specified.
       * @param message Answer
       * @param [options] Conversion options
       * @returns Plain object
       */
      public static toObject(
        message: core_course.MultiChoiceQuestion.Answer,
        options?: $protobuf.IConversionOptions,
      ): { [k: string]: any }

      /**
       * Converts this Answer to JSON.
       * @returns JSON object
       */
      public toJSON(): { [k: string]: any }
    }
  }

  /** Properties of a MultiChoiceText. */
  interface IMultiChoiceText {
    /** MultiChoiceText audioId */
    audioId?: string | null

    /** MultiChoiceText text */
    text?: string | null

    /** MultiChoiceText pictureId */
    pictureId?: string | null

    /** MultiChoiceText answer */
    answer?: core_course.MultiChoiceText.IAnswer[] | null

    /** MultiChoiceText trText */
    trText?: string | null

    /** MultiChoiceText passage */
    passage?: string | null

    /** MultiChoiceText instruction */
    instruction?: string | null

    /** MultiChoiceText stemTexts */
    stemTexts?: string[] | null
  }

  /** Represents a MultiChoiceText. */
  class MultiChoiceText implements IMultiChoiceText {
    /**
     * Constructs a new MultiChoiceText.
     * @param [properties] Properties to set
     */
    constructor(properties?: core_course.IMultiChoiceText)

    /** MultiChoiceText audioId. */
    public audioId: string

    /** MultiChoiceText text. */
    public text: string

    /** MultiChoiceText pictureId. */
    public pictureId: string

    /** MultiChoiceText answer. */
    public answer: core_course.MultiChoiceText.IAnswer[]

    /** MultiChoiceText trText. */
    public trText: string

    /** MultiChoiceText passage. */
    public passage: string

    /** MultiChoiceText instruction. */
    public instruction: string

    /** MultiChoiceText stemTexts. */
    public stemTexts: string[]

    /**
     * Creates a new MultiChoiceText instance using the specified properties.
     * @param [properties] Properties to set
     * @returns MultiChoiceText instance
     */
    public static create(
      properties?: core_course.IMultiChoiceText,
    ): core_course.MultiChoiceText

    /**
     * Encodes the specified MultiChoiceText message. Does not implicitly {@link core_course.MultiChoiceText.verify|verify} messages.
     * @param message MultiChoiceText message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encode(
      message: core_course.IMultiChoiceText,
      writer?: $protobuf.Writer,
    ): $protobuf.Writer

    /**
     * Encodes the specified MultiChoiceText message, length delimited. Does not implicitly {@link core_course.MultiChoiceText.verify|verify} messages.
     * @param message MultiChoiceText message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encodeDelimited(
      message: core_course.IMultiChoiceText,
      writer?: $protobuf.Writer,
    ): $protobuf.Writer

    /**
     * Decodes a MultiChoiceText message from the specified reader or buffer.
     * @param reader Reader or buffer to decode from
     * @param [length] Message length if known beforehand
     * @returns MultiChoiceText
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decode(
      reader: $protobuf.Reader | Uint8Array,
      length?: number,
    ): core_course.MultiChoiceText

    /**
     * Decodes a MultiChoiceText message from the specified reader or buffer, length delimited.
     * @param reader Reader or buffer to decode from
     * @returns MultiChoiceText
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decodeDelimited(
      reader: $protobuf.Reader | Uint8Array,
    ): core_course.MultiChoiceText

    /**
     * Verifies a MultiChoiceText message.
     * @param message Plain object to verify
     * @returns `null` if valid, otherwise the reason why it is not
     */
    public static verify(message: { [k: string]: any }): string | null

    /**
     * Creates a MultiChoiceText message from a plain object. Also converts values to their respective internal types.
     * @param object Plain object
     * @returns MultiChoiceText
     */
    public static fromObject(object: {
      [k: string]: any
    }): core_course.MultiChoiceText

    /**
     * Creates a plain object from a MultiChoiceText message. Also converts values to other types if specified.
     * @param message MultiChoiceText
     * @param [options] Conversion options
     * @returns Plain object
     */
    public static toObject(
      message: core_course.MultiChoiceText,
      options?: $protobuf.IConversionOptions,
    ): { [k: string]: any }

    /**
     * Converts this MultiChoiceText to JSON.
     * @returns JSON object
     */
    public toJSON(): { [k: string]: any }
  }

  namespace MultiChoiceText {
    /** Properties of an Answer. */
    interface IAnswer {
      /** Answer text */
      text?: string | null

      /** Answer checked */
      checked?: boolean | null
    }

    /** Represents an Answer. */
    class Answer implements IAnswer {
      /**
       * Constructs a new Answer.
       * @param [properties] Properties to set
       */
      constructor(properties?: core_course.MultiChoiceText.IAnswer)

      /** Answer text. */
      public text: string

      /** Answer checked. */
      public checked: boolean

      /**
       * Creates a new Answer instance using the specified properties.
       * @param [properties] Properties to set
       * @returns Answer instance
       */
      public static create(
        properties?: core_course.MultiChoiceText.IAnswer,
      ): core_course.MultiChoiceText.Answer

      /**
       * Encodes the specified Answer message. Does not implicitly {@link core_course.MultiChoiceText.Answer.verify|verify} messages.
       * @param message Answer message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encode(
        message: core_course.MultiChoiceText.IAnswer,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Encodes the specified Answer message, length delimited. Does not implicitly {@link core_course.MultiChoiceText.Answer.verify|verify} messages.
       * @param message Answer message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encodeDelimited(
        message: core_course.MultiChoiceText.IAnswer,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Decodes an Answer message from the specified reader or buffer.
       * @param reader Reader or buffer to decode from
       * @param [length] Message length if known beforehand
       * @returns Answer
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decode(
        reader: $protobuf.Reader | Uint8Array,
        length?: number,
      ): core_course.MultiChoiceText.Answer

      /**
       * Decodes an Answer message from the specified reader or buffer, length delimited.
       * @param reader Reader or buffer to decode from
       * @returns Answer
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decodeDelimited(
        reader: $protobuf.Reader | Uint8Array,
      ): core_course.MultiChoiceText.Answer

      /**
       * Verifies an Answer message.
       * @param message Plain object to verify
       * @returns `null` if valid, otherwise the reason why it is not
       */
      public static verify(message: { [k: string]: any }): string | null

      /**
       * Creates an Answer message from a plain object. Also converts values to their respective internal types.
       * @param object Plain object
       * @returns Answer
       */
      public static fromObject(object: {
        [k: string]: any
      }): core_course.MultiChoiceText.Answer

      /**
       * Creates a plain object from an Answer message. Also converts values to other types if specified.
       * @param message Answer
       * @param [options] Conversion options
       * @returns Plain object
       */
      public static toObject(
        message: core_course.MultiChoiceText.Answer,
        options?: $protobuf.IConversionOptions,
      ): { [k: string]: any }

      /**
       * Converts this Answer to JSON.
       * @returns JSON object
       */
      public toJSON(): { [k: string]: any }
    }
  }

  /** Properties of a MultiChoiceAudio. */
  interface IMultiChoiceAudio {
    /** MultiChoiceAudio audioId */
    audioId?: string | null

    /** MultiChoiceAudio text */
    text?: string | null

    /** MultiChoiceAudio pictureId */
    pictureId?: string | null

    /** MultiChoiceAudio answer */
    answer?: core_course.MultiChoiceAudio.IAnswer[] | null

    /** MultiChoiceAudio trText */
    trText?: string | null

    /** MultiChoiceAudio passage */
    passage?: string | null
  }

  /** Represents a MultiChoiceAudio. */
  class MultiChoiceAudio implements IMultiChoiceAudio {
    /**
     * Constructs a new MultiChoiceAudio.
     * @param [properties] Properties to set
     */
    constructor(properties?: core_course.IMultiChoiceAudio)

    /** MultiChoiceAudio audioId. */
    public audioId: string

    /** MultiChoiceAudio text. */
    public text: string

    /** MultiChoiceAudio pictureId. */
    public pictureId: string

    /** MultiChoiceAudio answer. */
    public answer: core_course.MultiChoiceAudio.IAnswer[]

    /** MultiChoiceAudio trText. */
    public trText: string

    /** MultiChoiceAudio passage. */
    public passage: string

    /**
     * Creates a new MultiChoiceAudio instance using the specified properties.
     * @param [properties] Properties to set
     * @returns MultiChoiceAudio instance
     */
    public static create(
      properties?: core_course.IMultiChoiceAudio,
    ): core_course.MultiChoiceAudio

    /**
     * Encodes the specified MultiChoiceAudio message. Does not implicitly {@link core_course.MultiChoiceAudio.verify|verify} messages.
     * @param message MultiChoiceAudio message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encode(
      message: core_course.IMultiChoiceAudio,
      writer?: $protobuf.Writer,
    ): $protobuf.Writer

    /**
     * Encodes the specified MultiChoiceAudio message, length delimited. Does not implicitly {@link core_course.MultiChoiceAudio.verify|verify} messages.
     * @param message MultiChoiceAudio message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encodeDelimited(
      message: core_course.IMultiChoiceAudio,
      writer?: $protobuf.Writer,
    ): $protobuf.Writer

    /**
     * Decodes a MultiChoiceAudio message from the specified reader or buffer.
     * @param reader Reader or buffer to decode from
     * @param [length] Message length if known beforehand
     * @returns MultiChoiceAudio
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decode(
      reader: $protobuf.Reader | Uint8Array,
      length?: number,
    ): core_course.MultiChoiceAudio

    /**
     * Decodes a MultiChoiceAudio message from the specified reader or buffer, length delimited.
     * @param reader Reader or buffer to decode from
     * @returns MultiChoiceAudio
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decodeDelimited(
      reader: $protobuf.Reader | Uint8Array,
    ): core_course.MultiChoiceAudio

    /**
     * Verifies a MultiChoiceAudio message.
     * @param message Plain object to verify
     * @returns `null` if valid, otherwise the reason why it is not
     */
    public static verify(message: { [k: string]: any }): string | null

    /**
     * Creates a MultiChoiceAudio message from a plain object. Also converts values to their respective internal types.
     * @param object Plain object
     * @returns MultiChoiceAudio
     */
    public static fromObject(object: {
      [k: string]: any
    }): core_course.MultiChoiceAudio

    /**
     * Creates a plain object from a MultiChoiceAudio message. Also converts values to other types if specified.
     * @param message MultiChoiceAudio
     * @param [options] Conversion options
     * @returns Plain object
     */
    public static toObject(
      message: core_course.MultiChoiceAudio,
      options?: $protobuf.IConversionOptions,
    ): { [k: string]: any }

    /**
     * Converts this MultiChoiceAudio to JSON.
     * @returns JSON object
     */
    public toJSON(): { [k: string]: any }
  }

  namespace MultiChoiceAudio {
    /** Properties of an Answer. */
    interface IAnswer {
      /** Answer audioId */
      audioId?: string | null

      /** Answer checked */
      checked?: boolean | null
    }

    /** Represents an Answer. */
    class Answer implements IAnswer {
      /**
       * Constructs a new Answer.
       * @param [properties] Properties to set
       */
      constructor(properties?: core_course.MultiChoiceAudio.IAnswer)

      /** Answer audioId. */
      public audioId: string

      /** Answer checked. */
      public checked: boolean

      /**
       * Creates a new Answer instance using the specified properties.
       * @param [properties] Properties to set
       * @returns Answer instance
       */
      public static create(
        properties?: core_course.MultiChoiceAudio.IAnswer,
      ): core_course.MultiChoiceAudio.Answer

      /**
       * Encodes the specified Answer message. Does not implicitly {@link core_course.MultiChoiceAudio.Answer.verify|verify} messages.
       * @param message Answer message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encode(
        message: core_course.MultiChoiceAudio.IAnswer,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Encodes the specified Answer message, length delimited. Does not implicitly {@link core_course.MultiChoiceAudio.Answer.verify|verify} messages.
       * @param message Answer message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encodeDelimited(
        message: core_course.MultiChoiceAudio.IAnswer,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Decodes an Answer message from the specified reader or buffer.
       * @param reader Reader or buffer to decode from
       * @param [length] Message length if known beforehand
       * @returns Answer
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decode(
        reader: $protobuf.Reader | Uint8Array,
        length?: number,
      ): core_course.MultiChoiceAudio.Answer

      /**
       * Decodes an Answer message from the specified reader or buffer, length delimited.
       * @param reader Reader or buffer to decode from
       * @returns Answer
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decodeDelimited(
        reader: $protobuf.Reader | Uint8Array,
      ): core_course.MultiChoiceAudio.Answer

      /**
       * Verifies an Answer message.
       * @param message Plain object to verify
       * @returns `null` if valid, otherwise the reason why it is not
       */
      public static verify(message: { [k: string]: any }): string | null

      /**
       * Creates an Answer message from a plain object. Also converts values to their respective internal types.
       * @param object Plain object
       * @returns Answer
       */
      public static fromObject(object: {
        [k: string]: any
      }): core_course.MultiChoiceAudio.Answer

      /**
       * Creates a plain object from an Answer message. Also converts values to other types if specified.
       * @param message Answer
       * @param [options] Conversion options
       * @returns Plain object
       */
      public static toObject(
        message: core_course.MultiChoiceAudio.Answer,
        options?: $protobuf.IConversionOptions,
      ): { [k: string]: any }

      /**
       * Converts this Answer to JSON.
       * @returns JSON object
       */
      public toJSON(): { [k: string]: any }
    }
  }

  /** Properties of a ClickAndDrag. */
  interface IClickAndDrag {
    /** ClickAndDrag stem */
    stem?: core_course.ClickAndDrag.IStem[] | null

    /** ClickAndDrag answer */
    answer?: string[] | null

    /** ClickAndDrag pictureId */
    pictureId?: string[] | null
  }

  /** Represents a ClickAndDrag. */
  class ClickAndDrag implements IClickAndDrag {
    /**
     * Constructs a new ClickAndDrag.
     * @param [properties] Properties to set
     */
    constructor(properties?: core_course.IClickAndDrag)

    /** ClickAndDrag stem. */
    public stem: core_course.ClickAndDrag.IStem[]

    /** ClickAndDrag answer. */
    public answer: string[]

    /** ClickAndDrag pictureId. */
    public pictureId: string[]

    /**
     * Creates a new ClickAndDrag instance using the specified properties.
     * @param [properties] Properties to set
     * @returns ClickAndDrag instance
     */
    public static create(
      properties?: core_course.IClickAndDrag,
    ): core_course.ClickAndDrag

    /**
     * Encodes the specified ClickAndDrag message. Does not implicitly {@link core_course.ClickAndDrag.verify|verify} messages.
     * @param message ClickAndDrag message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encode(
      message: core_course.IClickAndDrag,
      writer?: $protobuf.Writer,
    ): $protobuf.Writer

    /**
     * Encodes the specified ClickAndDrag message, length delimited. Does not implicitly {@link core_course.ClickAndDrag.verify|verify} messages.
     * @param message ClickAndDrag message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encodeDelimited(
      message: core_course.IClickAndDrag,
      writer?: $protobuf.Writer,
    ): $protobuf.Writer

    /**
     * Decodes a ClickAndDrag message from the specified reader or buffer.
     * @param reader Reader or buffer to decode from
     * @param [length] Message length if known beforehand
     * @returns ClickAndDrag
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decode(
      reader: $protobuf.Reader | Uint8Array,
      length?: number,
    ): core_course.ClickAndDrag

    /**
     * Decodes a ClickAndDrag message from the specified reader or buffer, length delimited.
     * @param reader Reader or buffer to decode from
     * @returns ClickAndDrag
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decodeDelimited(
      reader: $protobuf.Reader | Uint8Array,
    ): core_course.ClickAndDrag

    /**
     * Verifies a ClickAndDrag message.
     * @param message Plain object to verify
     * @returns `null` if valid, otherwise the reason why it is not
     */
    public static verify(message: { [k: string]: any }): string | null

    /**
     * Creates a ClickAndDrag message from a plain object. Also converts values to their respective internal types.
     * @param object Plain object
     * @returns ClickAndDrag
     */
    public static fromObject(object: {
      [k: string]: any
    }): core_course.ClickAndDrag

    /**
     * Creates a plain object from a ClickAndDrag message. Also converts values to other types if specified.
     * @param message ClickAndDrag
     * @param [options] Conversion options
     * @returns Plain object
     */
    public static toObject(
      message: core_course.ClickAndDrag,
      options?: $protobuf.IConversionOptions,
    ): { [k: string]: any }

    /**
     * Converts this ClickAndDrag to JSON.
     * @returns JSON object
     */
    public toJSON(): { [k: string]: any }
  }

  namespace ClickAndDrag {
    /** Properties of a Stem. */
    interface IStem {
      /** Stem text */
      text?: string | null

      /** Stem checked */
      checked?: boolean | null
    }

    /** Represents a Stem. */
    class Stem implements IStem {
      /**
       * Constructs a new Stem.
       * @param [properties] Properties to set
       */
      constructor(properties?: core_course.ClickAndDrag.IStem)

      /** Stem text. */
      public text: string

      /** Stem checked. */
      public checked: boolean

      /**
       * Creates a new Stem instance using the specified properties.
       * @param [properties] Properties to set
       * @returns Stem instance
       */
      public static create(
        properties?: core_course.ClickAndDrag.IStem,
      ): core_course.ClickAndDrag.Stem

      /**
       * Encodes the specified Stem message. Does not implicitly {@link core_course.ClickAndDrag.Stem.verify|verify} messages.
       * @param message Stem message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encode(
        message: core_course.ClickAndDrag.IStem,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Encodes the specified Stem message, length delimited. Does not implicitly {@link core_course.ClickAndDrag.Stem.verify|verify} messages.
       * @param message Stem message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encodeDelimited(
        message: core_course.ClickAndDrag.IStem,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Decodes a Stem message from the specified reader or buffer.
       * @param reader Reader or buffer to decode from
       * @param [length] Message length if known beforehand
       * @returns Stem
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decode(
        reader: $protobuf.Reader | Uint8Array,
        length?: number,
      ): core_course.ClickAndDrag.Stem

      /**
       * Decodes a Stem message from the specified reader or buffer, length delimited.
       * @param reader Reader or buffer to decode from
       * @returns Stem
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decodeDelimited(
        reader: $protobuf.Reader | Uint8Array,
      ): core_course.ClickAndDrag.Stem

      /**
       * Verifies a Stem message.
       * @param message Plain object to verify
       * @returns `null` if valid, otherwise the reason why it is not
       */
      public static verify(message: { [k: string]: any }): string | null

      /**
       * Creates a Stem message from a plain object. Also converts values to their respective internal types.
       * @param object Plain object
       * @returns Stem
       */
      public static fromObject(object: {
        [k: string]: any
      }): core_course.ClickAndDrag.Stem

      /**
       * Creates a plain object from a Stem message. Also converts values to other types if specified.
       * @param message Stem
       * @param [options] Conversion options
       * @returns Plain object
       */
      public static toObject(
        message: core_course.ClickAndDrag.Stem,
        options?: $protobuf.IConversionOptions,
      ): { [k: string]: any }

      /**
       * Converts this Stem to JSON.
       * @returns JSON object
       */
      public toJSON(): { [k: string]: any }
    }
  }

  /** Properties of a SentenceRepetition. */
  interface ISentenceRepetition {
    /** SentenceRepetition audioId */
    audioId?: string | null

    /** SentenceRepetition pictureId */
    pictureId?: string | null

    /** SentenceRepetition spokenText */
    spokenText?: string | null

    /** SentenceRepetition text */
    text?: string | null
  }

  /** Represents a SentenceRepetition. */
  class SentenceRepetition implements ISentenceRepetition {
    /**
     * Constructs a new SentenceRepetition.
     * @param [properties] Properties to set
     */
    constructor(properties?: core_course.ISentenceRepetition)

    /** SentenceRepetition audioId. */
    public audioId: string

    /** SentenceRepetition pictureId. */
    public pictureId: string

    /** SentenceRepetition spokenText. */
    public spokenText: string

    /** SentenceRepetition text. */
    public text: string

    /**
     * Creates a new SentenceRepetition instance using the specified properties.
     * @param [properties] Properties to set
     * @returns SentenceRepetition instance
     */
    public static create(
      properties?: core_course.ISentenceRepetition,
    ): core_course.SentenceRepetition

    /**
     * Encodes the specified SentenceRepetition message. Does not implicitly {@link core_course.SentenceRepetition.verify|verify} messages.
     * @param message SentenceRepetition message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encode(
      message: core_course.ISentenceRepetition,
      writer?: $protobuf.Writer,
    ): $protobuf.Writer

    /**
     * Encodes the specified SentenceRepetition message, length delimited. Does not implicitly {@link core_course.SentenceRepetition.verify|verify} messages.
     * @param message SentenceRepetition message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encodeDelimited(
      message: core_course.ISentenceRepetition,
      writer?: $protobuf.Writer,
    ): $protobuf.Writer

    /**
     * Decodes a SentenceRepetition message from the specified reader or buffer.
     * @param reader Reader or buffer to decode from
     * @param [length] Message length if known beforehand
     * @returns SentenceRepetition
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decode(
      reader: $protobuf.Reader | Uint8Array,
      length?: number,
    ): core_course.SentenceRepetition

    /**
     * Decodes a SentenceRepetition message from the specified reader or buffer, length delimited.
     * @param reader Reader or buffer to decode from
     * @returns SentenceRepetition
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decodeDelimited(
      reader: $protobuf.Reader | Uint8Array,
    ): core_course.SentenceRepetition

    /**
     * Verifies a SentenceRepetition message.
     * @param message Plain object to verify
     * @returns `null` if valid, otherwise the reason why it is not
     */
    public static verify(message: { [k: string]: any }): string | null

    /**
     * Creates a SentenceRepetition message from a plain object. Also converts values to their respective internal types.
     * @param object Plain object
     * @returns SentenceRepetition
     */
    public static fromObject(object: {
      [k: string]: any
    }): core_course.SentenceRepetition

    /**
     * Creates a plain object from a SentenceRepetition message. Also converts values to other types if specified.
     * @param message SentenceRepetition
     * @param [options] Conversion options
     * @returns Plain object
     */
    public static toObject(
      message: core_course.SentenceRepetition,
      options?: $protobuf.IConversionOptions,
    ): { [k: string]: any }

    /**
     * Converts this SentenceRepetition to JSON.
     * @returns JSON object
     */
    public toJSON(): { [k: string]: any }
  }

  /** Properties of an OralReading. */
  interface IOralReading {
    /** OralReading audioId */
    audioId?: string | null

    /** OralReading text */
    text?: string | null

    /** OralReading pictureId */
    pictureId?: string | null

    /** OralReading spokenText */
    spokenText?: string | null
  }

  /** Represents an OralReading. */
  class OralReading implements IOralReading {
    /**
     * Constructs a new OralReading.
     * @param [properties] Properties to set
     */
    constructor(properties?: core_course.IOralReading)

    /** OralReading audioId. */
    public audioId: string

    /** OralReading text. */
    public text: string

    /** OralReading pictureId. */
    public pictureId: string

    /** OralReading spokenText. */
    public spokenText: string

    /**
     * Creates a new OralReading instance using the specified properties.
     * @param [properties] Properties to set
     * @returns OralReading instance
     */
    public static create(
      properties?: core_course.IOralReading,
    ): core_course.OralReading

    /**
     * Encodes the specified OralReading message. Does not implicitly {@link core_course.OralReading.verify|verify} messages.
     * @param message OralReading message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encode(
      message: core_course.IOralReading,
      writer?: $protobuf.Writer,
    ): $protobuf.Writer

    /**
     * Encodes the specified OralReading message, length delimited. Does not implicitly {@link core_course.OralReading.verify|verify} messages.
     * @param message OralReading message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encodeDelimited(
      message: core_course.IOralReading,
      writer?: $protobuf.Writer,
    ): $protobuf.Writer

    /**
     * Decodes an OralReading message from the specified reader or buffer.
     * @param reader Reader or buffer to decode from
     * @param [length] Message length if known beforehand
     * @returns OralReading
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decode(
      reader: $protobuf.Reader | Uint8Array,
      length?: number,
    ): core_course.OralReading

    /**
     * Decodes an OralReading message from the specified reader or buffer, length delimited.
     * @param reader Reader or buffer to decode from
     * @returns OralReading
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decodeDelimited(
      reader: $protobuf.Reader | Uint8Array,
    ): core_course.OralReading

    /**
     * Verifies an OralReading message.
     * @param message Plain object to verify
     * @returns `null` if valid, otherwise the reason why it is not
     */
    public static verify(message: { [k: string]: any }): string | null

    /**
     * Creates an OralReading message from a plain object. Also converts values to their respective internal types.
     * @param object Plain object
     * @returns OralReading
     */
    public static fromObject(object: {
      [k: string]: any
    }): core_course.OralReading

    /**
     * Creates a plain object from an OralReading message. Also converts values to other types if specified.
     * @param message OralReading
     * @param [options] Conversion options
     * @returns Plain object
     */
    public static toObject(
      message: core_course.OralReading,
      options?: $protobuf.IConversionOptions,
    ): { [k: string]: any }

    /**
     * Converts this OralReading to JSON.
     * @returns JSON object
     */
    public toJSON(): { [k: string]: any }
  }

  /** Properties of a RolePlay. */
  interface IRolePlay {
    /** RolePlay speaker */
    speaker?: core_course.RolePlay.ISpeaker[] | null

    /** RolePlay practiceRoleId */
    practiceRoleId?: number | null
  }

  /** Represents a RolePlay. */
  class RolePlay implements IRolePlay {
    /**
     * Constructs a new RolePlay.
     * @param [properties] Properties to set
     */
    constructor(properties?: core_course.IRolePlay)

    /** RolePlay speaker. */
    public speaker: core_course.RolePlay.ISpeaker[]

    /** RolePlay practiceRoleId. */
    public practiceRoleId: number

    /**
     * Creates a new RolePlay instance using the specified properties.
     * @param [properties] Properties to set
     * @returns RolePlay instance
     */
    public static create(
      properties?: core_course.IRolePlay,
    ): core_course.RolePlay

    /**
     * Encodes the specified RolePlay message. Does not implicitly {@link core_course.RolePlay.verify|verify} messages.
     * @param message RolePlay message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encode(
      message: core_course.IRolePlay,
      writer?: $protobuf.Writer,
    ): $protobuf.Writer

    /**
     * Encodes the specified RolePlay message, length delimited. Does not implicitly {@link core_course.RolePlay.verify|verify} messages.
     * @param message RolePlay message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encodeDelimited(
      message: core_course.IRolePlay,
      writer?: $protobuf.Writer,
    ): $protobuf.Writer

    /**
     * Decodes a RolePlay message from the specified reader or buffer.
     * @param reader Reader or buffer to decode from
     * @param [length] Message length if known beforehand
     * @returns RolePlay
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decode(
      reader: $protobuf.Reader | Uint8Array,
      length?: number,
    ): core_course.RolePlay

    /**
     * Decodes a RolePlay message from the specified reader or buffer, length delimited.
     * @param reader Reader or buffer to decode from
     * @returns RolePlay
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decodeDelimited(
      reader: $protobuf.Reader | Uint8Array,
    ): core_course.RolePlay

    /**
     * Verifies a RolePlay message.
     * @param message Plain object to verify
     * @returns `null` if valid, otherwise the reason why it is not
     */
    public static verify(message: { [k: string]: any }): string | null

    /**
     * Creates a RolePlay message from a plain object. Also converts values to their respective internal types.
     * @param object Plain object
     * @returns RolePlay
     */
    public static fromObject(object: { [k: string]: any }): core_course.RolePlay

    /**
     * Creates a plain object from a RolePlay message. Also converts values to other types if specified.
     * @param message RolePlay
     * @param [options] Conversion options
     * @returns Plain object
     */
    public static toObject(
      message: core_course.RolePlay,
      options?: $protobuf.IConversionOptions,
    ): { [k: string]: any }

    /**
     * Converts this RolePlay to JSON.
     * @returns JSON object
     */
    public toJSON(): { [k: string]: any }
  }

  namespace RolePlay {
    /** Properties of a Speaker. */
    interface ISpeaker {
      /** Speaker audioId */
      audioId?: string | null

      /** Speaker speakerPictureId */
      speakerPictureId?: string | null

      /** Speaker speakerRole */
      speakerRole?: number | null

      /** Speaker spokenText */
      spokenText?: string | null

      /** Speaker text */
      text?: string | null
    }

    /** Represents a Speaker. */
    class Speaker implements ISpeaker {
      /**
       * Constructs a new Speaker.
       * @param [properties] Properties to set
       */
      constructor(properties?: core_course.RolePlay.ISpeaker)

      /** Speaker audioId. */
      public audioId: string

      /** Speaker speakerPictureId. */
      public speakerPictureId: string

      /** Speaker speakerRole. */
      public speakerRole: number

      /** Speaker spokenText. */
      public spokenText: string

      /** Speaker text. */
      public text: string

      /**
       * Creates a new Speaker instance using the specified properties.
       * @param [properties] Properties to set
       * @returns Speaker instance
       */
      public static create(
        properties?: core_course.RolePlay.ISpeaker,
      ): core_course.RolePlay.Speaker

      /**
       * Encodes the specified Speaker message. Does not implicitly {@link core_course.RolePlay.Speaker.verify|verify} messages.
       * @param message Speaker message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encode(
        message: core_course.RolePlay.ISpeaker,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Encodes the specified Speaker message, length delimited. Does not implicitly {@link core_course.RolePlay.Speaker.verify|verify} messages.
       * @param message Speaker message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encodeDelimited(
        message: core_course.RolePlay.ISpeaker,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Decodes a Speaker message from the specified reader or buffer.
       * @param reader Reader or buffer to decode from
       * @param [length] Message length if known beforehand
       * @returns Speaker
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decode(
        reader: $protobuf.Reader | Uint8Array,
        length?: number,
      ): core_course.RolePlay.Speaker

      /**
       * Decodes a Speaker message from the specified reader or buffer, length delimited.
       * @param reader Reader or buffer to decode from
       * @returns Speaker
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decodeDelimited(
        reader: $protobuf.Reader | Uint8Array,
      ): core_course.RolePlay.Speaker

      /**
       * Verifies a Speaker message.
       * @param message Plain object to verify
       * @returns `null` if valid, otherwise the reason why it is not
       */
      public static verify(message: { [k: string]: any }): string | null

      /**
       * Creates a Speaker message from a plain object. Also converts values to their respective internal types.
       * @param object Plain object
       * @returns Speaker
       */
      public static fromObject(object: {
        [k: string]: any
      }): core_course.RolePlay.Speaker

      /**
       * Creates a plain object from a Speaker message. Also converts values to other types if specified.
       * @param message Speaker
       * @param [options] Conversion options
       * @returns Plain object
       */
      public static toObject(
        message: core_course.RolePlay.Speaker,
        options?: $protobuf.IConversionOptions,
      ): { [k: string]: any }

      /**
       * Converts this Speaker to JSON.
       * @returns JSON object
       */
      public toJSON(): { [k: string]: any }
    }
  }

  /** Properties of a DialoguePractice. */
  interface IDialoguePractice {
    /** DialoguePractice text */
    text?: string | null

    /** DialoguePractice actions */
    actions?: core_course.DialoguePractice.IAction[] | null

    /** DialoguePractice practiceRoleId */
    practiceRoleId?: number | null
  }

  /** Represents a DialoguePractice. */
  class DialoguePractice implements IDialoguePractice {
    /**
     * Constructs a new DialoguePractice.
     * @param [properties] Properties to set
     */
    constructor(properties?: core_course.IDialoguePractice)

    /** DialoguePractice text. */
    public text: string

    /** DialoguePractice actions. */
    public actions: core_course.DialoguePractice.IAction[]

    /** DialoguePractice practiceRoleId. */
    public practiceRoleId: number

    /**
     * Creates a new DialoguePractice instance using the specified properties.
     * @param [properties] Properties to set
     * @returns DialoguePractice instance
     */
    public static create(
      properties?: core_course.IDialoguePractice,
    ): core_course.DialoguePractice

    /**
     * Encodes the specified DialoguePractice message. Does not implicitly {@link core_course.DialoguePractice.verify|verify} messages.
     * @param message DialoguePractice message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encode(
      message: core_course.IDialoguePractice,
      writer?: $protobuf.Writer,
    ): $protobuf.Writer

    /**
     * Encodes the specified DialoguePractice message, length delimited. Does not implicitly {@link core_course.DialoguePractice.verify|verify} messages.
     * @param message DialoguePractice message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encodeDelimited(
      message: core_course.IDialoguePractice,
      writer?: $protobuf.Writer,
    ): $protobuf.Writer

    /**
     * Decodes a DialoguePractice message from the specified reader or buffer.
     * @param reader Reader or buffer to decode from
     * @param [length] Message length if known beforehand
     * @returns DialoguePractice
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decode(
      reader: $protobuf.Reader | Uint8Array,
      length?: number,
    ): core_course.DialoguePractice

    /**
     * Decodes a DialoguePractice message from the specified reader or buffer, length delimited.
     * @param reader Reader or buffer to decode from
     * @returns DialoguePractice
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decodeDelimited(
      reader: $protobuf.Reader | Uint8Array,
    ): core_course.DialoguePractice

    /**
     * Verifies a DialoguePractice message.
     * @param message Plain object to verify
     * @returns `null` if valid, otherwise the reason why it is not
     */
    public static verify(message: { [k: string]: any }): string | null

    /**
     * Creates a DialoguePractice message from a plain object. Also converts values to their respective internal types.
     * @param object Plain object
     * @returns DialoguePractice
     */
    public static fromObject(object: {
      [k: string]: any
    }): core_course.DialoguePractice

    /**
     * Creates a plain object from a DialoguePractice message. Also converts values to other types if specified.
     * @param message DialoguePractice
     * @param [options] Conversion options
     * @returns Plain object
     */
    public static toObject(
      message: core_course.DialoguePractice,
      options?: $protobuf.IConversionOptions,
    ): { [k: string]: any }

    /**
     * Converts this DialoguePractice to JSON.
     * @returns JSON object
     */
    public toJSON(): { [k: string]: any }
  }

  namespace DialoguePractice {
    /** Properties of an ActionType. */
    interface IActionType {}

    /** Represents an ActionType. */
    class ActionType implements IActionType {
      /**
       * Constructs a new ActionType.
       * @param [properties] Properties to set
       */
      constructor(properties?: core_course.DialoguePractice.IActionType)

      /**
       * Creates a new ActionType instance using the specified properties.
       * @param [properties] Properties to set
       * @returns ActionType instance
       */
      public static create(
        properties?: core_course.DialoguePractice.IActionType,
      ): core_course.DialoguePractice.ActionType

      /**
       * Encodes the specified ActionType message. Does not implicitly {@link core_course.DialoguePractice.ActionType.verify|verify} messages.
       * @param message ActionType message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encode(
        message: core_course.DialoguePractice.IActionType,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Encodes the specified ActionType message, length delimited. Does not implicitly {@link core_course.DialoguePractice.ActionType.verify|verify} messages.
       * @param message ActionType message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encodeDelimited(
        message: core_course.DialoguePractice.IActionType,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Decodes an ActionType message from the specified reader or buffer.
       * @param reader Reader or buffer to decode from
       * @param [length] Message length if known beforehand
       * @returns ActionType
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decode(
        reader: $protobuf.Reader | Uint8Array,
        length?: number,
      ): core_course.DialoguePractice.ActionType

      /**
       * Decodes an ActionType message from the specified reader or buffer, length delimited.
       * @param reader Reader or buffer to decode from
       * @returns ActionType
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decodeDelimited(
        reader: $protobuf.Reader | Uint8Array,
      ): core_course.DialoguePractice.ActionType

      /**
       * Verifies an ActionType message.
       * @param message Plain object to verify
       * @returns `null` if valid, otherwise the reason why it is not
       */
      public static verify(message: { [k: string]: any }): string | null

      /**
       * Creates an ActionType message from a plain object. Also converts values to their respective internal types.
       * @param object Plain object
       * @returns ActionType
       */
      public static fromObject(object: {
        [k: string]: any
      }): core_course.DialoguePractice.ActionType

      /**
       * Creates a plain object from an ActionType message. Also converts values to other types if specified.
       * @param message ActionType
       * @param [options] Conversion options
       * @returns Plain object
       */
      public static toObject(
        message: core_course.DialoguePractice.ActionType,
        options?: $protobuf.IConversionOptions,
      ): { [k: string]: any }

      /**
       * Converts this ActionType to JSON.
       * @returns JSON object
       */
      public toJSON(): { [k: string]: any }
    }

    namespace ActionType {
      /** Enum enum. */
      enum Enum {
        UNKNOWN = 0,
        PIC = 1,
        AUDIO = 2,
        SCORER = 3,
        HINT = 4,
      }
    }

    /** Properties of an ActionContent. */
    interface IActionContent {
      /** ActionContent speakerRole */
      speakerRole?: number | null

      /** ActionContent audioId */
      audioId?: string | null

      /** ActionContent text */
      text?: string | null

      /** ActionContent picId */
      picId?: string | null

      /** ActionContent hint */
      hint?: string | null
    }

    /** Represents an ActionContent. */
    class ActionContent implements IActionContent {
      /**
       * Constructs a new ActionContent.
       * @param [properties] Properties to set
       */
      constructor(properties?: core_course.DialoguePractice.IActionContent)

      /** ActionContent speakerRole. */
      public speakerRole: number

      /** ActionContent audioId. */
      public audioId: string

      /** ActionContent text. */
      public text: string

      /** ActionContent picId. */
      public picId: string

      /** ActionContent hint. */
      public hint: string

      /**
       * Creates a new ActionContent instance using the specified properties.
       * @param [properties] Properties to set
       * @returns ActionContent instance
       */
      public static create(
        properties?: core_course.DialoguePractice.IActionContent,
      ): core_course.DialoguePractice.ActionContent

      /**
       * Encodes the specified ActionContent message. Does not implicitly {@link core_course.DialoguePractice.ActionContent.verify|verify} messages.
       * @param message ActionContent message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encode(
        message: core_course.DialoguePractice.IActionContent,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Encodes the specified ActionContent message, length delimited. Does not implicitly {@link core_course.DialoguePractice.ActionContent.verify|verify} messages.
       * @param message ActionContent message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encodeDelimited(
        message: core_course.DialoguePractice.IActionContent,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Decodes an ActionContent message from the specified reader or buffer.
       * @param reader Reader or buffer to decode from
       * @param [length] Message length if known beforehand
       * @returns ActionContent
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decode(
        reader: $protobuf.Reader | Uint8Array,
        length?: number,
      ): core_course.DialoguePractice.ActionContent

      /**
       * Decodes an ActionContent message from the specified reader or buffer, length delimited.
       * @param reader Reader or buffer to decode from
       * @returns ActionContent
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decodeDelimited(
        reader: $protobuf.Reader | Uint8Array,
      ): core_course.DialoguePractice.ActionContent

      /**
       * Verifies an ActionContent message.
       * @param message Plain object to verify
       * @returns `null` if valid, otherwise the reason why it is not
       */
      public static verify(message: { [k: string]: any }): string | null

      /**
       * Creates an ActionContent message from a plain object. Also converts values to their respective internal types.
       * @param object Plain object
       * @returns ActionContent
       */
      public static fromObject(object: {
        [k: string]: any
      }): core_course.DialoguePractice.ActionContent

      /**
       * Creates a plain object from an ActionContent message. Also converts values to other types if specified.
       * @param message ActionContent
       * @param [options] Conversion options
       * @returns Plain object
       */
      public static toObject(
        message: core_course.DialoguePractice.ActionContent,
        options?: $protobuf.IConversionOptions,
      ): { [k: string]: any }

      /**
       * Converts this ActionContent to JSON.
       * @returns JSON object
       */
      public toJSON(): { [k: string]: any }
    }

    /** Properties of an Action. */
    interface IAction {
      /** Action type */
      type?: core_course.DialoguePractice.ActionType.Enum | null

      /** Action content */
      content?: core_course.DialoguePractice.IActionContent | null
    }

    /** Represents an Action. */
    class Action implements IAction {
      /**
       * Constructs a new Action.
       * @param [properties] Properties to set
       */
      constructor(properties?: core_course.DialoguePractice.IAction)

      /** Action type. */
      public type: core_course.DialoguePractice.ActionType.Enum

      /** Action content. */
      public content?: core_course.DialoguePractice.IActionContent | null

      /**
       * Creates a new Action instance using the specified properties.
       * @param [properties] Properties to set
       * @returns Action instance
       */
      public static create(
        properties?: core_course.DialoguePractice.IAction,
      ): core_course.DialoguePractice.Action

      /**
       * Encodes the specified Action message. Does not implicitly {@link core_course.DialoguePractice.Action.verify|verify} messages.
       * @param message Action message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encode(
        message: core_course.DialoguePractice.IAction,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Encodes the specified Action message, length delimited. Does not implicitly {@link core_course.DialoguePractice.Action.verify|verify} messages.
       * @param message Action message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encodeDelimited(
        message: core_course.DialoguePractice.IAction,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Decodes an Action message from the specified reader or buffer.
       * @param reader Reader or buffer to decode from
       * @param [length] Message length if known beforehand
       * @returns Action
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decode(
        reader: $protobuf.Reader | Uint8Array,
        length?: number,
      ): core_course.DialoguePractice.Action

      /**
       * Decodes an Action message from the specified reader or buffer, length delimited.
       * @param reader Reader or buffer to decode from
       * @returns Action
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decodeDelimited(
        reader: $protobuf.Reader | Uint8Array,
      ): core_course.DialoguePractice.Action

      /**
       * Verifies an Action message.
       * @param message Plain object to verify
       * @returns `null` if valid, otherwise the reason why it is not
       */
      public static verify(message: { [k: string]: any }): string | null

      /**
       * Creates an Action message from a plain object. Also converts values to their respective internal types.
       * @param object Plain object
       * @returns Action
       */
      public static fromObject(object: {
        [k: string]: any
      }): core_course.DialoguePractice.Action

      /**
       * Creates a plain object from an Action message. Also converts values to other types if specified.
       * @param message Action
       * @param [options] Conversion options
       * @returns Plain object
       */
      public static toObject(
        message: core_course.DialoguePractice.Action,
        options?: $protobuf.IConversionOptions,
      ): { [k: string]: any }

      /**
       * Converts this Action to JSON.
       * @returns JSON object
       */
      public toJSON(): { [k: string]: any }
    }
  }

  /** Properties of a Cloze. */
  interface ICloze {
    /** Cloze paragraphs */
    paragraphs?: core_course.Cloze.IParagraph[] | null
  }

  /** Represents a Cloze. */
  class Cloze implements ICloze {
    /**
     * Constructs a new Cloze.
     * @param [properties] Properties to set
     */
    constructor(properties?: core_course.ICloze)

    /** Cloze paragraphs. */
    public paragraphs: core_course.Cloze.IParagraph[]

    /**
     * Creates a new Cloze instance using the specified properties.
     * @param [properties] Properties to set
     * @returns Cloze instance
     */
    public static create(properties?: core_course.ICloze): core_course.Cloze

    /**
     * Encodes the specified Cloze message. Does not implicitly {@link core_course.Cloze.verify|verify} messages.
     * @param message Cloze message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encode(
      message: core_course.ICloze,
      writer?: $protobuf.Writer,
    ): $protobuf.Writer

    /**
     * Encodes the specified Cloze message, length delimited. Does not implicitly {@link core_course.Cloze.verify|verify} messages.
     * @param message Cloze message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encodeDelimited(
      message: core_course.ICloze,
      writer?: $protobuf.Writer,
    ): $protobuf.Writer

    /**
     * Decodes a Cloze message from the specified reader or buffer.
     * @param reader Reader or buffer to decode from
     * @param [length] Message length if known beforehand
     * @returns Cloze
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decode(
      reader: $protobuf.Reader | Uint8Array,
      length?: number,
    ): core_course.Cloze

    /**
     * Decodes a Cloze message from the specified reader or buffer, length delimited.
     * @param reader Reader or buffer to decode from
     * @returns Cloze
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decodeDelimited(
      reader: $protobuf.Reader | Uint8Array,
    ): core_course.Cloze

    /**
     * Verifies a Cloze message.
     * @param message Plain object to verify
     * @returns `null` if valid, otherwise the reason why it is not
     */
    public static verify(message: { [k: string]: any }): string | null

    /**
     * Creates a Cloze message from a plain object. Also converts values to their respective internal types.
     * @param object Plain object
     * @returns Cloze
     */
    public static fromObject(object: { [k: string]: any }): core_course.Cloze

    /**
     * Creates a plain object from a Cloze message. Also converts values to other types if specified.
     * @param message Cloze
     * @param [options] Conversion options
     * @returns Plain object
     */
    public static toObject(
      message: core_course.Cloze,
      options?: $protobuf.IConversionOptions,
    ): { [k: string]: any }

    /**
     * Converts this Cloze to JSON.
     * @returns JSON object
     */
    public toJSON(): { [k: string]: any }
  }

  namespace Cloze {
    /** Properties of a Stem. */
    interface IStem {
      /** Stem text */
      text?: string | null

      /** Stem checked */
      checked?: boolean | null

      /** Stem answers */
      answers?: string[] | null
    }

    /** Represents a Stem. */
    class Stem implements IStem {
      /**
       * Constructs a new Stem.
       * @param [properties] Properties to set
       */
      constructor(properties?: core_course.Cloze.IStem)

      /** Stem text. */
      public text: string

      /** Stem checked. */
      public checked: boolean

      /** Stem answers. */
      public answers: string[]

      /**
       * Creates a new Stem instance using the specified properties.
       * @param [properties] Properties to set
       * @returns Stem instance
       */
      public static create(
        properties?: core_course.Cloze.IStem,
      ): core_course.Cloze.Stem

      /**
       * Encodes the specified Stem message. Does not implicitly {@link core_course.Cloze.Stem.verify|verify} messages.
       * @param message Stem message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encode(
        message: core_course.Cloze.IStem,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Encodes the specified Stem message, length delimited. Does not implicitly {@link core_course.Cloze.Stem.verify|verify} messages.
       * @param message Stem message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encodeDelimited(
        message: core_course.Cloze.IStem,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Decodes a Stem message from the specified reader or buffer.
       * @param reader Reader or buffer to decode from
       * @param [length] Message length if known beforehand
       * @returns Stem
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decode(
        reader: $protobuf.Reader | Uint8Array,
        length?: number,
      ): core_course.Cloze.Stem

      /**
       * Decodes a Stem message from the specified reader or buffer, length delimited.
       * @param reader Reader or buffer to decode from
       * @returns Stem
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decodeDelimited(
        reader: $protobuf.Reader | Uint8Array,
      ): core_course.Cloze.Stem

      /**
       * Verifies a Stem message.
       * @param message Plain object to verify
       * @returns `null` if valid, otherwise the reason why it is not
       */
      public static verify(message: { [k: string]: any }): string | null

      /**
       * Creates a Stem message from a plain object. Also converts values to their respective internal types.
       * @param object Plain object
       * @returns Stem
       */
      public static fromObject(object: {
        [k: string]: any
      }): core_course.Cloze.Stem

      /**
       * Creates a plain object from a Stem message. Also converts values to other types if specified.
       * @param message Stem
       * @param [options] Conversion options
       * @returns Plain object
       */
      public static toObject(
        message: core_course.Cloze.Stem,
        options?: $protobuf.IConversionOptions,
      ): { [k: string]: any }

      /**
       * Converts this Stem to JSON.
       * @returns JSON object
       */
      public toJSON(): { [k: string]: any }
    }

    /** Properties of a Paragraph. */
    interface IParagraph {
      /** Paragraph stems */
      stems?: core_course.Cloze.IStem[] | null
    }

    /** Represents a Paragraph. */
    class Paragraph implements IParagraph {
      /**
       * Constructs a new Paragraph.
       * @param [properties] Properties to set
       */
      constructor(properties?: core_course.Cloze.IParagraph)

      /** Paragraph stems. */
      public stems: core_course.Cloze.IStem[]

      /**
       * Creates a new Paragraph instance using the specified properties.
       * @param [properties] Properties to set
       * @returns Paragraph instance
       */
      public static create(
        properties?: core_course.Cloze.IParagraph,
      ): core_course.Cloze.Paragraph

      /**
       * Encodes the specified Paragraph message. Does not implicitly {@link core_course.Cloze.Paragraph.verify|verify} messages.
       * @param message Paragraph message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encode(
        message: core_course.Cloze.IParagraph,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Encodes the specified Paragraph message, length delimited. Does not implicitly {@link core_course.Cloze.Paragraph.verify|verify} messages.
       * @param message Paragraph message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encodeDelimited(
        message: core_course.Cloze.IParagraph,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Decodes a Paragraph message from the specified reader or buffer.
       * @param reader Reader or buffer to decode from
       * @param [length] Message length if known beforehand
       * @returns Paragraph
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decode(
        reader: $protobuf.Reader | Uint8Array,
        length?: number,
      ): core_course.Cloze.Paragraph

      /**
       * Decodes a Paragraph message from the specified reader or buffer, length delimited.
       * @param reader Reader or buffer to decode from
       * @returns Paragraph
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decodeDelimited(
        reader: $protobuf.Reader | Uint8Array,
      ): core_course.Cloze.Paragraph

      /**
       * Verifies a Paragraph message.
       * @param message Plain object to verify
       * @returns `null` if valid, otherwise the reason why it is not
       */
      public static verify(message: { [k: string]: any }): string | null

      /**
       * Creates a Paragraph message from a plain object. Also converts values to their respective internal types.
       * @param object Plain object
       * @returns Paragraph
       */
      public static fromObject(object: {
        [k: string]: any
      }): core_course.Cloze.Paragraph

      /**
       * Creates a plain object from a Paragraph message. Also converts values to other types if specified.
       * @param message Paragraph
       * @param [options] Conversion options
       * @returns Plain object
       */
      public static toObject(
        message: core_course.Cloze.Paragraph,
        options?: $protobuf.IConversionOptions,
      ): { [k: string]: any }

      /**
       * Converts this Paragraph to JSON.
       * @returns JSON object
       */
      public toJSON(): { [k: string]: any }
    }
  }

  /** Properties of a Locating. */
  interface ILocating {
    /** Locating audioId */
    audioId?: string | null

    /** Locating passage */
    passage?: core_course.IPBPassage | null
  }

  /** Represents a Locating. */
  class Locating implements ILocating {
    /**
     * Constructs a new Locating.
     * @param [properties] Properties to set
     */
    constructor(properties?: core_course.ILocating)

    /** Locating audioId. */
    public audioId: string

    /** Locating passage. */
    public passage?: core_course.IPBPassage | null

    /**
     * Creates a new Locating instance using the specified properties.
     * @param [properties] Properties to set
     * @returns Locating instance
     */
    public static create(
      properties?: core_course.ILocating,
    ): core_course.Locating

    /**
     * Encodes the specified Locating message. Does not implicitly {@link core_course.Locating.verify|verify} messages.
     * @param message Locating message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encode(
      message: core_course.ILocating,
      writer?: $protobuf.Writer,
    ): $protobuf.Writer

    /**
     * Encodes the specified Locating message, length delimited. Does not implicitly {@link core_course.Locating.verify|verify} messages.
     * @param message Locating message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encodeDelimited(
      message: core_course.ILocating,
      writer?: $protobuf.Writer,
    ): $protobuf.Writer

    /**
     * Decodes a Locating message from the specified reader or buffer.
     * @param reader Reader or buffer to decode from
     * @param [length] Message length if known beforehand
     * @returns Locating
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decode(
      reader: $protobuf.Reader | Uint8Array,
      length?: number,
    ): core_course.Locating

    /**
     * Decodes a Locating message from the specified reader or buffer, length delimited.
     * @param reader Reader or buffer to decode from
     * @returns Locating
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decodeDelimited(
      reader: $protobuf.Reader | Uint8Array,
    ): core_course.Locating

    /**
     * Verifies a Locating message.
     * @param message Plain object to verify
     * @returns `null` if valid, otherwise the reason why it is not
     */
    public static verify(message: { [k: string]: any }): string | null

    /**
     * Creates a Locating message from a plain object. Also converts values to their respective internal types.
     * @param object Plain object
     * @returns Locating
     */
    public static fromObject(object: { [k: string]: any }): core_course.Locating

    /**
     * Creates a plain object from a Locating message. Also converts values to other types if specified.
     * @param message Locating
     * @param [options] Conversion options
     * @returns Plain object
     */
    public static toObject(
      message: core_course.Locating,
      options?: $protobuf.IConversionOptions,
    ): { [k: string]: any }

    /**
     * Converts this Locating to JSON.
     * @returns JSON object
     */
    public toJSON(): { [k: string]: any }
  }

  /** Properties of a SpotErrors. */
  interface ISpotErrors {
    /** SpotErrors paragraphs */
    paragraphs?: core_course.SpotErrors.IParagraph[] | null
  }

  /** Represents a SpotErrors. */
  class SpotErrors implements ISpotErrors {
    /**
     * Constructs a new SpotErrors.
     * @param [properties] Properties to set
     */
    constructor(properties?: core_course.ISpotErrors)

    /** SpotErrors paragraphs. */
    public paragraphs: core_course.SpotErrors.IParagraph[]

    /**
     * Creates a new SpotErrors instance using the specified properties.
     * @param [properties] Properties to set
     * @returns SpotErrors instance
     */
    public static create(
      properties?: core_course.ISpotErrors,
    ): core_course.SpotErrors

    /**
     * Encodes the specified SpotErrors message. Does not implicitly {@link core_course.SpotErrors.verify|verify} messages.
     * @param message SpotErrors message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encode(
      message: core_course.ISpotErrors,
      writer?: $protobuf.Writer,
    ): $protobuf.Writer

    /**
     * Encodes the specified SpotErrors message, length delimited. Does not implicitly {@link core_course.SpotErrors.verify|verify} messages.
     * @param message SpotErrors message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encodeDelimited(
      message: core_course.ISpotErrors,
      writer?: $protobuf.Writer,
    ): $protobuf.Writer

    /**
     * Decodes a SpotErrors message from the specified reader or buffer.
     * @param reader Reader or buffer to decode from
     * @param [length] Message length if known beforehand
     * @returns SpotErrors
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decode(
      reader: $protobuf.Reader | Uint8Array,
      length?: number,
    ): core_course.SpotErrors

    /**
     * Decodes a SpotErrors message from the specified reader or buffer, length delimited.
     * @param reader Reader or buffer to decode from
     * @returns SpotErrors
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decodeDelimited(
      reader: $protobuf.Reader | Uint8Array,
    ): core_course.SpotErrors

    /**
     * Verifies a SpotErrors message.
     * @param message Plain object to verify
     * @returns `null` if valid, otherwise the reason why it is not
     */
    public static verify(message: { [k: string]: any }): string | null

    /**
     * Creates a SpotErrors message from a plain object. Also converts values to their respective internal types.
     * @param object Plain object
     * @returns SpotErrors
     */
    public static fromObject(object: {
      [k: string]: any
    }): core_course.SpotErrors

    /**
     * Creates a plain object from a SpotErrors message. Also converts values to other types if specified.
     * @param message SpotErrors
     * @param [options] Conversion options
     * @returns Plain object
     */
    public static toObject(
      message: core_course.SpotErrors,
      options?: $protobuf.IConversionOptions,
    ): { [k: string]: any }

    /**
     * Converts this SpotErrors to JSON.
     * @returns JSON object
     */
    public toJSON(): { [k: string]: any }
  }

  namespace SpotErrors {
    /** Properties of a Stem. */
    interface IStem {
      /** Stem text */
      text?: string | null

      /** Stem error */
      error?: string | null
    }

    /** Represents a Stem. */
    class Stem implements IStem {
      /**
       * Constructs a new Stem.
       * @param [properties] Properties to set
       */
      constructor(properties?: core_course.SpotErrors.IStem)

      /** Stem text. */
      public text: string

      /** Stem error. */
      public error: string

      /**
       * Creates a new Stem instance using the specified properties.
       * @param [properties] Properties to set
       * @returns Stem instance
       */
      public static create(
        properties?: core_course.SpotErrors.IStem,
      ): core_course.SpotErrors.Stem

      /**
       * Encodes the specified Stem message. Does not implicitly {@link core_course.SpotErrors.Stem.verify|verify} messages.
       * @param message Stem message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encode(
        message: core_course.SpotErrors.IStem,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Encodes the specified Stem message, length delimited. Does not implicitly {@link core_course.SpotErrors.Stem.verify|verify} messages.
       * @param message Stem message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encodeDelimited(
        message: core_course.SpotErrors.IStem,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Decodes a Stem message from the specified reader or buffer.
       * @param reader Reader or buffer to decode from
       * @param [length] Message length if known beforehand
       * @returns Stem
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decode(
        reader: $protobuf.Reader | Uint8Array,
        length?: number,
      ): core_course.SpotErrors.Stem

      /**
       * Decodes a Stem message from the specified reader or buffer, length delimited.
       * @param reader Reader or buffer to decode from
       * @returns Stem
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decodeDelimited(
        reader: $protobuf.Reader | Uint8Array,
      ): core_course.SpotErrors.Stem

      /**
       * Verifies a Stem message.
       * @param message Plain object to verify
       * @returns `null` if valid, otherwise the reason why it is not
       */
      public static verify(message: { [k: string]: any }): string | null

      /**
       * Creates a Stem message from a plain object. Also converts values to their respective internal types.
       * @param object Plain object
       * @returns Stem
       */
      public static fromObject(object: {
        [k: string]: any
      }): core_course.SpotErrors.Stem

      /**
       * Creates a plain object from a Stem message. Also converts values to other types if specified.
       * @param message Stem
       * @param [options] Conversion options
       * @returns Plain object
       */
      public static toObject(
        message: core_course.SpotErrors.Stem,
        options?: $protobuf.IConversionOptions,
      ): { [k: string]: any }

      /**
       * Converts this Stem to JSON.
       * @returns JSON object
       */
      public toJSON(): { [k: string]: any }
    }

    /** Properties of a Paragraph. */
    interface IParagraph {
      /** Paragraph stems */
      stems?: core_course.SpotErrors.IStem[] | null
    }

    /** Represents a Paragraph. */
    class Paragraph implements IParagraph {
      /**
       * Constructs a new Paragraph.
       * @param [properties] Properties to set
       */
      constructor(properties?: core_course.SpotErrors.IParagraph)

      /** Paragraph stems. */
      public stems: core_course.SpotErrors.IStem[]

      /**
       * Creates a new Paragraph instance using the specified properties.
       * @param [properties] Properties to set
       * @returns Paragraph instance
       */
      public static create(
        properties?: core_course.SpotErrors.IParagraph,
      ): core_course.SpotErrors.Paragraph

      /**
       * Encodes the specified Paragraph message. Does not implicitly {@link core_course.SpotErrors.Paragraph.verify|verify} messages.
       * @param message Paragraph message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encode(
        message: core_course.SpotErrors.IParagraph,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Encodes the specified Paragraph message, length delimited. Does not implicitly {@link core_course.SpotErrors.Paragraph.verify|verify} messages.
       * @param message Paragraph message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encodeDelimited(
        message: core_course.SpotErrors.IParagraph,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Decodes a Paragraph message from the specified reader or buffer.
       * @param reader Reader or buffer to decode from
       * @param [length] Message length if known beforehand
       * @returns Paragraph
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decode(
        reader: $protobuf.Reader | Uint8Array,
        length?: number,
      ): core_course.SpotErrors.Paragraph

      /**
       * Decodes a Paragraph message from the specified reader or buffer, length delimited.
       * @param reader Reader or buffer to decode from
       * @returns Paragraph
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decodeDelimited(
        reader: $protobuf.Reader | Uint8Array,
      ): core_course.SpotErrors.Paragraph

      /**
       * Verifies a Paragraph message.
       * @param message Plain object to verify
       * @returns `null` if valid, otherwise the reason why it is not
       */
      public static verify(message: { [k: string]: any }): string | null

      /**
       * Creates a Paragraph message from a plain object. Also converts values to their respective internal types.
       * @param object Plain object
       * @returns Paragraph
       */
      public static fromObject(object: {
        [k: string]: any
      }): core_course.SpotErrors.Paragraph

      /**
       * Creates a plain object from a Paragraph message. Also converts values to other types if specified.
       * @param message Paragraph
       * @param [options] Conversion options
       * @returns Plain object
       */
      public static toObject(
        message: core_course.SpotErrors.Paragraph,
        options?: $protobuf.IConversionOptions,
      ): { [k: string]: any }

      /**
       * Converts this Paragraph to JSON.
       * @returns JSON object
       */
      public toJSON(): { [k: string]: any }
    }
  }

  /** Properties of a SentenceFragments. */
  interface ISentenceFragments {
    /** SentenceFragments answer */
    answer?: string | null

    /** SentenceFragments fragments */
    fragments?: core_course.SentenceFragments.IFragment[] | null
  }

  /** Represents a SentenceFragments. */
  class SentenceFragments implements ISentenceFragments {
    /**
     * Constructs a new SentenceFragments.
     * @param [properties] Properties to set
     */
    constructor(properties?: core_course.ISentenceFragments)

    /** SentenceFragments answer. */
    public answer: string

    /** SentenceFragments fragments. */
    public fragments: core_course.SentenceFragments.IFragment[]

    /**
     * Creates a new SentenceFragments instance using the specified properties.
     * @param [properties] Properties to set
     * @returns SentenceFragments instance
     */
    public static create(
      properties?: core_course.ISentenceFragments,
    ): core_course.SentenceFragments

    /**
     * Encodes the specified SentenceFragments message. Does not implicitly {@link core_course.SentenceFragments.verify|verify} messages.
     * @param message SentenceFragments message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encode(
      message: core_course.ISentenceFragments,
      writer?: $protobuf.Writer,
    ): $protobuf.Writer

    /**
     * Encodes the specified SentenceFragments message, length delimited. Does not implicitly {@link core_course.SentenceFragments.verify|verify} messages.
     * @param message SentenceFragments message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encodeDelimited(
      message: core_course.ISentenceFragments,
      writer?: $protobuf.Writer,
    ): $protobuf.Writer

    /**
     * Decodes a SentenceFragments message from the specified reader or buffer.
     * @param reader Reader or buffer to decode from
     * @param [length] Message length if known beforehand
     * @returns SentenceFragments
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decode(
      reader: $protobuf.Reader | Uint8Array,
      length?: number,
    ): core_course.SentenceFragments

    /**
     * Decodes a SentenceFragments message from the specified reader or buffer, length delimited.
     * @param reader Reader or buffer to decode from
     * @returns SentenceFragments
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decodeDelimited(
      reader: $protobuf.Reader | Uint8Array,
    ): core_course.SentenceFragments

    /**
     * Verifies a SentenceFragments message.
     * @param message Plain object to verify
     * @returns `null` if valid, otherwise the reason why it is not
     */
    public static verify(message: { [k: string]: any }): string | null

    /**
     * Creates a SentenceFragments message from a plain object. Also converts values to their respective internal types.
     * @param object Plain object
     * @returns SentenceFragments
     */
    public static fromObject(object: {
      [k: string]: any
    }): core_course.SentenceFragments

    /**
     * Creates a plain object from a SentenceFragments message. Also converts values to other types if specified.
     * @param message SentenceFragments
     * @param [options] Conversion options
     * @returns Plain object
     */
    public static toObject(
      message: core_course.SentenceFragments,
      options?: $protobuf.IConversionOptions,
    ): { [k: string]: any }

    /**
     * Converts this SentenceFragments to JSON.
     * @returns JSON object
     */
    public toJSON(): { [k: string]: any }
  }

  namespace SentenceFragments {
    /** Properties of a Fragment. */
    interface IFragment {
      /** Fragment text */
      text?: string | null

      /** Fragment index */
      index?: number | null
    }

    /** Represents a Fragment. */
    class Fragment implements IFragment {
      /**
       * Constructs a new Fragment.
       * @param [properties] Properties to set
       */
      constructor(properties?: core_course.SentenceFragments.IFragment)

      /** Fragment text. */
      public text: string

      /** Fragment index. */
      public index: number

      /**
       * Creates a new Fragment instance using the specified properties.
       * @param [properties] Properties to set
       * @returns Fragment instance
       */
      public static create(
        properties?: core_course.SentenceFragments.IFragment,
      ): core_course.SentenceFragments.Fragment

      /**
       * Encodes the specified Fragment message. Does not implicitly {@link core_course.SentenceFragments.Fragment.verify|verify} messages.
       * @param message Fragment message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encode(
        message: core_course.SentenceFragments.IFragment,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Encodes the specified Fragment message, length delimited. Does not implicitly {@link core_course.SentenceFragments.Fragment.verify|verify} messages.
       * @param message Fragment message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encodeDelimited(
        message: core_course.SentenceFragments.IFragment,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Decodes a Fragment message from the specified reader or buffer.
       * @param reader Reader or buffer to decode from
       * @param [length] Message length if known beforehand
       * @returns Fragment
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decode(
        reader: $protobuf.Reader | Uint8Array,
        length?: number,
      ): core_course.SentenceFragments.Fragment

      /**
       * Decodes a Fragment message from the specified reader or buffer, length delimited.
       * @param reader Reader or buffer to decode from
       * @returns Fragment
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decodeDelimited(
        reader: $protobuf.Reader | Uint8Array,
      ): core_course.SentenceFragments.Fragment

      /**
       * Verifies a Fragment message.
       * @param message Plain object to verify
       * @returns `null` if valid, otherwise the reason why it is not
       */
      public static verify(message: { [k: string]: any }): string | null

      /**
       * Creates a Fragment message from a plain object. Also converts values to their respective internal types.
       * @param object Plain object
       * @returns Fragment
       */
      public static fromObject(object: {
        [k: string]: any
      }): core_course.SentenceFragments.Fragment

      /**
       * Creates a plain object from a Fragment message. Also converts values to other types if specified.
       * @param message Fragment
       * @param [options] Conversion options
       * @returns Plain object
       */
      public static toObject(
        message: core_course.SentenceFragments.Fragment,
        options?: $protobuf.IConversionOptions,
      ): { [k: string]: any }

      /**
       * Converts this Fragment to JSON.
       * @returns JSON object
       */
      public toJSON(): { [k: string]: any }
    }
  }

  /** Properties of an OpenQuestion. */
  interface IOpenQuestion {
    /** OpenQuestion audioId */
    audioId?: string | null

    /** OpenQuestion pictureId */
    pictureId?: string[] | null
  }

  /** Represents an OpenQuestion. */
  class OpenQuestion implements IOpenQuestion {
    /**
     * Constructs a new OpenQuestion.
     * @param [properties] Properties to set
     */
    constructor(properties?: core_course.IOpenQuestion)

    /** OpenQuestion audioId. */
    public audioId: string

    /** OpenQuestion pictureId. */
    public pictureId: string[]

    /**
     * Creates a new OpenQuestion instance using the specified properties.
     * @param [properties] Properties to set
     * @returns OpenQuestion instance
     */
    public static create(
      properties?: core_course.IOpenQuestion,
    ): core_course.OpenQuestion

    /**
     * Encodes the specified OpenQuestion message. Does not implicitly {@link core_course.OpenQuestion.verify|verify} messages.
     * @param message OpenQuestion message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encode(
      message: core_course.IOpenQuestion,
      writer?: $protobuf.Writer,
    ): $protobuf.Writer

    /**
     * Encodes the specified OpenQuestion message, length delimited. Does not implicitly {@link core_course.OpenQuestion.verify|verify} messages.
     * @param message OpenQuestion message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encodeDelimited(
      message: core_course.IOpenQuestion,
      writer?: $protobuf.Writer,
    ): $protobuf.Writer

    /**
     * Decodes an OpenQuestion message from the specified reader or buffer.
     * @param reader Reader or buffer to decode from
     * @param [length] Message length if known beforehand
     * @returns OpenQuestion
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decode(
      reader: $protobuf.Reader | Uint8Array,
      length?: number,
    ): core_course.OpenQuestion

    /**
     * Decodes an OpenQuestion message from the specified reader or buffer, length delimited.
     * @param reader Reader or buffer to decode from
     * @returns OpenQuestion
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decodeDelimited(
      reader: $protobuf.Reader | Uint8Array,
    ): core_course.OpenQuestion

    /**
     * Verifies an OpenQuestion message.
     * @param message Plain object to verify
     * @returns `null` if valid, otherwise the reason why it is not
     */
    public static verify(message: { [k: string]: any }): string | null

    /**
     * Creates an OpenQuestion message from a plain object. Also converts values to their respective internal types.
     * @param object Plain object
     * @returns OpenQuestion
     */
    public static fromObject(object: {
      [k: string]: any
    }): core_course.OpenQuestion

    /**
     * Creates a plain object from an OpenQuestion message. Also converts values to other types if specified.
     * @param message OpenQuestion
     * @param [options] Conversion options
     * @returns Plain object
     */
    public static toObject(
      message: core_course.OpenQuestion,
      options?: $protobuf.IConversionOptions,
    ): { [k: string]: any }

    /**
     * Converts this OpenQuestion to JSON.
     * @returns JSON object
     */
    public toJSON(): { [k: string]: any }
  }

  /** Properties of a VerbalReading. */
  interface IVerbalReading {
    /** VerbalReading audioId */
    audioId?: string | null

    /** VerbalReading pictureId */
    pictureId?: string | null
  }

  /** Represents a VerbalReading. */
  class VerbalReading implements IVerbalReading {
    /**
     * Constructs a new VerbalReading.
     * @param [properties] Properties to set
     */
    constructor(properties?: core_course.IVerbalReading)

    /** VerbalReading audioId. */
    public audioId: string

    /** VerbalReading pictureId. */
    public pictureId: string

    /**
     * Creates a new VerbalReading instance using the specified properties.
     * @param [properties] Properties to set
     * @returns VerbalReading instance
     */
    public static create(
      properties?: core_course.IVerbalReading,
    ): core_course.VerbalReading

    /**
     * Encodes the specified VerbalReading message. Does not implicitly {@link core_course.VerbalReading.verify|verify} messages.
     * @param message VerbalReading message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encode(
      message: core_course.IVerbalReading,
      writer?: $protobuf.Writer,
    ): $protobuf.Writer

    /**
     * Encodes the specified VerbalReading message, length delimited. Does not implicitly {@link core_course.VerbalReading.verify|verify} messages.
     * @param message VerbalReading message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encodeDelimited(
      message: core_course.IVerbalReading,
      writer?: $protobuf.Writer,
    ): $protobuf.Writer

    /**
     * Decodes a VerbalReading message from the specified reader or buffer.
     * @param reader Reader or buffer to decode from
     * @param [length] Message length if known beforehand
     * @returns VerbalReading
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decode(
      reader: $protobuf.Reader | Uint8Array,
      length?: number,
    ): core_course.VerbalReading

    /**
     * Decodes a VerbalReading message from the specified reader or buffer, length delimited.
     * @param reader Reader or buffer to decode from
     * @returns VerbalReading
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decodeDelimited(
      reader: $protobuf.Reader | Uint8Array,
    ): core_course.VerbalReading

    /**
     * Verifies a VerbalReading message.
     * @param message Plain object to verify
     * @returns `null` if valid, otherwise the reason why it is not
     */
    public static verify(message: { [k: string]: any }): string | null

    /**
     * Creates a VerbalReading message from a plain object. Also converts values to their respective internal types.
     * @param object Plain object
     * @returns VerbalReading
     */
    public static fromObject(object: {
      [k: string]: any
    }): core_course.VerbalReading

    /**
     * Creates a plain object from a VerbalReading message. Also converts values to other types if specified.
     * @param message VerbalReading
     * @param [options] Conversion options
     * @returns Plain object
     */
    public static toObject(
      message: core_course.VerbalReading,
      options?: $protobuf.IConversionOptions,
    ): { [k: string]: any }

    /**
     * Converts this VerbalReading to JSON.
     * @returns JSON object
     */
    public toJSON(): { [k: string]: any }
  }

  /** Properties of a WordFragments. */
  interface IWordFragments {
    /** WordFragments audioId */
    audioId?: string | null

    /** WordFragments pictureId */
    pictureId?: string | null

    /** WordFragments fragment */
    fragment?: string[] | null
  }

  /** Represents a WordFragments. */
  class WordFragments implements IWordFragments {
    /**
     * Constructs a new WordFragments.
     * @param [properties] Properties to set
     */
    constructor(properties?: core_course.IWordFragments)

    /** WordFragments audioId. */
    public audioId: string

    /** WordFragments pictureId. */
    public pictureId: string

    /** WordFragments fragment. */
    public fragment: string[]

    /**
     * Creates a new WordFragments instance using the specified properties.
     * @param [properties] Properties to set
     * @returns WordFragments instance
     */
    public static create(
      properties?: core_course.IWordFragments,
    ): core_course.WordFragments

    /**
     * Encodes the specified WordFragments message. Does not implicitly {@link core_course.WordFragments.verify|verify} messages.
     * @param message WordFragments message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encode(
      message: core_course.IWordFragments,
      writer?: $protobuf.Writer,
    ): $protobuf.Writer

    /**
     * Encodes the specified WordFragments message, length delimited. Does not implicitly {@link core_course.WordFragments.verify|verify} messages.
     * @param message WordFragments message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encodeDelimited(
      message: core_course.IWordFragments,
      writer?: $protobuf.Writer,
    ): $protobuf.Writer

    /**
     * Decodes a WordFragments message from the specified reader or buffer.
     * @param reader Reader or buffer to decode from
     * @param [length] Message length if known beforehand
     * @returns WordFragments
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decode(
      reader: $protobuf.Reader | Uint8Array,
      length?: number,
    ): core_course.WordFragments

    /**
     * Decodes a WordFragments message from the specified reader or buffer, length delimited.
     * @param reader Reader or buffer to decode from
     * @returns WordFragments
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decodeDelimited(
      reader: $protobuf.Reader | Uint8Array,
    ): core_course.WordFragments

    /**
     * Verifies a WordFragments message.
     * @param message Plain object to verify
     * @returns `null` if valid, otherwise the reason why it is not
     */
    public static verify(message: { [k: string]: any }): string | null

    /**
     * Creates a WordFragments message from a plain object. Also converts values to their respective internal types.
     * @param object Plain object
     * @returns WordFragments
     */
    public static fromObject(object: {
      [k: string]: any
    }): core_course.WordFragments

    /**
     * Creates a plain object from a WordFragments message. Also converts values to other types if specified.
     * @param message WordFragments
     * @param [options] Conversion options
     * @returns Plain object
     */
    public static toObject(
      message: core_course.WordFragments,
      options?: $protobuf.IConversionOptions,
    ): { [k: string]: any }

    /**
     * Converts this WordFragments to JSON.
     * @returns JSON object
     */
    public toJSON(): { [k: string]: any }
  }

  /** Properties of an ErrorHunting. */
  interface IErrorHunting {
    /** ErrorHunting stem */
    stem?: core_course.ErrorHunting.IStem[] | null
  }

  /** Represents an ErrorHunting. */
  class ErrorHunting implements IErrorHunting {
    /**
     * Constructs a new ErrorHunting.
     * @param [properties] Properties to set
     */
    constructor(properties?: core_course.IErrorHunting)

    /** ErrorHunting stem. */
    public stem: core_course.ErrorHunting.IStem[]

    /**
     * Creates a new ErrorHunting instance using the specified properties.
     * @param [properties] Properties to set
     * @returns ErrorHunting instance
     */
    public static create(
      properties?: core_course.IErrorHunting,
    ): core_course.ErrorHunting

    /**
     * Encodes the specified ErrorHunting message. Does not implicitly {@link core_course.ErrorHunting.verify|verify} messages.
     * @param message ErrorHunting message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encode(
      message: core_course.IErrorHunting,
      writer?: $protobuf.Writer,
    ): $protobuf.Writer

    /**
     * Encodes the specified ErrorHunting message, length delimited. Does not implicitly {@link core_course.ErrorHunting.verify|verify} messages.
     * @param message ErrorHunting message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encodeDelimited(
      message: core_course.IErrorHunting,
      writer?: $protobuf.Writer,
    ): $protobuf.Writer

    /**
     * Decodes an ErrorHunting message from the specified reader or buffer.
     * @param reader Reader or buffer to decode from
     * @param [length] Message length if known beforehand
     * @returns ErrorHunting
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decode(
      reader: $protobuf.Reader | Uint8Array,
      length?: number,
    ): core_course.ErrorHunting

    /**
     * Decodes an ErrorHunting message from the specified reader or buffer, length delimited.
     * @param reader Reader or buffer to decode from
     * @returns ErrorHunting
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decodeDelimited(
      reader: $protobuf.Reader | Uint8Array,
    ): core_course.ErrorHunting

    /**
     * Verifies an ErrorHunting message.
     * @param message Plain object to verify
     * @returns `null` if valid, otherwise the reason why it is not
     */
    public static verify(message: { [k: string]: any }): string | null

    /**
     * Creates an ErrorHunting message from a plain object. Also converts values to their respective internal types.
     * @param object Plain object
     * @returns ErrorHunting
     */
    public static fromObject(object: {
      [k: string]: any
    }): core_course.ErrorHunting

    /**
     * Creates a plain object from an ErrorHunting message. Also converts values to other types if specified.
     * @param message ErrorHunting
     * @param [options] Conversion options
     * @returns Plain object
     */
    public static toObject(
      message: core_course.ErrorHunting,
      options?: $protobuf.IConversionOptions,
    ): { [k: string]: any }

    /**
     * Converts this ErrorHunting to JSON.
     * @returns JSON object
     */
    public toJSON(): { [k: string]: any }
  }

  namespace ErrorHunting {
    /** Properties of a Stem. */
    interface IStem {
      /** Stem text */
      text?: string | null

      /** Stem checked */
      checked?: boolean | null

      /** Stem correct */
      correct?: string | null
    }

    /** Represents a Stem. */
    class Stem implements IStem {
      /**
       * Constructs a new Stem.
       * @param [properties] Properties to set
       */
      constructor(properties?: core_course.ErrorHunting.IStem)

      /** Stem text. */
      public text: string

      /** Stem checked. */
      public checked: boolean

      /** Stem correct. */
      public correct: string

      /**
       * Creates a new Stem instance using the specified properties.
       * @param [properties] Properties to set
       * @returns Stem instance
       */
      public static create(
        properties?: core_course.ErrorHunting.IStem,
      ): core_course.ErrorHunting.Stem

      /**
       * Encodes the specified Stem message. Does not implicitly {@link core_course.ErrorHunting.Stem.verify|verify} messages.
       * @param message Stem message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encode(
        message: core_course.ErrorHunting.IStem,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Encodes the specified Stem message, length delimited. Does not implicitly {@link core_course.ErrorHunting.Stem.verify|verify} messages.
       * @param message Stem message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encodeDelimited(
        message: core_course.ErrorHunting.IStem,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Decodes a Stem message from the specified reader or buffer.
       * @param reader Reader or buffer to decode from
       * @param [length] Message length if known beforehand
       * @returns Stem
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decode(
        reader: $protobuf.Reader | Uint8Array,
        length?: number,
      ): core_course.ErrorHunting.Stem

      /**
       * Decodes a Stem message from the specified reader or buffer, length delimited.
       * @param reader Reader or buffer to decode from
       * @returns Stem
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decodeDelimited(
        reader: $protobuf.Reader | Uint8Array,
      ): core_course.ErrorHunting.Stem

      /**
       * Verifies a Stem message.
       * @param message Plain object to verify
       * @returns `null` if valid, otherwise the reason why it is not
       */
      public static verify(message: { [k: string]: any }): string | null

      /**
       * Creates a Stem message from a plain object. Also converts values to their respective internal types.
       * @param object Plain object
       * @returns Stem
       */
      public static fromObject(object: {
        [k: string]: any
      }): core_course.ErrorHunting.Stem

      /**
       * Creates a plain object from a Stem message. Also converts values to other types if specified.
       * @param message Stem
       * @param [options] Conversion options
       * @returns Plain object
       */
      public static toObject(
        message: core_course.ErrorHunting.Stem,
        options?: $protobuf.IConversionOptions,
      ): { [k: string]: any }

      /**
       * Converts this Stem to JSON.
       * @returns JSON object
       */
      public toJSON(): { [k: string]: any }
    }
  }

  /** Properties of a ChooseAllWords. */
  interface IChooseAllWords {
    /** ChooseAllWords audioId */
    audioId?: string | null

    /** ChooseAllWords text */
    text?: string | null

    /** ChooseAllWords stem */
    stem?: core_course.ChooseAllWords.IStem[] | null
  }

  /** Represents a ChooseAllWords. */
  class ChooseAllWords implements IChooseAllWords {
    /**
     * Constructs a new ChooseAllWords.
     * @param [properties] Properties to set
     */
    constructor(properties?: core_course.IChooseAllWords)

    /** ChooseAllWords audioId. */
    public audioId: string

    /** ChooseAllWords text. */
    public text: string

    /** ChooseAllWords stem. */
    public stem: core_course.ChooseAllWords.IStem[]

    /**
     * Creates a new ChooseAllWords instance using the specified properties.
     * @param [properties] Properties to set
     * @returns ChooseAllWords instance
     */
    public static create(
      properties?: core_course.IChooseAllWords,
    ): core_course.ChooseAllWords

    /**
     * Encodes the specified ChooseAllWords message. Does not implicitly {@link core_course.ChooseAllWords.verify|verify} messages.
     * @param message ChooseAllWords message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encode(
      message: core_course.IChooseAllWords,
      writer?: $protobuf.Writer,
    ): $protobuf.Writer

    /**
     * Encodes the specified ChooseAllWords message, length delimited. Does not implicitly {@link core_course.ChooseAllWords.verify|verify} messages.
     * @param message ChooseAllWords message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encodeDelimited(
      message: core_course.IChooseAllWords,
      writer?: $protobuf.Writer,
    ): $protobuf.Writer

    /**
     * Decodes a ChooseAllWords message from the specified reader or buffer.
     * @param reader Reader or buffer to decode from
     * @param [length] Message length if known beforehand
     * @returns ChooseAllWords
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decode(
      reader: $protobuf.Reader | Uint8Array,
      length?: number,
    ): core_course.ChooseAllWords

    /**
     * Decodes a ChooseAllWords message from the specified reader or buffer, length delimited.
     * @param reader Reader or buffer to decode from
     * @returns ChooseAllWords
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decodeDelimited(
      reader: $protobuf.Reader | Uint8Array,
    ): core_course.ChooseAllWords

    /**
     * Verifies a ChooseAllWords message.
     * @param message Plain object to verify
     * @returns `null` if valid, otherwise the reason why it is not
     */
    public static verify(message: { [k: string]: any }): string | null

    /**
     * Creates a ChooseAllWords message from a plain object. Also converts values to their respective internal types.
     * @param object Plain object
     * @returns ChooseAllWords
     */
    public static fromObject(object: {
      [k: string]: any
    }): core_course.ChooseAllWords

    /**
     * Creates a plain object from a ChooseAllWords message. Also converts values to other types if specified.
     * @param message ChooseAllWords
     * @param [options] Conversion options
     * @returns Plain object
     */
    public static toObject(
      message: core_course.ChooseAllWords,
      options?: $protobuf.IConversionOptions,
    ): { [k: string]: any }

    /**
     * Converts this ChooseAllWords to JSON.
     * @returns JSON object
     */
    public toJSON(): { [k: string]: any }
  }

  namespace ChooseAllWords {
    /** Properties of a Stem. */
    interface IStem {
      /** Stem text */
      text?: string | null

      /** Stem checked */
      checked?: boolean | null
    }

    /** Represents a Stem. */
    class Stem implements IStem {
      /**
       * Constructs a new Stem.
       * @param [properties] Properties to set
       */
      constructor(properties?: core_course.ChooseAllWords.IStem)

      /** Stem text. */
      public text: string

      /** Stem checked. */
      public checked: boolean

      /**
       * Creates a new Stem instance using the specified properties.
       * @param [properties] Properties to set
       * @returns Stem instance
       */
      public static create(
        properties?: core_course.ChooseAllWords.IStem,
      ): core_course.ChooseAllWords.Stem

      /**
       * Encodes the specified Stem message. Does not implicitly {@link core_course.ChooseAllWords.Stem.verify|verify} messages.
       * @param message Stem message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encode(
        message: core_course.ChooseAllWords.IStem,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Encodes the specified Stem message, length delimited. Does not implicitly {@link core_course.ChooseAllWords.Stem.verify|verify} messages.
       * @param message Stem message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encodeDelimited(
        message: core_course.ChooseAllWords.IStem,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Decodes a Stem message from the specified reader or buffer.
       * @param reader Reader or buffer to decode from
       * @param [length] Message length if known beforehand
       * @returns Stem
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decode(
        reader: $protobuf.Reader | Uint8Array,
        length?: number,
      ): core_course.ChooseAllWords.Stem

      /**
       * Decodes a Stem message from the specified reader or buffer, length delimited.
       * @param reader Reader or buffer to decode from
       * @returns Stem
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decodeDelimited(
        reader: $protobuf.Reader | Uint8Array,
      ): core_course.ChooseAllWords.Stem

      /**
       * Verifies a Stem message.
       * @param message Plain object to verify
       * @returns `null` if valid, otherwise the reason why it is not
       */
      public static verify(message: { [k: string]: any }): string | null

      /**
       * Creates a Stem message from a plain object. Also converts values to their respective internal types.
       * @param object Plain object
       * @returns Stem
       */
      public static fromObject(object: {
        [k: string]: any
      }): core_course.ChooseAllWords.Stem

      /**
       * Creates a plain object from a Stem message. Also converts values to other types if specified.
       * @param message Stem
       * @param [options] Conversion options
       * @returns Plain object
       */
      public static toObject(
        message: core_course.ChooseAllWords.Stem,
        options?: $protobuf.IConversionOptions,
      ): { [k: string]: any }

      /**
       * Converts this Stem to JSON.
       * @returns JSON object
       */
      public toJSON(): { [k: string]: any }
    }
  }

  /** Properties of a WordGuess. */
  interface IWordGuess {
    /** WordGuess pictureId */
    pictureId?: string | null

    /** WordGuess word */
    word?: string | null

    /** WordGuess audioId */
    audioId?: string | null

    /** WordGuess scorerId */
    scorerId?: string | null
  }

  /** Represents a WordGuess. */
  class WordGuess implements IWordGuess {
    /**
     * Constructs a new WordGuess.
     * @param [properties] Properties to set
     */
    constructor(properties?: core_course.IWordGuess)

    /** WordGuess pictureId. */
    public pictureId: string

    /** WordGuess word. */
    public word: string

    /** WordGuess audioId. */
    public audioId: string

    /** WordGuess scorerId. */
    public scorerId: string

    /**
     * Creates a new WordGuess instance using the specified properties.
     * @param [properties] Properties to set
     * @returns WordGuess instance
     */
    public static create(
      properties?: core_course.IWordGuess,
    ): core_course.WordGuess

    /**
     * Encodes the specified WordGuess message. Does not implicitly {@link core_course.WordGuess.verify|verify} messages.
     * @param message WordGuess message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encode(
      message: core_course.IWordGuess,
      writer?: $protobuf.Writer,
    ): $protobuf.Writer

    /**
     * Encodes the specified WordGuess message, length delimited. Does not implicitly {@link core_course.WordGuess.verify|verify} messages.
     * @param message WordGuess message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encodeDelimited(
      message: core_course.IWordGuess,
      writer?: $protobuf.Writer,
    ): $protobuf.Writer

    /**
     * Decodes a WordGuess message from the specified reader or buffer.
     * @param reader Reader or buffer to decode from
     * @param [length] Message length if known beforehand
     * @returns WordGuess
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decode(
      reader: $protobuf.Reader | Uint8Array,
      length?: number,
    ): core_course.WordGuess

    /**
     * Decodes a WordGuess message from the specified reader or buffer, length delimited.
     * @param reader Reader or buffer to decode from
     * @returns WordGuess
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decodeDelimited(
      reader: $protobuf.Reader | Uint8Array,
    ): core_course.WordGuess

    /**
     * Verifies a WordGuess message.
     * @param message Plain object to verify
     * @returns `null` if valid, otherwise the reason why it is not
     */
    public static verify(message: { [k: string]: any }): string | null

    /**
     * Creates a WordGuess message from a plain object. Also converts values to their respective internal types.
     * @param object Plain object
     * @returns WordGuess
     */
    public static fromObject(object: {
      [k: string]: any
    }): core_course.WordGuess

    /**
     * Creates a plain object from a WordGuess message. Also converts values to other types if specified.
     * @param message WordGuess
     * @param [options] Conversion options
     * @returns Plain object
     */
    public static toObject(
      message: core_course.WordGuess,
      options?: $protobuf.IConversionOptions,
    ): { [k: string]: any }

    /**
     * Converts this WordGuess to JSON.
     * @returns JSON object
     */
    public toJSON(): { [k: string]: any }
  }

  /** Properties of a SentenceCompletion. */
  interface ISentenceCompletion {
    /** SentenceCompletion audioId */
    audioId?: string | null

    /** SentenceCompletion pictureId */
    pictureId?: string | null

    /** SentenceCompletion text */
    text?: string | null

    /** SentenceCompletion refText */
    refText?: string | null

    /** SentenceCompletion hint */
    hint?: string | null

    /** SentenceCompletion deliteScorerId */
    deliteScorerId?: string | null
  }

  /** Represents a SentenceCompletion. */
  class SentenceCompletion implements ISentenceCompletion {
    /**
     * Constructs a new SentenceCompletion.
     * @param [properties] Properties to set
     */
    constructor(properties?: core_course.ISentenceCompletion)

    /** SentenceCompletion audioId. */
    public audioId: string

    /** SentenceCompletion pictureId. */
    public pictureId: string

    /** SentenceCompletion text. */
    public text: string

    /** SentenceCompletion refText. */
    public refText: string

    /** SentenceCompletion hint. */
    public hint: string

    /** SentenceCompletion deliteScorerId. */
    public deliteScorerId: string

    /**
     * Creates a new SentenceCompletion instance using the specified properties.
     * @param [properties] Properties to set
     * @returns SentenceCompletion instance
     */
    public static create(
      properties?: core_course.ISentenceCompletion,
    ): core_course.SentenceCompletion

    /**
     * Encodes the specified SentenceCompletion message. Does not implicitly {@link core_course.SentenceCompletion.verify|verify} messages.
     * @param message SentenceCompletion message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encode(
      message: core_course.ISentenceCompletion,
      writer?: $protobuf.Writer,
    ): $protobuf.Writer

    /**
     * Encodes the specified SentenceCompletion message, length delimited. Does not implicitly {@link core_course.SentenceCompletion.verify|verify} messages.
     * @param message SentenceCompletion message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encodeDelimited(
      message: core_course.ISentenceCompletion,
      writer?: $protobuf.Writer,
    ): $protobuf.Writer

    /**
     * Decodes a SentenceCompletion message from the specified reader or buffer.
     * @param reader Reader or buffer to decode from
     * @param [length] Message length if known beforehand
     * @returns SentenceCompletion
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decode(
      reader: $protobuf.Reader | Uint8Array,
      length?: number,
    ): core_course.SentenceCompletion

    /**
     * Decodes a SentenceCompletion message from the specified reader or buffer, length delimited.
     * @param reader Reader or buffer to decode from
     * @returns SentenceCompletion
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decodeDelimited(
      reader: $protobuf.Reader | Uint8Array,
    ): core_course.SentenceCompletion

    /**
     * Verifies a SentenceCompletion message.
     * @param message Plain object to verify
     * @returns `null` if valid, otherwise the reason why it is not
     */
    public static verify(message: { [k: string]: any }): string | null

    /**
     * Creates a SentenceCompletion message from a plain object. Also converts values to their respective internal types.
     * @param object Plain object
     * @returns SentenceCompletion
     */
    public static fromObject(object: {
      [k: string]: any
    }): core_course.SentenceCompletion

    /**
     * Creates a plain object from a SentenceCompletion message. Also converts values to other types if specified.
     * @param message SentenceCompletion
     * @param [options] Conversion options
     * @returns Plain object
     */
    public static toObject(
      message: core_course.SentenceCompletion,
      options?: $protobuf.IConversionOptions,
    ): { [k: string]: any }

    /**
     * Converts this SentenceCompletion to JSON.
     * @returns JSON object
     */
    public toJSON(): { [k: string]: any }
  }

  /** Properties of a Spelling. */
  interface ISpelling {
    /** Spelling audioId */
    audioId?: string | null

    /** Spelling text */
    text?: string | null

    /** Spelling stems */
    stems?: core_course.Spelling.IStem[] | null
  }

  /** Represents a Spelling. */
  class Spelling implements ISpelling {
    /**
     * Constructs a new Spelling.
     * @param [properties] Properties to set
     */
    constructor(properties?: core_course.ISpelling)

    /** Spelling audioId. */
    public audioId: string

    /** Spelling text. */
    public text: string

    /** Spelling stems. */
    public stems: core_course.Spelling.IStem[]

    /**
     * Creates a new Spelling instance using the specified properties.
     * @param [properties] Properties to set
     * @returns Spelling instance
     */
    public static create(
      properties?: core_course.ISpelling,
    ): core_course.Spelling

    /**
     * Encodes the specified Spelling message. Does not implicitly {@link core_course.Spelling.verify|verify} messages.
     * @param message Spelling message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encode(
      message: core_course.ISpelling,
      writer?: $protobuf.Writer,
    ): $protobuf.Writer

    /**
     * Encodes the specified Spelling message, length delimited. Does not implicitly {@link core_course.Spelling.verify|verify} messages.
     * @param message Spelling message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encodeDelimited(
      message: core_course.ISpelling,
      writer?: $protobuf.Writer,
    ): $protobuf.Writer

    /**
     * Decodes a Spelling message from the specified reader or buffer.
     * @param reader Reader or buffer to decode from
     * @param [length] Message length if known beforehand
     * @returns Spelling
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decode(
      reader: $protobuf.Reader | Uint8Array,
      length?: number,
    ): core_course.Spelling

    /**
     * Decodes a Spelling message from the specified reader or buffer, length delimited.
     * @param reader Reader or buffer to decode from
     * @returns Spelling
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decodeDelimited(
      reader: $protobuf.Reader | Uint8Array,
    ): core_course.Spelling

    /**
     * Verifies a Spelling message.
     * @param message Plain object to verify
     * @returns `null` if valid, otherwise the reason why it is not
     */
    public static verify(message: { [k: string]: any }): string | null

    /**
     * Creates a Spelling message from a plain object. Also converts values to their respective internal types.
     * @param object Plain object
     * @returns Spelling
     */
    public static fromObject(object: { [k: string]: any }): core_course.Spelling

    /**
     * Creates a plain object from a Spelling message. Also converts values to other types if specified.
     * @param message Spelling
     * @param [options] Conversion options
     * @returns Plain object
     */
    public static toObject(
      message: core_course.Spelling,
      options?: $protobuf.IConversionOptions,
    ): { [k: string]: any }

    /**
     * Converts this Spelling to JSON.
     * @returns JSON object
     */
    public toJSON(): { [k: string]: any }
  }

  namespace Spelling {
    /** Properties of a Stem. */
    interface IStem {
      /** Stem text */
      text?: string | null

      /** Stem checked */
      checked?: boolean | null
    }

    /** Represents a Stem. */
    class Stem implements IStem {
      /**
       * Constructs a new Stem.
       * @param [properties] Properties to set
       */
      constructor(properties?: core_course.Spelling.IStem)

      /** Stem text. */
      public text: string

      /** Stem checked. */
      public checked: boolean

      /**
       * Creates a new Stem instance using the specified properties.
       * @param [properties] Properties to set
       * @returns Stem instance
       */
      public static create(
        properties?: core_course.Spelling.IStem,
      ): core_course.Spelling.Stem

      /**
       * Encodes the specified Stem message. Does not implicitly {@link core_course.Spelling.Stem.verify|verify} messages.
       * @param message Stem message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encode(
        message: core_course.Spelling.IStem,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Encodes the specified Stem message, length delimited. Does not implicitly {@link core_course.Spelling.Stem.verify|verify} messages.
       * @param message Stem message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encodeDelimited(
        message: core_course.Spelling.IStem,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Decodes a Stem message from the specified reader or buffer.
       * @param reader Reader or buffer to decode from
       * @param [length] Message length if known beforehand
       * @returns Stem
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decode(
        reader: $protobuf.Reader | Uint8Array,
        length?: number,
      ): core_course.Spelling.Stem

      /**
       * Decodes a Stem message from the specified reader or buffer, length delimited.
       * @param reader Reader or buffer to decode from
       * @returns Stem
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decodeDelimited(
        reader: $protobuf.Reader | Uint8Array,
      ): core_course.Spelling.Stem

      /**
       * Verifies a Stem message.
       * @param message Plain object to verify
       * @returns `null` if valid, otherwise the reason why it is not
       */
      public static verify(message: { [k: string]: any }): string | null

      /**
       * Creates a Stem message from a plain object. Also converts values to their respective internal types.
       * @param object Plain object
       * @returns Stem
       */
      public static fromObject(object: {
        [k: string]: any
      }): core_course.Spelling.Stem

      /**
       * Creates a plain object from a Stem message. Also converts values to other types if specified.
       * @param message Stem
       * @param [options] Conversion options
       * @returns Plain object
       */
      public static toObject(
        message: core_course.Spelling.Stem,
        options?: $protobuf.IConversionOptions,
      ): { [k: string]: any }

      /**
       * Converts this Stem to JSON.
       * @returns JSON object
       */
      public toJSON(): { [k: string]: any }
    }
  }

  /** Properties of a ReadAfter. */
  interface IReadAfter {
    /** ReadAfter audioId */
    audioId?: string | null

    /** ReadAfter text */
    text?: string | null

    /** ReadAfter pictureId */
    pictureId?: string | null

    /** ReadAfter spokenText */
    spokenText?: string | null
  }

  /** Represents a ReadAfter. */
  class ReadAfter implements IReadAfter {
    /**
     * Constructs a new ReadAfter.
     * @param [properties] Properties to set
     */
    constructor(properties?: core_course.IReadAfter)

    /** ReadAfter audioId. */
    public audioId: string

    /** ReadAfter text. */
    public text: string

    /** ReadAfter pictureId. */
    public pictureId: string

    /** ReadAfter spokenText. */
    public spokenText: string

    /**
     * Creates a new ReadAfter instance using the specified properties.
     * @param [properties] Properties to set
     * @returns ReadAfter instance
     */
    public static create(
      properties?: core_course.IReadAfter,
    ): core_course.ReadAfter

    /**
     * Encodes the specified ReadAfter message. Does not implicitly {@link core_course.ReadAfter.verify|verify} messages.
     * @param message ReadAfter message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encode(
      message: core_course.IReadAfter,
      writer?: $protobuf.Writer,
    ): $protobuf.Writer

    /**
     * Encodes the specified ReadAfter message, length delimited. Does not implicitly {@link core_course.ReadAfter.verify|verify} messages.
     * @param message ReadAfter message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encodeDelimited(
      message: core_course.IReadAfter,
      writer?: $protobuf.Writer,
    ): $protobuf.Writer

    /**
     * Decodes a ReadAfter message from the specified reader or buffer.
     * @param reader Reader or buffer to decode from
     * @param [length] Message length if known beforehand
     * @returns ReadAfter
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decode(
      reader: $protobuf.Reader | Uint8Array,
      length?: number,
    ): core_course.ReadAfter

    /**
     * Decodes a ReadAfter message from the specified reader or buffer, length delimited.
     * @param reader Reader or buffer to decode from
     * @returns ReadAfter
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decodeDelimited(
      reader: $protobuf.Reader | Uint8Array,
    ): core_course.ReadAfter

    /**
     * Verifies a ReadAfter message.
     * @param message Plain object to verify
     * @returns `null` if valid, otherwise the reason why it is not
     */
    public static verify(message: { [k: string]: any }): string | null

    /**
     * Creates a ReadAfter message from a plain object. Also converts values to their respective internal types.
     * @param object Plain object
     * @returns ReadAfter
     */
    public static fromObject(object: {
      [k: string]: any
    }): core_course.ReadAfter

    /**
     * Creates a plain object from a ReadAfter message. Also converts values to other types if specified.
     * @param message ReadAfter
     * @param [options] Conversion options
     * @returns Plain object
     */
    public static toObject(
      message: core_course.ReadAfter,
      options?: $protobuf.IConversionOptions,
    ): { [k: string]: any }

    /**
     * Converts this ReadAfter to JSON.
     * @returns JSON object
     */
    public toJSON(): { [k: string]: any }
  }

  /** Properties of a SpeakingLink. */
  interface ISpeakingLink {
    /** SpeakingLink audioId */
    audioId?: string | null

    /** SpeakingLink pictureId */
    pictureId?: string | null

    /** SpeakingLink text */
    text?: string | null

    /** SpeakingLink stems */
    stems?: string[] | null

    /** SpeakingLink deliteScorerId */
    deliteScorerId?: string | null

    /** SpeakingLink answers */
    answers?: core_course.SpeakingLink.IAnswer[] | null
  }

  /** Represents a SpeakingLink. */
  class SpeakingLink implements ISpeakingLink {
    /**
     * Constructs a new SpeakingLink.
     * @param [properties] Properties to set
     */
    constructor(properties?: core_course.ISpeakingLink)

    /** SpeakingLink audioId. */
    public audioId: string

    /** SpeakingLink pictureId. */
    public pictureId: string

    /** SpeakingLink text. */
    public text: string

    /** SpeakingLink stems. */
    public stems: string[]

    /** SpeakingLink deliteScorerId. */
    public deliteScorerId: string

    /** SpeakingLink answers. */
    public answers: core_course.SpeakingLink.IAnswer[]

    /**
     * Creates a new SpeakingLink instance using the specified properties.
     * @param [properties] Properties to set
     * @returns SpeakingLink instance
     */
    public static create(
      properties?: core_course.ISpeakingLink,
    ): core_course.SpeakingLink

    /**
     * Encodes the specified SpeakingLink message. Does not implicitly {@link core_course.SpeakingLink.verify|verify} messages.
     * @param message SpeakingLink message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encode(
      message: core_course.ISpeakingLink,
      writer?: $protobuf.Writer,
    ): $protobuf.Writer

    /**
     * Encodes the specified SpeakingLink message, length delimited. Does not implicitly {@link core_course.SpeakingLink.verify|verify} messages.
     * @param message SpeakingLink message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encodeDelimited(
      message: core_course.ISpeakingLink,
      writer?: $protobuf.Writer,
    ): $protobuf.Writer

    /**
     * Decodes a SpeakingLink message from the specified reader or buffer.
     * @param reader Reader or buffer to decode from
     * @param [length] Message length if known beforehand
     * @returns SpeakingLink
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decode(
      reader: $protobuf.Reader | Uint8Array,
      length?: number,
    ): core_course.SpeakingLink

    /**
     * Decodes a SpeakingLink message from the specified reader or buffer, length delimited.
     * @param reader Reader or buffer to decode from
     * @returns SpeakingLink
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decodeDelimited(
      reader: $protobuf.Reader | Uint8Array,
    ): core_course.SpeakingLink

    /**
     * Verifies a SpeakingLink message.
     * @param message Plain object to verify
     * @returns `null` if valid, otherwise the reason why it is not
     */
    public static verify(message: { [k: string]: any }): string | null

    /**
     * Creates a SpeakingLink message from a plain object. Also converts values to their respective internal types.
     * @param object Plain object
     * @returns SpeakingLink
     */
    public static fromObject(object: {
      [k: string]: any
    }): core_course.SpeakingLink

    /**
     * Creates a plain object from a SpeakingLink message. Also converts values to other types if specified.
     * @param message SpeakingLink
     * @param [options] Conversion options
     * @returns Plain object
     */
    public static toObject(
      message: core_course.SpeakingLink,
      options?: $protobuf.IConversionOptions,
    ): { [k: string]: any }

    /**
     * Converts this SpeakingLink to JSON.
     * @returns JSON object
     */
    public toJSON(): { [k: string]: any }
  }

  namespace SpeakingLink {
    /** Properties of an Answer. */
    interface IAnswer {
      /** Answer stems */
      stems?: string[] | null

      /** Answer trText */
      trText?: string | null

      /** Answer trAudioId */
      trAudioId?: string | null
    }

    /** Represents an Answer. */
    class Answer implements IAnswer {
      /**
       * Constructs a new Answer.
       * @param [properties] Properties to set
       */
      constructor(properties?: core_course.SpeakingLink.IAnswer)

      /** Answer stems. */
      public stems: string[]

      /** Answer trText. */
      public trText: string

      /** Answer trAudioId. */
      public trAudioId: string

      /**
       * Creates a new Answer instance using the specified properties.
       * @param [properties] Properties to set
       * @returns Answer instance
       */
      public static create(
        properties?: core_course.SpeakingLink.IAnswer,
      ): core_course.SpeakingLink.Answer

      /**
       * Encodes the specified Answer message. Does not implicitly {@link core_course.SpeakingLink.Answer.verify|verify} messages.
       * @param message Answer message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encode(
        message: core_course.SpeakingLink.IAnswer,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Encodes the specified Answer message, length delimited. Does not implicitly {@link core_course.SpeakingLink.Answer.verify|verify} messages.
       * @param message Answer message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encodeDelimited(
        message: core_course.SpeakingLink.IAnswer,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Decodes an Answer message from the specified reader or buffer.
       * @param reader Reader or buffer to decode from
       * @param [length] Message length if known beforehand
       * @returns Answer
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decode(
        reader: $protobuf.Reader | Uint8Array,
        length?: number,
      ): core_course.SpeakingLink.Answer

      /**
       * Decodes an Answer message from the specified reader or buffer, length delimited.
       * @param reader Reader or buffer to decode from
       * @returns Answer
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decodeDelimited(
        reader: $protobuf.Reader | Uint8Array,
      ): core_course.SpeakingLink.Answer

      /**
       * Verifies an Answer message.
       * @param message Plain object to verify
       * @returns `null` if valid, otherwise the reason why it is not
       */
      public static verify(message: { [k: string]: any }): string | null

      /**
       * Creates an Answer message from a plain object. Also converts values to their respective internal types.
       * @param object Plain object
       * @returns Answer
       */
      public static fromObject(object: {
        [k: string]: any
      }): core_course.SpeakingLink.Answer

      /**
       * Creates a plain object from an Answer message. Also converts values to other types if specified.
       * @param message Answer
       * @param [options] Conversion options
       * @returns Plain object
       */
      public static toObject(
        message: core_course.SpeakingLink.Answer,
        options?: $protobuf.IConversionOptions,
      ): { [k: string]: any }

      /**
       * Converts this Answer to JSON.
       * @returns JSON object
       */
      public toJSON(): { [k: string]: any }
    }
  }

  /** Properties of a SpeakingQA. */
  interface ISpeakingQA {
    /** SpeakingQA audioId */
    audioId?: string | null

    /** SpeakingQA pictureId */
    pictureId?: string | null

    /** SpeakingQA hint */
    hint?: string | null

    /** SpeakingQA refText */
    refText?: string | null

    /** SpeakingQA deliteScorerId */
    deliteScorerId?: string | null
  }

  /** Represents a SpeakingQA. */
  class SpeakingQA implements ISpeakingQA {
    /**
     * Constructs a new SpeakingQA.
     * @param [properties] Properties to set
     */
    constructor(properties?: core_course.ISpeakingQA)

    /** SpeakingQA audioId. */
    public audioId: string

    /** SpeakingQA pictureId. */
    public pictureId: string

    /** SpeakingQA hint. */
    public hint: string

    /** SpeakingQA refText. */
    public refText: string

    /** SpeakingQA deliteScorerId. */
    public deliteScorerId: string

    /**
     * Creates a new SpeakingQA instance using the specified properties.
     * @param [properties] Properties to set
     * @returns SpeakingQA instance
     */
    public static create(
      properties?: core_course.ISpeakingQA,
    ): core_course.SpeakingQA

    /**
     * Encodes the specified SpeakingQA message. Does not implicitly {@link core_course.SpeakingQA.verify|verify} messages.
     * @param message SpeakingQA message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encode(
      message: core_course.ISpeakingQA,
      writer?: $protobuf.Writer,
    ): $protobuf.Writer

    /**
     * Encodes the specified SpeakingQA message, length delimited. Does not implicitly {@link core_course.SpeakingQA.verify|verify} messages.
     * @param message SpeakingQA message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encodeDelimited(
      message: core_course.ISpeakingQA,
      writer?: $protobuf.Writer,
    ): $protobuf.Writer

    /**
     * Decodes a SpeakingQA message from the specified reader or buffer.
     * @param reader Reader or buffer to decode from
     * @param [length] Message length if known beforehand
     * @returns SpeakingQA
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decode(
      reader: $protobuf.Reader | Uint8Array,
      length?: number,
    ): core_course.SpeakingQA

    /**
     * Decodes a SpeakingQA message from the specified reader or buffer, length delimited.
     * @param reader Reader or buffer to decode from
     * @returns SpeakingQA
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decodeDelimited(
      reader: $protobuf.Reader | Uint8Array,
    ): core_course.SpeakingQA

    /**
     * Verifies a SpeakingQA message.
     * @param message Plain object to verify
     * @returns `null` if valid, otherwise the reason why it is not
     */
    public static verify(message: { [k: string]: any }): string | null

    /**
     * Creates a SpeakingQA message from a plain object. Also converts values to their respective internal types.
     * @param object Plain object
     * @returns SpeakingQA
     */
    public static fromObject(object: {
      [k: string]: any
    }): core_course.SpeakingQA

    /**
     * Creates a plain object from a SpeakingQA message. Also converts values to other types if specified.
     * @param message SpeakingQA
     * @param [options] Conversion options
     * @returns Plain object
     */
    public static toObject(
      message: core_course.SpeakingQA,
      options?: $protobuf.IConversionOptions,
    ): { [k: string]: any }

    /**
     * Converts this SpeakingQA to JSON.
     * @returns JSON object
     */
    public toJSON(): { [k: string]: any }
  }

  /** Properties of a SpeakingMCQ. */
  interface ISpeakingMCQ {
    /** SpeakingMCQ audioId */
    audioId?: string | null

    /** SpeakingMCQ text */
    text?: string | null

    /** SpeakingMCQ pictureId */
    pictureId?: string | null

    /** SpeakingMCQ refText */
    refText?: string | null

    /** SpeakingMCQ answer */
    answer?: core_course.SpeakingMCQ.IAnswer[] | null

    /** SpeakingMCQ scorerId */
    scorerId?: string | null
  }

  /** Represents a SpeakingMCQ. */
  class SpeakingMCQ implements ISpeakingMCQ {
    /**
     * Constructs a new SpeakingMCQ.
     * @param [properties] Properties to set
     */
    constructor(properties?: core_course.ISpeakingMCQ)

    /** SpeakingMCQ audioId. */
    public audioId: string

    /** SpeakingMCQ text. */
    public text: string

    /** SpeakingMCQ pictureId. */
    public pictureId: string

    /** SpeakingMCQ refText. */
    public refText: string

    /** SpeakingMCQ answer. */
    public answer: core_course.SpeakingMCQ.IAnswer[]

    /** SpeakingMCQ scorerId. */
    public scorerId: string

    /**
     * Creates a new SpeakingMCQ instance using the specified properties.
     * @param [properties] Properties to set
     * @returns SpeakingMCQ instance
     */
    public static create(
      properties?: core_course.ISpeakingMCQ,
    ): core_course.SpeakingMCQ

    /**
     * Encodes the specified SpeakingMCQ message. Does not implicitly {@link core_course.SpeakingMCQ.verify|verify} messages.
     * @param message SpeakingMCQ message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encode(
      message: core_course.ISpeakingMCQ,
      writer?: $protobuf.Writer,
    ): $protobuf.Writer

    /**
     * Encodes the specified SpeakingMCQ message, length delimited. Does not implicitly {@link core_course.SpeakingMCQ.verify|verify} messages.
     * @param message SpeakingMCQ message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encodeDelimited(
      message: core_course.ISpeakingMCQ,
      writer?: $protobuf.Writer,
    ): $protobuf.Writer

    /**
     * Decodes a SpeakingMCQ message from the specified reader or buffer.
     * @param reader Reader or buffer to decode from
     * @param [length] Message length if known beforehand
     * @returns SpeakingMCQ
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decode(
      reader: $protobuf.Reader | Uint8Array,
      length?: number,
    ): core_course.SpeakingMCQ

    /**
     * Decodes a SpeakingMCQ message from the specified reader or buffer, length delimited.
     * @param reader Reader or buffer to decode from
     * @returns SpeakingMCQ
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decodeDelimited(
      reader: $protobuf.Reader | Uint8Array,
    ): core_course.SpeakingMCQ

    /**
     * Verifies a SpeakingMCQ message.
     * @param message Plain object to verify
     * @returns `null` if valid, otherwise the reason why it is not
     */
    public static verify(message: { [k: string]: any }): string | null

    /**
     * Creates a SpeakingMCQ message from a plain object. Also converts values to their respective internal types.
     * @param object Plain object
     * @returns SpeakingMCQ
     */
    public static fromObject(object: {
      [k: string]: any
    }): core_course.SpeakingMCQ

    /**
     * Creates a plain object from a SpeakingMCQ message. Also converts values to other types if specified.
     * @param message SpeakingMCQ
     * @param [options] Conversion options
     * @returns Plain object
     */
    public static toObject(
      message: core_course.SpeakingMCQ,
      options?: $protobuf.IConversionOptions,
    ): { [k: string]: any }

    /**
     * Converts this SpeakingMCQ to JSON.
     * @returns JSON object
     */
    public toJSON(): { [k: string]: any }
  }

  namespace SpeakingMCQ {
    /** Properties of an Answer. */
    interface IAnswer {
      /** Answer text */
      text?: string | null

      /** Answer checked */
      checked?: boolean | null
    }

    /** Represents an Answer. */
    class Answer implements IAnswer {
      /**
       * Constructs a new Answer.
       * @param [properties] Properties to set
       */
      constructor(properties?: core_course.SpeakingMCQ.IAnswer)

      /** Answer text. */
      public text: string

      /** Answer checked. */
      public checked: boolean

      /**
       * Creates a new Answer instance using the specified properties.
       * @param [properties] Properties to set
       * @returns Answer instance
       */
      public static create(
        properties?: core_course.SpeakingMCQ.IAnswer,
      ): core_course.SpeakingMCQ.Answer

      /**
       * Encodes the specified Answer message. Does not implicitly {@link core_course.SpeakingMCQ.Answer.verify|verify} messages.
       * @param message Answer message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encode(
        message: core_course.SpeakingMCQ.IAnswer,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Encodes the specified Answer message, length delimited. Does not implicitly {@link core_course.SpeakingMCQ.Answer.verify|verify} messages.
       * @param message Answer message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encodeDelimited(
        message: core_course.SpeakingMCQ.IAnswer,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Decodes an Answer message from the specified reader or buffer.
       * @param reader Reader or buffer to decode from
       * @param [length] Message length if known beforehand
       * @returns Answer
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decode(
        reader: $protobuf.Reader | Uint8Array,
        length?: number,
      ): core_course.SpeakingMCQ.Answer

      /**
       * Decodes an Answer message from the specified reader or buffer, length delimited.
       * @param reader Reader or buffer to decode from
       * @returns Answer
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decodeDelimited(
        reader: $protobuf.Reader | Uint8Array,
      ): core_course.SpeakingMCQ.Answer

      /**
       * Verifies an Answer message.
       * @param message Plain object to verify
       * @returns `null` if valid, otherwise the reason why it is not
       */
      public static verify(message: { [k: string]: any }): string | null

      /**
       * Creates an Answer message from a plain object. Also converts values to their respective internal types.
       * @param object Plain object
       * @returns Answer
       */
      public static fromObject(object: {
        [k: string]: any
      }): core_course.SpeakingMCQ.Answer

      /**
       * Creates a plain object from an Answer message. Also converts values to other types if specified.
       * @param message Answer
       * @param [options] Conversion options
       * @returns Plain object
       */
      public static toObject(
        message: core_course.SpeakingMCQ.Answer,
        options?: $protobuf.IConversionOptions,
      ): { [k: string]: any }

      /**
       * Converts this Answer to JSON.
       * @returns JSON object
       */
      public toJSON(): { [k: string]: any }
    }
  }

  /** Properties of a VocabularyFlashCard. */
  interface IVocabularyFlashCard {
    /** VocabularyFlashCard word */
    word?: string | null

    /** VocabularyFlashCard phonetic */
    phonetic?: core_course.IPhonetic[] | null

    /** VocabularyFlashCard wordBrief */
    wordBrief?: core_course.IWordBrief[] | null
  }

  /** Represents a VocabularyFlashCard. */
  class VocabularyFlashCard implements IVocabularyFlashCard {
    /**
     * Constructs a new VocabularyFlashCard.
     * @param [properties] Properties to set
     */
    constructor(properties?: core_course.IVocabularyFlashCard)

    /** VocabularyFlashCard word. */
    public word: string

    /** VocabularyFlashCard phonetic. */
    public phonetic: core_course.IPhonetic[]

    /** VocabularyFlashCard wordBrief. */
    public wordBrief: core_course.IWordBrief[]

    /**
     * Creates a new VocabularyFlashCard instance using the specified properties.
     * @param [properties] Properties to set
     * @returns VocabularyFlashCard instance
     */
    public static create(
      properties?: core_course.IVocabularyFlashCard,
    ): core_course.VocabularyFlashCard

    /**
     * Encodes the specified VocabularyFlashCard message. Does not implicitly {@link core_course.VocabularyFlashCard.verify|verify} messages.
     * @param message VocabularyFlashCard message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encode(
      message: core_course.IVocabularyFlashCard,
      writer?: $protobuf.Writer,
    ): $protobuf.Writer

    /**
     * Encodes the specified VocabularyFlashCard message, length delimited. Does not implicitly {@link core_course.VocabularyFlashCard.verify|verify} messages.
     * @param message VocabularyFlashCard message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encodeDelimited(
      message: core_course.IVocabularyFlashCard,
      writer?: $protobuf.Writer,
    ): $protobuf.Writer

    /**
     * Decodes a VocabularyFlashCard message from the specified reader or buffer.
     * @param reader Reader or buffer to decode from
     * @param [length] Message length if known beforehand
     * @returns VocabularyFlashCard
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decode(
      reader: $protobuf.Reader | Uint8Array,
      length?: number,
    ): core_course.VocabularyFlashCard

    /**
     * Decodes a VocabularyFlashCard message from the specified reader or buffer, length delimited.
     * @param reader Reader or buffer to decode from
     * @returns VocabularyFlashCard
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decodeDelimited(
      reader: $protobuf.Reader | Uint8Array,
    ): core_course.VocabularyFlashCard

    /**
     * Verifies a VocabularyFlashCard message.
     * @param message Plain object to verify
     * @returns `null` if valid, otherwise the reason why it is not
     */
    public static verify(message: { [k: string]: any }): string | null

    /**
     * Creates a VocabularyFlashCard message from a plain object. Also converts values to their respective internal types.
     * @param object Plain object
     * @returns VocabularyFlashCard
     */
    public static fromObject(object: {
      [k: string]: any
    }): core_course.VocabularyFlashCard

    /**
     * Creates a plain object from a VocabularyFlashCard message. Also converts values to other types if specified.
     * @param message VocabularyFlashCard
     * @param [options] Conversion options
     * @returns Plain object
     */
    public static toObject(
      message: core_course.VocabularyFlashCard,
      options?: $protobuf.IConversionOptions,
    ): { [k: string]: any }

    /**
     * Converts this VocabularyFlashCard to JSON.
     * @returns JSON object
     */
    public toJSON(): { [k: string]: any }
  }

  /** Properties of a WordBrief. */
  interface IWordBrief {
    /** WordBrief pos */
    pos?: string | null

    /** WordBrief content */
    content?: string | null
  }

  /** Represents a WordBrief. */
  class WordBrief implements IWordBrief {
    /**
     * Constructs a new WordBrief.
     * @param [properties] Properties to set
     */
    constructor(properties?: core_course.IWordBrief)

    /** WordBrief pos. */
    public pos: string

    /** WordBrief content. */
    public content: string

    /**
     * Creates a new WordBrief instance using the specified properties.
     * @param [properties] Properties to set
     * @returns WordBrief instance
     */
    public static create(
      properties?: core_course.IWordBrief,
    ): core_course.WordBrief

    /**
     * Encodes the specified WordBrief message. Does not implicitly {@link core_course.WordBrief.verify|verify} messages.
     * @param message WordBrief message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encode(
      message: core_course.IWordBrief,
      writer?: $protobuf.Writer,
    ): $protobuf.Writer

    /**
     * Encodes the specified WordBrief message, length delimited. Does not implicitly {@link core_course.WordBrief.verify|verify} messages.
     * @param message WordBrief message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encodeDelimited(
      message: core_course.IWordBrief,
      writer?: $protobuf.Writer,
    ): $protobuf.Writer

    /**
     * Decodes a WordBrief message from the specified reader or buffer.
     * @param reader Reader or buffer to decode from
     * @param [length] Message length if known beforehand
     * @returns WordBrief
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decode(
      reader: $protobuf.Reader | Uint8Array,
      length?: number,
    ): core_course.WordBrief

    /**
     * Decodes a WordBrief message from the specified reader or buffer, length delimited.
     * @param reader Reader or buffer to decode from
     * @returns WordBrief
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decodeDelimited(
      reader: $protobuf.Reader | Uint8Array,
    ): core_course.WordBrief

    /**
     * Verifies a WordBrief message.
     * @param message Plain object to verify
     * @returns `null` if valid, otherwise the reason why it is not
     */
    public static verify(message: { [k: string]: any }): string | null

    /**
     * Creates a WordBrief message from a plain object. Also converts values to their respective internal types.
     * @param object Plain object
     * @returns WordBrief
     */
    public static fromObject(object: {
      [k: string]: any
    }): core_course.WordBrief

    /**
     * Creates a plain object from a WordBrief message. Also converts values to other types if specified.
     * @param message WordBrief
     * @param [options] Conversion options
     * @returns Plain object
     */
    public static toObject(
      message: core_course.WordBrief,
      options?: $protobuf.IConversionOptions,
    ): { [k: string]: any }

    /**
     * Converts this WordBrief to JSON.
     * @returns JSON object
     */
    public toJSON(): { [k: string]: any }
  }

  /** Properties of a Phonetic. */
  interface IPhonetic {
    /** Phonetic value */
    value?: string | null

    /** Phonetic file */
    file?: string | null

    /** Phonetic type */
    type?: core_course.PhoneticType.Enum | null
  }

  /** Represents a Phonetic. */
  class Phonetic implements IPhonetic {
    /**
     * Constructs a new Phonetic.
     * @param [properties] Properties to set
     */
    constructor(properties?: core_course.IPhonetic)

    /** Phonetic value. */
    public value: string

    /** Phonetic file. */
    public file: string

    /** Phonetic type. */
    public type: core_course.PhoneticType.Enum

    /**
     * Creates a new Phonetic instance using the specified properties.
     * @param [properties] Properties to set
     * @returns Phonetic instance
     */
    public static create(
      properties?: core_course.IPhonetic,
    ): core_course.Phonetic

    /**
     * Encodes the specified Phonetic message. Does not implicitly {@link core_course.Phonetic.verify|verify} messages.
     * @param message Phonetic message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encode(
      message: core_course.IPhonetic,
      writer?: $protobuf.Writer,
    ): $protobuf.Writer

    /**
     * Encodes the specified Phonetic message, length delimited. Does not implicitly {@link core_course.Phonetic.verify|verify} messages.
     * @param message Phonetic message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encodeDelimited(
      message: core_course.IPhonetic,
      writer?: $protobuf.Writer,
    ): $protobuf.Writer

    /**
     * Decodes a Phonetic message from the specified reader or buffer.
     * @param reader Reader or buffer to decode from
     * @param [length] Message length if known beforehand
     * @returns Phonetic
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decode(
      reader: $protobuf.Reader | Uint8Array,
      length?: number,
    ): core_course.Phonetic

    /**
     * Decodes a Phonetic message from the specified reader or buffer, length delimited.
     * @param reader Reader or buffer to decode from
     * @returns Phonetic
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decodeDelimited(
      reader: $protobuf.Reader | Uint8Array,
    ): core_course.Phonetic

    /**
     * Verifies a Phonetic message.
     * @param message Plain object to verify
     * @returns `null` if valid, otherwise the reason why it is not
     */
    public static verify(message: { [k: string]: any }): string | null

    /**
     * Creates a Phonetic message from a plain object. Also converts values to their respective internal types.
     * @param object Plain object
     * @returns Phonetic
     */
    public static fromObject(object: { [k: string]: any }): core_course.Phonetic

    /**
     * Creates a plain object from a Phonetic message. Also converts values to other types if specified.
     * @param message Phonetic
     * @param [options] Conversion options
     * @returns Plain object
     */
    public static toObject(
      message: core_course.Phonetic,
      options?: $protobuf.IConversionOptions,
    ): { [k: string]: any }

    /**
     * Converts this Phonetic to JSON.
     * @returns JSON object
     */
    public toJSON(): { [k: string]: any }
  }

  /** Properties of a MultiChoiceQuestionX. */
  interface IMultiChoiceQuestionX {
    /** MultiChoiceQuestionX audioId */
    audioId?: string | null

    /** MultiChoiceQuestionX introText */
    introText?: string | null

    /** MultiChoiceQuestionX text */
    text?: string | null

    /** MultiChoiceQuestionX answer */
    answer?: core_course.MultiChoiceQuestionX.IAnswer[] | null
  }

  /** Represents a MultiChoiceQuestionX. */
  class MultiChoiceQuestionX implements IMultiChoiceQuestionX {
    /**
     * Constructs a new MultiChoiceQuestionX.
     * @param [properties] Properties to set
     */
    constructor(properties?: core_course.IMultiChoiceQuestionX)

    /** MultiChoiceQuestionX audioId. */
    public audioId: string

    /** MultiChoiceQuestionX introText. */
    public introText: string

    /** MultiChoiceQuestionX text. */
    public text: string

    /** MultiChoiceQuestionX answer. */
    public answer: core_course.MultiChoiceQuestionX.IAnswer[]

    /**
     * Creates a new MultiChoiceQuestionX instance using the specified properties.
     * @param [properties] Properties to set
     * @returns MultiChoiceQuestionX instance
     */
    public static create(
      properties?: core_course.IMultiChoiceQuestionX,
    ): core_course.MultiChoiceQuestionX

    /**
     * Encodes the specified MultiChoiceQuestionX message. Does not implicitly {@link core_course.MultiChoiceQuestionX.verify|verify} messages.
     * @param message MultiChoiceQuestionX message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encode(
      message: core_course.IMultiChoiceQuestionX,
      writer?: $protobuf.Writer,
    ): $protobuf.Writer

    /**
     * Encodes the specified MultiChoiceQuestionX message, length delimited. Does not implicitly {@link core_course.MultiChoiceQuestionX.verify|verify} messages.
     * @param message MultiChoiceQuestionX message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encodeDelimited(
      message: core_course.IMultiChoiceQuestionX,
      writer?: $protobuf.Writer,
    ): $protobuf.Writer

    /**
     * Decodes a MultiChoiceQuestionX message from the specified reader or buffer.
     * @param reader Reader or buffer to decode from
     * @param [length] Message length if known beforehand
     * @returns MultiChoiceQuestionX
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decode(
      reader: $protobuf.Reader | Uint8Array,
      length?: number,
    ): core_course.MultiChoiceQuestionX

    /**
     * Decodes a MultiChoiceQuestionX message from the specified reader or buffer, length delimited.
     * @param reader Reader or buffer to decode from
     * @returns MultiChoiceQuestionX
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decodeDelimited(
      reader: $protobuf.Reader | Uint8Array,
    ): core_course.MultiChoiceQuestionX

    /**
     * Verifies a MultiChoiceQuestionX message.
     * @param message Plain object to verify
     * @returns `null` if valid, otherwise the reason why it is not
     */
    public static verify(message: { [k: string]: any }): string | null

    /**
     * Creates a MultiChoiceQuestionX message from a plain object. Also converts values to their respective internal types.
     * @param object Plain object
     * @returns MultiChoiceQuestionX
     */
    public static fromObject(object: {
      [k: string]: any
    }): core_course.MultiChoiceQuestionX

    /**
     * Creates a plain object from a MultiChoiceQuestionX message. Also converts values to other types if specified.
     * @param message MultiChoiceQuestionX
     * @param [options] Conversion options
     * @returns Plain object
     */
    public static toObject(
      message: core_course.MultiChoiceQuestionX,
      options?: $protobuf.IConversionOptions,
    ): { [k: string]: any }

    /**
     * Converts this MultiChoiceQuestionX to JSON.
     * @returns JSON object
     */
    public toJSON(): { [k: string]: any }
  }

  namespace MultiChoiceQuestionX {
    /** Properties of an Answer. */
    interface IAnswer {
      /** Answer text */
      text?: string | null

      /** Answer checked */
      checked?: boolean | null
    }

    /** Represents an Answer. */
    class Answer implements IAnswer {
      /**
       * Constructs a new Answer.
       * @param [properties] Properties to set
       */
      constructor(properties?: core_course.MultiChoiceQuestionX.IAnswer)

      /** Answer text. */
      public text: string

      /** Answer checked. */
      public checked: boolean

      /**
       * Creates a new Answer instance using the specified properties.
       * @param [properties] Properties to set
       * @returns Answer instance
       */
      public static create(
        properties?: core_course.MultiChoiceQuestionX.IAnswer,
      ): core_course.MultiChoiceQuestionX.Answer

      /**
       * Encodes the specified Answer message. Does not implicitly {@link core_course.MultiChoiceQuestionX.Answer.verify|verify} messages.
       * @param message Answer message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encode(
        message: core_course.MultiChoiceQuestionX.IAnswer,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Encodes the specified Answer message, length delimited. Does not implicitly {@link core_course.MultiChoiceQuestionX.Answer.verify|verify} messages.
       * @param message Answer message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encodeDelimited(
        message: core_course.MultiChoiceQuestionX.IAnswer,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Decodes an Answer message from the specified reader or buffer.
       * @param reader Reader or buffer to decode from
       * @param [length] Message length if known beforehand
       * @returns Answer
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decode(
        reader: $protobuf.Reader | Uint8Array,
        length?: number,
      ): core_course.MultiChoiceQuestionX.Answer

      /**
       * Decodes an Answer message from the specified reader or buffer, length delimited.
       * @param reader Reader or buffer to decode from
       * @returns Answer
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decodeDelimited(
        reader: $protobuf.Reader | Uint8Array,
      ): core_course.MultiChoiceQuestionX.Answer

      /**
       * Verifies an Answer message.
       * @param message Plain object to verify
       * @returns `null` if valid, otherwise the reason why it is not
       */
      public static verify(message: { [k: string]: any }): string | null

      /**
       * Creates an Answer message from a plain object. Also converts values to their respective internal types.
       * @param object Plain object
       * @returns Answer
       */
      public static fromObject(object: {
        [k: string]: any
      }): core_course.MultiChoiceQuestionX.Answer

      /**
       * Creates a plain object from an Answer message. Also converts values to other types if specified.
       * @param message Answer
       * @param [options] Conversion options
       * @returns Plain object
       */
      public static toObject(
        message: core_course.MultiChoiceQuestionX.Answer,
        options?: $protobuf.IConversionOptions,
      ): { [k: string]: any }

      /**
       * Converts this Answer to JSON.
       * @returns JSON object
       */
      public toJSON(): { [k: string]: any }
    }
  }

  /** Properties of a Teaching. */
  interface ITeaching {
    /** Teaching text */
    text?: string | null

    /** Teaching localizedText */
    localizedText?: string | null

    /** Teaching picture */
    picture?: core_course.IPBPicture | null

    /** Teaching audio */
    audio?: core_course.IPBAudio | null
  }

  /** Represents a Teaching. */
  class Teaching implements ITeaching {
    /**
     * Constructs a new Teaching.
     * @param [properties] Properties to set
     */
    constructor(properties?: core_course.ITeaching)

    /** Teaching text. */
    public text: string

    /** Teaching localizedText. */
    public localizedText: string

    /** Teaching picture. */
    public picture?: core_course.IPBPicture | null

    /** Teaching audio. */
    public audio?: core_course.IPBAudio | null

    /**
     * Creates a new Teaching instance using the specified properties.
     * @param [properties] Properties to set
     * @returns Teaching instance
     */
    public static create(
      properties?: core_course.ITeaching,
    ): core_course.Teaching

    /**
     * Encodes the specified Teaching message. Does not implicitly {@link core_course.Teaching.verify|verify} messages.
     * @param message Teaching message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encode(
      message: core_course.ITeaching,
      writer?: $protobuf.Writer,
    ): $protobuf.Writer

    /**
     * Encodes the specified Teaching message, length delimited. Does not implicitly {@link core_course.Teaching.verify|verify} messages.
     * @param message Teaching message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encodeDelimited(
      message: core_course.ITeaching,
      writer?: $protobuf.Writer,
    ): $protobuf.Writer

    /**
     * Decodes a Teaching message from the specified reader or buffer.
     * @param reader Reader or buffer to decode from
     * @param [length] Message length if known beforehand
     * @returns Teaching
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decode(
      reader: $protobuf.Reader | Uint8Array,
      length?: number,
    ): core_course.Teaching

    /**
     * Decodes a Teaching message from the specified reader or buffer, length delimited.
     * @param reader Reader or buffer to decode from
     * @returns Teaching
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decodeDelimited(
      reader: $protobuf.Reader | Uint8Array,
    ): core_course.Teaching

    /**
     * Verifies a Teaching message.
     * @param message Plain object to verify
     * @returns `null` if valid, otherwise the reason why it is not
     */
    public static verify(message: { [k: string]: any }): string | null

    /**
     * Creates a Teaching message from a plain object. Also converts values to their respective internal types.
     * @param object Plain object
     * @returns Teaching
     */
    public static fromObject(object: { [k: string]: any }): core_course.Teaching

    /**
     * Creates a plain object from a Teaching message. Also converts values to other types if specified.
     * @param message Teaching
     * @param [options] Conversion options
     * @returns Plain object
     */
    public static toObject(
      message: core_course.Teaching,
      options?: $protobuf.IConversionOptions,
    ): { [k: string]: any }

    /**
     * Converts this Teaching to JSON.
     * @returns JSON object
     */
    public toJSON(): { [k: string]: any }
  }

  /** Properties of a Speaking. */
  interface ISpeaking {
    /** Speaking text */
    text?: string | null

    /** Speaking localizedText */
    localizedText?: string | null

    /** Speaking avatar */
    avatar?: core_course.IPBPicture | null

    /** Speaking audio */
    audio?: core_course.IPBAudio | null
  }

  /** Represents a Speaking. */
  class Speaking implements ISpeaking {
    /**
     * Constructs a new Speaking.
     * @param [properties] Properties to set
     */
    constructor(properties?: core_course.ISpeaking)

    /** Speaking text. */
    public text: string

    /** Speaking localizedText. */
    public localizedText: string

    /** Speaking avatar. */
    public avatar?: core_course.IPBPicture | null

    /** Speaking audio. */
    public audio?: core_course.IPBAudio | null

    /**
     * Creates a new Speaking instance using the specified properties.
     * @param [properties] Properties to set
     * @returns Speaking instance
     */
    public static create(
      properties?: core_course.ISpeaking,
    ): core_course.Speaking

    /**
     * Encodes the specified Speaking message. Does not implicitly {@link core_course.Speaking.verify|verify} messages.
     * @param message Speaking message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encode(
      message: core_course.ISpeaking,
      writer?: $protobuf.Writer,
    ): $protobuf.Writer

    /**
     * Encodes the specified Speaking message, length delimited. Does not implicitly {@link core_course.Speaking.verify|verify} messages.
     * @param message Speaking message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encodeDelimited(
      message: core_course.ISpeaking,
      writer?: $protobuf.Writer,
    ): $protobuf.Writer

    /**
     * Decodes a Speaking message from the specified reader or buffer.
     * @param reader Reader or buffer to decode from
     * @param [length] Message length if known beforehand
     * @returns Speaking
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decode(
      reader: $protobuf.Reader | Uint8Array,
      length?: number,
    ): core_course.Speaking

    /**
     * Decodes a Speaking message from the specified reader or buffer, length delimited.
     * @param reader Reader or buffer to decode from
     * @returns Speaking
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decodeDelimited(
      reader: $protobuf.Reader | Uint8Array,
    ): core_course.Speaking

    /**
     * Verifies a Speaking message.
     * @param message Plain object to verify
     * @returns `null` if valid, otherwise the reason why it is not
     */
    public static verify(message: { [k: string]: any }): string | null

    /**
     * Creates a Speaking message from a plain object. Also converts values to their respective internal types.
     * @param object Plain object
     * @returns Speaking
     */
    public static fromObject(object: { [k: string]: any }): core_course.Speaking

    /**
     * Creates a plain object from a Speaking message. Also converts values to other types if specified.
     * @param message Speaking
     * @param [options] Conversion options
     * @returns Plain object
     */
    public static toObject(
      message: core_course.Speaking,
      options?: $protobuf.IConversionOptions,
    ): { [k: string]: any }

    /**
     * Converts this Speaking to JSON.
     * @returns JSON object
     */
    public toJSON(): { [k: string]: any }
  }

  /** Properties of a C2ETranslate. */
  interface IC2ETranslate {
    /** C2ETranslate text */
    text?: string | null

    /** C2ETranslate hint */
    hint?: string[] | null

    /** C2ETranslate answers */
    answers?: string[] | null

    /** C2ETranslate scorePoints */
    scorePoints?: string[] | null
  }

  /** Represents a C2ETranslate. */
  class C2ETranslate implements IC2ETranslate {
    /**
     * Constructs a new C2ETranslate.
     * @param [properties] Properties to set
     */
    constructor(properties?: core_course.IC2ETranslate)

    /** C2ETranslate text. */
    public text: string

    /** C2ETranslate hint. */
    public hint: string[]

    /** C2ETranslate answers. */
    public answers: string[]

    /** C2ETranslate scorePoints. */
    public scorePoints: string[]

    /**
     * Creates a new C2ETranslate instance using the specified properties.
     * @param [properties] Properties to set
     * @returns C2ETranslate instance
     */
    public static create(
      properties?: core_course.IC2ETranslate,
    ): core_course.C2ETranslate

    /**
     * Encodes the specified C2ETranslate message. Does not implicitly {@link core_course.C2ETranslate.verify|verify} messages.
     * @param message C2ETranslate message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encode(
      message: core_course.IC2ETranslate,
      writer?: $protobuf.Writer,
    ): $protobuf.Writer

    /**
     * Encodes the specified C2ETranslate message, length delimited. Does not implicitly {@link core_course.C2ETranslate.verify|verify} messages.
     * @param message C2ETranslate message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encodeDelimited(
      message: core_course.IC2ETranslate,
      writer?: $protobuf.Writer,
    ): $protobuf.Writer

    /**
     * Decodes a C2ETranslate message from the specified reader or buffer.
     * @param reader Reader or buffer to decode from
     * @param [length] Message length if known beforehand
     * @returns C2ETranslate
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decode(
      reader: $protobuf.Reader | Uint8Array,
      length?: number,
    ): core_course.C2ETranslate

    /**
     * Decodes a C2ETranslate message from the specified reader or buffer, length delimited.
     * @param reader Reader or buffer to decode from
     * @returns C2ETranslate
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decodeDelimited(
      reader: $protobuf.Reader | Uint8Array,
    ): core_course.C2ETranslate

    /**
     * Verifies a C2ETranslate message.
     * @param message Plain object to verify
     * @returns `null` if valid, otherwise the reason why it is not
     */
    public static verify(message: { [k: string]: any }): string | null

    /**
     * Creates a C2ETranslate message from a plain object. Also converts values to their respective internal types.
     * @param object Plain object
     * @returns C2ETranslate
     */
    public static fromObject(object: {
      [k: string]: any
    }): core_course.C2ETranslate

    /**
     * Creates a plain object from a C2ETranslate message. Also converts values to other types if specified.
     * @param message C2ETranslate
     * @param [options] Conversion options
     * @returns Plain object
     */
    public static toObject(
      message: core_course.C2ETranslate,
      options?: $protobuf.IConversionOptions,
    ): { [k: string]: any }

    /**
     * Converts this C2ETranslate to JSON.
     * @returns JSON object
     */
    public toJSON(): { [k: string]: any }
  }

  /** Properties of a SemiSentConstruct. */
  interface ISemiSentConstruct {
    /** SemiSentConstruct vocabs */
    vocabs?: string[] | null

    /** SemiSentConstruct knowledgePoints */
    knowledgePoints?: core_course.SemiSentConstruct.IKnowledgePoint[] | null

    /** SemiSentConstruct answers */
    answers?: string[] | null
  }

  /** Represents a SemiSentConstruct. */
  class SemiSentConstruct implements ISemiSentConstruct {
    /**
     * Constructs a new SemiSentConstruct.
     * @param [properties] Properties to set
     */
    constructor(properties?: core_course.ISemiSentConstruct)

    /** SemiSentConstruct vocabs. */
    public vocabs: string[]

    /** SemiSentConstruct knowledgePoints. */
    public knowledgePoints: core_course.SemiSentConstruct.IKnowledgePoint[]

    /** SemiSentConstruct answers. */
    public answers: string[]

    /**
     * Creates a new SemiSentConstruct instance using the specified properties.
     * @param [properties] Properties to set
     * @returns SemiSentConstruct instance
     */
    public static create(
      properties?: core_course.ISemiSentConstruct,
    ): core_course.SemiSentConstruct

    /**
     * Encodes the specified SemiSentConstruct message. Does not implicitly {@link core_course.SemiSentConstruct.verify|verify} messages.
     * @param message SemiSentConstruct message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encode(
      message: core_course.ISemiSentConstruct,
      writer?: $protobuf.Writer,
    ): $protobuf.Writer

    /**
     * Encodes the specified SemiSentConstruct message, length delimited. Does not implicitly {@link core_course.SemiSentConstruct.verify|verify} messages.
     * @param message SemiSentConstruct message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encodeDelimited(
      message: core_course.ISemiSentConstruct,
      writer?: $protobuf.Writer,
    ): $protobuf.Writer

    /**
     * Decodes a SemiSentConstruct message from the specified reader or buffer.
     * @param reader Reader or buffer to decode from
     * @param [length] Message length if known beforehand
     * @returns SemiSentConstruct
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decode(
      reader: $protobuf.Reader | Uint8Array,
      length?: number,
    ): core_course.SemiSentConstruct

    /**
     * Decodes a SemiSentConstruct message from the specified reader or buffer, length delimited.
     * @param reader Reader or buffer to decode from
     * @returns SemiSentConstruct
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decodeDelimited(
      reader: $protobuf.Reader | Uint8Array,
    ): core_course.SemiSentConstruct

    /**
     * Verifies a SemiSentConstruct message.
     * @param message Plain object to verify
     * @returns `null` if valid, otherwise the reason why it is not
     */
    public static verify(message: { [k: string]: any }): string | null

    /**
     * Creates a SemiSentConstruct message from a plain object. Also converts values to their respective internal types.
     * @param object Plain object
     * @returns SemiSentConstruct
     */
    public static fromObject(object: {
      [k: string]: any
    }): core_course.SemiSentConstruct

    /**
     * Creates a plain object from a SemiSentConstruct message. Also converts values to other types if specified.
     * @param message SemiSentConstruct
     * @param [options] Conversion options
     * @returns Plain object
     */
    public static toObject(
      message: core_course.SemiSentConstruct,
      options?: $protobuf.IConversionOptions,
    ): { [k: string]: any }

    /**
     * Converts this SemiSentConstruct to JSON.
     * @returns JSON object
     */
    public toJSON(): { [k: string]: any }
  }

  namespace SemiSentConstruct {
    /** Properties of a KnowledgePoint. */
    interface IKnowledgePoint {
      /** KnowledgePoint label */
      label?: string | null

      /** KnowledgePoint title */
      title?: string | null
    }

    /** Represents a KnowledgePoint. */
    class KnowledgePoint implements IKnowledgePoint {
      /**
       * Constructs a new KnowledgePoint.
       * @param [properties] Properties to set
       */
      constructor(properties?: core_course.SemiSentConstruct.IKnowledgePoint)

      /** KnowledgePoint label. */
      public label: string

      /** KnowledgePoint title. */
      public title: string

      /**
       * Creates a new KnowledgePoint instance using the specified properties.
       * @param [properties] Properties to set
       * @returns KnowledgePoint instance
       */
      public static create(
        properties?: core_course.SemiSentConstruct.IKnowledgePoint,
      ): core_course.SemiSentConstruct.KnowledgePoint

      /**
       * Encodes the specified KnowledgePoint message. Does not implicitly {@link core_course.SemiSentConstruct.KnowledgePoint.verify|verify} messages.
       * @param message KnowledgePoint message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encode(
        message: core_course.SemiSentConstruct.IKnowledgePoint,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Encodes the specified KnowledgePoint message, length delimited. Does not implicitly {@link core_course.SemiSentConstruct.KnowledgePoint.verify|verify} messages.
       * @param message KnowledgePoint message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encodeDelimited(
        message: core_course.SemiSentConstruct.IKnowledgePoint,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Decodes a KnowledgePoint message from the specified reader or buffer.
       * @param reader Reader or buffer to decode from
       * @param [length] Message length if known beforehand
       * @returns KnowledgePoint
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decode(
        reader: $protobuf.Reader | Uint8Array,
        length?: number,
      ): core_course.SemiSentConstruct.KnowledgePoint

      /**
       * Decodes a KnowledgePoint message from the specified reader or buffer, length delimited.
       * @param reader Reader or buffer to decode from
       * @returns KnowledgePoint
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decodeDelimited(
        reader: $protobuf.Reader | Uint8Array,
      ): core_course.SemiSentConstruct.KnowledgePoint

      /**
       * Verifies a KnowledgePoint message.
       * @param message Plain object to verify
       * @returns `null` if valid, otherwise the reason why it is not
       */
      public static verify(message: { [k: string]: any }): string | null

      /**
       * Creates a KnowledgePoint message from a plain object. Also converts values to their respective internal types.
       * @param object Plain object
       * @returns KnowledgePoint
       */
      public static fromObject(object: {
        [k: string]: any
      }): core_course.SemiSentConstruct.KnowledgePoint

      /**
       * Creates a plain object from a KnowledgePoint message. Also converts values to other types if specified.
       * @param message KnowledgePoint
       * @param [options] Conversion options
       * @returns Plain object
       */
      public static toObject(
        message: core_course.SemiSentConstruct.KnowledgePoint,
        options?: $protobuf.IConversionOptions,
      ): { [k: string]: any }

      /**
       * Converts this KnowledgePoint to JSON.
       * @returns JSON object
       */
      public toJSON(): { [k: string]: any }
    }
  }

  /** Properties of a Matching. */
  interface IMatching {
    /** Matching options */
    options?: core_course.Matching.IOption[] | null

    /** Matching instruction */
    instruction?: string | null
  }

  /** Represents a Matching. */
  class Matching implements IMatching {
    /**
     * Constructs a new Matching.
     * @param [properties] Properties to set
     */
    constructor(properties?: core_course.IMatching)

    /** Matching options. */
    public options: core_course.Matching.IOption[]

    /** Matching instruction. */
    public instruction: string

    /**
     * Creates a new Matching instance using the specified properties.
     * @param [properties] Properties to set
     * @returns Matching instance
     */
    public static create(
      properties?: core_course.IMatching,
    ): core_course.Matching

    /**
     * Encodes the specified Matching message. Does not implicitly {@link core_course.Matching.verify|verify} messages.
     * @param message Matching message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encode(
      message: core_course.IMatching,
      writer?: $protobuf.Writer,
    ): $protobuf.Writer

    /**
     * Encodes the specified Matching message, length delimited. Does not implicitly {@link core_course.Matching.verify|verify} messages.
     * @param message Matching message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encodeDelimited(
      message: core_course.IMatching,
      writer?: $protobuf.Writer,
    ): $protobuf.Writer

    /**
     * Decodes a Matching message from the specified reader or buffer.
     * @param reader Reader or buffer to decode from
     * @param [length] Message length if known beforehand
     * @returns Matching
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decode(
      reader: $protobuf.Reader | Uint8Array,
      length?: number,
    ): core_course.Matching

    /**
     * Decodes a Matching message from the specified reader or buffer, length delimited.
     * @param reader Reader or buffer to decode from
     * @returns Matching
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decodeDelimited(
      reader: $protobuf.Reader | Uint8Array,
    ): core_course.Matching

    /**
     * Verifies a Matching message.
     * @param message Plain object to verify
     * @returns `null` if valid, otherwise the reason why it is not
     */
    public static verify(message: { [k: string]: any }): string | null

    /**
     * Creates a Matching message from a plain object. Also converts values to their respective internal types.
     * @param object Plain object
     * @returns Matching
     */
    public static fromObject(object: { [k: string]: any }): core_course.Matching

    /**
     * Creates a plain object from a Matching message. Also converts values to other types if specified.
     * @param message Matching
     * @param [options] Conversion options
     * @returns Plain object
     */
    public static toObject(
      message: core_course.Matching,
      options?: $protobuf.IConversionOptions,
    ): { [k: string]: any }

    /**
     * Converts this Matching to JSON.
     * @returns JSON object
     */
    public toJSON(): { [k: string]: any }
  }

  namespace Matching {
    /** Properties of an Option. */
    interface IOption {
      /** Option text */
      text?: string | null

      /** Option plainText */
      plainText?: string | null

      /** Option audioId */
      audioId?: string | null
    }

    /** Represents an Option. */
    class Option implements IOption {
      /**
       * Constructs a new Option.
       * @param [properties] Properties to set
       */
      constructor(properties?: core_course.Matching.IOption)

      /** Option text. */
      public text: string

      /** Option plainText. */
      public plainText: string

      /** Option audioId. */
      public audioId: string

      /** Option pair. */
      public pair?: 'plainText' | 'audioId'

      /**
       * Creates a new Option instance using the specified properties.
       * @param [properties] Properties to set
       * @returns Option instance
       */
      public static create(
        properties?: core_course.Matching.IOption,
      ): core_course.Matching.Option

      /**
       * Encodes the specified Option message. Does not implicitly {@link core_course.Matching.Option.verify|verify} messages.
       * @param message Option message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encode(
        message: core_course.Matching.IOption,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Encodes the specified Option message, length delimited. Does not implicitly {@link core_course.Matching.Option.verify|verify} messages.
       * @param message Option message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encodeDelimited(
        message: core_course.Matching.IOption,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Decodes an Option message from the specified reader or buffer.
       * @param reader Reader or buffer to decode from
       * @param [length] Message length if known beforehand
       * @returns Option
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decode(
        reader: $protobuf.Reader | Uint8Array,
        length?: number,
      ): core_course.Matching.Option

      /**
       * Decodes an Option message from the specified reader or buffer, length delimited.
       * @param reader Reader or buffer to decode from
       * @returns Option
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decodeDelimited(
        reader: $protobuf.Reader | Uint8Array,
      ): core_course.Matching.Option

      /**
       * Verifies an Option message.
       * @param message Plain object to verify
       * @returns `null` if valid, otherwise the reason why it is not
       */
      public static verify(message: { [k: string]: any }): string | null

      /**
       * Creates an Option message from a plain object. Also converts values to their respective internal types.
       * @param object Plain object
       * @returns Option
       */
      public static fromObject(object: {
        [k: string]: any
      }): core_course.Matching.Option

      /**
       * Creates a plain object from an Option message. Also converts values to other types if specified.
       * @param message Option
       * @param [options] Conversion options
       * @returns Plain object
       */
      public static toObject(
        message: core_course.Matching.Option,
        options?: $protobuf.IConversionOptions,
      ): { [k: string]: any }

      /**
       * Converts this Option to JSON.
       * @returns JSON object
       */
      public toJSON(): { [k: string]: any }
    }
  }

  /** Properties of an OpenSpeaking. */
  interface IOpenSpeaking {
    /** OpenSpeaking instruction */
    instruction?: string | null

    /** OpenSpeaking texts */
    texts?: string[] | null

    /** OpenSpeaking hints */
    hints?: string[] | null

    /** OpenSpeaking answers */
    answers?: core_course.OpenSpeaking.IAnswer[] | null
  }

  /** Represents an OpenSpeaking. */
  class OpenSpeaking implements IOpenSpeaking {
    /**
     * Constructs a new OpenSpeaking.
     * @param [properties] Properties to set
     */
    constructor(properties?: core_course.IOpenSpeaking)

    /** OpenSpeaking instruction. */
    public instruction: string

    /** OpenSpeaking texts. */
    public texts: string[]

    /** OpenSpeaking hints. */
    public hints: string[]

    /** OpenSpeaking answers. */
    public answers: core_course.OpenSpeaking.IAnswer[]

    /**
     * Creates a new OpenSpeaking instance using the specified properties.
     * @param [properties] Properties to set
     * @returns OpenSpeaking instance
     */
    public static create(
      properties?: core_course.IOpenSpeaking,
    ): core_course.OpenSpeaking

    /**
     * Encodes the specified OpenSpeaking message. Does not implicitly {@link core_course.OpenSpeaking.verify|verify} messages.
     * @param message OpenSpeaking message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encode(
      message: core_course.IOpenSpeaking,
      writer?: $protobuf.Writer,
    ): $protobuf.Writer

    /**
     * Encodes the specified OpenSpeaking message, length delimited. Does not implicitly {@link core_course.OpenSpeaking.verify|verify} messages.
     * @param message OpenSpeaking message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encodeDelimited(
      message: core_course.IOpenSpeaking,
      writer?: $protobuf.Writer,
    ): $protobuf.Writer

    /**
     * Decodes an OpenSpeaking message from the specified reader or buffer.
     * @param reader Reader or buffer to decode from
     * @param [length] Message length if known beforehand
     * @returns OpenSpeaking
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decode(
      reader: $protobuf.Reader | Uint8Array,
      length?: number,
    ): core_course.OpenSpeaking

    /**
     * Decodes an OpenSpeaking message from the specified reader or buffer, length delimited.
     * @param reader Reader or buffer to decode from
     * @returns OpenSpeaking
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decodeDelimited(
      reader: $protobuf.Reader | Uint8Array,
    ): core_course.OpenSpeaking

    /**
     * Verifies an OpenSpeaking message.
     * @param message Plain object to verify
     * @returns `null` if valid, otherwise the reason why it is not
     */
    public static verify(message: { [k: string]: any }): string | null

    /**
     * Creates an OpenSpeaking message from a plain object. Also converts values to their respective internal types.
     * @param object Plain object
     * @returns OpenSpeaking
     */
    public static fromObject(object: {
      [k: string]: any
    }): core_course.OpenSpeaking

    /**
     * Creates a plain object from an OpenSpeaking message. Also converts values to other types if specified.
     * @param message OpenSpeaking
     * @param [options] Conversion options
     * @returns Plain object
     */
    public static toObject(
      message: core_course.OpenSpeaking,
      options?: $protobuf.IConversionOptions,
    ): { [k: string]: any }

    /**
     * Converts this OpenSpeaking to JSON.
     * @returns JSON object
     */
    public toJSON(): { [k: string]: any }
  }

  namespace OpenSpeaking {
    /** Properties of an Answer. */
    interface IAnswer {
      /** Answer richText */
      richText?: string | null

      /** Answer refAnswer */
      refAnswer?: kion.IReferenceAnswerWithScorePoints | null
    }

    /** Represents an Answer. */
    class Answer implements IAnswer {
      /**
       * Constructs a new Answer.
       * @param [properties] Properties to set
       */
      constructor(properties?: core_course.OpenSpeaking.IAnswer)

      /** Answer richText. */
      public richText: string

      /** Answer refAnswer. */
      public refAnswer?: kion.IReferenceAnswerWithScorePoints | null

      /**
       * Creates a new Answer instance using the specified properties.
       * @param [properties] Properties to set
       * @returns Answer instance
       */
      public static create(
        properties?: core_course.OpenSpeaking.IAnswer,
      ): core_course.OpenSpeaking.Answer

      /**
       * Encodes the specified Answer message. Does not implicitly {@link core_course.OpenSpeaking.Answer.verify|verify} messages.
       * @param message Answer message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encode(
        message: core_course.OpenSpeaking.IAnswer,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Encodes the specified Answer message, length delimited. Does not implicitly {@link core_course.OpenSpeaking.Answer.verify|verify} messages.
       * @param message Answer message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encodeDelimited(
        message: core_course.OpenSpeaking.IAnswer,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Decodes an Answer message from the specified reader or buffer.
       * @param reader Reader or buffer to decode from
       * @param [length] Message length if known beforehand
       * @returns Answer
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decode(
        reader: $protobuf.Reader | Uint8Array,
        length?: number,
      ): core_course.OpenSpeaking.Answer

      /**
       * Decodes an Answer message from the specified reader or buffer, length delimited.
       * @param reader Reader or buffer to decode from
       * @returns Answer
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decodeDelimited(
        reader: $protobuf.Reader | Uint8Array,
      ): core_course.OpenSpeaking.Answer

      /**
       * Verifies an Answer message.
       * @param message Plain object to verify
       * @returns `null` if valid, otherwise the reason why it is not
       */
      public static verify(message: { [k: string]: any }): string | null

      /**
       * Creates an Answer message from a plain object. Also converts values to their respective internal types.
       * @param object Plain object
       * @returns Answer
       */
      public static fromObject(object: {
        [k: string]: any
      }): core_course.OpenSpeaking.Answer

      /**
       * Creates a plain object from an Answer message. Also converts values to other types if specified.
       * @param message Answer
       * @param [options] Conversion options
       * @returns Plain object
       */
      public static toObject(
        message: core_course.OpenSpeaking.Answer,
        options?: $protobuf.IConversionOptions,
      ): { [k: string]: any }

      /**
       * Converts this Answer to JSON.
       * @returns JSON object
       */
      public toJSON(): { [k: string]: any }
    }
  }

  /** Properties of a C2CWarmUp. */
  interface IC2CWarmUp {
    /** C2CWarmUp words */
    words?: core_course.C2CWarmUp.IContent[] | null

    /** C2CWarmUp sentences */
    sentences?: core_course.C2CWarmUp.IContent[] | null

    /** C2CWarmUp role */
    role?: number | null
  }

  /** Represents a C2CWarmUp. */
  class C2CWarmUp implements IC2CWarmUp {
    /**
     * Constructs a new C2CWarmUp.
     * @param [properties] Properties to set
     */
    constructor(properties?: core_course.IC2CWarmUp)

    /** C2CWarmUp words. */
    public words: core_course.C2CWarmUp.IContent[]

    /** C2CWarmUp sentences. */
    public sentences: core_course.C2CWarmUp.IContent[]

    /** C2CWarmUp role. */
    public role: number

    /**
     * Creates a new C2CWarmUp instance using the specified properties.
     * @param [properties] Properties to set
     * @returns C2CWarmUp instance
     */
    public static create(
      properties?: core_course.IC2CWarmUp,
    ): core_course.C2CWarmUp

    /**
     * Encodes the specified C2CWarmUp message. Does not implicitly {@link core_course.C2CWarmUp.verify|verify} messages.
     * @param message C2CWarmUp message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encode(
      message: core_course.IC2CWarmUp,
      writer?: $protobuf.Writer,
    ): $protobuf.Writer

    /**
     * Encodes the specified C2CWarmUp message, length delimited. Does not implicitly {@link core_course.C2CWarmUp.verify|verify} messages.
     * @param message C2CWarmUp message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encodeDelimited(
      message: core_course.IC2CWarmUp,
      writer?: $protobuf.Writer,
    ): $protobuf.Writer

    /**
     * Decodes a C2CWarmUp message from the specified reader or buffer.
     * @param reader Reader or buffer to decode from
     * @param [length] Message length if known beforehand
     * @returns C2CWarmUp
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decode(
      reader: $protobuf.Reader | Uint8Array,
      length?: number,
    ): core_course.C2CWarmUp

    /**
     * Decodes a C2CWarmUp message from the specified reader or buffer, length delimited.
     * @param reader Reader or buffer to decode from
     * @returns C2CWarmUp
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decodeDelimited(
      reader: $protobuf.Reader | Uint8Array,
    ): core_course.C2CWarmUp

    /**
     * Verifies a C2CWarmUp message.
     * @param message Plain object to verify
     * @returns `null` if valid, otherwise the reason why it is not
     */
    public static verify(message: { [k: string]: any }): string | null

    /**
     * Creates a C2CWarmUp message from a plain object. Also converts values to their respective internal types.
     * @param object Plain object
     * @returns C2CWarmUp
     */
    public static fromObject(object: {
      [k: string]: any
    }): core_course.C2CWarmUp

    /**
     * Creates a plain object from a C2CWarmUp message. Also converts values to other types if specified.
     * @param message C2CWarmUp
     * @param [options] Conversion options
     * @returns Plain object
     */
    public static toObject(
      message: core_course.C2CWarmUp,
      options?: $protobuf.IConversionOptions,
    ): { [k: string]: any }

    /**
     * Converts this C2CWarmUp to JSON.
     * @returns JSON object
     */
    public toJSON(): { [k: string]: any }
  }

  namespace C2CWarmUp {
    /** Properties of a Content. */
    interface IContent {
      /** Content audioId */
      audioId?: string | null

      /** Content translation */
      translation?: string | null
    }

    /** Represents a Content. */
    class Content implements IContent {
      /**
       * Constructs a new Content.
       * @param [properties] Properties to set
       */
      constructor(properties?: core_course.C2CWarmUp.IContent)

      /** Content audioId. */
      public audioId: string

      /** Content translation. */
      public translation: string

      /**
       * Creates a new Content instance using the specified properties.
       * @param [properties] Properties to set
       * @returns Content instance
       */
      public static create(
        properties?: core_course.C2CWarmUp.IContent,
      ): core_course.C2CWarmUp.Content

      /**
       * Encodes the specified Content message. Does not implicitly {@link core_course.C2CWarmUp.Content.verify|verify} messages.
       * @param message Content message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encode(
        message: core_course.C2CWarmUp.IContent,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Encodes the specified Content message, length delimited. Does not implicitly {@link core_course.C2CWarmUp.Content.verify|verify} messages.
       * @param message Content message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encodeDelimited(
        message: core_course.C2CWarmUp.IContent,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Decodes a Content message from the specified reader or buffer.
       * @param reader Reader or buffer to decode from
       * @param [length] Message length if known beforehand
       * @returns Content
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decode(
        reader: $protobuf.Reader | Uint8Array,
        length?: number,
      ): core_course.C2CWarmUp.Content

      /**
       * Decodes a Content message from the specified reader or buffer, length delimited.
       * @param reader Reader or buffer to decode from
       * @returns Content
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decodeDelimited(
        reader: $protobuf.Reader | Uint8Array,
      ): core_course.C2CWarmUp.Content

      /**
       * Verifies a Content message.
       * @param message Plain object to verify
       * @returns `null` if valid, otherwise the reason why it is not
       */
      public static verify(message: { [k: string]: any }): string | null

      /**
       * Creates a Content message from a plain object. Also converts values to their respective internal types.
       * @param object Plain object
       * @returns Content
       */
      public static fromObject(object: {
        [k: string]: any
      }): core_course.C2CWarmUp.Content

      /**
       * Creates a plain object from a Content message. Also converts values to other types if specified.
       * @param message Content
       * @param [options] Conversion options
       * @returns Plain object
       */
      public static toObject(
        message: core_course.C2CWarmUp.Content,
        options?: $protobuf.IConversionOptions,
      ): { [k: string]: any }

      /**
       * Converts this Content to JSON.
       * @returns JSON object
       */
      public toJSON(): { [k: string]: any }
    }
  }

  /** Properties of a C2CChoose. */
  interface IC2CChoose {
    /** C2CChoose taskType */
    taskType?: string | null

    /** C2CChoose taskTitle */
    taskTitle?: string | null

    /** C2CChoose infoInstruction */
    infoInstruction?: string | null

    /** C2CChoose picId */
    picId?: string | null

    /** C2CChoose taskRef */
    taskRef?: string | null

    /** C2CChoose stemText */
    stemText?: string | null

    /** C2CChoose answers */
    answers?: core_course.C2CChoose.IAnswer[] | null

    /** C2CChoose role */
    role?: number | null

    /** C2CChoose hint */
    hint?: string | null
  }

  /** Represents a C2CChoose. */
  class C2CChoose implements IC2CChoose {
    /**
     * Constructs a new C2CChoose.
     * @param [properties] Properties to set
     */
    constructor(properties?: core_course.IC2CChoose)

    /** C2CChoose taskType. */
    public taskType: string

    /** C2CChoose taskTitle. */
    public taskTitle: string

    /** C2CChoose infoInstruction. */
    public infoInstruction: string

    /** C2CChoose picId. */
    public picId: string

    /** C2CChoose taskRef. */
    public taskRef: string

    /** C2CChoose stemText. */
    public stemText: string

    /** C2CChoose answers. */
    public answers: core_course.C2CChoose.IAnswer[]

    /** C2CChoose role. */
    public role: number

    /** C2CChoose hint. */
    public hint: string

    /**
     * Creates a new C2CChoose instance using the specified properties.
     * @param [properties] Properties to set
     * @returns C2CChoose instance
     */
    public static create(
      properties?: core_course.IC2CChoose,
    ): core_course.C2CChoose

    /**
     * Encodes the specified C2CChoose message. Does not implicitly {@link core_course.C2CChoose.verify|verify} messages.
     * @param message C2CChoose message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encode(
      message: core_course.IC2CChoose,
      writer?: $protobuf.Writer,
    ): $protobuf.Writer

    /**
     * Encodes the specified C2CChoose message, length delimited. Does not implicitly {@link core_course.C2CChoose.verify|verify} messages.
     * @param message C2CChoose message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encodeDelimited(
      message: core_course.IC2CChoose,
      writer?: $protobuf.Writer,
    ): $protobuf.Writer

    /**
     * Decodes a C2CChoose message from the specified reader or buffer.
     * @param reader Reader or buffer to decode from
     * @param [length] Message length if known beforehand
     * @returns C2CChoose
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decode(
      reader: $protobuf.Reader | Uint8Array,
      length?: number,
    ): core_course.C2CChoose

    /**
     * Decodes a C2CChoose message from the specified reader or buffer, length delimited.
     * @param reader Reader or buffer to decode from
     * @returns C2CChoose
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decodeDelimited(
      reader: $protobuf.Reader | Uint8Array,
    ): core_course.C2CChoose

    /**
     * Verifies a C2CChoose message.
     * @param message Plain object to verify
     * @returns `null` if valid, otherwise the reason why it is not
     */
    public static verify(message: { [k: string]: any }): string | null

    /**
     * Creates a C2CChoose message from a plain object. Also converts values to their respective internal types.
     * @param object Plain object
     * @returns C2CChoose
     */
    public static fromObject(object: {
      [k: string]: any
    }): core_course.C2CChoose

    /**
     * Creates a plain object from a C2CChoose message. Also converts values to other types if specified.
     * @param message C2CChoose
     * @param [options] Conversion options
     * @returns Plain object
     */
    public static toObject(
      message: core_course.C2CChoose,
      options?: $protobuf.IConversionOptions,
    ): { [k: string]: any }

    /**
     * Converts this C2CChoose to JSON.
     * @returns JSON object
     */
    public toJSON(): { [k: string]: any }
  }

  namespace C2CChoose {
    /** Properties of an Answer. */
    interface IAnswer {
      /** Answer text */
      text?: string | null

      /** Answer checked */
      checked?: boolean | null
    }

    /** Represents an Answer. */
    class Answer implements IAnswer {
      /**
       * Constructs a new Answer.
       * @param [properties] Properties to set
       */
      constructor(properties?: core_course.C2CChoose.IAnswer)

      /** Answer text. */
      public text: string

      /** Answer checked. */
      public checked: boolean

      /**
       * Creates a new Answer instance using the specified properties.
       * @param [properties] Properties to set
       * @returns Answer instance
       */
      public static create(
        properties?: core_course.C2CChoose.IAnswer,
      ): core_course.C2CChoose.Answer

      /**
       * Encodes the specified Answer message. Does not implicitly {@link core_course.C2CChoose.Answer.verify|verify} messages.
       * @param message Answer message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encode(
        message: core_course.C2CChoose.IAnswer,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Encodes the specified Answer message, length delimited. Does not implicitly {@link core_course.C2CChoose.Answer.verify|verify} messages.
       * @param message Answer message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encodeDelimited(
        message: core_course.C2CChoose.IAnswer,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Decodes an Answer message from the specified reader or buffer.
       * @param reader Reader or buffer to decode from
       * @param [length] Message length if known beforehand
       * @returns Answer
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decode(
        reader: $protobuf.Reader | Uint8Array,
        length?: number,
      ): core_course.C2CChoose.Answer

      /**
       * Decodes an Answer message from the specified reader or buffer, length delimited.
       * @param reader Reader or buffer to decode from
       * @returns Answer
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decodeDelimited(
        reader: $protobuf.Reader | Uint8Array,
      ): core_course.C2CChoose.Answer

      /**
       * Verifies an Answer message.
       * @param message Plain object to verify
       * @returns `null` if valid, otherwise the reason why it is not
       */
      public static verify(message: { [k: string]: any }): string | null

      /**
       * Creates an Answer message from a plain object. Also converts values to their respective internal types.
       * @param object Plain object
       * @returns Answer
       */
      public static fromObject(object: {
        [k: string]: any
      }): core_course.C2CChoose.Answer

      /**
       * Creates a plain object from an Answer message. Also converts values to other types if specified.
       * @param message Answer
       * @param [options] Conversion options
       * @returns Plain object
       */
      public static toObject(
        message: core_course.C2CChoose.Answer,
        options?: $protobuf.IConversionOptions,
      ): { [k: string]: any }

      /**
       * Converts this Answer to JSON.
       * @returns JSON object
       */
      public toJSON(): { [k: string]: any }
    }
  }
}

/** Namespace telis. */
export namespace telis {
  /** Properties of a ScoreMeta. */
  interface IScoreMeta {
    /** ScoreMeta questionType */
    questionType?: number | null

    /** ScoreMeta type */
    type?: string | null

    /** ScoreMeta qID */
    qID?: string | null

    /** ScoreMeta knowledgePoints */
    knowledgePoints?: number[] | null
  }

  /** Represents a ScoreMeta. */
  class ScoreMeta implements IScoreMeta {
    /**
     * Constructs a new ScoreMeta.
     * @param [properties] Properties to set
     */
    constructor(properties?: telis.IScoreMeta)

    /** ScoreMeta questionType. */
    public questionType: number

    /** ScoreMeta type. */
    public type: string

    /** ScoreMeta qID. */
    public qID: string

    /** ScoreMeta knowledgePoints. */
    public knowledgePoints: number[]

    /**
     * Creates a new ScoreMeta instance using the specified properties.
     * @param [properties] Properties to set
     * @returns ScoreMeta instance
     */
    public static create(properties?: telis.IScoreMeta): telis.ScoreMeta

    /**
     * Encodes the specified ScoreMeta message. Does not implicitly {@link telis.ScoreMeta.verify|verify} messages.
     * @param message ScoreMeta message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encode(
      message: telis.IScoreMeta,
      writer?: $protobuf.Writer,
    ): $protobuf.Writer

    /**
     * Encodes the specified ScoreMeta message, length delimited. Does not implicitly {@link telis.ScoreMeta.verify|verify} messages.
     * @param message ScoreMeta message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encodeDelimited(
      message: telis.IScoreMeta,
      writer?: $protobuf.Writer,
    ): $protobuf.Writer

    /**
     * Decodes a ScoreMeta message from the specified reader or buffer.
     * @param reader Reader or buffer to decode from
     * @param [length] Message length if known beforehand
     * @returns ScoreMeta
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decode(
      reader: $protobuf.Reader | Uint8Array,
      length?: number,
    ): telis.ScoreMeta

    /**
     * Decodes a ScoreMeta message from the specified reader or buffer, length delimited.
     * @param reader Reader or buffer to decode from
     * @returns ScoreMeta
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decodeDelimited(
      reader: $protobuf.Reader | Uint8Array,
    ): telis.ScoreMeta

    /**
     * Verifies a ScoreMeta message.
     * @param message Plain object to verify
     * @returns `null` if valid, otherwise the reason why it is not
     */
    public static verify(message: { [k: string]: any }): string | null

    /**
     * Creates a ScoreMeta message from a plain object. Also converts values to their respective internal types.
     * @param object Plain object
     * @returns ScoreMeta
     */
    public static fromObject(object: { [k: string]: any }): telis.ScoreMeta

    /**
     * Creates a plain object from a ScoreMeta message. Also converts values to other types if specified.
     * @param message ScoreMeta
     * @param [options] Conversion options
     * @returns Plain object
     */
    public static toObject(
      message: telis.ScoreMeta,
      options?: $protobuf.IConversionOptions,
    ): { [k: string]: any }

    /**
     * Converts this ScoreMeta to JSON.
     * @returns JSON object
     */
    public toJSON(): { [k: string]: any }
  }

  /** Properties of a Score. */
  interface IScore {
    /** Score version */
    version?: string | null

    /** Score questionType */
    questionType?: telis.Score.QuestionType | null

    /** Score outOfSetWords */
    outOfSetWords?: string | null

    /** Score subScore */
    subScore?: telis.ISubScore[] | null

    /** Score status */
    status?: speech_common.ScoreStatus.Code | null
  }

  /** Represents a Score. */
  class Score implements IScore {
    /**
     * Constructs a new Score.
     * @param [properties] Properties to set
     */
    constructor(properties?: telis.IScore)

    /** Score version. */
    public version: string

    /** Score questionType. */
    public questionType: telis.Score.QuestionType

    /** Score outOfSetWords. */
    public outOfSetWords: string

    /** Score subScore. */
    public subScore: telis.ISubScore[]

    /** Score status. */
    public status: speech_common.ScoreStatus.Code

    /**
     * Creates a new Score instance using the specified properties.
     * @param [properties] Properties to set
     * @returns Score instance
     */
    public static create(properties?: telis.IScore): telis.Score

    /**
     * Encodes the specified Score message. Does not implicitly {@link telis.Score.verify|verify} messages.
     * @param message Score message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encode(
      message: telis.IScore,
      writer?: $protobuf.Writer,
    ): $protobuf.Writer

    /**
     * Encodes the specified Score message, length delimited. Does not implicitly {@link telis.Score.verify|verify} messages.
     * @param message Score message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encodeDelimited(
      message: telis.IScore,
      writer?: $protobuf.Writer,
    ): $protobuf.Writer

    /**
     * Decodes a Score message from the specified reader or buffer.
     * @param reader Reader or buffer to decode from
     * @param [length] Message length if known beforehand
     * @returns Score
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decode(
      reader: $protobuf.Reader | Uint8Array,
      length?: number,
    ): telis.Score

    /**
     * Decodes a Score message from the specified reader or buffer, length delimited.
     * @param reader Reader or buffer to decode from
     * @returns Score
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decodeDelimited(
      reader: $protobuf.Reader | Uint8Array,
    ): telis.Score

    /**
     * Verifies a Score message.
     * @param message Plain object to verify
     * @returns `null` if valid, otherwise the reason why it is not
     */
    public static verify(message: { [k: string]: any }): string | null

    /**
     * Creates a Score message from a plain object. Also converts values to their respective internal types.
     * @param object Plain object
     * @returns Score
     */
    public static fromObject(object: { [k: string]: any }): telis.Score

    /**
     * Creates a plain object from a Score message. Also converts values to other types if specified.
     * @param message Score
     * @param [options] Conversion options
     * @returns Plain object
     */
    public static toObject(
      message: telis.Score,
      options?: $protobuf.IConversionOptions,
    ): { [k: string]: any }

    /**
     * Converts this Score to JSON.
     * @returns JSON object
     */
    public toJSON(): { [k: string]: any }
  }

  namespace Score {
    /** QuestionType enum. */
    enum QuestionType {
      INVALID = 0,
      SENTENCE_WORD_HUNT = 3,
      CLASSIFICATION = 4,
      PARAGRAPH_COMPLETION = 5,
      SENTENCE_COMPLETION = 8,
      SENTENCE_REPHRASE = 9,
      CHOOSE_AND_READ = 10,
      SEQUENCE_AND_READ = 11,
      WORD_HUNT_WITH_HINT = 12,
      SAY_THE_WORD = 13,
      TRANSLATION = 14,
      ERROR_CORRECTION = 15,
      PARAPHRASE = 16,
      PART1 = 101,
      PART2 = 102,
      PART3 = 103,
    }
  }

  /** Properties of a SubScore. */
  interface ISubScore {
    /** SubScore overall */
    overall?: number | null

    /** SubScore integrity */
    integrity?: number | null

    /** SubScore fluency */
    fluency?: number | null

    /** SubScore confidence */
    confidence?: number | null

    /** SubScore pronunciation */
    pronunciation?: number | null

    /** SubScore optionIndex */
    optionIndex?: number | null

    /** SubScore decodedText */
    decodedText?: string | null

    /** SubScore chooseScore */
    chooseScore?: telis.IChooseScore | null

    /** SubScore spottedRuntime */
    spottedRuntime?: telis.ISpottedRuntime | null

    /** SubScore spottedScore */
    spottedScore?: telis.ISpottedScore[] | null

    /** SubScore wordScore */
    wordScore?: telis.IWordScore[] | null
  }

  /** Represents a SubScore. */
  class SubScore implements ISubScore {
    /**
     * Constructs a new SubScore.
     * @param [properties] Properties to set
     */
    constructor(properties?: telis.ISubScore)

    /** SubScore overall. */
    public overall: number

    /** SubScore integrity. */
    public integrity: number

    /** SubScore fluency. */
    public fluency: number

    /** SubScore confidence. */
    public confidence: number

    /** SubScore pronunciation. */
    public pronunciation: number

    /** SubScore optionIndex. */
    public optionIndex: number

    /** SubScore decodedText. */
    public decodedText: string

    /** SubScore chooseScore. */
    public chooseScore?: telis.IChooseScore | null

    /** SubScore spottedRuntime. */
    public spottedRuntime?: telis.ISpottedRuntime | null

    /** SubScore spottedScore. */
    public spottedScore: telis.ISpottedScore[]

    /** SubScore wordScore. */
    public wordScore: telis.IWordScore[]

    /**
     * Creates a new SubScore instance using the specified properties.
     * @param [properties] Properties to set
     * @returns SubScore instance
     */
    public static create(properties?: telis.ISubScore): telis.SubScore

    /**
     * Encodes the specified SubScore message. Does not implicitly {@link telis.SubScore.verify|verify} messages.
     * @param message SubScore message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encode(
      message: telis.ISubScore,
      writer?: $protobuf.Writer,
    ): $protobuf.Writer

    /**
     * Encodes the specified SubScore message, length delimited. Does not implicitly {@link telis.SubScore.verify|verify} messages.
     * @param message SubScore message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encodeDelimited(
      message: telis.ISubScore,
      writer?: $protobuf.Writer,
    ): $protobuf.Writer

    /**
     * Decodes a SubScore message from the specified reader or buffer.
     * @param reader Reader or buffer to decode from
     * @param [length] Message length if known beforehand
     * @returns SubScore
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decode(
      reader: $protobuf.Reader | Uint8Array,
      length?: number,
    ): telis.SubScore

    /**
     * Decodes a SubScore message from the specified reader or buffer, length delimited.
     * @param reader Reader or buffer to decode from
     * @returns SubScore
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decodeDelimited(
      reader: $protobuf.Reader | Uint8Array,
    ): telis.SubScore

    /**
     * Verifies a SubScore message.
     * @param message Plain object to verify
     * @returns `null` if valid, otherwise the reason why it is not
     */
    public static verify(message: { [k: string]: any }): string | null

    /**
     * Creates a SubScore message from a plain object. Also converts values to their respective internal types.
     * @param object Plain object
     * @returns SubScore
     */
    public static fromObject(object: { [k: string]: any }): telis.SubScore

    /**
     * Creates a plain object from a SubScore message. Also converts values to other types if specified.
     * @param message SubScore
     * @param [options] Conversion options
     * @returns Plain object
     */
    public static toObject(
      message: telis.SubScore,
      options?: $protobuf.IConversionOptions,
    ): { [k: string]: any }

    /**
     * Converts this SubScore to JSON.
     * @returns JSON object
     */
    public toJSON(): { [k: string]: any }
  }

  /** Properties of a SpottedScore. */
  interface ISpottedScore {
    /** SpottedScore confidence */
    confidence?: number | null

    /** SpottedScore sentenceIndex */
    sentenceIndex?: number | null
  }

  /** Represents a SpottedScore. */
  class SpottedScore implements ISpottedScore {
    /**
     * Constructs a new SpottedScore.
     * @param [properties] Properties to set
     */
    constructor(properties?: telis.ISpottedScore)

    /** SpottedScore confidence. */
    public confidence: number

    /** SpottedScore sentenceIndex. */
    public sentenceIndex: number

    /**
     * Creates a new SpottedScore instance using the specified properties.
     * @param [properties] Properties to set
     * @returns SpottedScore instance
     */
    public static create(properties?: telis.ISpottedScore): telis.SpottedScore

    /**
     * Encodes the specified SpottedScore message. Does not implicitly {@link telis.SpottedScore.verify|verify} messages.
     * @param message SpottedScore message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encode(
      message: telis.ISpottedScore,
      writer?: $protobuf.Writer,
    ): $protobuf.Writer

    /**
     * Encodes the specified SpottedScore message, length delimited. Does not implicitly {@link telis.SpottedScore.verify|verify} messages.
     * @param message SpottedScore message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encodeDelimited(
      message: telis.ISpottedScore,
      writer?: $protobuf.Writer,
    ): $protobuf.Writer

    /**
     * Decodes a SpottedScore message from the specified reader or buffer.
     * @param reader Reader or buffer to decode from
     * @param [length] Message length if known beforehand
     * @returns SpottedScore
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decode(
      reader: $protobuf.Reader | Uint8Array,
      length?: number,
    ): telis.SpottedScore

    /**
     * Decodes a SpottedScore message from the specified reader or buffer, length delimited.
     * @param reader Reader or buffer to decode from
     * @returns SpottedScore
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decodeDelimited(
      reader: $protobuf.Reader | Uint8Array,
    ): telis.SpottedScore

    /**
     * Verifies a SpottedScore message.
     * @param message Plain object to verify
     * @returns `null` if valid, otherwise the reason why it is not
     */
    public static verify(message: { [k: string]: any }): string | null

    /**
     * Creates a SpottedScore message from a plain object. Also converts values to their respective internal types.
     * @param object Plain object
     * @returns SpottedScore
     */
    public static fromObject(object: { [k: string]: any }): telis.SpottedScore

    /**
     * Creates a plain object from a SpottedScore message. Also converts values to other types if specified.
     * @param message SpottedScore
     * @param [options] Conversion options
     * @returns Plain object
     */
    public static toObject(
      message: telis.SpottedScore,
      options?: $protobuf.IConversionOptions,
    ): { [k: string]: any }

    /**
     * Converts this SpottedScore to JSON.
     * @returns JSON object
     */
    public toJSON(): { [k: string]: any }
  }

  /** Properties of a SpottedRuntime. */
  interface ISpottedRuntime {
    /** SpottedRuntime startTimestampMilli */
    startTimestampMilli?: number | null

    /** SpottedRuntime endTimestampMilli */
    endTimestampMilli?: number | null

    /** SpottedRuntime spottedIndex */
    spottedIndex?: number | null

    /** SpottedRuntime spottedText */
    spottedText?: string | null
  }

  /** Represents a SpottedRuntime. */
  class SpottedRuntime implements ISpottedRuntime {
    /**
     * Constructs a new SpottedRuntime.
     * @param [properties] Properties to set
     */
    constructor(properties?: telis.ISpottedRuntime)

    /** SpottedRuntime startTimestampMilli. */
    public startTimestampMilli: number

    /** SpottedRuntime endTimestampMilli. */
    public endTimestampMilli: number

    /** SpottedRuntime spottedIndex. */
    public spottedIndex: number

    /** SpottedRuntime spottedText. */
    public spottedText: string

    /**
     * Creates a new SpottedRuntime instance using the specified properties.
     * @param [properties] Properties to set
     * @returns SpottedRuntime instance
     */
    public static create(
      properties?: telis.ISpottedRuntime,
    ): telis.SpottedRuntime

    /**
     * Encodes the specified SpottedRuntime message. Does not implicitly {@link telis.SpottedRuntime.verify|verify} messages.
     * @param message SpottedRuntime message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encode(
      message: telis.ISpottedRuntime,
      writer?: $protobuf.Writer,
    ): $protobuf.Writer

    /**
     * Encodes the specified SpottedRuntime message, length delimited. Does not implicitly {@link telis.SpottedRuntime.verify|verify} messages.
     * @param message SpottedRuntime message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encodeDelimited(
      message: telis.ISpottedRuntime,
      writer?: $protobuf.Writer,
    ): $protobuf.Writer

    /**
     * Decodes a SpottedRuntime message from the specified reader or buffer.
     * @param reader Reader or buffer to decode from
     * @param [length] Message length if known beforehand
     * @returns SpottedRuntime
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decode(
      reader: $protobuf.Reader | Uint8Array,
      length?: number,
    ): telis.SpottedRuntime

    /**
     * Decodes a SpottedRuntime message from the specified reader or buffer, length delimited.
     * @param reader Reader or buffer to decode from
     * @returns SpottedRuntime
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decodeDelimited(
      reader: $protobuf.Reader | Uint8Array,
    ): telis.SpottedRuntime

    /**
     * Verifies a SpottedRuntime message.
     * @param message Plain object to verify
     * @returns `null` if valid, otherwise the reason why it is not
     */
    public static verify(message: { [k: string]: any }): string | null

    /**
     * Creates a SpottedRuntime message from a plain object. Also converts values to their respective internal types.
     * @param object Plain object
     * @returns SpottedRuntime
     */
    public static fromObject(object: { [k: string]: any }): telis.SpottedRuntime

    /**
     * Creates a plain object from a SpottedRuntime message. Also converts values to other types if specified.
     * @param message SpottedRuntime
     * @param [options] Conversion options
     * @returns Plain object
     */
    public static toObject(
      message: telis.SpottedRuntime,
      options?: $protobuf.IConversionOptions,
    ): { [k: string]: any }

    /**
     * Converts this SpottedRuntime to JSON.
     * @returns JSON object
     */
    public toJSON(): { [k: string]: any }
  }

  /** Properties of a ChooseScore. */
  interface IChooseScore {
    /** ChooseScore choose */
    choose?: number | null

    /** ChooseScore refChoose */
    refChoose?: number | null

    /** ChooseScore type */
    type?: telis.ChooseScore.Type | null
  }

  /** Represents a ChooseScore. */
  class ChooseScore implements IChooseScore {
    /**
     * Constructs a new ChooseScore.
     * @param [properties] Properties to set
     */
    constructor(properties?: telis.IChooseScore)

    /** ChooseScore choose. */
    public choose: number

    /** ChooseScore refChoose. */
    public refChoose: number

    /** ChooseScore type. */
    public type: telis.ChooseScore.Type

    /**
     * Creates a new ChooseScore instance using the specified properties.
     * @param [properties] Properties to set
     * @returns ChooseScore instance
     */
    public static create(properties?: telis.IChooseScore): telis.ChooseScore

    /**
     * Encodes the specified ChooseScore message. Does not implicitly {@link telis.ChooseScore.verify|verify} messages.
     * @param message ChooseScore message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encode(
      message: telis.IChooseScore,
      writer?: $protobuf.Writer,
    ): $protobuf.Writer

    /**
     * Encodes the specified ChooseScore message, length delimited. Does not implicitly {@link telis.ChooseScore.verify|verify} messages.
     * @param message ChooseScore message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encodeDelimited(
      message: telis.IChooseScore,
      writer?: $protobuf.Writer,
    ): $protobuf.Writer

    /**
     * Decodes a ChooseScore message from the specified reader or buffer.
     * @param reader Reader or buffer to decode from
     * @param [length] Message length if known beforehand
     * @returns ChooseScore
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decode(
      reader: $protobuf.Reader | Uint8Array,
      length?: number,
    ): telis.ChooseScore

    /**
     * Decodes a ChooseScore message from the specified reader or buffer, length delimited.
     * @param reader Reader or buffer to decode from
     * @returns ChooseScore
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decodeDelimited(
      reader: $protobuf.Reader | Uint8Array,
    ): telis.ChooseScore

    /**
     * Verifies a ChooseScore message.
     * @param message Plain object to verify
     * @returns `null` if valid, otherwise the reason why it is not
     */
    public static verify(message: { [k: string]: any }): string | null

    /**
     * Creates a ChooseScore message from a plain object. Also converts values to their respective internal types.
     * @param object Plain object
     * @returns ChooseScore
     */
    public static fromObject(object: { [k: string]: any }): telis.ChooseScore

    /**
     * Creates a plain object from a ChooseScore message. Also converts values to other types if specified.
     * @param message ChooseScore
     * @param [options] Conversion options
     * @returns Plain object
     */
    public static toObject(
      message: telis.ChooseScore,
      options?: $protobuf.IConversionOptions,
    ): { [k: string]: any }

    /**
     * Converts this ChooseScore to JSON.
     * @returns JSON object
     */
    public toJSON(): { [k: string]: any }
  }

  namespace ChooseScore {
    /** Type enum. */
    enum Type {
      INVALID = 0,
      CORRECT = 1,
      WRONG = 2,
    }
  }

  /** Properties of a WordScore. */
  interface IWordScore {
    /** WordScore score */
    score?: number | null

    /** WordScore type */
    type?: telis.WordScore.Type | null

    /** WordScore word */
    word?: string | null

    /** WordScore prompt */
    prompt?: string | null
  }

  /** Represents a WordScore. */
  class WordScore implements IWordScore {
    /**
     * Constructs a new WordScore.
     * @param [properties] Properties to set
     */
    constructor(properties?: telis.IWordScore)

    /** WordScore score. */
    public score: number

    /** WordScore type. */
    public type: telis.WordScore.Type

    /** WordScore word. */
    public word: string

    /** WordScore prompt. */
    public prompt: string

    /**
     * Creates a new WordScore instance using the specified properties.
     * @param [properties] Properties to set
     * @returns WordScore instance
     */
    public static create(properties?: telis.IWordScore): telis.WordScore

    /**
     * Encodes the specified WordScore message. Does not implicitly {@link telis.WordScore.verify|verify} messages.
     * @param message WordScore message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encode(
      message: telis.IWordScore,
      writer?: $protobuf.Writer,
    ): $protobuf.Writer

    /**
     * Encodes the specified WordScore message, length delimited. Does not implicitly {@link telis.WordScore.verify|verify} messages.
     * @param message WordScore message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encodeDelimited(
      message: telis.IWordScore,
      writer?: $protobuf.Writer,
    ): $protobuf.Writer

    /**
     * Decodes a WordScore message from the specified reader or buffer.
     * @param reader Reader or buffer to decode from
     * @param [length] Message length if known beforehand
     * @returns WordScore
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decode(
      reader: $protobuf.Reader | Uint8Array,
      length?: number,
    ): telis.WordScore

    /**
     * Decodes a WordScore message from the specified reader or buffer, length delimited.
     * @param reader Reader or buffer to decode from
     * @returns WordScore
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decodeDelimited(
      reader: $protobuf.Reader | Uint8Array,
    ): telis.WordScore

    /**
     * Verifies a WordScore message.
     * @param message Plain object to verify
     * @returns `null` if valid, otherwise the reason why it is not
     */
    public static verify(message: { [k: string]: any }): string | null

    /**
     * Creates a WordScore message from a plain object. Also converts values to their respective internal types.
     * @param object Plain object
     * @returns WordScore
     */
    public static fromObject(object: { [k: string]: any }): telis.WordScore

    /**
     * Creates a plain object from a WordScore message. Also converts values to other types if specified.
     * @param message WordScore
     * @param [options] Conversion options
     * @returns Plain object
     */
    public static toObject(
      message: telis.WordScore,
      options?: $protobuf.IConversionOptions,
    ): { [k: string]: any }

    /**
     * Converts this WordScore to JSON.
     * @returns JSON object
     */
    public toJSON(): { [k: string]: any }
  }

  namespace WordScore {
    /** Type enum. */
    enum Type {
      INVALID = 0,
      CONTEXT = 1,
      BLANK = 2,
      COMPULSORY = 3,
      OPTIONAL = 4,
      KEYWORD = 5,
      NONEKEYWORD = 6,
    }
  }
}

/** Namespace speech_common. */
export namespace speech_common {
  /** Properties of a ScoreStatus. */
  interface IScoreStatus {}

  /** Represents a ScoreStatus. */
  class ScoreStatus implements IScoreStatus {
    /**
     * Constructs a new ScoreStatus.
     * @param [properties] Properties to set
     */
    constructor(properties?: speech_common.IScoreStatus)

    /**
     * Creates a new ScoreStatus instance using the specified properties.
     * @param [properties] Properties to set
     * @returns ScoreStatus instance
     */
    public static create(
      properties?: speech_common.IScoreStatus,
    ): speech_common.ScoreStatus

    /**
     * Encodes the specified ScoreStatus message. Does not implicitly {@link speech_common.ScoreStatus.verify|verify} messages.
     * @param message ScoreStatus message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encode(
      message: speech_common.IScoreStatus,
      writer?: $protobuf.Writer,
    ): $protobuf.Writer

    /**
     * Encodes the specified ScoreStatus message, length delimited. Does not implicitly {@link speech_common.ScoreStatus.verify|verify} messages.
     * @param message ScoreStatus message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encodeDelimited(
      message: speech_common.IScoreStatus,
      writer?: $protobuf.Writer,
    ): $protobuf.Writer

    /**
     * Decodes a ScoreStatus message from the specified reader or buffer.
     * @param reader Reader or buffer to decode from
     * @param [length] Message length if known beforehand
     * @returns ScoreStatus
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decode(
      reader: $protobuf.Reader | Uint8Array,
      length?: number,
    ): speech_common.ScoreStatus

    /**
     * Decodes a ScoreStatus message from the specified reader or buffer, length delimited.
     * @param reader Reader or buffer to decode from
     * @returns ScoreStatus
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decodeDelimited(
      reader: $protobuf.Reader | Uint8Array,
    ): speech_common.ScoreStatus

    /**
     * Verifies a ScoreStatus message.
     * @param message Plain object to verify
     * @returns `null` if valid, otherwise the reason why it is not
     */
    public static verify(message: { [k: string]: any }): string | null

    /**
     * Creates a ScoreStatus message from a plain object. Also converts values to their respective internal types.
     * @param object Plain object
     * @returns ScoreStatus
     */
    public static fromObject(object: {
      [k: string]: any
    }): speech_common.ScoreStatus

    /**
     * Creates a plain object from a ScoreStatus message. Also converts values to other types if specified.
     * @param message ScoreStatus
     * @param [options] Conversion options
     * @returns Plain object
     */
    public static toObject(
      message: speech_common.ScoreStatus,
      options?: $protobuf.IConversionOptions,
    ): { [k: string]: any }

    /**
     * Converts this ScoreStatus to JSON.
     * @returns JSON object
     */
    public toJSON(): { [k: string]: any }
  }

  namespace ScoreStatus {
    /** Code enum. */
    enum Code {
      SUCCESS = 0,
      ERROR_UNKNOWN = 1,
      ERROR_REFTEXT_EMPTY = 2,
      ERROR_REFTEXT_WRONG_FORMAT = 3,
      ERROR_REFMODE_WORD_NOT_IN_DICT = 4,
      ERROR_REFMODE_EMPTY_COURSE_FILE = 5,
      ERROR_REFMODE_WRONG_COURSE_FILE = 6,
      ERROR_REFMODE_COURSE_MISMATCH = 7,
      ERROR_WORD_NOT_IN_DICT = 8,
      ERROR_WRONG_RESOURCE = 9,
      ERROR_DICT_WORD_PARSE = 10,
      ERROR_ONLINE_REFTEXT_WRONG_FORMAT = 11,
      ERROR_INVALID_WORD_INDEX = 12,
      ERROR_INIT_PHONE_SYMBOL = 13,
    }
  }
}

/** Namespace kion. */
export namespace kion {
  /** Properties of a ReadaloudOptions. */
  interface IReadaloudOptions {
    /** ReadaloudOptions useFlexibleNet */
    useFlexibleNet?: boolean | null

    /** ReadaloudOptions readaloudModelOpt */
    readaloudModelOpt?: kion.ReadaloudOptions.ReadaloudModelOption | null

    /** ReadaloudOptions prosodyOpts */
    prosodyOpts?: kion.ReadaloudOptions.IProsodyOptions | null
  }

  /** Represents a ReadaloudOptions. */
  class ReadaloudOptions implements IReadaloudOptions {
    /**
     * Constructs a new ReadaloudOptions.
     * @param [properties] Properties to set
     */
    constructor(properties?: kion.IReadaloudOptions)

    /** ReadaloudOptions useFlexibleNet. */
    public useFlexibleNet: boolean

    /** ReadaloudOptions readaloudModelOpt. */
    public readaloudModelOpt: kion.ReadaloudOptions.ReadaloudModelOption

    /** ReadaloudOptions prosodyOpts. */
    public prosodyOpts?: kion.ReadaloudOptions.IProsodyOptions | null

    /**
     * Creates a new ReadaloudOptions instance using the specified properties.
     * @param [properties] Properties to set
     * @returns ReadaloudOptions instance
     */
    public static create(
      properties?: kion.IReadaloudOptions,
    ): kion.ReadaloudOptions

    /**
     * Encodes the specified ReadaloudOptions message. Does not implicitly {@link kion.ReadaloudOptions.verify|verify} messages.
     * @param message ReadaloudOptions message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encode(
      message: kion.IReadaloudOptions,
      writer?: $protobuf.Writer,
    ): $protobuf.Writer

    /**
     * Encodes the specified ReadaloudOptions message, length delimited. Does not implicitly {@link kion.ReadaloudOptions.verify|verify} messages.
     * @param message ReadaloudOptions message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encodeDelimited(
      message: kion.IReadaloudOptions,
      writer?: $protobuf.Writer,
    ): $protobuf.Writer

    /**
     * Decodes a ReadaloudOptions message from the specified reader or buffer.
     * @param reader Reader or buffer to decode from
     * @param [length] Message length if known beforehand
     * @returns ReadaloudOptions
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decode(
      reader: $protobuf.Reader | Uint8Array,
      length?: number,
    ): kion.ReadaloudOptions

    /**
     * Decodes a ReadaloudOptions message from the specified reader or buffer, length delimited.
     * @param reader Reader or buffer to decode from
     * @returns ReadaloudOptions
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decodeDelimited(
      reader: $protobuf.Reader | Uint8Array,
    ): kion.ReadaloudOptions

    /**
     * Verifies a ReadaloudOptions message.
     * @param message Plain object to verify
     * @returns `null` if valid, otherwise the reason why it is not
     */
    public static verify(message: { [k: string]: any }): string | null

    /**
     * Creates a ReadaloudOptions message from a plain object. Also converts values to their respective internal types.
     * @param object Plain object
     * @returns ReadaloudOptions
     */
    public static fromObject(object: {
      [k: string]: any
    }): kion.ReadaloudOptions

    /**
     * Creates a plain object from a ReadaloudOptions message. Also converts values to other types if specified.
     * @param message ReadaloudOptions
     * @param [options] Conversion options
     * @returns Plain object
     */
    public static toObject(
      message: kion.ReadaloudOptions,
      options?: $protobuf.IConversionOptions,
    ): { [k: string]: any }

    /**
     * Converts this ReadaloudOptions to JSON.
     * @returns JSON object
     */
    public toJSON(): { [k: string]: any }
  }

  namespace ReadaloudOptions {
    /** ReadaloudModelOption enum. */
    enum ReadaloudModelOption {
      READALOUD_MODEL_UNKNOWN = 0,
      EN_US = 1,
      EN_GB = 2,
      EN_MIXED = 3,
    }

    /** Properties of a ProsodyOptions. */
    interface IProsodyOptions {
      /** ProsodyOptions detectSyllableStress */
      detectSyllableStress?: boolean | null

      /** ProsodyOptions detectLiason */
      detectLiason?: boolean | null
    }

    /** Represents a ProsodyOptions. */
    class ProsodyOptions implements IProsodyOptions {
      /**
       * Constructs a new ProsodyOptions.
       * @param [properties] Properties to set
       */
      constructor(properties?: kion.ReadaloudOptions.IProsodyOptions)

      /** ProsodyOptions detectSyllableStress. */
      public detectSyllableStress: boolean

      /** ProsodyOptions detectLiason. */
      public detectLiason: boolean

      /**
       * Creates a new ProsodyOptions instance using the specified properties.
       * @param [properties] Properties to set
       * @returns ProsodyOptions instance
       */
      public static create(
        properties?: kion.ReadaloudOptions.IProsodyOptions,
      ): kion.ReadaloudOptions.ProsodyOptions

      /**
       * Encodes the specified ProsodyOptions message. Does not implicitly {@link kion.ReadaloudOptions.ProsodyOptions.verify|verify} messages.
       * @param message ProsodyOptions message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encode(
        message: kion.ReadaloudOptions.IProsodyOptions,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Encodes the specified ProsodyOptions message, length delimited. Does not implicitly {@link kion.ReadaloudOptions.ProsodyOptions.verify|verify} messages.
       * @param message ProsodyOptions message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encodeDelimited(
        message: kion.ReadaloudOptions.IProsodyOptions,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Decodes a ProsodyOptions message from the specified reader or buffer.
       * @param reader Reader or buffer to decode from
       * @param [length] Message length if known beforehand
       * @returns ProsodyOptions
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decode(
        reader: $protobuf.Reader | Uint8Array,
        length?: number,
      ): kion.ReadaloudOptions.ProsodyOptions

      /**
       * Decodes a ProsodyOptions message from the specified reader or buffer, length delimited.
       * @param reader Reader or buffer to decode from
       * @returns ProsodyOptions
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decodeDelimited(
        reader: $protobuf.Reader | Uint8Array,
      ): kion.ReadaloudOptions.ProsodyOptions

      /**
       * Verifies a ProsodyOptions message.
       * @param message Plain object to verify
       * @returns `null` if valid, otherwise the reason why it is not
       */
      public static verify(message: { [k: string]: any }): string | null

      /**
       * Creates a ProsodyOptions message from a plain object. Also converts values to their respective internal types.
       * @param object Plain object
       * @returns ProsodyOptions
       */
      public static fromObject(object: {
        [k: string]: any
      }): kion.ReadaloudOptions.ProsodyOptions

      /**
       * Creates a plain object from a ProsodyOptions message. Also converts values to other types if specified.
       * @param message ProsodyOptions
       * @param [options] Conversion options
       * @returns Plain object
       */
      public static toObject(
        message: kion.ReadaloudOptions.ProsodyOptions,
        options?: $protobuf.IConversionOptions,
      ): { [k: string]: any }

      /**
       * Converts this ProsodyOptions to JSON.
       * @returns JSON object
       */
      public toJSON(): { [k: string]: any }
    }
  }

  /** Properties of a SemiopenOptions. */
  interface ISemiopenOptions {
    /** SemiopenOptions semiopenModelOpt */
    semiopenModelOpt?: kion.SemiopenOptions.SemiopenModelOption | null
  }

  /** Represents a SemiopenOptions. */
  class SemiopenOptions implements ISemiopenOptions {
    /**
     * Constructs a new SemiopenOptions.
     * @param [properties] Properties to set
     */
    constructor(properties?: kion.ISemiopenOptions)

    /** SemiopenOptions semiopenModelOpt. */
    public semiopenModelOpt: kion.SemiopenOptions.SemiopenModelOption

    /**
     * Creates a new SemiopenOptions instance using the specified properties.
     * @param [properties] Properties to set
     * @returns SemiopenOptions instance
     */
    public static create(
      properties?: kion.ISemiopenOptions,
    ): kion.SemiopenOptions

    /**
     * Encodes the specified SemiopenOptions message. Does not implicitly {@link kion.SemiopenOptions.verify|verify} messages.
     * @param message SemiopenOptions message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encode(
      message: kion.ISemiopenOptions,
      writer?: $protobuf.Writer,
    ): $protobuf.Writer

    /**
     * Encodes the specified SemiopenOptions message, length delimited. Does not implicitly {@link kion.SemiopenOptions.verify|verify} messages.
     * @param message SemiopenOptions message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encodeDelimited(
      message: kion.ISemiopenOptions,
      writer?: $protobuf.Writer,
    ): $protobuf.Writer

    /**
     * Decodes a SemiopenOptions message from the specified reader or buffer.
     * @param reader Reader or buffer to decode from
     * @param [length] Message length if known beforehand
     * @returns SemiopenOptions
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decode(
      reader: $protobuf.Reader | Uint8Array,
      length?: number,
    ): kion.SemiopenOptions

    /**
     * Decodes a SemiopenOptions message from the specified reader or buffer, length delimited.
     * @param reader Reader or buffer to decode from
     * @returns SemiopenOptions
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decodeDelimited(
      reader: $protobuf.Reader | Uint8Array,
    ): kion.SemiopenOptions

    /**
     * Verifies a SemiopenOptions message.
     * @param message Plain object to verify
     * @returns `null` if valid, otherwise the reason why it is not
     */
    public static verify(message: { [k: string]: any }): string | null

    /**
     * Creates a SemiopenOptions message from a plain object. Also converts values to their respective internal types.
     * @param object Plain object
     * @returns SemiopenOptions
     */
    public static fromObject(object: { [k: string]: any }): kion.SemiopenOptions

    /**
     * Creates a plain object from a SemiopenOptions message. Also converts values to other types if specified.
     * @param message SemiopenOptions
     * @param [options] Conversion options
     * @returns Plain object
     */
    public static toObject(
      message: kion.SemiopenOptions,
      options?: $protobuf.IConversionOptions,
    ): { [k: string]: any }

    /**
     * Converts this SemiopenOptions to JSON.
     * @returns JSON object
     */
    public toJSON(): { [k: string]: any }
  }

  namespace SemiopenOptions {
    /** SemiopenModelOption enum. */
    enum SemiopenModelOption {
      SEMIOPEN_MODEL_UNKNOWN = 0,
      NLP_ORALESSAY = 1,
      NLP_PICTURE_SPEAK = 2,
    }
  }

  /** Properties of a SemiopenNlpRequest. */
  interface ISemiopenNlpRequest {
    /** SemiopenNlpRequest requestId */
    requestId?: string | null

    /** SemiopenNlpRequest questionType */
    questionType?: kion.SemiopenNlpRequest.QuestionType | null

    /** SemiopenNlpRequest refScorePoints */
    refScorePoints?: kion.IReferenceAnswerWithScorePoints[] | null

    /** SemiopenNlpRequest semiopenFeaturesFromSpeech */
    semiopenFeaturesFromSpeech?: speech2nlp.IBaseSpeechAssessInfo | null
  }

  /** Represents a SemiopenNlpRequest. */
  class SemiopenNlpRequest implements ISemiopenNlpRequest {
    /**
     * Constructs a new SemiopenNlpRequest.
     * @param [properties] Properties to set
     */
    constructor(properties?: kion.ISemiopenNlpRequest)

    /** SemiopenNlpRequest requestId. */
    public requestId: string

    /** SemiopenNlpRequest questionType. */
    public questionType: kion.SemiopenNlpRequest.QuestionType

    /** SemiopenNlpRequest refScorePoints. */
    public refScorePoints: kion.IReferenceAnswerWithScorePoints[]

    /** SemiopenNlpRequest semiopenFeaturesFromSpeech. */
    public semiopenFeaturesFromSpeech?: speech2nlp.IBaseSpeechAssessInfo | null

    /**
     * Creates a new SemiopenNlpRequest instance using the specified properties.
     * @param [properties] Properties to set
     * @returns SemiopenNlpRequest instance
     */
    public static create(
      properties?: kion.ISemiopenNlpRequest,
    ): kion.SemiopenNlpRequest

    /**
     * Encodes the specified SemiopenNlpRequest message. Does not implicitly {@link kion.SemiopenNlpRequest.verify|verify} messages.
     * @param message SemiopenNlpRequest message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encode(
      message: kion.ISemiopenNlpRequest,
      writer?: $protobuf.Writer,
    ): $protobuf.Writer

    /**
     * Encodes the specified SemiopenNlpRequest message, length delimited. Does not implicitly {@link kion.SemiopenNlpRequest.verify|verify} messages.
     * @param message SemiopenNlpRequest message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encodeDelimited(
      message: kion.ISemiopenNlpRequest,
      writer?: $protobuf.Writer,
    ): $protobuf.Writer

    /**
     * Decodes a SemiopenNlpRequest message from the specified reader or buffer.
     * @param reader Reader or buffer to decode from
     * @param [length] Message length if known beforehand
     * @returns SemiopenNlpRequest
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decode(
      reader: $protobuf.Reader | Uint8Array,
      length?: number,
    ): kion.SemiopenNlpRequest

    /**
     * Decodes a SemiopenNlpRequest message from the specified reader or buffer, length delimited.
     * @param reader Reader or buffer to decode from
     * @returns SemiopenNlpRequest
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decodeDelimited(
      reader: $protobuf.Reader | Uint8Array,
    ): kion.SemiopenNlpRequest

    /**
     * Verifies a SemiopenNlpRequest message.
     * @param message Plain object to verify
     * @returns `null` if valid, otherwise the reason why it is not
     */
    public static verify(message: { [k: string]: any }): string | null

    /**
     * Creates a SemiopenNlpRequest message from a plain object. Also converts values to their respective internal types.
     * @param object Plain object
     * @returns SemiopenNlpRequest
     */
    public static fromObject(object: {
      [k: string]: any
    }): kion.SemiopenNlpRequest

    /**
     * Creates a plain object from a SemiopenNlpRequest message. Also converts values to other types if specified.
     * @param message SemiopenNlpRequest
     * @param [options] Conversion options
     * @returns Plain object
     */
    public static toObject(
      message: kion.SemiopenNlpRequest,
      options?: $protobuf.IConversionOptions,
    ): { [k: string]: any }

    /**
     * Converts this SemiopenNlpRequest to JSON.
     * @returns JSON object
     */
    public toJSON(): { [k: string]: any }
  }

  namespace SemiopenNlpRequest {
    /** QuestionType enum. */
    enum QuestionType {
      UNKNOWN = 0,
      ORALESSAY = 1,
    }
  }

  /** Properties of a ScoreMeta. */
  interface IScoreMeta {
    /** ScoreMeta type */
    type?: string | null

    /** ScoreMeta questionType */
    questionType?: number | null

    /** ScoreMeta targetAudience */
    targetAudience?: number | null

    /** ScoreMeta refAnswer */
    refAnswer?: string | null

    /** ScoreMeta requestId */
    requestId?: string | null

    /** ScoreMeta scorePoint */
    scorePoint?: string[] | null

    /** ScoreMeta refScorePoints */
    refScorePoints?: kion.IReferenceAnswerWithScorePoints[] | null

    /** ScoreMeta richText */
    richText?: string | null

    /** ScoreMeta incorrectAnsHitRule */
    incorrectAnsHitRule?: kion.ScoreMeta.SemiopenIncorrectAnsHitRule | null

    /** ScoreMeta readaloudOpt */
    readaloudOpt?: kion.IReadaloudOptions | null

    /** ScoreMeta semiopenOpt */
    semiopenOpt?: kion.ISemiopenOptions | null
  }

  /** Represents a ScoreMeta. */
  class ScoreMeta implements IScoreMeta {
    /**
     * Constructs a new ScoreMeta.
     * @param [properties] Properties to set
     */
    constructor(properties?: kion.IScoreMeta)

    /** ScoreMeta type. */
    public type: string

    /** ScoreMeta questionType. */
    public questionType: number

    /** ScoreMeta targetAudience. */
    public targetAudience: number

    /** ScoreMeta refAnswer. */
    public refAnswer: string

    /** ScoreMeta requestId. */
    public requestId: string

    /** ScoreMeta scorePoint. */
    public scorePoint: string[]

    /** ScoreMeta refScorePoints. */
    public refScorePoints: kion.IReferenceAnswerWithScorePoints[]

    /** ScoreMeta richText. */
    public richText: string

    /** ScoreMeta incorrectAnsHitRule. */
    public incorrectAnsHitRule: kion.ScoreMeta.SemiopenIncorrectAnsHitRule

    /** ScoreMeta readaloudOpt. */
    public readaloudOpt?: kion.IReadaloudOptions | null

    /** ScoreMeta semiopenOpt. */
    public semiopenOpt?: kion.ISemiopenOptions | null

    /**
     * Creates a new ScoreMeta instance using the specified properties.
     * @param [properties] Properties to set
     * @returns ScoreMeta instance
     */
    public static create(properties?: kion.IScoreMeta): kion.ScoreMeta

    /**
     * Encodes the specified ScoreMeta message. Does not implicitly {@link kion.ScoreMeta.verify|verify} messages.
     * @param message ScoreMeta message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encode(
      message: kion.IScoreMeta,
      writer?: $protobuf.Writer,
    ): $protobuf.Writer

    /**
     * Encodes the specified ScoreMeta message, length delimited. Does not implicitly {@link kion.ScoreMeta.verify|verify} messages.
     * @param message ScoreMeta message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encodeDelimited(
      message: kion.IScoreMeta,
      writer?: $protobuf.Writer,
    ): $protobuf.Writer

    /**
     * Decodes a ScoreMeta message from the specified reader or buffer.
     * @param reader Reader or buffer to decode from
     * @param [length] Message length if known beforehand
     * @returns ScoreMeta
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decode(
      reader: $protobuf.Reader | Uint8Array,
      length?: number,
    ): kion.ScoreMeta

    /**
     * Decodes a ScoreMeta message from the specified reader or buffer, length delimited.
     * @param reader Reader or buffer to decode from
     * @returns ScoreMeta
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decodeDelimited(
      reader: $protobuf.Reader | Uint8Array,
    ): kion.ScoreMeta

    /**
     * Verifies a ScoreMeta message.
     * @param message Plain object to verify
     * @returns `null` if valid, otherwise the reason why it is not
     */
    public static verify(message: { [k: string]: any }): string | null

    /**
     * Creates a ScoreMeta message from a plain object. Also converts values to their respective internal types.
     * @param object Plain object
     * @returns ScoreMeta
     */
    public static fromObject(object: { [k: string]: any }): kion.ScoreMeta

    /**
     * Creates a plain object from a ScoreMeta message. Also converts values to other types if specified.
     * @param message ScoreMeta
     * @param [options] Conversion options
     * @returns Plain object
     */
    public static toObject(
      message: kion.ScoreMeta,
      options?: $protobuf.IConversionOptions,
    ): { [k: string]: any }

    /**
     * Converts this ScoreMeta to JSON.
     * @returns JSON object
     */
    public toJSON(): { [k: string]: any }
  }

  namespace ScoreMeta {
    /** SemiopenIncorrectAnsHitRule enum. */
    enum SemiopenIncorrectAnsHitRule {
      UNKNOWN = 0,
      COMPLETE_MATCH = 1,
      KEYWORDS_INCLUDE = 2,
    }
  }

  /** Properties of a Score. */
  interface IScore {
    /** Score readaloudScore */
    readaloudScore?: readaloud.IScore | null

    /** Score semiopenScore */
    semiopenScore?: kion.ISemiOpenScore | null

    /** Score status */
    status?: speech_common.ScoreStatus.Code | null
  }

  /** Represents a Score. */
  class Score implements IScore {
    /**
     * Constructs a new Score.
     * @param [properties] Properties to set
     */
    constructor(properties?: kion.IScore)

    /** Score readaloudScore. */
    public readaloudScore?: readaloud.IScore | null

    /** Score semiopenScore. */
    public semiopenScore?: kion.ISemiOpenScore | null

    /** Score status. */
    public status: speech_common.ScoreStatus.Code

    /**
     * Creates a new Score instance using the specified properties.
     * @param [properties] Properties to set
     * @returns Score instance
     */
    public static create(properties?: kion.IScore): kion.Score

    /**
     * Encodes the specified Score message. Does not implicitly {@link kion.Score.verify|verify} messages.
     * @param message Score message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encode(
      message: kion.IScore,
      writer?: $protobuf.Writer,
    ): $protobuf.Writer

    /**
     * Encodes the specified Score message, length delimited. Does not implicitly {@link kion.Score.verify|verify} messages.
     * @param message Score message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encodeDelimited(
      message: kion.IScore,
      writer?: $protobuf.Writer,
    ): $protobuf.Writer

    /**
     * Decodes a Score message from the specified reader or buffer.
     * @param reader Reader or buffer to decode from
     * @param [length] Message length if known beforehand
     * @returns Score
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decode(
      reader: $protobuf.Reader | Uint8Array,
      length?: number,
    ): kion.Score

    /**
     * Decodes a Score message from the specified reader or buffer, length delimited.
     * @param reader Reader or buffer to decode from
     * @returns Score
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decodeDelimited(
      reader: $protobuf.Reader | Uint8Array,
    ): kion.Score

    /**
     * Verifies a Score message.
     * @param message Plain object to verify
     * @returns `null` if valid, otherwise the reason why it is not
     */
    public static verify(message: { [k: string]: any }): string | null

    /**
     * Creates a Score message from a plain object. Also converts values to their respective internal types.
     * @param object Plain object
     * @returns Score
     */
    public static fromObject(object: { [k: string]: any }): kion.Score

    /**
     * Creates a plain object from a Score message. Also converts values to other types if specified.
     * @param message Score
     * @param [options] Conversion options
     * @returns Plain object
     */
    public static toObject(
      message: kion.Score,
      options?: $protobuf.IConversionOptions,
    ): { [k: string]: any }

    /**
     * Converts this Score to JSON.
     * @returns JSON object
     */
    public toJSON(): { [k: string]: any }
  }

  /** Properties of a ReferenceAnswerWithScorePoints. */
  interface IReferenceAnswerWithScorePoints {
    /** ReferenceAnswerWithScorePoints refText */
    refText?: string | null

    /** ReferenceAnswerWithScorePoints scorePoints */
    scorePoints?: kion.ReferenceAnswerWithScorePoints.IScorePoint[] | null

    /** ReferenceAnswerWithScorePoints isCorrect */
    isCorrect?: boolean | null
  }

  /** Represents a ReferenceAnswerWithScorePoints. */
  class ReferenceAnswerWithScorePoints
    implements IReferenceAnswerWithScorePoints {
    /**
     * Constructs a new ReferenceAnswerWithScorePoints.
     * @param [properties] Properties to set
     */
    constructor(properties?: kion.IReferenceAnswerWithScorePoints)

    /** ReferenceAnswerWithScorePoints refText. */
    public refText: string

    /** ReferenceAnswerWithScorePoints scorePoints. */
    public scorePoints: kion.ReferenceAnswerWithScorePoints.IScorePoint[]

    /** ReferenceAnswerWithScorePoints isCorrect. */
    public isCorrect: boolean

    /**
     * Creates a new ReferenceAnswerWithScorePoints instance using the specified properties.
     * @param [properties] Properties to set
     * @returns ReferenceAnswerWithScorePoints instance
     */
    public static create(
      properties?: kion.IReferenceAnswerWithScorePoints,
    ): kion.ReferenceAnswerWithScorePoints

    /**
     * Encodes the specified ReferenceAnswerWithScorePoints message. Does not implicitly {@link kion.ReferenceAnswerWithScorePoints.verify|verify} messages.
     * @param message ReferenceAnswerWithScorePoints message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encode(
      message: kion.IReferenceAnswerWithScorePoints,
      writer?: $protobuf.Writer,
    ): $protobuf.Writer

    /**
     * Encodes the specified ReferenceAnswerWithScorePoints message, length delimited. Does not implicitly {@link kion.ReferenceAnswerWithScorePoints.verify|verify} messages.
     * @param message ReferenceAnswerWithScorePoints message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encodeDelimited(
      message: kion.IReferenceAnswerWithScorePoints,
      writer?: $protobuf.Writer,
    ): $protobuf.Writer

    /**
     * Decodes a ReferenceAnswerWithScorePoints message from the specified reader or buffer.
     * @param reader Reader or buffer to decode from
     * @param [length] Message length if known beforehand
     * @returns ReferenceAnswerWithScorePoints
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decode(
      reader: $protobuf.Reader | Uint8Array,
      length?: number,
    ): kion.ReferenceAnswerWithScorePoints

    /**
     * Decodes a ReferenceAnswerWithScorePoints message from the specified reader or buffer, length delimited.
     * @param reader Reader or buffer to decode from
     * @returns ReferenceAnswerWithScorePoints
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decodeDelimited(
      reader: $protobuf.Reader | Uint8Array,
    ): kion.ReferenceAnswerWithScorePoints

    /**
     * Verifies a ReferenceAnswerWithScorePoints message.
     * @param message Plain object to verify
     * @returns `null` if valid, otherwise the reason why it is not
     */
    public static verify(message: { [k: string]: any }): string | null

    /**
     * Creates a ReferenceAnswerWithScorePoints message from a plain object. Also converts values to their respective internal types.
     * @param object Plain object
     * @returns ReferenceAnswerWithScorePoints
     */
    public static fromObject(object: {
      [k: string]: any
    }): kion.ReferenceAnswerWithScorePoints

    /**
     * Creates a plain object from a ReferenceAnswerWithScorePoints message. Also converts values to other types if specified.
     * @param message ReferenceAnswerWithScorePoints
     * @param [options] Conversion options
     * @returns Plain object
     */
    public static toObject(
      message: kion.ReferenceAnswerWithScorePoints,
      options?: $protobuf.IConversionOptions,
    ): { [k: string]: any }

    /**
     * Converts this ReferenceAnswerWithScorePoints to JSON.
     * @returns JSON object
     */
    public toJSON(): { [k: string]: any }
  }

  namespace ReferenceAnswerWithScorePoints {
    /** Properties of a ScorePoint. */
    interface IScorePoint {
      /** ScorePoint keyWords */
      keyWords?: string[] | null
    }

    /** Represents a ScorePoint. */
    class ScorePoint implements IScorePoint {
      /**
       * Constructs a new ScorePoint.
       * @param [properties] Properties to set
       */
      constructor(properties?: kion.ReferenceAnswerWithScorePoints.IScorePoint)

      /** ScorePoint keyWords. */
      public keyWords: string[]

      /**
       * Creates a new ScorePoint instance using the specified properties.
       * @param [properties] Properties to set
       * @returns ScorePoint instance
       */
      public static create(
        properties?: kion.ReferenceAnswerWithScorePoints.IScorePoint,
      ): kion.ReferenceAnswerWithScorePoints.ScorePoint

      /**
       * Encodes the specified ScorePoint message. Does not implicitly {@link kion.ReferenceAnswerWithScorePoints.ScorePoint.verify|verify} messages.
       * @param message ScorePoint message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encode(
        message: kion.ReferenceAnswerWithScorePoints.IScorePoint,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Encodes the specified ScorePoint message, length delimited. Does not implicitly {@link kion.ReferenceAnswerWithScorePoints.ScorePoint.verify|verify} messages.
       * @param message ScorePoint message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encodeDelimited(
        message: kion.ReferenceAnswerWithScorePoints.IScorePoint,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Decodes a ScorePoint message from the specified reader or buffer.
       * @param reader Reader or buffer to decode from
       * @param [length] Message length if known beforehand
       * @returns ScorePoint
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decode(
        reader: $protobuf.Reader | Uint8Array,
        length?: number,
      ): kion.ReferenceAnswerWithScorePoints.ScorePoint

      /**
       * Decodes a ScorePoint message from the specified reader or buffer, length delimited.
       * @param reader Reader or buffer to decode from
       * @returns ScorePoint
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decodeDelimited(
        reader: $protobuf.Reader | Uint8Array,
      ): kion.ReferenceAnswerWithScorePoints.ScorePoint

      /**
       * Verifies a ScorePoint message.
       * @param message Plain object to verify
       * @returns `null` if valid, otherwise the reason why it is not
       */
      public static verify(message: { [k: string]: any }): string | null

      /**
       * Creates a ScorePoint message from a plain object. Also converts values to their respective internal types.
       * @param object Plain object
       * @returns ScorePoint
       */
      public static fromObject(object: {
        [k: string]: any
      }): kion.ReferenceAnswerWithScorePoints.ScorePoint

      /**
       * Creates a plain object from a ScorePoint message. Also converts values to other types if specified.
       * @param message ScorePoint
       * @param [options] Conversion options
       * @returns Plain object
       */
      public static toObject(
        message: kion.ReferenceAnswerWithScorePoints.ScorePoint,
        options?: $protobuf.IConversionOptions,
      ): { [k: string]: any }

      /**
       * Converts this ScorePoint to JSON.
       * @returns JSON object
       */
      public toJSON(): { [k: string]: any }
    }
  }

  /** Properties of a SemiOpenScore. */
  interface ISemiOpenScore {
    /** SemiOpenScore overall */
    overall?: number | null

    /** SemiOpenScore pronunciation */
    pronunciation?: number | null

    /** SemiOpenScore fluency */
    fluency?: number | null

    /** SemiOpenScore integrity */
    integrity?: number | null

    /** SemiOpenScore wordScore */
    wordScore?: number[] | null
  }

  /** Represents a SemiOpenScore. */
  class SemiOpenScore implements ISemiOpenScore {
    /**
     * Constructs a new SemiOpenScore.
     * @param [properties] Properties to set
     */
    constructor(properties?: kion.ISemiOpenScore)

    /** SemiOpenScore overall. */
    public overall: number

    /** SemiOpenScore pronunciation. */
    public pronunciation: number

    /** SemiOpenScore fluency. */
    public fluency: number

    /** SemiOpenScore integrity. */
    public integrity: number

    /** SemiOpenScore wordScore. */
    public wordScore: number[]

    /**
     * Creates a new SemiOpenScore instance using the specified properties.
     * @param [properties] Properties to set
     * @returns SemiOpenScore instance
     */
    public static create(properties?: kion.ISemiOpenScore): kion.SemiOpenScore

    /**
     * Encodes the specified SemiOpenScore message. Does not implicitly {@link kion.SemiOpenScore.verify|verify} messages.
     * @param message SemiOpenScore message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encode(
      message: kion.ISemiOpenScore,
      writer?: $protobuf.Writer,
    ): $protobuf.Writer

    /**
     * Encodes the specified SemiOpenScore message, length delimited. Does not implicitly {@link kion.SemiOpenScore.verify|verify} messages.
     * @param message SemiOpenScore message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encodeDelimited(
      message: kion.ISemiOpenScore,
      writer?: $protobuf.Writer,
    ): $protobuf.Writer

    /**
     * Decodes a SemiOpenScore message from the specified reader or buffer.
     * @param reader Reader or buffer to decode from
     * @param [length] Message length if known beforehand
     * @returns SemiOpenScore
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decode(
      reader: $protobuf.Reader | Uint8Array,
      length?: number,
    ): kion.SemiOpenScore

    /**
     * Decodes a SemiOpenScore message from the specified reader or buffer, length delimited.
     * @param reader Reader or buffer to decode from
     * @returns SemiOpenScore
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decodeDelimited(
      reader: $protobuf.Reader | Uint8Array,
    ): kion.SemiOpenScore

    /**
     * Verifies a SemiOpenScore message.
     * @param message Plain object to verify
     * @returns `null` if valid, otherwise the reason why it is not
     */
    public static verify(message: { [k: string]: any }): string | null

    /**
     * Creates a SemiOpenScore message from a plain object. Also converts values to their respective internal types.
     * @param object Plain object
     * @returns SemiOpenScore
     */
    public static fromObject(object: { [k: string]: any }): kion.SemiOpenScore

    /**
     * Creates a plain object from a SemiOpenScore message. Also converts values to other types if specified.
     * @param message SemiOpenScore
     * @param [options] Conversion options
     * @returns Plain object
     */
    public static toObject(
      message: kion.SemiOpenScore,
      options?: $protobuf.IConversionOptions,
    ): { [k: string]: any }

    /**
     * Converts this SemiOpenScore to JSON.
     * @returns JSON object
     */
    public toJSON(): { [k: string]: any }
  }
}

/** Namespace readaloud. */
export namespace readaloud {
  /** Properties of a Score. */
  interface IScore {
    /** Score startTimestampMilli */
    startTimestampMilli?: number | Long | null

    /** Score endTimestampMilli */
    endTimestampMilli?: number | Long | null

    /** Score startPosition */
    startPosition?: number | null

    /** Score endPosition */
    endPosition?: number | null

    /** Score granularity */
    granularity?: readaloud.Score.Granularity | null

    /** Score aspect */
    aspect?: readaloud.IAspect[] | null

    /** Score subScore */
    subScore?: readaloud.IScore[] | null

    /** Score content */
    content?: string | null

    /** Score status */
    status?: speech_common.ScoreStatus.Code | null

    /** Score bellKps */
    bellKps?: lq.atlas.IRetrievedBellKnowledgePoint[] | null

    /** Score ipaContent */
    ipaContent?: string | null

    /** Score version */
    version?: string | null
  }

  /** Represents a Score. */
  class Score implements IScore {
    /**
     * Constructs a new Score.
     * @param [properties] Properties to set
     */
    constructor(properties?: readaloud.IScore)

    /** Score startTimestampMilli. */
    public startTimestampMilli: number | Long

    /** Score endTimestampMilli. */
    public endTimestampMilli: number | Long

    /** Score startPosition. */
    public startPosition: number

    /** Score endPosition. */
    public endPosition: number

    /** Score granularity. */
    public granularity: readaloud.Score.Granularity

    /** Score aspect. */
    public aspect: readaloud.IAspect[]

    /** Score subScore. */
    public subScore: readaloud.IScore[]

    /** Score content. */
    public content: string

    /** Score status. */
    public status: speech_common.ScoreStatus.Code

    /** Score bellKps. */
    public bellKps: lq.atlas.IRetrievedBellKnowledgePoint[]

    /** Score ipaContent. */
    public ipaContent: string

    /** Score version. */
    public version: string

    /**
     * Creates a new Score instance using the specified properties.
     * @param [properties] Properties to set
     * @returns Score instance
     */
    public static create(properties?: readaloud.IScore): readaloud.Score

    /**
     * Encodes the specified Score message. Does not implicitly {@link readaloud.Score.verify|verify} messages.
     * @param message Score message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encode(
      message: readaloud.IScore,
      writer?: $protobuf.Writer,
    ): $protobuf.Writer

    /**
     * Encodes the specified Score message, length delimited. Does not implicitly {@link readaloud.Score.verify|verify} messages.
     * @param message Score message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encodeDelimited(
      message: readaloud.IScore,
      writer?: $protobuf.Writer,
    ): $protobuf.Writer

    /**
     * Decodes a Score message from the specified reader or buffer.
     * @param reader Reader or buffer to decode from
     * @param [length] Message length if known beforehand
     * @returns Score
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decode(
      reader: $protobuf.Reader | Uint8Array,
      length?: number,
    ): readaloud.Score

    /**
     * Decodes a Score message from the specified reader or buffer, length delimited.
     * @param reader Reader or buffer to decode from
     * @returns Score
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decodeDelimited(
      reader: $protobuf.Reader | Uint8Array,
    ): readaloud.Score

    /**
     * Verifies a Score message.
     * @param message Plain object to verify
     * @returns `null` if valid, otherwise the reason why it is not
     */
    public static verify(message: { [k: string]: any }): string | null

    /**
     * Creates a Score message from a plain object. Also converts values to their respective internal types.
     * @param object Plain object
     * @returns Score
     */
    public static fromObject(object: { [k: string]: any }): readaloud.Score

    /**
     * Creates a plain object from a Score message. Also converts values to other types if specified.
     * @param message Score
     * @param [options] Conversion options
     * @returns Plain object
     */
    public static toObject(
      message: readaloud.Score,
      options?: $protobuf.IConversionOptions,
    ): { [k: string]: any }

    /**
     * Converts this Score to JSON.
     * @returns JSON object
     */
    public toJSON(): { [k: string]: any }
  }

  namespace Score {
    /** Granularity enum. */
    enum Granularity {
      INVALID = 0,
      SENTENCE = 1,
      WORD = 2,
      SYLLABLE = 3,
      PHONEME = 4,
    }
  }

  /** Properties of an Aspect. */
  interface IAspect {
    /** Aspect name */
    name?: readaloud.Aspect.Name | null

    /** Aspect score */
    score?: number | null

    /** Aspect endIntonation */
    endIntonation?: readaloud.IEndIntonation | null

    /** Aspect wordStress */
    wordStress?: readaloud.IWordStress | null

    /** Aspect liaison */
    liaison?: readaloud.ILiaison | null

    /** Aspect emphasis */
    emphasis?: readaloud.IEmphasis | null

    /** Aspect mispronun */
    mispronun?: speech_assess.IMispronunciation | null
  }

  /** Represents an Aspect. */
  class Aspect implements IAspect {
    /**
     * Constructs a new Aspect.
     * @param [properties] Properties to set
     */
    constructor(properties?: readaloud.IAspect)

    /** Aspect name. */
    public name: readaloud.Aspect.Name

    /** Aspect score. */
    public score: number

    /** Aspect endIntonation. */
    public endIntonation?: readaloud.IEndIntonation | null

    /** Aspect wordStress. */
    public wordStress?: readaloud.IWordStress | null

    /** Aspect liaison. */
    public liaison?: readaloud.ILiaison | null

    /** Aspect emphasis. */
    public emphasis?: readaloud.IEmphasis | null

    /** Aspect mispronun. */
    public mispronun?: speech_assess.IMispronunciation | null

    /**
     * Creates a new Aspect instance using the specified properties.
     * @param [properties] Properties to set
     * @returns Aspect instance
     */
    public static create(properties?: readaloud.IAspect): readaloud.Aspect

    /**
     * Encodes the specified Aspect message. Does not implicitly {@link readaloud.Aspect.verify|verify} messages.
     * @param message Aspect message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encode(
      message: readaloud.IAspect,
      writer?: $protobuf.Writer,
    ): $protobuf.Writer

    /**
     * Encodes the specified Aspect message, length delimited. Does not implicitly {@link readaloud.Aspect.verify|verify} messages.
     * @param message Aspect message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encodeDelimited(
      message: readaloud.IAspect,
      writer?: $protobuf.Writer,
    ): $protobuf.Writer

    /**
     * Decodes an Aspect message from the specified reader or buffer.
     * @param reader Reader or buffer to decode from
     * @param [length] Message length if known beforehand
     * @returns Aspect
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decode(
      reader: $protobuf.Reader | Uint8Array,
      length?: number,
    ): readaloud.Aspect

    /**
     * Decodes an Aspect message from the specified reader or buffer, length delimited.
     * @param reader Reader or buffer to decode from
     * @returns Aspect
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decodeDelimited(
      reader: $protobuf.Reader | Uint8Array,
    ): readaloud.Aspect

    /**
     * Verifies an Aspect message.
     * @param message Plain object to verify
     * @returns `null` if valid, otherwise the reason why it is not
     */
    public static verify(message: { [k: string]: any }): string | null

    /**
     * Creates an Aspect message from a plain object. Also converts values to their respective internal types.
     * @param object Plain object
     * @returns Aspect
     */
    public static fromObject(object: { [k: string]: any }): readaloud.Aspect

    /**
     * Creates a plain object from an Aspect message. Also converts values to other types if specified.
     * @param message Aspect
     * @param [options] Conversion options
     * @returns Plain object
     */
    public static toObject(
      message: readaloud.Aspect,
      options?: $protobuf.IConversionOptions,
    ): { [k: string]: any }

    /**
     * Converts this Aspect to JSON.
     * @returns JSON object
     */
    public toJSON(): { [k: string]: any }
  }

  namespace Aspect {
    /** Name enum. */
    enum Name {
      INVALID = 0,
      GENERAL = 1,
      INTEGRITY = 2,
      FLUENCY = 3,
      VOWEL = 4,
      CONSONANT = 5,
      TEMPO = 6,
      INTONATION = 7,
      STRESS = 8,
      TONAL = 9,
      SPARKS = 10,
      LIAISON = 11,
      PRONUNCIATION = 12,
      EMPHASIS = 13,
      MISPRONUN = 14,
      NONSCORABLE = 15,
    }
  }

  /** Properties of an EndIntonation. */
  interface IEndIntonation {
    /** EndIntonation type */
    type?: readaloud.EndIntonation.Type | null

    /** EndIntonation refType */
    refType?: readaloud.EndIntonation.Type | null
  }

  /** Represents an EndIntonation. */
  class EndIntonation implements IEndIntonation {
    /**
     * Constructs a new EndIntonation.
     * @param [properties] Properties to set
     */
    constructor(properties?: readaloud.IEndIntonation)

    /** EndIntonation type. */
    public type: readaloud.EndIntonation.Type

    /** EndIntonation refType. */
    public refType: readaloud.EndIntonation.Type

    /**
     * Creates a new EndIntonation instance using the specified properties.
     * @param [properties] Properties to set
     * @returns EndIntonation instance
     */
    public static create(
      properties?: readaloud.IEndIntonation,
    ): readaloud.EndIntonation

    /**
     * Encodes the specified EndIntonation message. Does not implicitly {@link readaloud.EndIntonation.verify|verify} messages.
     * @param message EndIntonation message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encode(
      message: readaloud.IEndIntonation,
      writer?: $protobuf.Writer,
    ): $protobuf.Writer

    /**
     * Encodes the specified EndIntonation message, length delimited. Does not implicitly {@link readaloud.EndIntonation.verify|verify} messages.
     * @param message EndIntonation message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encodeDelimited(
      message: readaloud.IEndIntonation,
      writer?: $protobuf.Writer,
    ): $protobuf.Writer

    /**
     * Decodes an EndIntonation message from the specified reader or buffer.
     * @param reader Reader or buffer to decode from
     * @param [length] Message length if known beforehand
     * @returns EndIntonation
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decode(
      reader: $protobuf.Reader | Uint8Array,
      length?: number,
    ): readaloud.EndIntonation

    /**
     * Decodes an EndIntonation message from the specified reader or buffer, length delimited.
     * @param reader Reader or buffer to decode from
     * @returns EndIntonation
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decodeDelimited(
      reader: $protobuf.Reader | Uint8Array,
    ): readaloud.EndIntonation

    /**
     * Verifies an EndIntonation message.
     * @param message Plain object to verify
     * @returns `null` if valid, otherwise the reason why it is not
     */
    public static verify(message: { [k: string]: any }): string | null

    /**
     * Creates an EndIntonation message from a plain object. Also converts values to their respective internal types.
     * @param object Plain object
     * @returns EndIntonation
     */
    public static fromObject(object: {
      [k: string]: any
    }): readaloud.EndIntonation

    /**
     * Creates a plain object from an EndIntonation message. Also converts values to other types if specified.
     * @param message EndIntonation
     * @param [options] Conversion options
     * @returns Plain object
     */
    public static toObject(
      message: readaloud.EndIntonation,
      options?: $protobuf.IConversionOptions,
    ): { [k: string]: any }

    /**
     * Converts this EndIntonation to JSON.
     * @returns JSON object
     */
    public toJSON(): { [k: string]: any }
  }

  namespace EndIntonation {
    /** Type enum. */
    enum Type {
      INVALID = 0,
      END_RISING = 1,
      END_FALLING = 2,
      REF_NONE = 3,
    }
  }

  /** Properties of a WordStress. */
  interface IWordStress {
    /** WordStress reference */
    reference?: number | null

    /** WordStress predicted */
    predicted?: number | null
  }

  /** Represents a WordStress. */
  class WordStress implements IWordStress {
    /**
     * Constructs a new WordStress.
     * @param [properties] Properties to set
     */
    constructor(properties?: readaloud.IWordStress)

    /** WordStress reference. */
    public reference: number

    /** WordStress predicted. */
    public predicted: number

    /**
     * Creates a new WordStress instance using the specified properties.
     * @param [properties] Properties to set
     * @returns WordStress instance
     */
    public static create(
      properties?: readaloud.IWordStress,
    ): readaloud.WordStress

    /**
     * Encodes the specified WordStress message. Does not implicitly {@link readaloud.WordStress.verify|verify} messages.
     * @param message WordStress message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encode(
      message: readaloud.IWordStress,
      writer?: $protobuf.Writer,
    ): $protobuf.Writer

    /**
     * Encodes the specified WordStress message, length delimited. Does not implicitly {@link readaloud.WordStress.verify|verify} messages.
     * @param message WordStress message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encodeDelimited(
      message: readaloud.IWordStress,
      writer?: $protobuf.Writer,
    ): $protobuf.Writer

    /**
     * Decodes a WordStress message from the specified reader or buffer.
     * @param reader Reader or buffer to decode from
     * @param [length] Message length if known beforehand
     * @returns WordStress
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decode(
      reader: $protobuf.Reader | Uint8Array,
      length?: number,
    ): readaloud.WordStress

    /**
     * Decodes a WordStress message from the specified reader or buffer, length delimited.
     * @param reader Reader or buffer to decode from
     * @returns WordStress
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decodeDelimited(
      reader: $protobuf.Reader | Uint8Array,
    ): readaloud.WordStress

    /**
     * Verifies a WordStress message.
     * @param message Plain object to verify
     * @returns `null` if valid, otherwise the reason why it is not
     */
    public static verify(message: { [k: string]: any }): string | null

    /**
     * Creates a WordStress message from a plain object. Also converts values to their respective internal types.
     * @param object Plain object
     * @returns WordStress
     */
    public static fromObject(object: { [k: string]: any }): readaloud.WordStress

    /**
     * Creates a plain object from a WordStress message. Also converts values to other types if specified.
     * @param message WordStress
     * @param [options] Conversion options
     * @returns Plain object
     */
    public static toObject(
      message: readaloud.WordStress,
      options?: $protobuf.IConversionOptions,
    ): { [k: string]: any }

    /**
     * Converts this WordStress to JSON.
     * @returns JSON object
     */
    public toJSON(): { [k: string]: any }
  }

  /** Properties of a Liaison. */
  interface ILiaison {
    /** Liaison type */
    type?: readaloud.Liaison.Type | null

    /** Liaison phones */
    phones?: string | null
  }

  /** Represents a Liaison. */
  class Liaison implements ILiaison {
    /**
     * Constructs a new Liaison.
     * @param [properties] Properties to set
     */
    constructor(properties?: readaloud.ILiaison)

    /** Liaison type. */
    public type: readaloud.Liaison.Type

    /** Liaison phones. */
    public phones: string

    /**
     * Creates a new Liaison instance using the specified properties.
     * @param [properties] Properties to set
     * @returns Liaison instance
     */
    public static create(properties?: readaloud.ILiaison): readaloud.Liaison

    /**
     * Encodes the specified Liaison message. Does not implicitly {@link readaloud.Liaison.verify|verify} messages.
     * @param message Liaison message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encode(
      message: readaloud.ILiaison,
      writer?: $protobuf.Writer,
    ): $protobuf.Writer

    /**
     * Encodes the specified Liaison message, length delimited. Does not implicitly {@link readaloud.Liaison.verify|verify} messages.
     * @param message Liaison message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encodeDelimited(
      message: readaloud.ILiaison,
      writer?: $protobuf.Writer,
    ): $protobuf.Writer

    /**
     * Decodes a Liaison message from the specified reader or buffer.
     * @param reader Reader or buffer to decode from
     * @param [length] Message length if known beforehand
     * @returns Liaison
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decode(
      reader: $protobuf.Reader | Uint8Array,
      length?: number,
    ): readaloud.Liaison

    /**
     * Decodes a Liaison message from the specified reader or buffer, length delimited.
     * @param reader Reader or buffer to decode from
     * @returns Liaison
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decodeDelimited(
      reader: $protobuf.Reader | Uint8Array,
    ): readaloud.Liaison

    /**
     * Verifies a Liaison message.
     * @param message Plain object to verify
     * @returns `null` if valid, otherwise the reason why it is not
     */
    public static verify(message: { [k: string]: any }): string | null

    /**
     * Creates a Liaison message from a plain object. Also converts values to their respective internal types.
     * @param object Plain object
     * @returns Liaison
     */
    public static fromObject(object: { [k: string]: any }): readaloud.Liaison

    /**
     * Creates a plain object from a Liaison message. Also converts values to other types if specified.
     * @param message Liaison
     * @param [options] Conversion options
     * @returns Plain object
     */
    public static toObject(
      message: readaloud.Liaison,
      options?: $protobuf.IConversionOptions,
    ): { [k: string]: any }

    /**
     * Converts this Liaison to JSON.
     * @returns JSON object
     */
    public toJSON(): { [k: string]: any }
  }

  namespace Liaison {
    /** Type enum. */
    enum Type {
      INVALID = 0,
      CONSO_VOWEL = 1,
      D2JH = 2,
      T2CH = 3,
      S2SH = 4,
      Z2ZH = 5,
      LOST_PLOSION = 6,
      CONSO_CONSO = 7,
      VOWEL_VOWEL = 8,
      Reduce_Pronouns = 9,
    }
  }

  /** Properties of an Emphasis. */
  interface IEmphasis {
    /** Emphasis errType */
    errType?: readaloud.Emphasis.ErrType | null
  }

  /** Represents an Emphasis. */
  class Emphasis implements IEmphasis {
    /**
     * Constructs a new Emphasis.
     * @param [properties] Properties to set
     */
    constructor(properties?: readaloud.IEmphasis)

    /** Emphasis errType. */
    public errType: readaloud.Emphasis.ErrType

    /**
     * Creates a new Emphasis instance using the specified properties.
     * @param [properties] Properties to set
     * @returns Emphasis instance
     */
    public static create(properties?: readaloud.IEmphasis): readaloud.Emphasis

    /**
     * Encodes the specified Emphasis message. Does not implicitly {@link readaloud.Emphasis.verify|verify} messages.
     * @param message Emphasis message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encode(
      message: readaloud.IEmphasis,
      writer?: $protobuf.Writer,
    ): $protobuf.Writer

    /**
     * Encodes the specified Emphasis message, length delimited. Does not implicitly {@link readaloud.Emphasis.verify|verify} messages.
     * @param message Emphasis message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encodeDelimited(
      message: readaloud.IEmphasis,
      writer?: $protobuf.Writer,
    ): $protobuf.Writer

    /**
     * Decodes an Emphasis message from the specified reader or buffer.
     * @param reader Reader or buffer to decode from
     * @param [length] Message length if known beforehand
     * @returns Emphasis
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decode(
      reader: $protobuf.Reader | Uint8Array,
      length?: number,
    ): readaloud.Emphasis

    /**
     * Decodes an Emphasis message from the specified reader or buffer, length delimited.
     * @param reader Reader or buffer to decode from
     * @returns Emphasis
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decodeDelimited(
      reader: $protobuf.Reader | Uint8Array,
    ): readaloud.Emphasis

    /**
     * Verifies an Emphasis message.
     * @param message Plain object to verify
     * @returns `null` if valid, otherwise the reason why it is not
     */
    public static verify(message: { [k: string]: any }): string | null

    /**
     * Creates an Emphasis message from a plain object. Also converts values to their respective internal types.
     * @param object Plain object
     * @returns Emphasis
     */
    public static fromObject(object: { [k: string]: any }): readaloud.Emphasis

    /**
     * Creates a plain object from an Emphasis message. Also converts values to other types if specified.
     * @param message Emphasis
     * @param [options] Conversion options
     * @returns Plain object
     */
    public static toObject(
      message: readaloud.Emphasis,
      options?: $protobuf.IConversionOptions,
    ): { [k: string]: any }

    /**
     * Converts this Emphasis to JSON.
     * @returns JSON object
     */
    public toJSON(): { [k: string]: any }
  }

  namespace Emphasis {
    /** ErrType enum. */
    enum ErrType {
      INVALID = 0,
      CORRECT = 1,
      ERR_NO_STRESS = 2,
      ERR_STRESS = 3,
      CORRECT_NO_STRESS = 4,
      CORRECT_STRESS = 5,
      ERR_NONSENSE = 6,
    }
  }
}

/** Namespace speech_assess. */
export namespace speech_assess {
  /** Properties of a PhoneScore. */
  interface IPhoneScore {
    /** PhoneScore phone */
    phone?: string | null

    /** PhoneScore score */
    score?: number | null

    /** PhoneScore ipa */
    ipa?: string | null
  }

  /** Represents a PhoneScore. */
  class PhoneScore implements IPhoneScore {
    /**
     * Constructs a new PhoneScore.
     * @param [properties] Properties to set
     */
    constructor(properties?: speech_assess.IPhoneScore)

    /** PhoneScore phone. */
    public phone: string

    /** PhoneScore score. */
    public score: number

    /** PhoneScore ipa. */
    public ipa: string

    /**
     * Creates a new PhoneScore instance using the specified properties.
     * @param [properties] Properties to set
     * @returns PhoneScore instance
     */
    public static create(
      properties?: speech_assess.IPhoneScore,
    ): speech_assess.PhoneScore

    /**
     * Encodes the specified PhoneScore message. Does not implicitly {@link speech_assess.PhoneScore.verify|verify} messages.
     * @param message PhoneScore message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encode(
      message: speech_assess.IPhoneScore,
      writer?: $protobuf.Writer,
    ): $protobuf.Writer

    /**
     * Encodes the specified PhoneScore message, length delimited. Does not implicitly {@link speech_assess.PhoneScore.verify|verify} messages.
     * @param message PhoneScore message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encodeDelimited(
      message: speech_assess.IPhoneScore,
      writer?: $protobuf.Writer,
    ): $protobuf.Writer

    /**
     * Decodes a PhoneScore message from the specified reader or buffer.
     * @param reader Reader or buffer to decode from
     * @param [length] Message length if known beforehand
     * @returns PhoneScore
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decode(
      reader: $protobuf.Reader | Uint8Array,
      length?: number,
    ): speech_assess.PhoneScore

    /**
     * Decodes a PhoneScore message from the specified reader or buffer, length delimited.
     * @param reader Reader or buffer to decode from
     * @returns PhoneScore
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decodeDelimited(
      reader: $protobuf.Reader | Uint8Array,
    ): speech_assess.PhoneScore

    /**
     * Verifies a PhoneScore message.
     * @param message Plain object to verify
     * @returns `null` if valid, otherwise the reason why it is not
     */
    public static verify(message: { [k: string]: any }): string | null

    /**
     * Creates a PhoneScore message from a plain object. Also converts values to their respective internal types.
     * @param object Plain object
     * @returns PhoneScore
     */
    public static fromObject(object: {
      [k: string]: any
    }): speech_assess.PhoneScore

    /**
     * Creates a plain object from a PhoneScore message. Also converts values to other types if specified.
     * @param message PhoneScore
     * @param [options] Conversion options
     * @returns Plain object
     */
    public static toObject(
      message: speech_assess.PhoneScore,
      options?: $protobuf.IConversionOptions,
    ): { [k: string]: any }

    /**
     * Converts this PhoneScore to JSON.
     * @returns JSON object
     */
    public toJSON(): { [k: string]: any }
  }

  /** Properties of a Mispronunciation. */
  interface IMispronunciation {
    /** Mispronunciation errorType */
    errorType?: speech_assess.Mispronunciation.ErrType | null

    /** Mispronunciation referenceContent */
    referenceContent?: string | null

    /** Mispronunciation hypothesisContent */
    hypothesisContent?: string | null

    /** Mispronunciation possibleMisprons */
    possibleMisprons?: speech_assess.IPhoneScore[] | null

    /** Mispronunciation referenceIpaContent */
    referenceIpaContent?: string | null

    /** Mispronunciation hypothesisIpaContent */
    hypothesisIpaContent?: string | null
  }

  /** Represents a Mispronunciation. */
  class Mispronunciation implements IMispronunciation {
    /**
     * Constructs a new Mispronunciation.
     * @param [properties] Properties to set
     */
    constructor(properties?: speech_assess.IMispronunciation)

    /** Mispronunciation errorType. */
    public errorType: speech_assess.Mispronunciation.ErrType

    /** Mispronunciation referenceContent. */
    public referenceContent: string

    /** Mispronunciation hypothesisContent. */
    public hypothesisContent: string

    /** Mispronunciation possibleMisprons. */
    public possibleMisprons: speech_assess.IPhoneScore[]

    /** Mispronunciation referenceIpaContent. */
    public referenceIpaContent: string

    /** Mispronunciation hypothesisIpaContent. */
    public hypothesisIpaContent: string

    /**
     * Creates a new Mispronunciation instance using the specified properties.
     * @param [properties] Properties to set
     * @returns Mispronunciation instance
     */
    public static create(
      properties?: speech_assess.IMispronunciation,
    ): speech_assess.Mispronunciation

    /**
     * Encodes the specified Mispronunciation message. Does not implicitly {@link speech_assess.Mispronunciation.verify|verify} messages.
     * @param message Mispronunciation message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encode(
      message: speech_assess.IMispronunciation,
      writer?: $protobuf.Writer,
    ): $protobuf.Writer

    /**
     * Encodes the specified Mispronunciation message, length delimited. Does not implicitly {@link speech_assess.Mispronunciation.verify|verify} messages.
     * @param message Mispronunciation message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encodeDelimited(
      message: speech_assess.IMispronunciation,
      writer?: $protobuf.Writer,
    ): $protobuf.Writer

    /**
     * Decodes a Mispronunciation message from the specified reader or buffer.
     * @param reader Reader or buffer to decode from
     * @param [length] Message length if known beforehand
     * @returns Mispronunciation
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decode(
      reader: $protobuf.Reader | Uint8Array,
      length?: number,
    ): speech_assess.Mispronunciation

    /**
     * Decodes a Mispronunciation message from the specified reader or buffer, length delimited.
     * @param reader Reader or buffer to decode from
     * @returns Mispronunciation
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decodeDelimited(
      reader: $protobuf.Reader | Uint8Array,
    ): speech_assess.Mispronunciation

    /**
     * Verifies a Mispronunciation message.
     * @param message Plain object to verify
     * @returns `null` if valid, otherwise the reason why it is not
     */
    public static verify(message: { [k: string]: any }): string | null

    /**
     * Creates a Mispronunciation message from a plain object. Also converts values to their respective internal types.
     * @param object Plain object
     * @returns Mispronunciation
     */
    public static fromObject(object: {
      [k: string]: any
    }): speech_assess.Mispronunciation

    /**
     * Creates a plain object from a Mispronunciation message. Also converts values to other types if specified.
     * @param message Mispronunciation
     * @param [options] Conversion options
     * @returns Plain object
     */
    public static toObject(
      message: speech_assess.Mispronunciation,
      options?: $protobuf.IConversionOptions,
    ): { [k: string]: any }

    /**
     * Converts this Mispronunciation to JSON.
     * @returns JSON object
     */
    public toJSON(): { [k: string]: any }
  }

  namespace Mispronunciation {
    /** ErrType enum. */
    enum ErrType {
      CORRECT = 0,
      INSERTION = 1,
      DELETION = 2,
      SUBSTITUTION = 3,
    }
  }
}

/** Namespace lq. */
export namespace lq {
  /** Namespace atlas. */
  namespace atlas {
    /** Properties of a BellKnowledgePoint. */
    interface IBellKnowledgePoint {
      /** BellKnowledgePoint label */
      label?: string | null

      /** BellKnowledgePoint dimension */
      dimension?: lq.atlas.BellKnowledgePoint.Dimension | null

      /** BellKnowledgePoint dimensionCn */
      dimensionCn?: string | null

      /** BellKnowledgePoint phonetics */
      phonetics?: lq.atlas.IPhonetics | null

      /** BellKnowledgePoint syllableStress */
      syllableStress?: lq.atlas.ISyllableStress | null

      /** BellKnowledgePoint intonation */
      intonation?: lq.atlas.IIntonation | null

      /** BellKnowledgePoint linking */
      linking?: lq.atlas.ILinking | null

      /** BellKnowledgePoint rhythm */
      rhythm?: lq.atlas.IRhythm | null

      /** BellKnowledgePoint definition */
      definition?: string | null

      /** BellKnowledgePoint deprecated */
      deprecated?: boolean | null

      /** BellKnowledgePoint deprecatedSinceTimestampUsec */
      deprecatedSinceTimestampUsec?: number | Long | null
    }

    /** Represents a BellKnowledgePoint. */
    class BellKnowledgePoint implements IBellKnowledgePoint {
      /**
       * Constructs a new BellKnowledgePoint.
       * @param [properties] Properties to set
       */
      constructor(properties?: lq.atlas.IBellKnowledgePoint)

      /** BellKnowledgePoint label. */
      public label: string

      /** BellKnowledgePoint dimension. */
      public dimension: lq.atlas.BellKnowledgePoint.Dimension

      /** BellKnowledgePoint dimensionCn. */
      public dimensionCn: string

      /** BellKnowledgePoint phonetics. */
      public phonetics?: lq.atlas.IPhonetics | null

      /** BellKnowledgePoint syllableStress. */
      public syllableStress?: lq.atlas.ISyllableStress | null

      /** BellKnowledgePoint intonation. */
      public intonation?: lq.atlas.IIntonation | null

      /** BellKnowledgePoint linking. */
      public linking?: lq.atlas.ILinking | null

      /** BellKnowledgePoint rhythm. */
      public rhythm?: lq.atlas.IRhythm | null

      /** BellKnowledgePoint definition. */
      public definition: string

      /** BellKnowledgePoint deprecated. */
      public deprecated: boolean

      /** BellKnowledgePoint deprecatedSinceTimestampUsec. */
      public deprecatedSinceTimestampUsec: number | Long

      /**
       * Creates a new BellKnowledgePoint instance using the specified properties.
       * @param [properties] Properties to set
       * @returns BellKnowledgePoint instance
       */
      public static create(
        properties?: lq.atlas.IBellKnowledgePoint,
      ): lq.atlas.BellKnowledgePoint

      /**
       * Encodes the specified BellKnowledgePoint message. Does not implicitly {@link lq.atlas.BellKnowledgePoint.verify|verify} messages.
       * @param message BellKnowledgePoint message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encode(
        message: lq.atlas.IBellKnowledgePoint,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Encodes the specified BellKnowledgePoint message, length delimited. Does not implicitly {@link lq.atlas.BellKnowledgePoint.verify|verify} messages.
       * @param message BellKnowledgePoint message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encodeDelimited(
        message: lq.atlas.IBellKnowledgePoint,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Decodes a BellKnowledgePoint message from the specified reader or buffer.
       * @param reader Reader or buffer to decode from
       * @param [length] Message length if known beforehand
       * @returns BellKnowledgePoint
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decode(
        reader: $protobuf.Reader | Uint8Array,
        length?: number,
      ): lq.atlas.BellKnowledgePoint

      /**
       * Decodes a BellKnowledgePoint message from the specified reader or buffer, length delimited.
       * @param reader Reader or buffer to decode from
       * @returns BellKnowledgePoint
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decodeDelimited(
        reader: $protobuf.Reader | Uint8Array,
      ): lq.atlas.BellKnowledgePoint

      /**
       * Verifies a BellKnowledgePoint message.
       * @param message Plain object to verify
       * @returns `null` if valid, otherwise the reason why it is not
       */
      public static verify(message: { [k: string]: any }): string | null

      /**
       * Creates a BellKnowledgePoint message from a plain object. Also converts values to their respective internal types.
       * @param object Plain object
       * @returns BellKnowledgePoint
       */
      public static fromObject(object: {
        [k: string]: any
      }): lq.atlas.BellKnowledgePoint

      /**
       * Creates a plain object from a BellKnowledgePoint message. Also converts values to other types if specified.
       * @param message BellKnowledgePoint
       * @param [options] Conversion options
       * @returns Plain object
       */
      public static toObject(
        message: lq.atlas.BellKnowledgePoint,
        options?: $protobuf.IConversionOptions,
      ): { [k: string]: any }

      /**
       * Converts this BellKnowledgePoint to JSON.
       * @returns JSON object
       */
      public toJSON(): { [k: string]: any }
    }

    namespace BellKnowledgePoint {
      /** Dimension enum. */
      enum Dimension {
        INVALID = 0,
        PHONETICS = 1,
        SYLLABLE_STRESS = 2,
        INTONATION = 3,
        LINKING = 4,
        RHYTHM = 5,
      }
    }

    /** Properties of a Phonetics. */
    interface IPhonetics {
      /** Phonetics category */
      category?: lq.atlas.Phonetics.Category | null

      /** Phonetics categoryCn */
      categoryCn?: string | null

      /** Phonetics phoneticsVowel */
      phoneticsVowel?: lq.atlas.IPhoneticsVowel | null

      /** Phonetics phoneticsConsonant */
      phoneticsConsonant?: lq.atlas.IPhoneticsConsonant | null

      /** Phonetics phoneticsConsonantCluster */
      phoneticsConsonantCluster?: lq.atlas.IPhoneticsConsonantCluster | null
    }

    /** Represents a Phonetics. */
    class Phonetics implements IPhonetics {
      /**
       * Constructs a new Phonetics.
       * @param [properties] Properties to set
       */
      constructor(properties?: lq.atlas.IPhonetics)

      /** Phonetics category. */
      public category: lq.atlas.Phonetics.Category

      /** Phonetics categoryCn. */
      public categoryCn: string

      /** Phonetics phoneticsVowel. */
      public phoneticsVowel?: lq.atlas.IPhoneticsVowel | null

      /** Phonetics phoneticsConsonant. */
      public phoneticsConsonant?: lq.atlas.IPhoneticsConsonant | null

      /** Phonetics phoneticsConsonantCluster. */
      public phoneticsConsonantCluster?: lq.atlas.IPhoneticsConsonantCluster | null

      /**
       * Creates a new Phonetics instance using the specified properties.
       * @param [properties] Properties to set
       * @returns Phonetics instance
       */
      public static create(properties?: lq.atlas.IPhonetics): lq.atlas.Phonetics

      /**
       * Encodes the specified Phonetics message. Does not implicitly {@link lq.atlas.Phonetics.verify|verify} messages.
       * @param message Phonetics message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encode(
        message: lq.atlas.IPhonetics,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Encodes the specified Phonetics message, length delimited. Does not implicitly {@link lq.atlas.Phonetics.verify|verify} messages.
       * @param message Phonetics message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encodeDelimited(
        message: lq.atlas.IPhonetics,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Decodes a Phonetics message from the specified reader or buffer.
       * @param reader Reader or buffer to decode from
       * @param [length] Message length if known beforehand
       * @returns Phonetics
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decode(
        reader: $protobuf.Reader | Uint8Array,
        length?: number,
      ): lq.atlas.Phonetics

      /**
       * Decodes a Phonetics message from the specified reader or buffer, length delimited.
       * @param reader Reader or buffer to decode from
       * @returns Phonetics
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decodeDelimited(
        reader: $protobuf.Reader | Uint8Array,
      ): lq.atlas.Phonetics

      /**
       * Verifies a Phonetics message.
       * @param message Plain object to verify
       * @returns `null` if valid, otherwise the reason why it is not
       */
      public static verify(message: { [k: string]: any }): string | null

      /**
       * Creates a Phonetics message from a plain object. Also converts values to their respective internal types.
       * @param object Plain object
       * @returns Phonetics
       */
      public static fromObject(object: { [k: string]: any }): lq.atlas.Phonetics

      /**
       * Creates a plain object from a Phonetics message. Also converts values to other types if specified.
       * @param message Phonetics
       * @param [options] Conversion options
       * @returns Plain object
       */
      public static toObject(
        message: lq.atlas.Phonetics,
        options?: $protobuf.IConversionOptions,
      ): { [k: string]: any }

      /**
       * Converts this Phonetics to JSON.
       * @returns JSON object
       */
      public toJSON(): { [k: string]: any }
    }

    namespace Phonetics {
      /** Category enum. */
      enum Category {
        INVALID = 0,
        VOWEL = 1,
        CONSONANT = 2,
        CONSONANT_CLUSTER = 3,
        PHONETICS_CONCEPT = 4,
      }
    }

    /** Properties of a PhoneticsVowel. */
    interface IPhoneticsVowel {
      /** PhoneticsVowel kind */
      kind?: lq.atlas.PhoneticsVowel.Kind | null

      /** PhoneticsVowel kindCn */
      kindCn?: string | null

      /** PhoneticsVowel content */
      content?: string | null

      /** PhoneticsVowel phone */
      phone?: string | null

      /** PhoneticsVowel detail */
      detail?: string | null
    }

    /** Represents a PhoneticsVowel. */
    class PhoneticsVowel implements IPhoneticsVowel {
      /**
       * Constructs a new PhoneticsVowel.
       * @param [properties] Properties to set
       */
      constructor(properties?: lq.atlas.IPhoneticsVowel)

      /** PhoneticsVowel kind. */
      public kind: lq.atlas.PhoneticsVowel.Kind

      /** PhoneticsVowel kindCn. */
      public kindCn: string

      /** PhoneticsVowel content. */
      public content: string

      /** PhoneticsVowel phone. */
      public phone: string

      /** PhoneticsVowel detail. */
      public detail: string

      /**
       * Creates a new PhoneticsVowel instance using the specified properties.
       * @param [properties] Properties to set
       * @returns PhoneticsVowel instance
       */
      public static create(
        properties?: lq.atlas.IPhoneticsVowel,
      ): lq.atlas.PhoneticsVowel

      /**
       * Encodes the specified PhoneticsVowel message. Does not implicitly {@link lq.atlas.PhoneticsVowel.verify|verify} messages.
       * @param message PhoneticsVowel message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encode(
        message: lq.atlas.IPhoneticsVowel,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Encodes the specified PhoneticsVowel message, length delimited. Does not implicitly {@link lq.atlas.PhoneticsVowel.verify|verify} messages.
       * @param message PhoneticsVowel message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encodeDelimited(
        message: lq.atlas.IPhoneticsVowel,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Decodes a PhoneticsVowel message from the specified reader or buffer.
       * @param reader Reader or buffer to decode from
       * @param [length] Message length if known beforehand
       * @returns PhoneticsVowel
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decode(
        reader: $protobuf.Reader | Uint8Array,
        length?: number,
      ): lq.atlas.PhoneticsVowel

      /**
       * Decodes a PhoneticsVowel message from the specified reader or buffer, length delimited.
       * @param reader Reader or buffer to decode from
       * @returns PhoneticsVowel
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decodeDelimited(
        reader: $protobuf.Reader | Uint8Array,
      ): lq.atlas.PhoneticsVowel

      /**
       * Verifies a PhoneticsVowel message.
       * @param message Plain object to verify
       * @returns `null` if valid, otherwise the reason why it is not
       */
      public static verify(message: { [k: string]: any }): string | null

      /**
       * Creates a PhoneticsVowel message from a plain object. Also converts values to their respective internal types.
       * @param object Plain object
       * @returns PhoneticsVowel
       */
      public static fromObject(object: {
        [k: string]: any
      }): lq.atlas.PhoneticsVowel

      /**
       * Creates a plain object from a PhoneticsVowel message. Also converts values to other types if specified.
       * @param message PhoneticsVowel
       * @param [options] Conversion options
       * @returns Plain object
       */
      public static toObject(
        message: lq.atlas.PhoneticsVowel,
        options?: $protobuf.IConversionOptions,
      ): { [k: string]: any }

      /**
       * Converts this PhoneticsVowel to JSON.
       * @returns JSON object
       */
      public toJSON(): { [k: string]: any }
    }

    namespace PhoneticsVowel {
      /** Kind enum. */
      enum Kind {
        INVALID = 0,
        MONOPHTHONG = 1,
        DIPHTHONG = 2,
      }
    }

    /** Properties of a PhoneticsConsonant. */
    interface IPhoneticsConsonant {
      /** PhoneticsConsonant kind */
      kind?: lq.atlas.PhoneticsConsonant.Kind | null

      /** PhoneticsConsonant kindCn */
      kindCn?: string | null

      /** PhoneticsConsonant content */
      content?: string | null

      /** PhoneticsConsonant phone */
      phone?: string | null

      /** PhoneticsConsonant detail */
      detail?: string | null

      /** PhoneticsConsonant isCluster */
      isCluster?: boolean | null
    }

    /** Represents a PhoneticsConsonant. */
    class PhoneticsConsonant implements IPhoneticsConsonant {
      /**
       * Constructs a new PhoneticsConsonant.
       * @param [properties] Properties to set
       */
      constructor(properties?: lq.atlas.IPhoneticsConsonant)

      /** PhoneticsConsonant kind. */
      public kind: lq.atlas.PhoneticsConsonant.Kind

      /** PhoneticsConsonant kindCn. */
      public kindCn: string

      /** PhoneticsConsonant content. */
      public content: string

      /** PhoneticsConsonant phone. */
      public phone: string

      /** PhoneticsConsonant detail. */
      public detail: string

      /** PhoneticsConsonant isCluster. */
      public isCluster: boolean

      /**
       * Creates a new PhoneticsConsonant instance using the specified properties.
       * @param [properties] Properties to set
       * @returns PhoneticsConsonant instance
       */
      public static create(
        properties?: lq.atlas.IPhoneticsConsonant,
      ): lq.atlas.PhoneticsConsonant

      /**
       * Encodes the specified PhoneticsConsonant message. Does not implicitly {@link lq.atlas.PhoneticsConsonant.verify|verify} messages.
       * @param message PhoneticsConsonant message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encode(
        message: lq.atlas.IPhoneticsConsonant,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Encodes the specified PhoneticsConsonant message, length delimited. Does not implicitly {@link lq.atlas.PhoneticsConsonant.verify|verify} messages.
       * @param message PhoneticsConsonant message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encodeDelimited(
        message: lq.atlas.IPhoneticsConsonant,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Decodes a PhoneticsConsonant message from the specified reader or buffer.
       * @param reader Reader or buffer to decode from
       * @param [length] Message length if known beforehand
       * @returns PhoneticsConsonant
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decode(
        reader: $protobuf.Reader | Uint8Array,
        length?: number,
      ): lq.atlas.PhoneticsConsonant

      /**
       * Decodes a PhoneticsConsonant message from the specified reader or buffer, length delimited.
       * @param reader Reader or buffer to decode from
       * @returns PhoneticsConsonant
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decodeDelimited(
        reader: $protobuf.Reader | Uint8Array,
      ): lq.atlas.PhoneticsConsonant

      /**
       * Verifies a PhoneticsConsonant message.
       * @param message Plain object to verify
       * @returns `null` if valid, otherwise the reason why it is not
       */
      public static verify(message: { [k: string]: any }): string | null

      /**
       * Creates a PhoneticsConsonant message from a plain object. Also converts values to their respective internal types.
       * @param object Plain object
       * @returns PhoneticsConsonant
       */
      public static fromObject(object: {
        [k: string]: any
      }): lq.atlas.PhoneticsConsonant

      /**
       * Creates a plain object from a PhoneticsConsonant message. Also converts values to other types if specified.
       * @param message PhoneticsConsonant
       * @param [options] Conversion options
       * @returns Plain object
       */
      public static toObject(
        message: lq.atlas.PhoneticsConsonant,
        options?: $protobuf.IConversionOptions,
      ): { [k: string]: any }

      /**
       * Converts this PhoneticsConsonant to JSON.
       * @returns JSON object
       */
      public toJSON(): { [k: string]: any }
    }

    namespace PhoneticsConsonant {
      /** Kind enum. */
      enum Kind {
        INVALID = 0,
        STOPS = 1,
        AFFRICATES = 2,
        FRICATIVES = 3,
        LATERAL_APPROXIMANT = 4,
        NASALS = 5,
        APPROXIMANT = 6,
        SEMIVOWEL = 7,
      }
    }

    /** Properties of a PhoneticsConsonantCluster. */
    interface IPhoneticsConsonantCluster {
      /** PhoneticsConsonantCluster kind */
      kind?: lq.atlas.PhoneticsConsonantCluster.Kind | null

      /** PhoneticsConsonantCluster kindCn */
      kindCn?: string | null

      /** PhoneticsConsonantCluster content */
      content?: string | null

      /** PhoneticsConsonantCluster phone */
      phone?: string | null

      /** PhoneticsConsonantCluster detail */
      detail?: string | null
    }

    /** Represents a PhoneticsConsonantCluster. */
    class PhoneticsConsonantCluster implements IPhoneticsConsonantCluster {
      /**
       * Constructs a new PhoneticsConsonantCluster.
       * @param [properties] Properties to set
       */
      constructor(properties?: lq.atlas.IPhoneticsConsonantCluster)

      /** PhoneticsConsonantCluster kind. */
      public kind: lq.atlas.PhoneticsConsonantCluster.Kind

      /** PhoneticsConsonantCluster kindCn. */
      public kindCn: string

      /** PhoneticsConsonantCluster content. */
      public content: string

      /** PhoneticsConsonantCluster phone. */
      public phone: string

      /** PhoneticsConsonantCluster detail. */
      public detail: string

      /**
       * Creates a new PhoneticsConsonantCluster instance using the specified properties.
       * @param [properties] Properties to set
       * @returns PhoneticsConsonantCluster instance
       */
      public static create(
        properties?: lq.atlas.IPhoneticsConsonantCluster,
      ): lq.atlas.PhoneticsConsonantCluster

      /**
       * Encodes the specified PhoneticsConsonantCluster message. Does not implicitly {@link lq.atlas.PhoneticsConsonantCluster.verify|verify} messages.
       * @param message PhoneticsConsonantCluster message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encode(
        message: lq.atlas.IPhoneticsConsonantCluster,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Encodes the specified PhoneticsConsonantCluster message, length delimited. Does not implicitly {@link lq.atlas.PhoneticsConsonantCluster.verify|verify} messages.
       * @param message PhoneticsConsonantCluster message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encodeDelimited(
        message: lq.atlas.IPhoneticsConsonantCluster,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Decodes a PhoneticsConsonantCluster message from the specified reader or buffer.
       * @param reader Reader or buffer to decode from
       * @param [length] Message length if known beforehand
       * @returns PhoneticsConsonantCluster
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decode(
        reader: $protobuf.Reader | Uint8Array,
        length?: number,
      ): lq.atlas.PhoneticsConsonantCluster

      /**
       * Decodes a PhoneticsConsonantCluster message from the specified reader or buffer, length delimited.
       * @param reader Reader or buffer to decode from
       * @returns PhoneticsConsonantCluster
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decodeDelimited(
        reader: $protobuf.Reader | Uint8Array,
      ): lq.atlas.PhoneticsConsonantCluster

      /**
       * Verifies a PhoneticsConsonantCluster message.
       * @param message Plain object to verify
       * @returns `null` if valid, otherwise the reason why it is not
       */
      public static verify(message: { [k: string]: any }): string | null

      /**
       * Creates a PhoneticsConsonantCluster message from a plain object. Also converts values to their respective internal types.
       * @param object Plain object
       * @returns PhoneticsConsonantCluster
       */
      public static fromObject(object: {
        [k: string]: any
      }): lq.atlas.PhoneticsConsonantCluster

      /**
       * Creates a plain object from a PhoneticsConsonantCluster message. Also converts values to other types if specified.
       * @param message PhoneticsConsonantCluster
       * @param [options] Conversion options
       * @returns Plain object
       */
      public static toObject(
        message: lq.atlas.PhoneticsConsonantCluster,
        options?: $protobuf.IConversionOptions,
      ): { [k: string]: any }

      /**
       * Converts this PhoneticsConsonantCluster to JSON.
       * @returns JSON object
       */
      public toJSON(): { [k: string]: any }
    }

    namespace PhoneticsConsonantCluster {
      /** Kind enum. */
      enum Kind {
        INVALID = 0,
        CONSONANT_CLUSTER = 1,
      }
    }

    /** Properties of a SyllableStress. */
    interface ISyllableStress {
      /** SyllableStress category */
      category?: lq.atlas.SyllableStress.Category | null

      /** SyllableStress categoryCn */
      categoryCn?: string | null

      /** SyllableStress syllable */
      syllable?: lq.atlas.ISyllable | null

      /** SyllableStress stress */
      stress?: lq.atlas.IStress | null

      /** SyllableStress stressRule */
      stressRule?: lq.atlas.IStressRule | null
    }

    /** Represents a SyllableStress. */
    class SyllableStress implements ISyllableStress {
      /**
       * Constructs a new SyllableStress.
       * @param [properties] Properties to set
       */
      constructor(properties?: lq.atlas.ISyllableStress)

      /** SyllableStress category. */
      public category: lq.atlas.SyllableStress.Category

      /** SyllableStress categoryCn. */
      public categoryCn: string

      /** SyllableStress syllable. */
      public syllable?: lq.atlas.ISyllable | null

      /** SyllableStress stress. */
      public stress?: lq.atlas.IStress | null

      /** SyllableStress stressRule. */
      public stressRule?: lq.atlas.IStressRule | null

      /**
       * Creates a new SyllableStress instance using the specified properties.
       * @param [properties] Properties to set
       * @returns SyllableStress instance
       */
      public static create(
        properties?: lq.atlas.ISyllableStress,
      ): lq.atlas.SyllableStress

      /**
       * Encodes the specified SyllableStress message. Does not implicitly {@link lq.atlas.SyllableStress.verify|verify} messages.
       * @param message SyllableStress message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encode(
        message: lq.atlas.ISyllableStress,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Encodes the specified SyllableStress message, length delimited. Does not implicitly {@link lq.atlas.SyllableStress.verify|verify} messages.
       * @param message SyllableStress message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encodeDelimited(
        message: lq.atlas.ISyllableStress,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Decodes a SyllableStress message from the specified reader or buffer.
       * @param reader Reader or buffer to decode from
       * @param [length] Message length if known beforehand
       * @returns SyllableStress
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decode(
        reader: $protobuf.Reader | Uint8Array,
        length?: number,
      ): lq.atlas.SyllableStress

      /**
       * Decodes a SyllableStress message from the specified reader or buffer, length delimited.
       * @param reader Reader or buffer to decode from
       * @returns SyllableStress
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decodeDelimited(
        reader: $protobuf.Reader | Uint8Array,
      ): lq.atlas.SyllableStress

      /**
       * Verifies a SyllableStress message.
       * @param message Plain object to verify
       * @returns `null` if valid, otherwise the reason why it is not
       */
      public static verify(message: { [k: string]: any }): string | null

      /**
       * Creates a SyllableStress message from a plain object. Also converts values to their respective internal types.
       * @param object Plain object
       * @returns SyllableStress
       */
      public static fromObject(object: {
        [k: string]: any
      }): lq.atlas.SyllableStress

      /**
       * Creates a plain object from a SyllableStress message. Also converts values to other types if specified.
       * @param message SyllableStress
       * @param [options] Conversion options
       * @returns Plain object
       */
      public static toObject(
        message: lq.atlas.SyllableStress,
        options?: $protobuf.IConversionOptions,
      ): { [k: string]: any }

      /**
       * Converts this SyllableStress to JSON.
       * @returns JSON object
       */
      public toJSON(): { [k: string]: any }
    }

    namespace SyllableStress {
      /** Category enum. */
      enum Category {
        INVALID = 0,
        SYLLABLE = 1,
        STRESS = 2,
        STRESS_RULE = 3,
      }
    }

    /** Properties of a Syllable. */
    interface ISyllable {
      /** Syllable kind */
      kind?: lq.atlas.Syllable.Kind | null

      /** Syllable kindCn */
      kindCn?: string | null

      /** Syllable syllableStructure */
      syllableStructure?: lq.atlas.ISyllableStructure | null
    }

    /** Represents a Syllable. */
    class Syllable implements ISyllable {
      /**
       * Constructs a new Syllable.
       * @param [properties] Properties to set
       */
      constructor(properties?: lq.atlas.ISyllable)

      /** Syllable kind. */
      public kind: lq.atlas.Syllable.Kind

      /** Syllable kindCn. */
      public kindCn: string

      /** Syllable syllableStructure. */
      public syllableStructure?: lq.atlas.ISyllableStructure | null

      /**
       * Creates a new Syllable instance using the specified properties.
       * @param [properties] Properties to set
       * @returns Syllable instance
       */
      public static create(properties?: lq.atlas.ISyllable): lq.atlas.Syllable

      /**
       * Encodes the specified Syllable message. Does not implicitly {@link lq.atlas.Syllable.verify|verify} messages.
       * @param message Syllable message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encode(
        message: lq.atlas.ISyllable,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Encodes the specified Syllable message, length delimited. Does not implicitly {@link lq.atlas.Syllable.verify|verify} messages.
       * @param message Syllable message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encodeDelimited(
        message: lq.atlas.ISyllable,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Decodes a Syllable message from the specified reader or buffer.
       * @param reader Reader or buffer to decode from
       * @param [length] Message length if known beforehand
       * @returns Syllable
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decode(
        reader: $protobuf.Reader | Uint8Array,
        length?: number,
      ): lq.atlas.Syllable

      /**
       * Decodes a Syllable message from the specified reader or buffer, length delimited.
       * @param reader Reader or buffer to decode from
       * @returns Syllable
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decodeDelimited(
        reader: $protobuf.Reader | Uint8Array,
      ): lq.atlas.Syllable

      /**
       * Verifies a Syllable message.
       * @param message Plain object to verify
       * @returns `null` if valid, otherwise the reason why it is not
       */
      public static verify(message: { [k: string]: any }): string | null

      /**
       * Creates a Syllable message from a plain object. Also converts values to their respective internal types.
       * @param object Plain object
       * @returns Syllable
       */
      public static fromObject(object: { [k: string]: any }): lq.atlas.Syllable

      /**
       * Creates a plain object from a Syllable message. Also converts values to other types if specified.
       * @param message Syllable
       * @param [options] Conversion options
       * @returns Plain object
       */
      public static toObject(
        message: lq.atlas.Syllable,
        options?: $protobuf.IConversionOptions,
      ): { [k: string]: any }

      /**
       * Converts this Syllable to JSON.
       * @returns JSON object
       */
      public toJSON(): { [k: string]: any }
    }

    namespace Syllable {
      /** Kind enum. */
      enum Kind {
        INVALID = 0,
        SYLLABLE_STRUCTURE = 1,
      }
    }

    /** Properties of a SyllableStructure. */
    interface ISyllableStructure {
      /** SyllableStructure structure */
      structure?: lq.atlas.SyllableStructure.Structure | null

      /** SyllableStructure structureCn */
      structureCn?: string | null
    }

    /** Represents a SyllableStructure. */
    class SyllableStructure implements ISyllableStructure {
      /**
       * Constructs a new SyllableStructure.
       * @param [properties] Properties to set
       */
      constructor(properties?: lq.atlas.ISyllableStructure)

      /** SyllableStructure structure. */
      public structure: lq.atlas.SyllableStructure.Structure

      /** SyllableStructure structureCn. */
      public structureCn: string

      /**
       * Creates a new SyllableStructure instance using the specified properties.
       * @param [properties] Properties to set
       * @returns SyllableStructure instance
       */
      public static create(
        properties?: lq.atlas.ISyllableStructure,
      ): lq.atlas.SyllableStructure

      /**
       * Encodes the specified SyllableStructure message. Does not implicitly {@link lq.atlas.SyllableStructure.verify|verify} messages.
       * @param message SyllableStructure message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encode(
        message: lq.atlas.ISyllableStructure,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Encodes the specified SyllableStructure message, length delimited. Does not implicitly {@link lq.atlas.SyllableStructure.verify|verify} messages.
       * @param message SyllableStructure message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encodeDelimited(
        message: lq.atlas.ISyllableStructure,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Decodes a SyllableStructure message from the specified reader or buffer.
       * @param reader Reader or buffer to decode from
       * @param [length] Message length if known beforehand
       * @returns SyllableStructure
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decode(
        reader: $protobuf.Reader | Uint8Array,
        length?: number,
      ): lq.atlas.SyllableStructure

      /**
       * Decodes a SyllableStructure message from the specified reader or buffer, length delimited.
       * @param reader Reader or buffer to decode from
       * @returns SyllableStructure
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decodeDelimited(
        reader: $protobuf.Reader | Uint8Array,
      ): lq.atlas.SyllableStructure

      /**
       * Verifies a SyllableStructure message.
       * @param message Plain object to verify
       * @returns `null` if valid, otherwise the reason why it is not
       */
      public static verify(message: { [k: string]: any }): string | null

      /**
       * Creates a SyllableStructure message from a plain object. Also converts values to their respective internal types.
       * @param object Plain object
       * @returns SyllableStructure
       */
      public static fromObject(object: {
        [k: string]: any
      }): lq.atlas.SyllableStructure

      /**
       * Creates a plain object from a SyllableStructure message. Also converts values to other types if specified.
       * @param message SyllableStructure
       * @param [options] Conversion options
       * @returns Plain object
       */
      public static toObject(
        message: lq.atlas.SyllableStructure,
        options?: $protobuf.IConversionOptions,
      ): { [k: string]: any }

      /**
       * Converts this SyllableStructure to JSON.
       * @returns JSON object
       */
      public toJSON(): { [k: string]: any }
    }

    namespace SyllableStructure {
      /** Structure enum. */
      enum Structure {
        UNKNOWN = 0,
        ONE_VOWEL = 1,
        CONSONANT_VOWEL = 2,
        CLUSTER_VOWEL = 3,
        VOWEL_CONSONANT = 4,
        VOWEL_CLUSTER = 5,
        CONSONANT_VOWEL_CONSONANT = 6,
        CONSONANT_VOWEL_CLUSTER = 7,
        CLUSTER_VOWEL_CONSONANT = 8,
        CLUSTER_VOWEL_CLUSTER = 9,
      }
    }

    /** Properties of a Stress. */
    interface IStress {
      /** Stress number */
      number?: lq.atlas.Stress.Number | null

      /** Stress numberCn */
      numberCn?: string | null

      /** Stress loc */
      loc?: lq.atlas.Stress.Loc | null

      /** Stress locCn */
      locCn?: string | null

      /** Stress cn */
      cn?: string | null
    }

    /** Represents a Stress. */
    class Stress implements IStress {
      /**
       * Constructs a new Stress.
       * @param [properties] Properties to set
       */
      constructor(properties?: lq.atlas.IStress)

      /** Stress number. */
      public number: lq.atlas.Stress.Number

      /** Stress numberCn. */
      public numberCn: string

      /** Stress loc. */
      public loc: lq.atlas.Stress.Loc

      /** Stress locCn. */
      public locCn: string

      /** Stress cn. */
      public cn: string

      /**
       * Creates a new Stress instance using the specified properties.
       * @param [properties] Properties to set
       * @returns Stress instance
       */
      public static create(properties?: lq.atlas.IStress): lq.atlas.Stress

      /**
       * Encodes the specified Stress message. Does not implicitly {@link lq.atlas.Stress.verify|verify} messages.
       * @param message Stress message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encode(
        message: lq.atlas.IStress,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Encodes the specified Stress message, length delimited. Does not implicitly {@link lq.atlas.Stress.verify|verify} messages.
       * @param message Stress message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encodeDelimited(
        message: lq.atlas.IStress,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Decodes a Stress message from the specified reader or buffer.
       * @param reader Reader or buffer to decode from
       * @param [length] Message length if known beforehand
       * @returns Stress
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decode(
        reader: $protobuf.Reader | Uint8Array,
        length?: number,
      ): lq.atlas.Stress

      /**
       * Decodes a Stress message from the specified reader or buffer, length delimited.
       * @param reader Reader or buffer to decode from
       * @returns Stress
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decodeDelimited(
        reader: $protobuf.Reader | Uint8Array,
      ): lq.atlas.Stress

      /**
       * Verifies a Stress message.
       * @param message Plain object to verify
       * @returns `null` if valid, otherwise the reason why it is not
       */
      public static verify(message: { [k: string]: any }): string | null

      /**
       * Creates a Stress message from a plain object. Also converts values to their respective internal types.
       * @param object Plain object
       * @returns Stress
       */
      public static fromObject(object: { [k: string]: any }): lq.atlas.Stress

      /**
       * Creates a plain object from a Stress message. Also converts values to other types if specified.
       * @param message Stress
       * @param [options] Conversion options
       * @returns Plain object
       */
      public static toObject(
        message: lq.atlas.Stress,
        options?: $protobuf.IConversionOptions,
      ): { [k: string]: any }

      /**
       * Converts this Stress to JSON.
       * @returns JSON object
       */
      public toJSON(): { [k: string]: any }
    }

    namespace Stress {
      /** Number enum. */
      enum Number {
        ZERO = 0,
        ONE = 1,
        TWO = 2,
        THREE = 3,
        FOUR = 4,
        MORE = 5,
      }

      /** Loc enum. */
      enum Loc {
        NONE = 0,
        FIRST = 1,
        SECOND = 2,
        THIRD = 3,
        FOURTH = 4,
        FIFTH = 5,
        SIXTH = 6,
        SEVENTH = 7,
        OTHER = 8,
      }
    }

    /** Properties of a StressRule. */
    interface IStressRule {
      /** StressRule kind */
      kind?: lq.atlas.StressRule.Kind | null

      /** StressRule kindCn */
      kindCn?: string | null

      /** StressRule loc */
      loc?: lq.atlas.StressRule.Loc | null

      /** StressRule locCn */
      locCn?: string | null
    }

    /** Represents a StressRule. */
    class StressRule implements IStressRule {
      /**
       * Constructs a new StressRule.
       * @param [properties] Properties to set
       */
      constructor(properties?: lq.atlas.IStressRule)

      /** StressRule kind. */
      public kind: lq.atlas.StressRule.Kind

      /** StressRule kindCn. */
      public kindCn: string

      /** StressRule loc. */
      public loc: lq.atlas.StressRule.Loc

      /** StressRule locCn. */
      public locCn: string

      /**
       * Creates a new StressRule instance using the specified properties.
       * @param [properties] Properties to set
       * @returns StressRule instance
       */
      public static create(
        properties?: lq.atlas.IStressRule,
      ): lq.atlas.StressRule

      /**
       * Encodes the specified StressRule message. Does not implicitly {@link lq.atlas.StressRule.verify|verify} messages.
       * @param message StressRule message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encode(
        message: lq.atlas.IStressRule,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Encodes the specified StressRule message, length delimited. Does not implicitly {@link lq.atlas.StressRule.verify|verify} messages.
       * @param message StressRule message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encodeDelimited(
        message: lq.atlas.IStressRule,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Decodes a StressRule message from the specified reader or buffer.
       * @param reader Reader or buffer to decode from
       * @param [length] Message length if known beforehand
       * @returns StressRule
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decode(
        reader: $protobuf.Reader | Uint8Array,
        length?: number,
      ): lq.atlas.StressRule

      /**
       * Decodes a StressRule message from the specified reader or buffer, length delimited.
       * @param reader Reader or buffer to decode from
       * @returns StressRule
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decodeDelimited(
        reader: $protobuf.Reader | Uint8Array,
      ): lq.atlas.StressRule

      /**
       * Verifies a StressRule message.
       * @param message Plain object to verify
       * @returns `null` if valid, otherwise the reason why it is not
       */
      public static verify(message: { [k: string]: any }): string | null

      /**
       * Creates a StressRule message from a plain object. Also converts values to their respective internal types.
       * @param object Plain object
       * @returns StressRule
       */
      public static fromObject(object: {
        [k: string]: any
      }): lq.atlas.StressRule

      /**
       * Creates a plain object from a StressRule message. Also converts values to other types if specified.
       * @param message StressRule
       * @param [options] Conversion options
       * @returns Plain object
       */
      public static toObject(
        message: lq.atlas.StressRule,
        options?: $protobuf.IConversionOptions,
      ): { [k: string]: any }

      /**
       * Converts this StressRule to JSON.
       * @returns JSON object
       */
      public toJSON(): { [k: string]: any }
    }

    namespace StressRule {
      /** Kind enum. */
      enum Kind {
        INVALID = 0,
        WORDS_WITH_PREFIXES = 1,
        WORDS_WITH_SUFFIXES = 2,
        NUMBERS = 3,
        NOUN_COMPOUNDS = 4,
        ADJECTIVE_COMPOUNDS = 5,
        VERB_COMPOUNDS = 6,
        PHRASAL_VERBS = 7,
      }

      /** Loc enum. */
      enum Loc {
        NONE = 0,
        PREFIXES_STRESS_BACK = 1,
        PREFIXES_STRESS_FRONT = 2,
        DIFFERENT_STRESS_FOR_SAME_WORD = 3,
        SUFFIXES_STRESS_FRONT = 4,
        SUFFIXES_STRESS_BACK = 5,
        STRESS_CHANGE = 6,
      }
    }

    /** Properties of an Intonation. */
    interface IIntonation {
      /** Intonation category */
      category?: lq.atlas.Intonation.Category | null

      /** Intonation categoryCn */
      categoryCn?: string | null

      /** Intonation intonationHow */
      intonationHow?: lq.atlas.IIntonationHow | null

      /** Intonation intonationLoc */
      intonationLoc?: lq.atlas.IIntonationLoc | null

      /** Intonation stress */
      stress?: lq.atlas.IStress | null

      /** Intonation tailSyllable */
      tailSyllable?: lq.atlas.ITailSyllable | null

      /** Intonation betweenThoughtGroups */
      betweenThoughtGroups?: lq.atlas.IBetweenThoughtGroups | null

      /** Intonation intonationContext */
      intonationContext?: lq.atlas.IIntonationContext | null
    }

    /** Represents an Intonation. */
    class Intonation implements IIntonation {
      /**
       * Constructs a new Intonation.
       * @param [properties] Properties to set
       */
      constructor(properties?: lq.atlas.IIntonation)

      /** Intonation category. */
      public category: lq.atlas.Intonation.Category

      /** Intonation categoryCn. */
      public categoryCn: string

      /** Intonation intonationHow. */
      public intonationHow?: lq.atlas.IIntonationHow | null

      /** Intonation intonationLoc. */
      public intonationLoc?: lq.atlas.IIntonationLoc | null

      /** Intonation stress. */
      public stress?: lq.atlas.IStress | null

      /** Intonation tailSyllable. */
      public tailSyllable?: lq.atlas.ITailSyllable | null

      /** Intonation betweenThoughtGroups. */
      public betweenThoughtGroups?: lq.atlas.IBetweenThoughtGroups | null

      /** Intonation intonationContext. */
      public intonationContext?: lq.atlas.IIntonationContext | null

      /**
       * Creates a new Intonation instance using the specified properties.
       * @param [properties] Properties to set
       * @returns Intonation instance
       */
      public static create(
        properties?: lq.atlas.IIntonation,
      ): lq.atlas.Intonation

      /**
       * Encodes the specified Intonation message. Does not implicitly {@link lq.atlas.Intonation.verify|verify} messages.
       * @param message Intonation message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encode(
        message: lq.atlas.IIntonation,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Encodes the specified Intonation message, length delimited. Does not implicitly {@link lq.atlas.Intonation.verify|verify} messages.
       * @param message Intonation message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encodeDelimited(
        message: lq.atlas.IIntonation,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Decodes an Intonation message from the specified reader or buffer.
       * @param reader Reader or buffer to decode from
       * @param [length] Message length if known beforehand
       * @returns Intonation
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decode(
        reader: $protobuf.Reader | Uint8Array,
        length?: number,
      ): lq.atlas.Intonation

      /**
       * Decodes an Intonation message from the specified reader or buffer, length delimited.
       * @param reader Reader or buffer to decode from
       * @returns Intonation
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decodeDelimited(
        reader: $protobuf.Reader | Uint8Array,
      ): lq.atlas.Intonation

      /**
       * Verifies an Intonation message.
       * @param message Plain object to verify
       * @returns `null` if valid, otherwise the reason why it is not
       */
      public static verify(message: { [k: string]: any }): string | null

      /**
       * Creates an Intonation message from a plain object. Also converts values to their respective internal types.
       * @param object Plain object
       * @returns Intonation
       */
      public static fromObject(object: {
        [k: string]: any
      }): lq.atlas.Intonation

      /**
       * Creates a plain object from an Intonation message. Also converts values to other types if specified.
       * @param message Intonation
       * @param [options] Conversion options
       * @returns Plain object
       */
      public static toObject(
        message: lq.atlas.Intonation,
        options?: $protobuf.IConversionOptions,
      ): { [k: string]: any }

      /**
       * Converts this Intonation to JSON.
       * @returns JSON object
       */
      public toJSON(): { [k: string]: any }
    }

    namespace Intonation {
      /** Category enum. */
      enum Category {
        INVALID = 0,
        IN_THOUGHT_GROUP = 1,
        BETWEEN_THOUGHT_GROUPS = 2,
        INTONATION_CONTEXT = 3,
        INTONATION_CONCEPT = 4,
      }
    }

    /** Properties of an IntonationHow. */
    interface IIntonationHow {
      /** IntonationHow how */
      how?: lq.atlas.IntonationHow.How | null

      /** IntonationHow howCn */
      howCn?: string | null
    }

    /** Represents an IntonationHow. */
    class IntonationHow implements IIntonationHow {
      /**
       * Constructs a new IntonationHow.
       * @param [properties] Properties to set
       */
      constructor(properties?: lq.atlas.IIntonationHow)

      /** IntonationHow how. */
      public how: lq.atlas.IntonationHow.How

      /** IntonationHow howCn. */
      public howCn: string

      /**
       * Creates a new IntonationHow instance using the specified properties.
       * @param [properties] Properties to set
       * @returns IntonationHow instance
       */
      public static create(
        properties?: lq.atlas.IIntonationHow,
      ): lq.atlas.IntonationHow

      /**
       * Encodes the specified IntonationHow message. Does not implicitly {@link lq.atlas.IntonationHow.verify|verify} messages.
       * @param message IntonationHow message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encode(
        message: lq.atlas.IIntonationHow,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Encodes the specified IntonationHow message, length delimited. Does not implicitly {@link lq.atlas.IntonationHow.verify|verify} messages.
       * @param message IntonationHow message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encodeDelimited(
        message: lq.atlas.IIntonationHow,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Decodes an IntonationHow message from the specified reader or buffer.
       * @param reader Reader or buffer to decode from
       * @param [length] Message length if known beforehand
       * @returns IntonationHow
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decode(
        reader: $protobuf.Reader | Uint8Array,
        length?: number,
      ): lq.atlas.IntonationHow

      /**
       * Decodes an IntonationHow message from the specified reader or buffer, length delimited.
       * @param reader Reader or buffer to decode from
       * @returns IntonationHow
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decodeDelimited(
        reader: $protobuf.Reader | Uint8Array,
      ): lq.atlas.IntonationHow

      /**
       * Verifies an IntonationHow message.
       * @param message Plain object to verify
       * @returns `null` if valid, otherwise the reason why it is not
       */
      public static verify(message: { [k: string]: any }): string | null

      /**
       * Creates an IntonationHow message from a plain object. Also converts values to their respective internal types.
       * @param object Plain object
       * @returns IntonationHow
       */
      public static fromObject(object: {
        [k: string]: any
      }): lq.atlas.IntonationHow

      /**
       * Creates a plain object from an IntonationHow message. Also converts values to other types if specified.
       * @param message IntonationHow
       * @param [options] Conversion options
       * @returns Plain object
       */
      public static toObject(
        message: lq.atlas.IntonationHow,
        options?: $protobuf.IConversionOptions,
      ): { [k: string]: any }

      /**
       * Converts this IntonationHow to JSON.
       * @returns JSON object
       */
      public toJSON(): { [k: string]: any }
    }

    namespace IntonationHow {
      /** How enum. */
      enum How {
        INVALID_HOW = 0,
        FALL = 1,
        RISE = 2,
        RISE_FALL = 3,
        FALL_RISE = 4,
        FALL_FALL = 5,
        RISE_RISE = 6,
      }
    }

    /** Properties of an IntonationLoc. */
    interface IIntonationLoc {
      /** IntonationLoc loc */
      loc?: lq.atlas.IntonationLoc.Loc | null

      /** IntonationLoc locCn */
      locCn?: string | null
    }

    /** Represents an IntonationLoc. */
    class IntonationLoc implements IIntonationLoc {
      /**
       * Constructs a new IntonationLoc.
       * @param [properties] Properties to set
       */
      constructor(properties?: lq.atlas.IIntonationLoc)

      /** IntonationLoc loc. */
      public loc: lq.atlas.IntonationLoc.Loc

      /** IntonationLoc locCn. */
      public locCn: string

      /**
       * Creates a new IntonationLoc instance using the specified properties.
       * @param [properties] Properties to set
       * @returns IntonationLoc instance
       */
      public static create(
        properties?: lq.atlas.IIntonationLoc,
      ): lq.atlas.IntonationLoc

      /**
       * Encodes the specified IntonationLoc message. Does not implicitly {@link lq.atlas.IntonationLoc.verify|verify} messages.
       * @param message IntonationLoc message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encode(
        message: lq.atlas.IIntonationLoc,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Encodes the specified IntonationLoc message, length delimited. Does not implicitly {@link lq.atlas.IntonationLoc.verify|verify} messages.
       * @param message IntonationLoc message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encodeDelimited(
        message: lq.atlas.IIntonationLoc,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Decodes an IntonationLoc message from the specified reader or buffer.
       * @param reader Reader or buffer to decode from
       * @param [length] Message length if known beforehand
       * @returns IntonationLoc
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decode(
        reader: $protobuf.Reader | Uint8Array,
        length?: number,
      ): lq.atlas.IntonationLoc

      /**
       * Decodes an IntonationLoc message from the specified reader or buffer, length delimited.
       * @param reader Reader or buffer to decode from
       * @returns IntonationLoc
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decodeDelimited(
        reader: $protobuf.Reader | Uint8Array,
      ): lq.atlas.IntonationLoc

      /**
       * Verifies an IntonationLoc message.
       * @param message Plain object to verify
       * @returns `null` if valid, otherwise the reason why it is not
       */
      public static verify(message: { [k: string]: any }): string | null

      /**
       * Creates an IntonationLoc message from a plain object. Also converts values to their respective internal types.
       * @param object Plain object
       * @returns IntonationLoc
       */
      public static fromObject(object: {
        [k: string]: any
      }): lq.atlas.IntonationLoc

      /**
       * Creates a plain object from an IntonationLoc message. Also converts values to other types if specified.
       * @param message IntonationLoc
       * @param [options] Conversion options
       * @returns Plain object
       */
      public static toObject(
        message: lq.atlas.IntonationLoc,
        options?: $protobuf.IConversionOptions,
      ): { [k: string]: any }

      /**
       * Converts this IntonationLoc to JSON.
       * @returns JSON object
       */
      public toJSON(): { [k: string]: any }
    }

    namespace IntonationLoc {
      /** Loc enum. */
      enum Loc {
        NONE = 0,
        TAILEND = 1,
        PENULTIMATE = 2,
        ANTEPENULT = 3,
        THE_LAST_BUT_THREE = 4,
        MORE = 5,
      }
    }

    /** Properties of a TailSyllable. */
    interface ITailSyllable {
      /** TailSyllable num */
      num?: lq.atlas.TailSyllable.Num | null

      /** TailSyllable numCn */
      numCn?: string | null
    }

    /** Represents a TailSyllable. */
    class TailSyllable implements ITailSyllable {
      /**
       * Constructs a new TailSyllable.
       * @param [properties] Properties to set
       */
      constructor(properties?: lq.atlas.ITailSyllable)

      /** TailSyllable num. */
      public num: lq.atlas.TailSyllable.Num

      /** TailSyllable numCn. */
      public numCn: string

      /**
       * Creates a new TailSyllable instance using the specified properties.
       * @param [properties] Properties to set
       * @returns TailSyllable instance
       */
      public static create(
        properties?: lq.atlas.ITailSyllable,
      ): lq.atlas.TailSyllable

      /**
       * Encodes the specified TailSyllable message. Does not implicitly {@link lq.atlas.TailSyllable.verify|verify} messages.
       * @param message TailSyllable message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encode(
        message: lq.atlas.ITailSyllable,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Encodes the specified TailSyllable message, length delimited. Does not implicitly {@link lq.atlas.TailSyllable.verify|verify} messages.
       * @param message TailSyllable message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encodeDelimited(
        message: lq.atlas.ITailSyllable,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Decodes a TailSyllable message from the specified reader or buffer.
       * @param reader Reader or buffer to decode from
       * @param [length] Message length if known beforehand
       * @returns TailSyllable
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decode(
        reader: $protobuf.Reader | Uint8Array,
        length?: number,
      ): lq.atlas.TailSyllable

      /**
       * Decodes a TailSyllable message from the specified reader or buffer, length delimited.
       * @param reader Reader or buffer to decode from
       * @returns TailSyllable
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decodeDelimited(
        reader: $protobuf.Reader | Uint8Array,
      ): lq.atlas.TailSyllable

      /**
       * Verifies a TailSyllable message.
       * @param message Plain object to verify
       * @returns `null` if valid, otherwise the reason why it is not
       */
      public static verify(message: { [k: string]: any }): string | null

      /**
       * Creates a TailSyllable message from a plain object. Also converts values to their respective internal types.
       * @param object Plain object
       * @returns TailSyllable
       */
      public static fromObject(object: {
        [k: string]: any
      }): lq.atlas.TailSyllable

      /**
       * Creates a plain object from a TailSyllable message. Also converts values to other types if specified.
       * @param message TailSyllable
       * @param [options] Conversion options
       * @returns Plain object
       */
      public static toObject(
        message: lq.atlas.TailSyllable,
        options?: $protobuf.IConversionOptions,
      ): { [k: string]: any }

      /**
       * Converts this TailSyllable to JSON.
       * @returns JSON object
       */
      public toJSON(): { [k: string]: any }
    }

    namespace TailSyllable {
      /** Num enum. */
      enum Num {
        ZERO = 0,
        ONE = 1,
        TWO = 2,
        THREE = 3,
        MORE = 4,
      }
    }

    /** Properties of a BetweenThoughtGroups. */
    interface IBetweenThoughtGroups {
      /** BetweenThoughtGroups kind */
      kind?: lq.atlas.BetweenThoughtGroups.Kind | null

      /** BetweenThoughtGroups kindCn */
      kindCn?: string | null
    }

    /** Represents a BetweenThoughtGroups. */
    class BetweenThoughtGroups implements IBetweenThoughtGroups {
      /**
       * Constructs a new BetweenThoughtGroups.
       * @param [properties] Properties to set
       */
      constructor(properties?: lq.atlas.IBetweenThoughtGroups)

      /** BetweenThoughtGroups kind. */
      public kind: lq.atlas.BetweenThoughtGroups.Kind

      /** BetweenThoughtGroups kindCn. */
      public kindCn: string

      /**
       * Creates a new BetweenThoughtGroups instance using the specified properties.
       * @param [properties] Properties to set
       * @returns BetweenThoughtGroups instance
       */
      public static create(
        properties?: lq.atlas.IBetweenThoughtGroups,
      ): lq.atlas.BetweenThoughtGroups

      /**
       * Encodes the specified BetweenThoughtGroups message. Does not implicitly {@link lq.atlas.BetweenThoughtGroups.verify|verify} messages.
       * @param message BetweenThoughtGroups message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encode(
        message: lq.atlas.IBetweenThoughtGroups,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Encodes the specified BetweenThoughtGroups message, length delimited. Does not implicitly {@link lq.atlas.BetweenThoughtGroups.verify|verify} messages.
       * @param message BetweenThoughtGroups message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encodeDelimited(
        message: lq.atlas.IBetweenThoughtGroups,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Decodes a BetweenThoughtGroups message from the specified reader or buffer.
       * @param reader Reader or buffer to decode from
       * @param [length] Message length if known beforehand
       * @returns BetweenThoughtGroups
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decode(
        reader: $protobuf.Reader | Uint8Array,
        length?: number,
      ): lq.atlas.BetweenThoughtGroups

      /**
       * Decodes a BetweenThoughtGroups message from the specified reader or buffer, length delimited.
       * @param reader Reader or buffer to decode from
       * @returns BetweenThoughtGroups
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decodeDelimited(
        reader: $protobuf.Reader | Uint8Array,
      ): lq.atlas.BetweenThoughtGroups

      /**
       * Verifies a BetweenThoughtGroups message.
       * @param message Plain object to verify
       * @returns `null` if valid, otherwise the reason why it is not
       */
      public static verify(message: { [k: string]: any }): string | null

      /**
       * Creates a BetweenThoughtGroups message from a plain object. Also converts values to their respective internal types.
       * @param object Plain object
       * @returns BetweenThoughtGroups
       */
      public static fromObject(object: {
        [k: string]: any
      }): lq.atlas.BetweenThoughtGroups

      /**
       * Creates a plain object from a BetweenThoughtGroups message. Also converts values to other types if specified.
       * @param message BetweenThoughtGroups
       * @param [options] Conversion options
       * @returns Plain object
       */
      public static toObject(
        message: lq.atlas.BetweenThoughtGroups,
        options?: $protobuf.IConversionOptions,
      ): { [k: string]: any }

      /**
       * Converts this BetweenThoughtGroups to JSON.
       * @returns JSON object
       */
      public toJSON(): { [k: string]: any }
    }

    namespace BetweenThoughtGroups {
      /** Kind enum. */
      enum Kind {
        INVALID = 0,
        COMPLEX_INTONATION = 1,
      }
    }

    /** Properties of an IntonationContext. */
    interface IIntonationContext {
      /** IntonationContext kind */
      kind?: lq.atlas.IntonationContext.Kind | null

      /** IntonationContext kindCn */
      kindCn?: string | null

      /** IntonationContext signal */
      signal?: lq.atlas.IntonationContext.Signal | null

      /** IntonationContext signalCn */
      signalCn?: string | null
    }

    /** Represents an IntonationContext. */
    class IntonationContext implements IIntonationContext {
      /**
       * Constructs a new IntonationContext.
       * @param [properties] Properties to set
       */
      constructor(properties?: lq.atlas.IIntonationContext)

      /** IntonationContext kind. */
      public kind: lq.atlas.IntonationContext.Kind

      /** IntonationContext kindCn. */
      public kindCn: string

      /** IntonationContext signal. */
      public signal: lq.atlas.IntonationContext.Signal

      /** IntonationContext signalCn. */
      public signalCn: string

      /**
       * Creates a new IntonationContext instance using the specified properties.
       * @param [properties] Properties to set
       * @returns IntonationContext instance
       */
      public static create(
        properties?: lq.atlas.IIntonationContext,
      ): lq.atlas.IntonationContext

      /**
       * Encodes the specified IntonationContext message. Does not implicitly {@link lq.atlas.IntonationContext.verify|verify} messages.
       * @param message IntonationContext message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encode(
        message: lq.atlas.IIntonationContext,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Encodes the specified IntonationContext message, length delimited. Does not implicitly {@link lq.atlas.IntonationContext.verify|verify} messages.
       * @param message IntonationContext message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encodeDelimited(
        message: lq.atlas.IIntonationContext,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Decodes an IntonationContext message from the specified reader or buffer.
       * @param reader Reader or buffer to decode from
       * @param [length] Message length if known beforehand
       * @returns IntonationContext
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decode(
        reader: $protobuf.Reader | Uint8Array,
        length?: number,
      ): lq.atlas.IntonationContext

      /**
       * Decodes an IntonationContext message from the specified reader or buffer, length delimited.
       * @param reader Reader or buffer to decode from
       * @returns IntonationContext
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decodeDelimited(
        reader: $protobuf.Reader | Uint8Array,
      ): lq.atlas.IntonationContext

      /**
       * Verifies an IntonationContext message.
       * @param message Plain object to verify
       * @returns `null` if valid, otherwise the reason why it is not
       */
      public static verify(message: { [k: string]: any }): string | null

      /**
       * Creates an IntonationContext message from a plain object. Also converts values to their respective internal types.
       * @param object Plain object
       * @returns IntonationContext
       */
      public static fromObject(object: {
        [k: string]: any
      }): lq.atlas.IntonationContext

      /**
       * Creates a plain object from an IntonationContext message. Also converts values to other types if specified.
       * @param message IntonationContext
       * @param [options] Conversion options
       * @returns Plain object
       */
      public static toObject(
        message: lq.atlas.IntonationContext,
        options?: $protobuf.IConversionOptions,
      ): { [k: string]: any }

      /**
       * Converts this IntonationContext to JSON.
       * @returns JSON object
       */
      public toJSON(): { [k: string]: any }
    }

    namespace IntonationContext {
      /** Kind enum. */
      enum Kind {
        INVALID = 0,
        STATEMENTS = 1,
        YES_NO_QUESTIONS = 2,
        WH_QUESTIONS = 3,
        TAG_QUESTIONS = 4,
        ALTERNATIVE_QUESTIONS = 5,
      }

      /** Signal enum. */
      enum Signal {
        NONE = 0,
        STATEMENTS_SIGNALING_CERTAINTY = 1,
        STATEMENTS_SIGNALING_UNCERTAINTY = 2,
        YES_NO_QUESTIONS_SIGNALING_UNCERTAINTY = 3,
        YES_NO_QUESTIONS_SIGNALING_REQUEST = 4,
        WH_QUESTIONS_SIGNALING_UNCERTAINTY = 5,
        WH_QUESTIONS_SIGNALING_CONFIRMATION = 6,
        TAG_QUESTIONS_SIGNALING_CONFIRMATION = 7,
        TAG_QUESTIONS_SIGNALING_UNCERTAINTY = 8,
        OPENCHOICE_ALTERNATIVE_QUESTIONS = 9,
        CLOSEDCHOICE_ALTERNATIVE_QUESTIONS = 10,
      }
    }

    /** Properties of a Linking. */
    interface ILinking {
      /** Linking category */
      category?: lq.atlas.Linking.Category | null

      /** Linking categoryCn */
      categoryCn?: string | null

      /** Linking kind */
      kind?: string | null

      /** Linking kindCn */
      kindCn?: string | null

      /** Linking content */
      content?: string | null

      /** Linking contentCn */
      contentCn?: string | null

      /** Linking consecutive */
      consecutive?: lq.atlas.IConsecutive | null
    }

    /** Represents a Linking. */
    class Linking implements ILinking {
      /**
       * Constructs a new Linking.
       * @param [properties] Properties to set
       */
      constructor(properties?: lq.atlas.ILinking)

      /** Linking category. */
      public category: lq.atlas.Linking.Category

      /** Linking categoryCn. */
      public categoryCn: string

      /** Linking kind. */
      public kind: string

      /** Linking kindCn. */
      public kindCn: string

      /** Linking content. */
      public content: string

      /** Linking contentCn. */
      public contentCn: string

      /** Linking consecutive. */
      public consecutive?: lq.atlas.IConsecutive | null

      /**
       * Creates a new Linking instance using the specified properties.
       * @param [properties] Properties to set
       * @returns Linking instance
       */
      public static create(properties?: lq.atlas.ILinking): lq.atlas.Linking

      /**
       * Encodes the specified Linking message. Does not implicitly {@link lq.atlas.Linking.verify|verify} messages.
       * @param message Linking message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encode(
        message: lq.atlas.ILinking,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Encodes the specified Linking message, length delimited. Does not implicitly {@link lq.atlas.Linking.verify|verify} messages.
       * @param message Linking message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encodeDelimited(
        message: lq.atlas.ILinking,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Decodes a Linking message from the specified reader or buffer.
       * @param reader Reader or buffer to decode from
       * @param [length] Message length if known beforehand
       * @returns Linking
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decode(
        reader: $protobuf.Reader | Uint8Array,
        length?: number,
      ): lq.atlas.Linking

      /**
       * Decodes a Linking message from the specified reader or buffer, length delimited.
       * @param reader Reader or buffer to decode from
       * @returns Linking
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decodeDelimited(
        reader: $protobuf.Reader | Uint8Array,
      ): lq.atlas.Linking

      /**
       * Verifies a Linking message.
       * @param message Plain object to verify
       * @returns `null` if valid, otherwise the reason why it is not
       */
      public static verify(message: { [k: string]: any }): string | null

      /**
       * Creates a Linking message from a plain object. Also converts values to their respective internal types.
       * @param object Plain object
       * @returns Linking
       */
      public static fromObject(object: { [k: string]: any }): lq.atlas.Linking

      /**
       * Creates a plain object from a Linking message. Also converts values to other types if specified.
       * @param message Linking
       * @param [options] Conversion options
       * @returns Plain object
       */
      public static toObject(
        message: lq.atlas.Linking,
        options?: $protobuf.IConversionOptions,
      ): { [k: string]: any }

      /**
       * Converts this Linking to JSON.
       * @returns JSON object
       */
      public toJSON(): { [k: string]: any }
    }

    namespace Linking {
      /** Category enum. */
      enum Category {
        INVALID = 0,
        CONSONANT_VOWEL = 1,
        CONSONANT_CONSONANT = 2,
        CONSONANT_ASSIMILATION = 3,
        VOWEL_VOWEL = 4,
        STOPS = 5,
        REDUCING_PRONOUNS = 6,
        CONSECUTIVE = 7,
        CONSONANT_VOWEL_N = 8,
        CONSONANT_VOWEL_R = 9,
        CONSONANT_VOWEL_T = 10,
        THOUGHT_GROUP_AND_CONNECTED_SPEECH = 11,
        CONNECTED_SPEEH_CONCEPT = 12,
        CASUAL_SPEECH = 13,
      }
    }

    /** Properties of a Consecutive. */
    interface IConsecutive {
      /** Consecutive num */
      num?: lq.atlas.Consecutive.Num | null

      /** Consecutive numCn */
      numCn?: string | null
    }

    /** Represents a Consecutive. */
    class Consecutive implements IConsecutive {
      /**
       * Constructs a new Consecutive.
       * @param [properties] Properties to set
       */
      constructor(properties?: lq.atlas.IConsecutive)

      /** Consecutive num. */
      public num: lq.atlas.Consecutive.Num

      /** Consecutive numCn. */
      public numCn: string

      /**
       * Creates a new Consecutive instance using the specified properties.
       * @param [properties] Properties to set
       * @returns Consecutive instance
       */
      public static create(
        properties?: lq.atlas.IConsecutive,
      ): lq.atlas.Consecutive

      /**
       * Encodes the specified Consecutive message. Does not implicitly {@link lq.atlas.Consecutive.verify|verify} messages.
       * @param message Consecutive message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encode(
        message: lq.atlas.IConsecutive,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Encodes the specified Consecutive message, length delimited. Does not implicitly {@link lq.atlas.Consecutive.verify|verify} messages.
       * @param message Consecutive message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encodeDelimited(
        message: lq.atlas.IConsecutive,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Decodes a Consecutive message from the specified reader or buffer.
       * @param reader Reader or buffer to decode from
       * @param [length] Message length if known beforehand
       * @returns Consecutive
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decode(
        reader: $protobuf.Reader | Uint8Array,
        length?: number,
      ): lq.atlas.Consecutive

      /**
       * Decodes a Consecutive message from the specified reader or buffer, length delimited.
       * @param reader Reader or buffer to decode from
       * @returns Consecutive
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decodeDelimited(
        reader: $protobuf.Reader | Uint8Array,
      ): lq.atlas.Consecutive

      /**
       * Verifies a Consecutive message.
       * @param message Plain object to verify
       * @returns `null` if valid, otherwise the reason why it is not
       */
      public static verify(message: { [k: string]: any }): string | null

      /**
       * Creates a Consecutive message from a plain object. Also converts values to their respective internal types.
       * @param object Plain object
       * @returns Consecutive
       */
      public static fromObject(object: {
        [k: string]: any
      }): lq.atlas.Consecutive

      /**
       * Creates a plain object from a Consecutive message. Also converts values to other types if specified.
       * @param message Consecutive
       * @param [options] Conversion options
       * @returns Plain object
       */
      public static toObject(
        message: lq.atlas.Consecutive,
        options?: $protobuf.IConversionOptions,
      ): { [k: string]: any }

      /**
       * Converts this Consecutive to JSON.
       * @returns JSON object
       */
      public toJSON(): { [k: string]: any }
    }

    namespace Consecutive {
      /** Num enum. */
      enum Num {
        ZERO = 0,
        TWO = 1,
        MORE = 2,
      }
    }

    /** Properties of a Rhythm. */
    interface IRhythm {
      /** Rhythm category */
      category?: lq.atlas.Rhythm.Category | null

      /** Rhythm categoryCn */
      categoryCn?: string | null

      /** Rhythm stress */
      stress?: lq.atlas.IStress | null

      /** Rhythm weakForm */
      weakForm?: lq.atlas.IWeakForm | null

      /** Rhythm contraction */
      contraction?: lq.atlas.IContraction | null
    }

    /** Represents a Rhythm. */
    class Rhythm implements IRhythm {
      /**
       * Constructs a new Rhythm.
       * @param [properties] Properties to set
       */
      constructor(properties?: lq.atlas.IRhythm)

      /** Rhythm category. */
      public category: lq.atlas.Rhythm.Category

      /** Rhythm categoryCn. */
      public categoryCn: string

      /** Rhythm stress. */
      public stress?: lq.atlas.IStress | null

      /** Rhythm weakForm. */
      public weakForm?: lq.atlas.IWeakForm | null

      /** Rhythm contraction. */
      public contraction?: lq.atlas.IContraction | null

      /**
       * Creates a new Rhythm instance using the specified properties.
       * @param [properties] Properties to set
       * @returns Rhythm instance
       */
      public static create(properties?: lq.atlas.IRhythm): lq.atlas.Rhythm

      /**
       * Encodes the specified Rhythm message. Does not implicitly {@link lq.atlas.Rhythm.verify|verify} messages.
       * @param message Rhythm message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encode(
        message: lq.atlas.IRhythm,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Encodes the specified Rhythm message, length delimited. Does not implicitly {@link lq.atlas.Rhythm.verify|verify} messages.
       * @param message Rhythm message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encodeDelimited(
        message: lq.atlas.IRhythm,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Decodes a Rhythm message from the specified reader or buffer.
       * @param reader Reader or buffer to decode from
       * @param [length] Message length if known beforehand
       * @returns Rhythm
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decode(
        reader: $protobuf.Reader | Uint8Array,
        length?: number,
      ): lq.atlas.Rhythm

      /**
       * Decodes a Rhythm message from the specified reader or buffer, length delimited.
       * @param reader Reader or buffer to decode from
       * @returns Rhythm
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decodeDelimited(
        reader: $protobuf.Reader | Uint8Array,
      ): lq.atlas.Rhythm

      /**
       * Verifies a Rhythm message.
       * @param message Plain object to verify
       * @returns `null` if valid, otherwise the reason why it is not
       */
      public static verify(message: { [k: string]: any }): string | null

      /**
       * Creates a Rhythm message from a plain object. Also converts values to their respective internal types.
       * @param object Plain object
       * @returns Rhythm
       */
      public static fromObject(object: { [k: string]: any }): lq.atlas.Rhythm

      /**
       * Creates a plain object from a Rhythm message. Also converts values to other types if specified.
       * @param message Rhythm
       * @param [options] Conversion options
       * @returns Plain object
       */
      public static toObject(
        message: lq.atlas.Rhythm,
        options?: $protobuf.IConversionOptions,
      ): { [k: string]: any }

      /**
       * Converts this Rhythm to JSON.
       * @returns JSON object
       */
      public toJSON(): { [k: string]: any }
    }

    namespace Rhythm {
      /** Category enum. */
      enum Category {
        INVALID = 0,
        WORD_STRESS = 1,
        WEAK_FORM = 2,
        CONTRACTION = 3,
      }
    }

    /** Properties of a WeakForm. */
    interface IWeakForm {
      /** WeakForm kind */
      kind?: lq.atlas.WeakForm.Kind | null

      /** WeakForm kindCn */
      kindCn?: string | null

      /** WeakForm word */
      word?: string | null

      /** WeakForm wordCn */
      wordCn?: string | null

      /** WeakForm consecutiveWeakForm */
      consecutiveWeakForm?: lq.atlas.IConsecutiveWeakForm | null
    }

    /** Represents a WeakForm. */
    class WeakForm implements IWeakForm {
      /**
       * Constructs a new WeakForm.
       * @param [properties] Properties to set
       */
      constructor(properties?: lq.atlas.IWeakForm)

      /** WeakForm kind. */
      public kind: lq.atlas.WeakForm.Kind

      /** WeakForm kindCn. */
      public kindCn: string

      /** WeakForm word. */
      public word: string

      /** WeakForm wordCn. */
      public wordCn: string

      /** WeakForm consecutiveWeakForm. */
      public consecutiveWeakForm?: lq.atlas.IConsecutiveWeakForm | null

      /**
       * Creates a new WeakForm instance using the specified properties.
       * @param [properties] Properties to set
       * @returns WeakForm instance
       */
      public static create(properties?: lq.atlas.IWeakForm): lq.atlas.WeakForm

      /**
       * Encodes the specified WeakForm message. Does not implicitly {@link lq.atlas.WeakForm.verify|verify} messages.
       * @param message WeakForm message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encode(
        message: lq.atlas.IWeakForm,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Encodes the specified WeakForm message, length delimited. Does not implicitly {@link lq.atlas.WeakForm.verify|verify} messages.
       * @param message WeakForm message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encodeDelimited(
        message: lq.atlas.IWeakForm,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Decodes a WeakForm message from the specified reader or buffer.
       * @param reader Reader or buffer to decode from
       * @param [length] Message length if known beforehand
       * @returns WeakForm
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decode(
        reader: $protobuf.Reader | Uint8Array,
        length?: number,
      ): lq.atlas.WeakForm

      /**
       * Decodes a WeakForm message from the specified reader or buffer, length delimited.
       * @param reader Reader or buffer to decode from
       * @returns WeakForm
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decodeDelimited(
        reader: $protobuf.Reader | Uint8Array,
      ): lq.atlas.WeakForm

      /**
       * Verifies a WeakForm message.
       * @param message Plain object to verify
       * @returns `null` if valid, otherwise the reason why it is not
       */
      public static verify(message: { [k: string]: any }): string | null

      /**
       * Creates a WeakForm message from a plain object. Also converts values to their respective internal types.
       * @param object Plain object
       * @returns WeakForm
       */
      public static fromObject(object: { [k: string]: any }): lq.atlas.WeakForm

      /**
       * Creates a plain object from a WeakForm message. Also converts values to other types if specified.
       * @param message WeakForm
       * @param [options] Conversion options
       * @returns Plain object
       */
      public static toObject(
        message: lq.atlas.WeakForm,
        options?: $protobuf.IConversionOptions,
      ): { [k: string]: any }

      /**
       * Converts this WeakForm to JSON.
       * @returns JSON object
       */
      public toJSON(): { [k: string]: any }
    }

    namespace WeakForm {
      /** Kind enum. */
      enum Kind {
        UNKNOWN = 0,
        ARTICLE = 1,
        CONJUNCTION = 2,
        PERSONAL_PRONOUN = 3,
        POSSESSIVE_PRONOUN = 4,
        COPULA = 5,
        AUXILIARY_VERB = 6,
        MODAL_VERB = 7,
        PREPOSITION = 8,
        EXISTENTIAL_THERE = 9,
        DETERMINER = 10,
        TWO_WEAK_FORM = 11,
        THREE_WEAK_FORM = 12,
        OTHER = 13,
        CONSECUTIVE_WEAK_FORM = 14,
      }
    }

    /** Properties of a ConsecutiveWeakForm. */
    interface IConsecutiveWeakForm {
      /** ConsecutiveWeakForm number */
      number?: lq.atlas.ConsecutiveWeakForm.Number | null

      /** ConsecutiveWeakForm numberCn */
      numberCn?: string | null
    }

    /** Represents a ConsecutiveWeakForm. */
    class ConsecutiveWeakForm implements IConsecutiveWeakForm {
      /**
       * Constructs a new ConsecutiveWeakForm.
       * @param [properties] Properties to set
       */
      constructor(properties?: lq.atlas.IConsecutiveWeakForm)

      /** ConsecutiveWeakForm number. */
      public number: lq.atlas.ConsecutiveWeakForm.Number

      /** ConsecutiveWeakForm numberCn. */
      public numberCn: string

      /**
       * Creates a new ConsecutiveWeakForm instance using the specified properties.
       * @param [properties] Properties to set
       * @returns ConsecutiveWeakForm instance
       */
      public static create(
        properties?: lq.atlas.IConsecutiveWeakForm,
      ): lq.atlas.ConsecutiveWeakForm

      /**
       * Encodes the specified ConsecutiveWeakForm message. Does not implicitly {@link lq.atlas.ConsecutiveWeakForm.verify|verify} messages.
       * @param message ConsecutiveWeakForm message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encode(
        message: lq.atlas.IConsecutiveWeakForm,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Encodes the specified ConsecutiveWeakForm message, length delimited. Does not implicitly {@link lq.atlas.ConsecutiveWeakForm.verify|verify} messages.
       * @param message ConsecutiveWeakForm message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encodeDelimited(
        message: lq.atlas.IConsecutiveWeakForm,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Decodes a ConsecutiveWeakForm message from the specified reader or buffer.
       * @param reader Reader or buffer to decode from
       * @param [length] Message length if known beforehand
       * @returns ConsecutiveWeakForm
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decode(
        reader: $protobuf.Reader | Uint8Array,
        length?: number,
      ): lq.atlas.ConsecutiveWeakForm

      /**
       * Decodes a ConsecutiveWeakForm message from the specified reader or buffer, length delimited.
       * @param reader Reader or buffer to decode from
       * @returns ConsecutiveWeakForm
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decodeDelimited(
        reader: $protobuf.Reader | Uint8Array,
      ): lq.atlas.ConsecutiveWeakForm

      /**
       * Verifies a ConsecutiveWeakForm message.
       * @param message Plain object to verify
       * @returns `null` if valid, otherwise the reason why it is not
       */
      public static verify(message: { [k: string]: any }): string | null

      /**
       * Creates a ConsecutiveWeakForm message from a plain object. Also converts values to their respective internal types.
       * @param object Plain object
       * @returns ConsecutiveWeakForm
       */
      public static fromObject(object: {
        [k: string]: any
      }): lq.atlas.ConsecutiveWeakForm

      /**
       * Creates a plain object from a ConsecutiveWeakForm message. Also converts values to other types if specified.
       * @param message ConsecutiveWeakForm
       * @param [options] Conversion options
       * @returns Plain object
       */
      public static toObject(
        message: lq.atlas.ConsecutiveWeakForm,
        options?: $protobuf.IConversionOptions,
      ): { [k: string]: any }

      /**
       * Converts this ConsecutiveWeakForm to JSON.
       * @returns JSON object
       */
      public toJSON(): { [k: string]: any }
    }

    namespace ConsecutiveWeakForm {
      /** Number enum. */
      enum Number {
        ZERO = 0,
        TWO = 2,
        THREE = 3,
      }
    }

    /** Properties of a Contraction. */
    interface IContraction {
      /** Contraction kind */
      kind?: string | null

      /** Contraction kindCn */
      kindCn?: string | null
    }

    /** Represents a Contraction. */
    class Contraction implements IContraction {
      /**
       * Constructs a new Contraction.
       * @param [properties] Properties to set
       */
      constructor(properties?: lq.atlas.IContraction)

      /** Contraction kind. */
      public kind: string

      /** Contraction kindCn. */
      public kindCn: string

      /**
       * Creates a new Contraction instance using the specified properties.
       * @param [properties] Properties to set
       * @returns Contraction instance
       */
      public static create(
        properties?: lq.atlas.IContraction,
      ): lq.atlas.Contraction

      /**
       * Encodes the specified Contraction message. Does not implicitly {@link lq.atlas.Contraction.verify|verify} messages.
       * @param message Contraction message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encode(
        message: lq.atlas.IContraction,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Encodes the specified Contraction message, length delimited. Does not implicitly {@link lq.atlas.Contraction.verify|verify} messages.
       * @param message Contraction message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encodeDelimited(
        message: lq.atlas.IContraction,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Decodes a Contraction message from the specified reader or buffer.
       * @param reader Reader or buffer to decode from
       * @param [length] Message length if known beforehand
       * @returns Contraction
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decode(
        reader: $protobuf.Reader | Uint8Array,
        length?: number,
      ): lq.atlas.Contraction

      /**
       * Decodes a Contraction message from the specified reader or buffer, length delimited.
       * @param reader Reader or buffer to decode from
       * @returns Contraction
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decodeDelimited(
        reader: $protobuf.Reader | Uint8Array,
      ): lq.atlas.Contraction

      /**
       * Verifies a Contraction message.
       * @param message Plain object to verify
       * @returns `null` if valid, otherwise the reason why it is not
       */
      public static verify(message: { [k: string]: any }): string | null

      /**
       * Creates a Contraction message from a plain object. Also converts values to their respective internal types.
       * @param object Plain object
       * @returns Contraction
       */
      public static fromObject(object: {
        [k: string]: any
      }): lq.atlas.Contraction

      /**
       * Creates a plain object from a Contraction message. Also converts values to other types if specified.
       * @param message Contraction
       * @param [options] Conversion options
       * @returns Plain object
       */
      public static toObject(
        message: lq.atlas.Contraction,
        options?: $protobuf.IConversionOptions,
      ): { [k: string]: any }

      /**
       * Converts this Contraction to JSON.
       * @returns JSON object
       */
      public toJSON(): { [k: string]: any }
    }

    /** Properties of a BellKnowledgePoints. */
    interface IBellKnowledgePoints {
      /** BellKnowledgePoints knowledgePoint */
      knowledgePoint?: lq.atlas.IBellKnowledgePoint[] | null
    }

    /** Represents a BellKnowledgePoints. */
    class BellKnowledgePoints implements IBellKnowledgePoints {
      /**
       * Constructs a new BellKnowledgePoints.
       * @param [properties] Properties to set
       */
      constructor(properties?: lq.atlas.IBellKnowledgePoints)

      /** BellKnowledgePoints knowledgePoint. */
      public knowledgePoint: lq.atlas.IBellKnowledgePoint[]

      /**
       * Creates a new BellKnowledgePoints instance using the specified properties.
       * @param [properties] Properties to set
       * @returns BellKnowledgePoints instance
       */
      public static create(
        properties?: lq.atlas.IBellKnowledgePoints,
      ): lq.atlas.BellKnowledgePoints

      /**
       * Encodes the specified BellKnowledgePoints message. Does not implicitly {@link lq.atlas.BellKnowledgePoints.verify|verify} messages.
       * @param message BellKnowledgePoints message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encode(
        message: lq.atlas.IBellKnowledgePoints,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Encodes the specified BellKnowledgePoints message, length delimited. Does not implicitly {@link lq.atlas.BellKnowledgePoints.verify|verify} messages.
       * @param message BellKnowledgePoints message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encodeDelimited(
        message: lq.atlas.IBellKnowledgePoints,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Decodes a BellKnowledgePoints message from the specified reader or buffer.
       * @param reader Reader or buffer to decode from
       * @param [length] Message length if known beforehand
       * @returns BellKnowledgePoints
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decode(
        reader: $protobuf.Reader | Uint8Array,
        length?: number,
      ): lq.atlas.BellKnowledgePoints

      /**
       * Decodes a BellKnowledgePoints message from the specified reader or buffer, length delimited.
       * @param reader Reader or buffer to decode from
       * @returns BellKnowledgePoints
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decodeDelimited(
        reader: $protobuf.Reader | Uint8Array,
      ): lq.atlas.BellKnowledgePoints

      /**
       * Verifies a BellKnowledgePoints message.
       * @param message Plain object to verify
       * @returns `null` if valid, otherwise the reason why it is not
       */
      public static verify(message: { [k: string]: any }): string | null

      /**
       * Creates a BellKnowledgePoints message from a plain object. Also converts values to their respective internal types.
       * @param object Plain object
       * @returns BellKnowledgePoints
       */
      public static fromObject(object: {
        [k: string]: any
      }): lq.atlas.BellKnowledgePoints

      /**
       * Creates a plain object from a BellKnowledgePoints message. Also converts values to other types if specified.
       * @param message BellKnowledgePoints
       * @param [options] Conversion options
       * @returns Plain object
       */
      public static toObject(
        message: lq.atlas.BellKnowledgePoints,
        options?: $protobuf.IConversionOptions,
      ): { [k: string]: any }

      /**
       * Converts this BellKnowledgePoints to JSON.
       * @returns JSON object
       */
      public toJSON(): { [k: string]: any }
    }

    /** Properties of a BellKnowledgePointMap. */
    interface IBellKnowledgePointMap {
      /** BellKnowledgePointMap knowledgePoint */
      knowledgePoint?: { [k: string]: lq.atlas.IBellKnowledgePoint } | null
    }

    /** Represents a BellKnowledgePointMap. */
    class BellKnowledgePointMap implements IBellKnowledgePointMap {
      /**
       * Constructs a new BellKnowledgePointMap.
       * @param [properties] Properties to set
       */
      constructor(properties?: lq.atlas.IBellKnowledgePointMap)

      /** BellKnowledgePointMap knowledgePoint. */
      public knowledgePoint: { [k: string]: lq.atlas.IBellKnowledgePoint }

      /**
       * Creates a new BellKnowledgePointMap instance using the specified properties.
       * @param [properties] Properties to set
       * @returns BellKnowledgePointMap instance
       */
      public static create(
        properties?: lq.atlas.IBellKnowledgePointMap,
      ): lq.atlas.BellKnowledgePointMap

      /**
       * Encodes the specified BellKnowledgePointMap message. Does not implicitly {@link lq.atlas.BellKnowledgePointMap.verify|verify} messages.
       * @param message BellKnowledgePointMap message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encode(
        message: lq.atlas.IBellKnowledgePointMap,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Encodes the specified BellKnowledgePointMap message, length delimited. Does not implicitly {@link lq.atlas.BellKnowledgePointMap.verify|verify} messages.
       * @param message BellKnowledgePointMap message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encodeDelimited(
        message: lq.atlas.IBellKnowledgePointMap,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Decodes a BellKnowledgePointMap message from the specified reader or buffer.
       * @param reader Reader or buffer to decode from
       * @param [length] Message length if known beforehand
       * @returns BellKnowledgePointMap
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decode(
        reader: $protobuf.Reader | Uint8Array,
        length?: number,
      ): lq.atlas.BellKnowledgePointMap

      /**
       * Decodes a BellKnowledgePointMap message from the specified reader or buffer, length delimited.
       * @param reader Reader or buffer to decode from
       * @returns BellKnowledgePointMap
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decodeDelimited(
        reader: $protobuf.Reader | Uint8Array,
      ): lq.atlas.BellKnowledgePointMap

      /**
       * Verifies a BellKnowledgePointMap message.
       * @param message Plain object to verify
       * @returns `null` if valid, otherwise the reason why it is not
       */
      public static verify(message: { [k: string]: any }): string | null

      /**
       * Creates a BellKnowledgePointMap message from a plain object. Also converts values to their respective internal types.
       * @param object Plain object
       * @returns BellKnowledgePointMap
       */
      public static fromObject(object: {
        [k: string]: any
      }): lq.atlas.BellKnowledgePointMap

      /**
       * Creates a plain object from a BellKnowledgePointMap message. Also converts values to other types if specified.
       * @param message BellKnowledgePointMap
       * @param [options] Conversion options
       * @returns Plain object
       */
      public static toObject(
        message: lq.atlas.BellKnowledgePointMap,
        options?: $protobuf.IConversionOptions,
      ): { [k: string]: any }

      /**
       * Converts this BellKnowledgePointMap to JSON.
       * @returns JSON object
       */
      public toJSON(): { [k: string]: any }
    }

    /** Properties of an IntonationFeedback. */
    interface IIntonationFeedback {
      /** IntonationFeedback height */
      height?: number | null

      /** IntonationFeedback type */
      type?: lq.atlas.IIntonationHow | null
    }

    /** Represents an IntonationFeedback. */
    class IntonationFeedback implements IIntonationFeedback {
      /**
       * Constructs a new IntonationFeedback.
       * @param [properties] Properties to set
       */
      constructor(properties?: lq.atlas.IIntonationFeedback)

      /** IntonationFeedback height. */
      public height: number

      /** IntonationFeedback type. */
      public type?: lq.atlas.IIntonationHow | null

      /**
       * Creates a new IntonationFeedback instance using the specified properties.
       * @param [properties] Properties to set
       * @returns IntonationFeedback instance
       */
      public static create(
        properties?: lq.atlas.IIntonationFeedback,
      ): lq.atlas.IntonationFeedback

      /**
       * Encodes the specified IntonationFeedback message. Does not implicitly {@link lq.atlas.IntonationFeedback.verify|verify} messages.
       * @param message IntonationFeedback message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encode(
        message: lq.atlas.IIntonationFeedback,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Encodes the specified IntonationFeedback message, length delimited. Does not implicitly {@link lq.atlas.IntonationFeedback.verify|verify} messages.
       * @param message IntonationFeedback message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encodeDelimited(
        message: lq.atlas.IIntonationFeedback,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Decodes an IntonationFeedback message from the specified reader or buffer.
       * @param reader Reader or buffer to decode from
       * @param [length] Message length if known beforehand
       * @returns IntonationFeedback
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decode(
        reader: $protobuf.Reader | Uint8Array,
        length?: number,
      ): lq.atlas.IntonationFeedback

      /**
       * Decodes an IntonationFeedback message from the specified reader or buffer, length delimited.
       * @param reader Reader or buffer to decode from
       * @returns IntonationFeedback
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decodeDelimited(
        reader: $protobuf.Reader | Uint8Array,
      ): lq.atlas.IntonationFeedback

      /**
       * Verifies an IntonationFeedback message.
       * @param message Plain object to verify
       * @returns `null` if valid, otherwise the reason why it is not
       */
      public static verify(message: { [k: string]: any }): string | null

      /**
       * Creates an IntonationFeedback message from a plain object. Also converts values to their respective internal types.
       * @param object Plain object
       * @returns IntonationFeedback
       */
      public static fromObject(object: {
        [k: string]: any
      }): lq.atlas.IntonationFeedback

      /**
       * Creates a plain object from an IntonationFeedback message. Also converts values to other types if specified.
       * @param message IntonationFeedback
       * @param [options] Conversion options
       * @returns Plain object
       */
      public static toObject(
        message: lq.atlas.IntonationFeedback,
        options?: $protobuf.IConversionOptions,
      ): { [k: string]: any }

      /**
       * Converts this IntonationFeedback to JSON.
       * @returns JSON object
       */
      public toJSON(): { [k: string]: any }
    }

    /** Properties of a SyllableIntonationMetric. */
    interface ISyllableIntonationMetric {
      /** SyllableIntonationMetric height */
      height?: number | null

      /** SyllableIntonationMetric how */
      how?: lq.atlas.IIntonationHow | null
    }

    /** Represents a SyllableIntonationMetric. */
    class SyllableIntonationMetric implements ISyllableIntonationMetric {
      /**
       * Constructs a new SyllableIntonationMetric.
       * @param [properties] Properties to set
       */
      constructor(properties?: lq.atlas.ISyllableIntonationMetric)

      /** SyllableIntonationMetric height. */
      public height: number

      /** SyllableIntonationMetric how. */
      public how?: lq.atlas.IIntonationHow | null

      /**
       * Creates a new SyllableIntonationMetric instance using the specified properties.
       * @param [properties] Properties to set
       * @returns SyllableIntonationMetric instance
       */
      public static create(
        properties?: lq.atlas.ISyllableIntonationMetric,
      ): lq.atlas.SyllableIntonationMetric

      /**
       * Encodes the specified SyllableIntonationMetric message. Does not implicitly {@link lq.atlas.SyllableIntonationMetric.verify|verify} messages.
       * @param message SyllableIntonationMetric message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encode(
        message: lq.atlas.ISyllableIntonationMetric,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Encodes the specified SyllableIntonationMetric message, length delimited. Does not implicitly {@link lq.atlas.SyllableIntonationMetric.verify|verify} messages.
       * @param message SyllableIntonationMetric message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encodeDelimited(
        message: lq.atlas.ISyllableIntonationMetric,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Decodes a SyllableIntonationMetric message from the specified reader or buffer.
       * @param reader Reader or buffer to decode from
       * @param [length] Message length if known beforehand
       * @returns SyllableIntonationMetric
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decode(
        reader: $protobuf.Reader | Uint8Array,
        length?: number,
      ): lq.atlas.SyllableIntonationMetric

      /**
       * Decodes a SyllableIntonationMetric message from the specified reader or buffer, length delimited.
       * @param reader Reader or buffer to decode from
       * @returns SyllableIntonationMetric
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decodeDelimited(
        reader: $protobuf.Reader | Uint8Array,
      ): lq.atlas.SyllableIntonationMetric

      /**
       * Verifies a SyllableIntonationMetric message.
       * @param message Plain object to verify
       * @returns `null` if valid, otherwise the reason why it is not
       */
      public static verify(message: { [k: string]: any }): string | null

      /**
       * Creates a SyllableIntonationMetric message from a plain object. Also converts values to their respective internal types.
       * @param object Plain object
       * @returns SyllableIntonationMetric
       */
      public static fromObject(object: {
        [k: string]: any
      }): lq.atlas.SyllableIntonationMetric

      /**
       * Creates a plain object from a SyllableIntonationMetric message. Also converts values to other types if specified.
       * @param message SyllableIntonationMetric
       * @param [options] Conversion options
       * @returns Plain object
       */
      public static toObject(
        message: lq.atlas.SyllableIntonationMetric,
        options?: $protobuf.IConversionOptions,
      ): { [k: string]: any }

      /**
       * Converts this SyllableIntonationMetric to JSON.
       * @returns JSON object
       */
      public toJSON(): { [k: string]: any }
    }

    /** Properties of an IntonationMetric. */
    interface IIntonationMetric {
      /** IntonationMetric consistency */
      consistency?: lq.atlas.UserMetric.Consistency | null

      /** IntonationMetric syllablesMetric */
      syllablesMetric?: lq.atlas.ISyllableIntonationMetric[] | null

      /** IntonationMetric how */
      how?: lq.atlas.IIntonationHow | null
    }

    /** Represents an IntonationMetric. */
    class IntonationMetric implements IIntonationMetric {
      /**
       * Constructs a new IntonationMetric.
       * @param [properties] Properties to set
       */
      constructor(properties?: lq.atlas.IIntonationMetric)

      /** IntonationMetric consistency. */
      public consistency: lq.atlas.UserMetric.Consistency

      /** IntonationMetric syllablesMetric. */
      public syllablesMetric: lq.atlas.ISyllableIntonationMetric[]

      /** IntonationMetric how. */
      public how?: lq.atlas.IIntonationHow | null

      /**
       * Creates a new IntonationMetric instance using the specified properties.
       * @param [properties] Properties to set
       * @returns IntonationMetric instance
       */
      public static create(
        properties?: lq.atlas.IIntonationMetric,
      ): lq.atlas.IntonationMetric

      /**
       * Encodes the specified IntonationMetric message. Does not implicitly {@link lq.atlas.IntonationMetric.verify|verify} messages.
       * @param message IntonationMetric message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encode(
        message: lq.atlas.IIntonationMetric,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Encodes the specified IntonationMetric message, length delimited. Does not implicitly {@link lq.atlas.IntonationMetric.verify|verify} messages.
       * @param message IntonationMetric message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encodeDelimited(
        message: lq.atlas.IIntonationMetric,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Decodes an IntonationMetric message from the specified reader or buffer.
       * @param reader Reader or buffer to decode from
       * @param [length] Message length if known beforehand
       * @returns IntonationMetric
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decode(
        reader: $protobuf.Reader | Uint8Array,
        length?: number,
      ): lq.atlas.IntonationMetric

      /**
       * Decodes an IntonationMetric message from the specified reader or buffer, length delimited.
       * @param reader Reader or buffer to decode from
       * @returns IntonationMetric
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decodeDelimited(
        reader: $protobuf.Reader | Uint8Array,
      ): lq.atlas.IntonationMetric

      /**
       * Verifies an IntonationMetric message.
       * @param message Plain object to verify
       * @returns `null` if valid, otherwise the reason why it is not
       */
      public static verify(message: { [k: string]: any }): string | null

      /**
       * Creates an IntonationMetric message from a plain object. Also converts values to their respective internal types.
       * @param object Plain object
       * @returns IntonationMetric
       */
      public static fromObject(object: {
        [k: string]: any
      }): lq.atlas.IntonationMetric

      /**
       * Creates a plain object from an IntonationMetric message. Also converts values to other types if specified.
       * @param message IntonationMetric
       * @param [options] Conversion options
       * @returns Plain object
       */
      public static toObject(
        message: lq.atlas.IntonationMetric,
        options?: $protobuf.IConversionOptions,
      ): { [k: string]: any }

      /**
       * Converts this IntonationMetric to JSON.
       * @returns JSON object
       */
      public toJSON(): { [k: string]: any }
    }

    /** Properties of a WeakformMetric. */
    interface IWeakformMetric {
      /** WeakformMetric start */
      start?: number | null

      /** WeakformMetric end */
      end?: number | null

      /** WeakformMetric isGroupWeak */
      isGroupWeak?: lq.atlas.UserMetric.Consistency | null

      /** WeakformMetric words */
      words?: string[] | null

      /** WeakformMetric weakPhones */
      weakPhones?: string[] | null

      /** WeakformMetric phones */
      phones?: string[] | null

      /** WeakformMetric isWeak */
      isWeak?: lq.atlas.UserMetric.Consistency[] | null
    }

    /** Represents a WeakformMetric. */
    class WeakformMetric implements IWeakformMetric {
      /**
       * Constructs a new WeakformMetric.
       * @param [properties] Properties to set
       */
      constructor(properties?: lq.atlas.IWeakformMetric)

      /** WeakformMetric start. */
      public start: number

      /** WeakformMetric end. */
      public end: number

      /** WeakformMetric isGroupWeak. */
      public isGroupWeak: lq.atlas.UserMetric.Consistency

      /** WeakformMetric words. */
      public words: string[]

      /** WeakformMetric weakPhones. */
      public weakPhones: string[]

      /** WeakformMetric phones. */
      public phones: string[]

      /** WeakformMetric isWeak. */
      public isWeak: lq.atlas.UserMetric.Consistency[]

      /**
       * Creates a new WeakformMetric instance using the specified properties.
       * @param [properties] Properties to set
       * @returns WeakformMetric instance
       */
      public static create(
        properties?: lq.atlas.IWeakformMetric,
      ): lq.atlas.WeakformMetric

      /**
       * Encodes the specified WeakformMetric message. Does not implicitly {@link lq.atlas.WeakformMetric.verify|verify} messages.
       * @param message WeakformMetric message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encode(
        message: lq.atlas.IWeakformMetric,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Encodes the specified WeakformMetric message, length delimited. Does not implicitly {@link lq.atlas.WeakformMetric.verify|verify} messages.
       * @param message WeakformMetric message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encodeDelimited(
        message: lq.atlas.IWeakformMetric,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Decodes a WeakformMetric message from the specified reader or buffer.
       * @param reader Reader or buffer to decode from
       * @param [length] Message length if known beforehand
       * @returns WeakformMetric
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decode(
        reader: $protobuf.Reader | Uint8Array,
        length?: number,
      ): lq.atlas.WeakformMetric

      /**
       * Decodes a WeakformMetric message from the specified reader or buffer, length delimited.
       * @param reader Reader or buffer to decode from
       * @returns WeakformMetric
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decodeDelimited(
        reader: $protobuf.Reader | Uint8Array,
      ): lq.atlas.WeakformMetric

      /**
       * Verifies a WeakformMetric message.
       * @param message Plain object to verify
       * @returns `null` if valid, otherwise the reason why it is not
       */
      public static verify(message: { [k: string]: any }): string | null

      /**
       * Creates a WeakformMetric message from a plain object. Also converts values to their respective internal types.
       * @param object Plain object
       * @returns WeakformMetric
       */
      public static fromObject(object: {
        [k: string]: any
      }): lq.atlas.WeakformMetric

      /**
       * Creates a plain object from a WeakformMetric message. Also converts values to other types if specified.
       * @param message WeakformMetric
       * @param [options] Conversion options
       * @returns Plain object
       */
      public static toObject(
        message: lq.atlas.WeakformMetric,
        options?: $protobuf.IConversionOptions,
      ): { [k: string]: any }

      /**
       * Converts this WeakformMetric to JSON.
       * @returns JSON object
       */
      public toJSON(): { [k: string]: any }
    }

    /** Properties of a Position. */
    interface IPosition {
      /** Position start */
      start?: number | null

      /** Position end */
      end?: number | null
    }

    /** Represents a Position. */
    class Position implements IPosition {
      /**
       * Constructs a new Position.
       * @param [properties] Properties to set
       */
      constructor(properties?: lq.atlas.IPosition)

      /** Position start. */
      public start: number

      /** Position end. */
      public end: number

      /**
       * Creates a new Position instance using the specified properties.
       * @param [properties] Properties to set
       * @returns Position instance
       */
      public static create(properties?: lq.atlas.IPosition): lq.atlas.Position

      /**
       * Encodes the specified Position message. Does not implicitly {@link lq.atlas.Position.verify|verify} messages.
       * @param message Position message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encode(
        message: lq.atlas.IPosition,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Encodes the specified Position message, length delimited. Does not implicitly {@link lq.atlas.Position.verify|verify} messages.
       * @param message Position message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encodeDelimited(
        message: lq.atlas.IPosition,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Decodes a Position message from the specified reader or buffer.
       * @param reader Reader or buffer to decode from
       * @param [length] Message length if known beforehand
       * @returns Position
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decode(
        reader: $protobuf.Reader | Uint8Array,
        length?: number,
      ): lq.atlas.Position

      /**
       * Decodes a Position message from the specified reader or buffer, length delimited.
       * @param reader Reader or buffer to decode from
       * @returns Position
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decodeDelimited(
        reader: $protobuf.Reader | Uint8Array,
      ): lq.atlas.Position

      /**
       * Verifies a Position message.
       * @param message Plain object to verify
       * @returns `null` if valid, otherwise the reason why it is not
       */
      public static verify(message: { [k: string]: any }): string | null

      /**
       * Creates a Position message from a plain object. Also converts values to their respective internal types.
       * @param object Plain object
       * @returns Position
       */
      public static fromObject(object: { [k: string]: any }): lq.atlas.Position

      /**
       * Creates a plain object from a Position message. Also converts values to other types if specified.
       * @param message Position
       * @param [options] Conversion options
       * @returns Plain object
       */
      public static toObject(
        message: lq.atlas.Position,
        options?: $protobuf.IConversionOptions,
      ): { [k: string]: any }

      /**
       * Converts this Position to JSON.
       * @returns JSON object
       */
      public toJSON(): { [k: string]: any }
    }

    /** Properties of a SyllableStressMetric. */
    interface ISyllableStressMetric {
      /** SyllableStressMetric canonicalSyllableCount */
      canonicalSyllableCount?: number | null

      /** SyllableStressMetric userSyllableCount */
      userSyllableCount?: number | null

      /** SyllableStressMetric canonicalStressPos */
      canonicalStressPos?: number | null

      /** SyllableStressMetric userStressPos */
      userStressPos?: number | null

      /** SyllableStressMetric sylPosition */
      sylPosition?: lq.atlas.IPosition[] | null
    }

    /** Represents a SyllableStressMetric. */
    class SyllableStressMetric implements ISyllableStressMetric {
      /**
       * Constructs a new SyllableStressMetric.
       * @param [properties] Properties to set
       */
      constructor(properties?: lq.atlas.ISyllableStressMetric)

      /** SyllableStressMetric canonicalSyllableCount. */
      public canonicalSyllableCount: number

      /** SyllableStressMetric userSyllableCount. */
      public userSyllableCount: number

      /** SyllableStressMetric canonicalStressPos. */
      public canonicalStressPos: number

      /** SyllableStressMetric userStressPos. */
      public userStressPos: number

      /** SyllableStressMetric sylPosition. */
      public sylPosition: lq.atlas.IPosition[]

      /**
       * Creates a new SyllableStressMetric instance using the specified properties.
       * @param [properties] Properties to set
       * @returns SyllableStressMetric instance
       */
      public static create(
        properties?: lq.atlas.ISyllableStressMetric,
      ): lq.atlas.SyllableStressMetric

      /**
       * Encodes the specified SyllableStressMetric message. Does not implicitly {@link lq.atlas.SyllableStressMetric.verify|verify} messages.
       * @param message SyllableStressMetric message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encode(
        message: lq.atlas.ISyllableStressMetric,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Encodes the specified SyllableStressMetric message, length delimited. Does not implicitly {@link lq.atlas.SyllableStressMetric.verify|verify} messages.
       * @param message SyllableStressMetric message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encodeDelimited(
        message: lq.atlas.ISyllableStressMetric,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Decodes a SyllableStressMetric message from the specified reader or buffer.
       * @param reader Reader or buffer to decode from
       * @param [length] Message length if known beforehand
       * @returns SyllableStressMetric
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decode(
        reader: $protobuf.Reader | Uint8Array,
        length?: number,
      ): lq.atlas.SyllableStressMetric

      /**
       * Decodes a SyllableStressMetric message from the specified reader or buffer, length delimited.
       * @param reader Reader or buffer to decode from
       * @returns SyllableStressMetric
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decodeDelimited(
        reader: $protobuf.Reader | Uint8Array,
      ): lq.atlas.SyllableStressMetric

      /**
       * Verifies a SyllableStressMetric message.
       * @param message Plain object to verify
       * @returns `null` if valid, otherwise the reason why it is not
       */
      public static verify(message: { [k: string]: any }): string | null

      /**
       * Creates a SyllableStressMetric message from a plain object. Also converts values to their respective internal types.
       * @param object Plain object
       * @returns SyllableStressMetric
       */
      public static fromObject(object: {
        [k: string]: any
      }): lq.atlas.SyllableStressMetric

      /**
       * Creates a plain object from a SyllableStressMetric message. Also converts values to other types if specified.
       * @param message SyllableStressMetric
       * @param [options] Conversion options
       * @returns Plain object
       */
      public static toObject(
        message: lq.atlas.SyllableStressMetric,
        options?: $protobuf.IConversionOptions,
      ): { [k: string]: any }

      /**
       * Converts this SyllableStressMetric to JSON.
       * @returns JSON object
       */
      public toJSON(): { [k: string]: any }
    }

    /** Properties of a UserMetric. */
    interface IUserMetric {
      /** UserMetric score */
      score?: number | null

      /** UserMetric consistency */
      consistency?: lq.atlas.UserMetric.Consistency | null

      /** UserMetric intonationMetric */
      intonationMetric?: lq.atlas.IIntonationMetric | null

      /** UserMetric weakformMetric */
      weakformMetric?: lq.atlas.IWeakformMetric | null

      /** UserMetric syllablestressMetric */
      syllablestressMetric?: lq.atlas.ISyllableStressMetric | null

      /** UserMetric kpPosition */
      kpPosition?: lq.atlas.IPosition | null

      /** UserMetric nodeId */
      nodeId?: string | null
    }

    /** Represents a UserMetric. */
    class UserMetric implements IUserMetric {
      /**
       * Constructs a new UserMetric.
       * @param [properties] Properties to set
       */
      constructor(properties?: lq.atlas.IUserMetric)

      /** UserMetric score. */
      public score: number

      /** UserMetric consistency. */
      public consistency: lq.atlas.UserMetric.Consistency

      /** UserMetric intonationMetric. */
      public intonationMetric?: lq.atlas.IIntonationMetric | null

      /** UserMetric weakformMetric. */
      public weakformMetric?: lq.atlas.IWeakformMetric | null

      /** UserMetric syllablestressMetric. */
      public syllablestressMetric?: lq.atlas.ISyllableStressMetric | null

      /** UserMetric kpPosition. */
      public kpPosition?: lq.atlas.IPosition | null

      /** UserMetric nodeId. */
      public nodeId: string

      /**
       * Creates a new UserMetric instance using the specified properties.
       * @param [properties] Properties to set
       * @returns UserMetric instance
       */
      public static create(
        properties?: lq.atlas.IUserMetric,
      ): lq.atlas.UserMetric

      /**
       * Encodes the specified UserMetric message. Does not implicitly {@link lq.atlas.UserMetric.verify|verify} messages.
       * @param message UserMetric message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encode(
        message: lq.atlas.IUserMetric,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Encodes the specified UserMetric message, length delimited. Does not implicitly {@link lq.atlas.UserMetric.verify|verify} messages.
       * @param message UserMetric message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encodeDelimited(
        message: lq.atlas.IUserMetric,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Decodes a UserMetric message from the specified reader or buffer.
       * @param reader Reader or buffer to decode from
       * @param [length] Message length if known beforehand
       * @returns UserMetric
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decode(
        reader: $protobuf.Reader | Uint8Array,
        length?: number,
      ): lq.atlas.UserMetric

      /**
       * Decodes a UserMetric message from the specified reader or buffer, length delimited.
       * @param reader Reader or buffer to decode from
       * @returns UserMetric
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decodeDelimited(
        reader: $protobuf.Reader | Uint8Array,
      ): lq.atlas.UserMetric

      /**
       * Verifies a UserMetric message.
       * @param message Plain object to verify
       * @returns `null` if valid, otherwise the reason why it is not
       */
      public static verify(message: { [k: string]: any }): string | null

      /**
       * Creates a UserMetric message from a plain object. Also converts values to their respective internal types.
       * @param object Plain object
       * @returns UserMetric
       */
      public static fromObject(object: {
        [k: string]: any
      }): lq.atlas.UserMetric

      /**
       * Creates a plain object from a UserMetric message. Also converts values to other types if specified.
       * @param message UserMetric
       * @param [options] Conversion options
       * @returns Plain object
       */
      public static toObject(
        message: lq.atlas.UserMetric,
        options?: $protobuf.IConversionOptions,
      ): { [k: string]: any }

      /**
       * Converts this UserMetric to JSON.
       * @returns JSON object
       */
      public toJSON(): { [k: string]: any }
    }

    namespace UserMetric {
      /** Consistency enum. */
      enum Consistency {
        INVALID = 0,
        CONSISTENT = 1,
        INCONSISTENT = 2,
      }
    }

    /** Properties of a RetrievedBellKnowledgePoint. */
    interface IRetrievedBellKnowledgePoint {
      /** RetrievedBellKnowledgePoint knowledgePoint */
      knowledgePoint?: lq.atlas.IBellKnowledgePoint | null

      /** RetrievedBellKnowledgePoint userMetric */
      userMetric?: lq.atlas.IUserMetric | null
    }

    /** Represents a RetrievedBellKnowledgePoint. */
    class RetrievedBellKnowledgePoint implements IRetrievedBellKnowledgePoint {
      /**
       * Constructs a new RetrievedBellKnowledgePoint.
       * @param [properties] Properties to set
       */
      constructor(properties?: lq.atlas.IRetrievedBellKnowledgePoint)

      /** RetrievedBellKnowledgePoint knowledgePoint. */
      public knowledgePoint?: lq.atlas.IBellKnowledgePoint | null

      /** RetrievedBellKnowledgePoint userMetric. */
      public userMetric?: lq.atlas.IUserMetric | null

      /**
       * Creates a new RetrievedBellKnowledgePoint instance using the specified properties.
       * @param [properties] Properties to set
       * @returns RetrievedBellKnowledgePoint instance
       */
      public static create(
        properties?: lq.atlas.IRetrievedBellKnowledgePoint,
      ): lq.atlas.RetrievedBellKnowledgePoint

      /**
       * Encodes the specified RetrievedBellKnowledgePoint message. Does not implicitly {@link lq.atlas.RetrievedBellKnowledgePoint.verify|verify} messages.
       * @param message RetrievedBellKnowledgePoint message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encode(
        message: lq.atlas.IRetrievedBellKnowledgePoint,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Encodes the specified RetrievedBellKnowledgePoint message, length delimited. Does not implicitly {@link lq.atlas.RetrievedBellKnowledgePoint.verify|verify} messages.
       * @param message RetrievedBellKnowledgePoint message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encodeDelimited(
        message: lq.atlas.IRetrievedBellKnowledgePoint,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Decodes a RetrievedBellKnowledgePoint message from the specified reader or buffer.
       * @param reader Reader or buffer to decode from
       * @param [length] Message length if known beforehand
       * @returns RetrievedBellKnowledgePoint
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decode(
        reader: $protobuf.Reader | Uint8Array,
        length?: number,
      ): lq.atlas.RetrievedBellKnowledgePoint

      /**
       * Decodes a RetrievedBellKnowledgePoint message from the specified reader or buffer, length delimited.
       * @param reader Reader or buffer to decode from
       * @returns RetrievedBellKnowledgePoint
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decodeDelimited(
        reader: $protobuf.Reader | Uint8Array,
      ): lq.atlas.RetrievedBellKnowledgePoint

      /**
       * Verifies a RetrievedBellKnowledgePoint message.
       * @param message Plain object to verify
       * @returns `null` if valid, otherwise the reason why it is not
       */
      public static verify(message: { [k: string]: any }): string | null

      /**
       * Creates a RetrievedBellKnowledgePoint message from a plain object. Also converts values to their respective internal types.
       * @param object Plain object
       * @returns RetrievedBellKnowledgePoint
       */
      public static fromObject(object: {
        [k: string]: any
      }): lq.atlas.RetrievedBellKnowledgePoint

      /**
       * Creates a plain object from a RetrievedBellKnowledgePoint message. Also converts values to other types if specified.
       * @param message RetrievedBellKnowledgePoint
       * @param [options] Conversion options
       * @returns Plain object
       */
      public static toObject(
        message: lq.atlas.RetrievedBellKnowledgePoint,
        options?: $protobuf.IConversionOptions,
      ): { [k: string]: any }

      /**
       * Converts this RetrievedBellKnowledgePoint to JSON.
       * @returns JSON object
       */
      public toJSON(): { [k: string]: any }
    }

    /** Properties of a Node. */
    interface INode {
      /** Node id */
      id?: string | null

      /** Node preId */
      preId?: string | null

      /** Node type */
      type?: string | null

      /** Node typeCn */
      typeCn?: string | null

      /** Node definition */
      definition?: string | null

      /** Node label */
      label?: string | null

      /** Node deprecated */
      deprecated?: boolean | null

      /** Node deprecatedSinceTimestampUsec */
      deprecatedSinceTimestampUsec?: number | Long | null
    }

    /** Represents a Node. */
    class Node implements INode {
      /**
       * Constructs a new Node.
       * @param [properties] Properties to set
       */
      constructor(properties?: lq.atlas.INode)

      /** Node id. */
      public id: string

      /** Node preId. */
      public preId: string

      /** Node type. */
      public type: string

      /** Node typeCn. */
      public typeCn: string

      /** Node definition. */
      public definition: string

      /** Node label. */
      public label: string

      /** Node deprecated. */
      public deprecated: boolean

      /** Node deprecatedSinceTimestampUsec. */
      public deprecatedSinceTimestampUsec: number | Long

      /**
       * Creates a new Node instance using the specified properties.
       * @param [properties] Properties to set
       * @returns Node instance
       */
      public static create(properties?: lq.atlas.INode): lq.atlas.Node

      /**
       * Encodes the specified Node message. Does not implicitly {@link lq.atlas.Node.verify|verify} messages.
       * @param message Node message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encode(
        message: lq.atlas.INode,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Encodes the specified Node message, length delimited. Does not implicitly {@link lq.atlas.Node.verify|verify} messages.
       * @param message Node message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encodeDelimited(
        message: lq.atlas.INode,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Decodes a Node message from the specified reader or buffer.
       * @param reader Reader or buffer to decode from
       * @param [length] Message length if known beforehand
       * @returns Node
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decode(
        reader: $protobuf.Reader | Uint8Array,
        length?: number,
      ): lq.atlas.Node

      /**
       * Decodes a Node message from the specified reader or buffer, length delimited.
       * @param reader Reader or buffer to decode from
       * @returns Node
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decodeDelimited(
        reader: $protobuf.Reader | Uint8Array,
      ): lq.atlas.Node

      /**
       * Verifies a Node message.
       * @param message Plain object to verify
       * @returns `null` if valid, otherwise the reason why it is not
       */
      public static verify(message: { [k: string]: any }): string | null

      /**
       * Creates a Node message from a plain object. Also converts values to their respective internal types.
       * @param object Plain object
       * @returns Node
       */
      public static fromObject(object: { [k: string]: any }): lq.atlas.Node

      /**
       * Creates a plain object from a Node message. Also converts values to other types if specified.
       * @param message Node
       * @param [options] Conversion options
       * @returns Plain object
       */
      public static toObject(
        message: lq.atlas.Node,
        options?: $protobuf.IConversionOptions,
      ): { [k: string]: any }

      /**
       * Converts this Node to JSON.
       * @returns JSON object
       */
      public toJSON(): { [k: string]: any }
    }

    /** Properties of a BellNodeMap. */
    interface IBellNodeMap {
      /** BellNodeMap node */
      node?: { [k: string]: lq.atlas.INode } | null
    }

    /** Represents a BellNodeMap. */
    class BellNodeMap implements IBellNodeMap {
      /**
       * Constructs a new BellNodeMap.
       * @param [properties] Properties to set
       */
      constructor(properties?: lq.atlas.IBellNodeMap)

      /** BellNodeMap node. */
      public node: { [k: string]: lq.atlas.INode }

      /**
       * Creates a new BellNodeMap instance using the specified properties.
       * @param [properties] Properties to set
       * @returns BellNodeMap instance
       */
      public static create(
        properties?: lq.atlas.IBellNodeMap,
      ): lq.atlas.BellNodeMap

      /**
       * Encodes the specified BellNodeMap message. Does not implicitly {@link lq.atlas.BellNodeMap.verify|verify} messages.
       * @param message BellNodeMap message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encode(
        message: lq.atlas.IBellNodeMap,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Encodes the specified BellNodeMap message, length delimited. Does not implicitly {@link lq.atlas.BellNodeMap.verify|verify} messages.
       * @param message BellNodeMap message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encodeDelimited(
        message: lq.atlas.IBellNodeMap,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Decodes a BellNodeMap message from the specified reader or buffer.
       * @param reader Reader or buffer to decode from
       * @param [length] Message length if known beforehand
       * @returns BellNodeMap
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decode(
        reader: $protobuf.Reader | Uint8Array,
        length?: number,
      ): lq.atlas.BellNodeMap

      /**
       * Decodes a BellNodeMap message from the specified reader or buffer, length delimited.
       * @param reader Reader or buffer to decode from
       * @returns BellNodeMap
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decodeDelimited(
        reader: $protobuf.Reader | Uint8Array,
      ): lq.atlas.BellNodeMap

      /**
       * Verifies a BellNodeMap message.
       * @param message Plain object to verify
       * @returns `null` if valid, otherwise the reason why it is not
       */
      public static verify(message: { [k: string]: any }): string | null

      /**
       * Creates a BellNodeMap message from a plain object. Also converts values to their respective internal types.
       * @param object Plain object
       * @returns BellNodeMap
       */
      public static fromObject(object: {
        [k: string]: any
      }): lq.atlas.BellNodeMap

      /**
       * Creates a plain object from a BellNodeMap message. Also converts values to other types if specified.
       * @param message BellNodeMap
       * @param [options] Conversion options
       * @returns Plain object
       */
      public static toObject(
        message: lq.atlas.BellNodeMap,
        options?: $protobuf.IConversionOptions,
      ): { [k: string]: any }

      /**
       * Converts this BellNodeMap to JSON.
       * @returns JSON object
       */
      public toJSON(): { [k: string]: any }
    }

    /** Properties of a RetrievedBellNode. */
    interface IRetrievedBellNode {
      /** RetrievedBellNode node */
      node?: lq.atlas.INode | null

      /** RetrievedBellNode highlight */
      highlight?: lq.ITextHighlight | null
    }

    /** Represents a RetrievedBellNode. */
    class RetrievedBellNode implements IRetrievedBellNode {
      /**
       * Constructs a new RetrievedBellNode.
       * @param [properties] Properties to set
       */
      constructor(properties?: lq.atlas.IRetrievedBellNode)

      /** RetrievedBellNode node. */
      public node?: lq.atlas.INode | null

      /** RetrievedBellNode highlight. */
      public highlight?: lq.ITextHighlight | null

      /**
       * Creates a new RetrievedBellNode instance using the specified properties.
       * @param [properties] Properties to set
       * @returns RetrievedBellNode instance
       */
      public static create(
        properties?: lq.atlas.IRetrievedBellNode,
      ): lq.atlas.RetrievedBellNode

      /**
       * Encodes the specified RetrievedBellNode message. Does not implicitly {@link lq.atlas.RetrievedBellNode.verify|verify} messages.
       * @param message RetrievedBellNode message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encode(
        message: lq.atlas.IRetrievedBellNode,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Encodes the specified RetrievedBellNode message, length delimited. Does not implicitly {@link lq.atlas.RetrievedBellNode.verify|verify} messages.
       * @param message RetrievedBellNode message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encodeDelimited(
        message: lq.atlas.IRetrievedBellNode,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Decodes a RetrievedBellNode message from the specified reader or buffer.
       * @param reader Reader or buffer to decode from
       * @param [length] Message length if known beforehand
       * @returns RetrievedBellNode
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decode(
        reader: $protobuf.Reader | Uint8Array,
        length?: number,
      ): lq.atlas.RetrievedBellNode

      /**
       * Decodes a RetrievedBellNode message from the specified reader or buffer, length delimited.
       * @param reader Reader or buffer to decode from
       * @returns RetrievedBellNode
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decodeDelimited(
        reader: $protobuf.Reader | Uint8Array,
      ): lq.atlas.RetrievedBellNode

      /**
       * Verifies a RetrievedBellNode message.
       * @param message Plain object to verify
       * @returns `null` if valid, otherwise the reason why it is not
       */
      public static verify(message: { [k: string]: any }): string | null

      /**
       * Creates a RetrievedBellNode message from a plain object. Also converts values to their respective internal types.
       * @param object Plain object
       * @returns RetrievedBellNode
       */
      public static fromObject(object: {
        [k: string]: any
      }): lq.atlas.RetrievedBellNode

      /**
       * Creates a plain object from a RetrievedBellNode message. Also converts values to other types if specified.
       * @param message RetrievedBellNode
       * @param [options] Conversion options
       * @returns Plain object
       */
      public static toObject(
        message: lq.atlas.RetrievedBellNode,
        options?: $protobuf.IConversionOptions,
      ): { [k: string]: any }

      /**
       * Converts this RetrievedBellNode to JSON.
       * @returns JSON object
       */
      public toJSON(): { [k: string]: any }
    }

    /** Properties of a BellKnowledgePointRelation. */
    interface IBellKnowledgePointRelation {
      /** BellKnowledgePointRelation activityId */
      activityId?: string | null

      /** BellKnowledgePointRelation type */
      type?: lq.atlas.BellKnowledgePointRelation.Type | null

      /** BellKnowledgePointRelation nodeId */
      nodeId?: string[] | null
    }

    /** Represents a BellKnowledgePointRelation. */
    class BellKnowledgePointRelation implements IBellKnowledgePointRelation {
      /**
       * Constructs a new BellKnowledgePointRelation.
       * @param [properties] Properties to set
       */
      constructor(properties?: lq.atlas.IBellKnowledgePointRelation)

      /** BellKnowledgePointRelation activityId. */
      public activityId: string

      /** BellKnowledgePointRelation type. */
      public type: lq.atlas.BellKnowledgePointRelation.Type

      /** BellKnowledgePointRelation nodeId. */
      public nodeId: string[]

      /**
       * Creates a new BellKnowledgePointRelation instance using the specified properties.
       * @param [properties] Properties to set
       * @returns BellKnowledgePointRelation instance
       */
      public static create(
        properties?: lq.atlas.IBellKnowledgePointRelation,
      ): lq.atlas.BellKnowledgePointRelation

      /**
       * Encodes the specified BellKnowledgePointRelation message. Does not implicitly {@link lq.atlas.BellKnowledgePointRelation.verify|verify} messages.
       * @param message BellKnowledgePointRelation message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encode(
        message: lq.atlas.IBellKnowledgePointRelation,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Encodes the specified BellKnowledgePointRelation message, length delimited. Does not implicitly {@link lq.atlas.BellKnowledgePointRelation.verify|verify} messages.
       * @param message BellKnowledgePointRelation message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encodeDelimited(
        message: lq.atlas.IBellKnowledgePointRelation,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Decodes a BellKnowledgePointRelation message from the specified reader or buffer.
       * @param reader Reader or buffer to decode from
       * @param [length] Message length if known beforehand
       * @returns BellKnowledgePointRelation
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decode(
        reader: $protobuf.Reader | Uint8Array,
        length?: number,
      ): lq.atlas.BellKnowledgePointRelation

      /**
       * Decodes a BellKnowledgePointRelation message from the specified reader or buffer, length delimited.
       * @param reader Reader or buffer to decode from
       * @returns BellKnowledgePointRelation
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decodeDelimited(
        reader: $protobuf.Reader | Uint8Array,
      ): lq.atlas.BellKnowledgePointRelation

      /**
       * Verifies a BellKnowledgePointRelation message.
       * @param message Plain object to verify
       * @returns `null` if valid, otherwise the reason why it is not
       */
      public static verify(message: { [k: string]: any }): string | null

      /**
       * Creates a BellKnowledgePointRelation message from a plain object. Also converts values to their respective internal types.
       * @param object Plain object
       * @returns BellKnowledgePointRelation
       */
      public static fromObject(object: {
        [k: string]: any
      }): lq.atlas.BellKnowledgePointRelation

      /**
       * Creates a plain object from a BellKnowledgePointRelation message. Also converts values to other types if specified.
       * @param message BellKnowledgePointRelation
       * @param [options] Conversion options
       * @returns Plain object
       */
      public static toObject(
        message: lq.atlas.BellKnowledgePointRelation,
        options?: $protobuf.IConversionOptions,
      ): { [k: string]: any }

      /**
       * Converts this BellKnowledgePointRelation to JSON.
       * @returns JSON object
       */
      public toJSON(): { [k: string]: any }
    }

    namespace BellKnowledgePointRelation {
      /** Type enum. */
      enum Type {
        UNKNOWN = 0,
        PRIMARY = 1,
        DISPLAY = 2,
      }
    }

    /** Properties of a BellKnowledgePointNodeRelations. */
    interface IBellKnowledgePointNodeRelations {
      /** BellKnowledgePointNodeRelations node */
      node?: { [k: string]: lq.atlas.INode } | null

      /** BellKnowledgePointNodeRelations bellKnowledgePointNodeRelation */
      bellKnowledgePointNodeRelation?:
        | lq.atlas.IBellKnowledgePointRelation[]
        | null
    }

    /** Represents a BellKnowledgePointNodeRelations. */
    class BellKnowledgePointNodeRelations
      implements IBellKnowledgePointNodeRelations {
      /**
       * Constructs a new BellKnowledgePointNodeRelations.
       * @param [properties] Properties to set
       */
      constructor(properties?: lq.atlas.IBellKnowledgePointNodeRelations)

      /** BellKnowledgePointNodeRelations node. */
      public node: { [k: string]: lq.atlas.INode }

      /** BellKnowledgePointNodeRelations bellKnowledgePointNodeRelation. */
      public bellKnowledgePointNodeRelation: lq.atlas.IBellKnowledgePointRelation[]

      /**
       * Creates a new BellKnowledgePointNodeRelations instance using the specified properties.
       * @param [properties] Properties to set
       * @returns BellKnowledgePointNodeRelations instance
       */
      public static create(
        properties?: lq.atlas.IBellKnowledgePointNodeRelations,
      ): lq.atlas.BellKnowledgePointNodeRelations

      /**
       * Encodes the specified BellKnowledgePointNodeRelations message. Does not implicitly {@link lq.atlas.BellKnowledgePointNodeRelations.verify|verify} messages.
       * @param message BellKnowledgePointNodeRelations message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encode(
        message: lq.atlas.IBellKnowledgePointNodeRelations,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Encodes the specified BellKnowledgePointNodeRelations message, length delimited. Does not implicitly {@link lq.atlas.BellKnowledgePointNodeRelations.verify|verify} messages.
       * @param message BellKnowledgePointNodeRelations message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encodeDelimited(
        message: lq.atlas.IBellKnowledgePointNodeRelations,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Decodes a BellKnowledgePointNodeRelations message from the specified reader or buffer.
       * @param reader Reader or buffer to decode from
       * @param [length] Message length if known beforehand
       * @returns BellKnowledgePointNodeRelations
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decode(
        reader: $protobuf.Reader | Uint8Array,
        length?: number,
      ): lq.atlas.BellKnowledgePointNodeRelations

      /**
       * Decodes a BellKnowledgePointNodeRelations message from the specified reader or buffer, length delimited.
       * @param reader Reader or buffer to decode from
       * @returns BellKnowledgePointNodeRelations
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decodeDelimited(
        reader: $protobuf.Reader | Uint8Array,
      ): lq.atlas.BellKnowledgePointNodeRelations

      /**
       * Verifies a BellKnowledgePointNodeRelations message.
       * @param message Plain object to verify
       * @returns `null` if valid, otherwise the reason why it is not
       */
      public static verify(message: { [k: string]: any }): string | null

      /**
       * Creates a BellKnowledgePointNodeRelations message from a plain object. Also converts values to their respective internal types.
       * @param object Plain object
       * @returns BellKnowledgePointNodeRelations
       */
      public static fromObject(object: {
        [k: string]: any
      }): lq.atlas.BellKnowledgePointNodeRelations

      /**
       * Creates a plain object from a BellKnowledgePointNodeRelations message. Also converts values to other types if specified.
       * @param message BellKnowledgePointNodeRelations
       * @param [options] Conversion options
       * @returns Plain object
       */
      public static toObject(
        message: lq.atlas.BellKnowledgePointNodeRelations,
        options?: $protobuf.IConversionOptions,
      ): { [k: string]: any }

      /**
       * Converts this BellKnowledgePointNodeRelations to JSON.
       * @returns JSON object
       */
      public toJSON(): { [k: string]: any }
    }
  }

  /** Properties of a TextHighlight. */
  interface ITextHighlight {
    /** TextHighlight taggedTokenRanges */
    taggedTokenRanges?: lq.ITaggedRanges[] | null

    /** TextHighlight perTokenHighlight */
    perTokenHighlight?: { [k: string]: lq.ITokenHighlight } | null

    /** TextHighlight renderedHtml */
    renderedHtml?: string | null
  }

  /** Represents a TextHighlight. */
  class TextHighlight implements ITextHighlight {
    /**
     * Constructs a new TextHighlight.
     * @param [properties] Properties to set
     */
    constructor(properties?: lq.ITextHighlight)

    /** TextHighlight taggedTokenRanges. */
    public taggedTokenRanges: lq.ITaggedRanges[]

    /** TextHighlight perTokenHighlight. */
    public perTokenHighlight: { [k: string]: lq.ITokenHighlight }

    /** TextHighlight renderedHtml. */
    public renderedHtml: string

    /**
     * Creates a new TextHighlight instance using the specified properties.
     * @param [properties] Properties to set
     * @returns TextHighlight instance
     */
    public static create(properties?: lq.ITextHighlight): lq.TextHighlight

    /**
     * Encodes the specified TextHighlight message. Does not implicitly {@link lq.TextHighlight.verify|verify} messages.
     * @param message TextHighlight message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encode(
      message: lq.ITextHighlight,
      writer?: $protobuf.Writer,
    ): $protobuf.Writer

    /**
     * Encodes the specified TextHighlight message, length delimited. Does not implicitly {@link lq.TextHighlight.verify|verify} messages.
     * @param message TextHighlight message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encodeDelimited(
      message: lq.ITextHighlight,
      writer?: $protobuf.Writer,
    ): $protobuf.Writer

    /**
     * Decodes a TextHighlight message from the specified reader or buffer.
     * @param reader Reader or buffer to decode from
     * @param [length] Message length if known beforehand
     * @returns TextHighlight
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decode(
      reader: $protobuf.Reader | Uint8Array,
      length?: number,
    ): lq.TextHighlight

    /**
     * Decodes a TextHighlight message from the specified reader or buffer, length delimited.
     * @param reader Reader or buffer to decode from
     * @returns TextHighlight
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decodeDelimited(
      reader: $protobuf.Reader | Uint8Array,
    ): lq.TextHighlight

    /**
     * Verifies a TextHighlight message.
     * @param message Plain object to verify
     * @returns `null` if valid, otherwise the reason why it is not
     */
    public static verify(message: { [k: string]: any }): string | null

    /**
     * Creates a TextHighlight message from a plain object. Also converts values to their respective internal types.
     * @param object Plain object
     * @returns TextHighlight
     */
    public static fromObject(object: { [k: string]: any }): lq.TextHighlight

    /**
     * Creates a plain object from a TextHighlight message. Also converts values to other types if specified.
     * @param message TextHighlight
     * @param [options] Conversion options
     * @returns Plain object
     */
    public static toObject(
      message: lq.TextHighlight,
      options?: $protobuf.IConversionOptions,
    ): { [k: string]: any }

    /**
     * Converts this TextHighlight to JSON.
     * @returns JSON object
     */
    public toJSON(): { [k: string]: any }
  }

  /** Properties of a TokenHighlight. */
  interface ITokenHighlight {
    /** TokenHighlight taggedByteRanges */
    taggedByteRanges?: lq.ITaggedRanges[] | null
  }

  /** Represents a TokenHighlight. */
  class TokenHighlight implements ITokenHighlight {
    /**
     * Constructs a new TokenHighlight.
     * @param [properties] Properties to set
     */
    constructor(properties?: lq.ITokenHighlight)

    /** TokenHighlight taggedByteRanges. */
    public taggedByteRanges: lq.ITaggedRanges[]

    /**
     * Creates a new TokenHighlight instance using the specified properties.
     * @param [properties] Properties to set
     * @returns TokenHighlight instance
     */
    public static create(properties?: lq.ITokenHighlight): lq.TokenHighlight

    /**
     * Encodes the specified TokenHighlight message. Does not implicitly {@link lq.TokenHighlight.verify|verify} messages.
     * @param message TokenHighlight message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encode(
      message: lq.ITokenHighlight,
      writer?: $protobuf.Writer,
    ): $protobuf.Writer

    /**
     * Encodes the specified TokenHighlight message, length delimited. Does not implicitly {@link lq.TokenHighlight.verify|verify} messages.
     * @param message TokenHighlight message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encodeDelimited(
      message: lq.ITokenHighlight,
      writer?: $protobuf.Writer,
    ): $protobuf.Writer

    /**
     * Decodes a TokenHighlight message from the specified reader or buffer.
     * @param reader Reader or buffer to decode from
     * @param [length] Message length if known beforehand
     * @returns TokenHighlight
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decode(
      reader: $protobuf.Reader | Uint8Array,
      length?: number,
    ): lq.TokenHighlight

    /**
     * Decodes a TokenHighlight message from the specified reader or buffer, length delimited.
     * @param reader Reader or buffer to decode from
     * @returns TokenHighlight
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decodeDelimited(
      reader: $protobuf.Reader | Uint8Array,
    ): lq.TokenHighlight

    /**
     * Verifies a TokenHighlight message.
     * @param message Plain object to verify
     * @returns `null` if valid, otherwise the reason why it is not
     */
    public static verify(message: { [k: string]: any }): string | null

    /**
     * Creates a TokenHighlight message from a plain object. Also converts values to their respective internal types.
     * @param object Plain object
     * @returns TokenHighlight
     */
    public static fromObject(object: { [k: string]: any }): lq.TokenHighlight

    /**
     * Creates a plain object from a TokenHighlight message. Also converts values to other types if specified.
     * @param message TokenHighlight
     * @param [options] Conversion options
     * @returns Plain object
     */
    public static toObject(
      message: lq.TokenHighlight,
      options?: $protobuf.IConversionOptions,
    ): { [k: string]: any }

    /**
     * Converts this TokenHighlight to JSON.
     * @returns JSON object
     */
    public toJSON(): { [k: string]: any }
  }

  /** Properties of a TaggedRanges. */
  interface ITaggedRanges {
    /** TaggedRanges tag */
    tag?: string | null

    /** TaggedRanges range */
    range?: lq.IRange[] | null
  }

  /** Represents a TaggedRanges. */
  class TaggedRanges implements ITaggedRanges {
    /**
     * Constructs a new TaggedRanges.
     * @param [properties] Properties to set
     */
    constructor(properties?: lq.ITaggedRanges)

    /** TaggedRanges tag. */
    public tag: string

    /** TaggedRanges range. */
    public range: lq.IRange[]

    /**
     * Creates a new TaggedRanges instance using the specified properties.
     * @param [properties] Properties to set
     * @returns TaggedRanges instance
     */
    public static create(properties?: lq.ITaggedRanges): lq.TaggedRanges

    /**
     * Encodes the specified TaggedRanges message. Does not implicitly {@link lq.TaggedRanges.verify|verify} messages.
     * @param message TaggedRanges message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encode(
      message: lq.ITaggedRanges,
      writer?: $protobuf.Writer,
    ): $protobuf.Writer

    /**
     * Encodes the specified TaggedRanges message, length delimited. Does not implicitly {@link lq.TaggedRanges.verify|verify} messages.
     * @param message TaggedRanges message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encodeDelimited(
      message: lq.ITaggedRanges,
      writer?: $protobuf.Writer,
    ): $protobuf.Writer

    /**
     * Decodes a TaggedRanges message from the specified reader or buffer.
     * @param reader Reader or buffer to decode from
     * @param [length] Message length if known beforehand
     * @returns TaggedRanges
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decode(
      reader: $protobuf.Reader | Uint8Array,
      length?: number,
    ): lq.TaggedRanges

    /**
     * Decodes a TaggedRanges message from the specified reader or buffer, length delimited.
     * @param reader Reader or buffer to decode from
     * @returns TaggedRanges
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decodeDelimited(
      reader: $protobuf.Reader | Uint8Array,
    ): lq.TaggedRanges

    /**
     * Verifies a TaggedRanges message.
     * @param message Plain object to verify
     * @returns `null` if valid, otherwise the reason why it is not
     */
    public static verify(message: { [k: string]: any }): string | null

    /**
     * Creates a TaggedRanges message from a plain object. Also converts values to their respective internal types.
     * @param object Plain object
     * @returns TaggedRanges
     */
    public static fromObject(object: { [k: string]: any }): lq.TaggedRanges

    /**
     * Creates a plain object from a TaggedRanges message. Also converts values to other types if specified.
     * @param message TaggedRanges
     * @param [options] Conversion options
     * @returns Plain object
     */
    public static toObject(
      message: lq.TaggedRanges,
      options?: $protobuf.IConversionOptions,
    ): { [k: string]: any }

    /**
     * Converts this TaggedRanges to JSON.
     * @returns JSON object
     */
    public toJSON(): { [k: string]: any }
  }

  /** Properties of a Range. */
  interface IRange {
    /** Range begin */
    begin?: number | null

    /** Range end */
    end?: number | null
  }

  /** Represents a Range. */
  class Range implements IRange {
    /**
     * Constructs a new Range.
     * @param [properties] Properties to set
     */
    constructor(properties?: lq.IRange)

    /** Range begin. */
    public begin: number

    /** Range end. */
    public end: number

    /**
     * Creates a new Range instance using the specified properties.
     * @param [properties] Properties to set
     * @returns Range instance
     */
    public static create(properties?: lq.IRange): lq.Range

    /**
     * Encodes the specified Range message. Does not implicitly {@link lq.Range.verify|verify} messages.
     * @param message Range message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encode(
      message: lq.IRange,
      writer?: $protobuf.Writer,
    ): $protobuf.Writer

    /**
     * Encodes the specified Range message, length delimited. Does not implicitly {@link lq.Range.verify|verify} messages.
     * @param message Range message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encodeDelimited(
      message: lq.IRange,
      writer?: $protobuf.Writer,
    ): $protobuf.Writer

    /**
     * Decodes a Range message from the specified reader or buffer.
     * @param reader Reader or buffer to decode from
     * @param [length] Message length if known beforehand
     * @returns Range
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decode(
      reader: $protobuf.Reader | Uint8Array,
      length?: number,
    ): lq.Range

    /**
     * Decodes a Range message from the specified reader or buffer, length delimited.
     * @param reader Reader or buffer to decode from
     * @returns Range
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decodeDelimited(
      reader: $protobuf.Reader | Uint8Array,
    ): lq.Range

    /**
     * Verifies a Range message.
     * @param message Plain object to verify
     * @returns `null` if valid, otherwise the reason why it is not
     */
    public static verify(message: { [k: string]: any }): string | null

    /**
     * Creates a Range message from a plain object. Also converts values to their respective internal types.
     * @param object Plain object
     * @returns Range
     */
    public static fromObject(object: { [k: string]: any }): lq.Range

    /**
     * Creates a plain object from a Range message. Also converts values to other types if specified.
     * @param message Range
     * @param [options] Conversion options
     * @returns Plain object
     */
    public static toObject(
      message: lq.Range,
      options?: $protobuf.IConversionOptions,
    ): { [k: string]: any }

    /**
     * Converts this Range to JSON.
     * @returns JSON object
     */
    public toJSON(): { [k: string]: any }
  }
}

/** Namespace speech2nlp. */
export namespace speech2nlp {
  /** Properties of a NormalizedPauseCount. */
  interface INormalizedPauseCount {
    /** NormalizedPauseCount ltHalfSec */
    ltHalfSec?: number | null

    /** NormalizedPauseCount halfToOneSec */
    halfToOneSec?: number | null

    /** NormalizedPauseCount oneToTwoSec */
    oneToTwoSec?: number | null

    /** NormalizedPauseCount gtTwoSec */
    gtTwoSec?: number | null
  }

  /** Represents a NormalizedPauseCount. */
  class NormalizedPauseCount implements INormalizedPauseCount {
    /**
     * Constructs a new NormalizedPauseCount.
     * @param [properties] Properties to set
     */
    constructor(properties?: speech2nlp.INormalizedPauseCount)

    /** NormalizedPauseCount ltHalfSec. */
    public ltHalfSec: number

    /** NormalizedPauseCount halfToOneSec. */
    public halfToOneSec: number

    /** NormalizedPauseCount oneToTwoSec. */
    public oneToTwoSec: number

    /** NormalizedPauseCount gtTwoSec. */
    public gtTwoSec: number

    /**
     * Creates a new NormalizedPauseCount instance using the specified properties.
     * @param [properties] Properties to set
     * @returns NormalizedPauseCount instance
     */
    public static create(
      properties?: speech2nlp.INormalizedPauseCount,
    ): speech2nlp.NormalizedPauseCount

    /**
     * Encodes the specified NormalizedPauseCount message. Does not implicitly {@link speech2nlp.NormalizedPauseCount.verify|verify} messages.
     * @param message NormalizedPauseCount message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encode(
      message: speech2nlp.INormalizedPauseCount,
      writer?: $protobuf.Writer,
    ): $protobuf.Writer

    /**
     * Encodes the specified NormalizedPauseCount message, length delimited. Does not implicitly {@link speech2nlp.NormalizedPauseCount.verify|verify} messages.
     * @param message NormalizedPauseCount message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encodeDelimited(
      message: speech2nlp.INormalizedPauseCount,
      writer?: $protobuf.Writer,
    ): $protobuf.Writer

    /**
     * Decodes a NormalizedPauseCount message from the specified reader or buffer.
     * @param reader Reader or buffer to decode from
     * @param [length] Message length if known beforehand
     * @returns NormalizedPauseCount
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decode(
      reader: $protobuf.Reader | Uint8Array,
      length?: number,
    ): speech2nlp.NormalizedPauseCount

    /**
     * Decodes a NormalizedPauseCount message from the specified reader or buffer, length delimited.
     * @param reader Reader or buffer to decode from
     * @returns NormalizedPauseCount
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decodeDelimited(
      reader: $protobuf.Reader | Uint8Array,
    ): speech2nlp.NormalizedPauseCount

    /**
     * Verifies a NormalizedPauseCount message.
     * @param message Plain object to verify
     * @returns `null` if valid, otherwise the reason why it is not
     */
    public static verify(message: { [k: string]: any }): string | null

    /**
     * Creates a NormalizedPauseCount message from a plain object. Also converts values to their respective internal types.
     * @param object Plain object
     * @returns NormalizedPauseCount
     */
    public static fromObject(object: {
      [k: string]: any
    }): speech2nlp.NormalizedPauseCount

    /**
     * Creates a plain object from a NormalizedPauseCount message. Also converts values to other types if specified.
     * @param message NormalizedPauseCount
     * @param [options] Conversion options
     * @returns Plain object
     */
    public static toObject(
      message: speech2nlp.NormalizedPauseCount,
      options?: $protobuf.IConversionOptions,
    ): { [k: string]: any }

    /**
     * Converts this NormalizedPauseCount to JSON.
     * @returns JSON object
     */
    public toJSON(): { [k: string]: any }
  }

  /** Properties of a MispronInfo. */
  interface IMispronInfo {
    /** MispronInfo pattern */
    pattern?: string | null

    /** MispronInfo refPhone */
    refPhone?: string | null

    /** MispronInfo hypPhone */
    hypPhone?: string | null
  }

  /** Represents a MispronInfo. */
  class MispronInfo implements IMispronInfo {
    /**
     * Constructs a new MispronInfo.
     * @param [properties] Properties to set
     */
    constructor(properties?: speech2nlp.IMispronInfo)

    /** MispronInfo pattern. */
    public pattern: string

    /** MispronInfo refPhone. */
    public refPhone: string

    /** MispronInfo hypPhone. */
    public hypPhone: string

    /**
     * Creates a new MispronInfo instance using the specified properties.
     * @param [properties] Properties to set
     * @returns MispronInfo instance
     */
    public static create(
      properties?: speech2nlp.IMispronInfo,
    ): speech2nlp.MispronInfo

    /**
     * Encodes the specified MispronInfo message. Does not implicitly {@link speech2nlp.MispronInfo.verify|verify} messages.
     * @param message MispronInfo message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encode(
      message: speech2nlp.IMispronInfo,
      writer?: $protobuf.Writer,
    ): $protobuf.Writer

    /**
     * Encodes the specified MispronInfo message, length delimited. Does not implicitly {@link speech2nlp.MispronInfo.verify|verify} messages.
     * @param message MispronInfo message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encodeDelimited(
      message: speech2nlp.IMispronInfo,
      writer?: $protobuf.Writer,
    ): $protobuf.Writer

    /**
     * Decodes a MispronInfo message from the specified reader or buffer.
     * @param reader Reader or buffer to decode from
     * @param [length] Message length if known beforehand
     * @returns MispronInfo
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decode(
      reader: $protobuf.Reader | Uint8Array,
      length?: number,
    ): speech2nlp.MispronInfo

    /**
     * Decodes a MispronInfo message from the specified reader or buffer, length delimited.
     * @param reader Reader or buffer to decode from
     * @returns MispronInfo
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decodeDelimited(
      reader: $protobuf.Reader | Uint8Array,
    ): speech2nlp.MispronInfo

    /**
     * Verifies a MispronInfo message.
     * @param message Plain object to verify
     * @returns `null` if valid, otherwise the reason why it is not
     */
    public static verify(message: { [k: string]: any }): string | null

    /**
     * Creates a MispronInfo message from a plain object. Also converts values to their respective internal types.
     * @param object Plain object
     * @returns MispronInfo
     */
    public static fromObject(object: {
      [k: string]: any
    }): speech2nlp.MispronInfo

    /**
     * Creates a plain object from a MispronInfo message. Also converts values to other types if specified.
     * @param message MispronInfo
     * @param [options] Conversion options
     * @returns Plain object
     */
    public static toObject(
      message: speech2nlp.MispronInfo,
      options?: $protobuf.IConversionOptions,
    ): { [k: string]: any }

    /**
     * Converts this MispronInfo to JSON.
     * @returns JSON object
     */
    public toJSON(): { [k: string]: any }
  }

  /** Properties of an ErrorRate. */
  interface IErrorRate {
    /** ErrorRate deleteErrorRate */
    deleteErrorRate?: number | null

    /** ErrorRate insertErrorRate */
    insertErrorRate?: number | null

    /** ErrorRate replaceErrorRate */
    replaceErrorRate?: number | null

    /** ErrorRate errorRate */
    errorRate?: number | null
  }

  /** Represents an ErrorRate. */
  class ErrorRate implements IErrorRate {
    /**
     * Constructs a new ErrorRate.
     * @param [properties] Properties to set
     */
    constructor(properties?: speech2nlp.IErrorRate)

    /** ErrorRate deleteErrorRate. */
    public deleteErrorRate: number

    /** ErrorRate insertErrorRate. */
    public insertErrorRate: number

    /** ErrorRate replaceErrorRate. */
    public replaceErrorRate: number

    /** ErrorRate errorRate. */
    public errorRate: number

    /**
     * Creates a new ErrorRate instance using the specified properties.
     * @param [properties] Properties to set
     * @returns ErrorRate instance
     */
    public static create(
      properties?: speech2nlp.IErrorRate,
    ): speech2nlp.ErrorRate

    /**
     * Encodes the specified ErrorRate message. Does not implicitly {@link speech2nlp.ErrorRate.verify|verify} messages.
     * @param message ErrorRate message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encode(
      message: speech2nlp.IErrorRate,
      writer?: $protobuf.Writer,
    ): $protobuf.Writer

    /**
     * Encodes the specified ErrorRate message, length delimited. Does not implicitly {@link speech2nlp.ErrorRate.verify|verify} messages.
     * @param message ErrorRate message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encodeDelimited(
      message: speech2nlp.IErrorRate,
      writer?: $protobuf.Writer,
    ): $protobuf.Writer

    /**
     * Decodes an ErrorRate message from the specified reader or buffer.
     * @param reader Reader or buffer to decode from
     * @param [length] Message length if known beforehand
     * @returns ErrorRate
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decode(
      reader: $protobuf.Reader | Uint8Array,
      length?: number,
    ): speech2nlp.ErrorRate

    /**
     * Decodes an ErrorRate message from the specified reader or buffer, length delimited.
     * @param reader Reader or buffer to decode from
     * @returns ErrorRate
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decodeDelimited(
      reader: $protobuf.Reader | Uint8Array,
    ): speech2nlp.ErrorRate

    /**
     * Verifies an ErrorRate message.
     * @param message Plain object to verify
     * @returns `null` if valid, otherwise the reason why it is not
     */
    public static verify(message: { [k: string]: any }): string | null

    /**
     * Creates an ErrorRate message from a plain object. Also converts values to their respective internal types.
     * @param object Plain object
     * @returns ErrorRate
     */
    public static fromObject(object: { [k: string]: any }): speech2nlp.ErrorRate

    /**
     * Creates a plain object from an ErrorRate message. Also converts values to other types if specified.
     * @param message ErrorRate
     * @param [options] Conversion options
     * @returns Plain object
     */
    public static toObject(
      message: speech2nlp.ErrorRate,
      options?: $protobuf.IConversionOptions,
    ): { [k: string]: any }

    /**
     * Converts this ErrorRate to JSON.
     * @returns JSON object
     */
    public toJSON(): { [k: string]: any }
  }

  /** Properties of a BaseDecodeInfo. */
  interface IBaseDecodeInfo {
    /** BaseDecodeInfo token */
    token?: string | null

    /** BaseDecodeInfo confidence */
    confidence?: number | null

    /** BaseDecodeInfo beginMs */
    beginMs?: number | null

    /** BaseDecodeInfo endMs */
    endMs?: number | null
  }

  /** Represents a BaseDecodeInfo. */
  class BaseDecodeInfo implements IBaseDecodeInfo {
    /**
     * Constructs a new BaseDecodeInfo.
     * @param [properties] Properties to set
     */
    constructor(properties?: speech2nlp.IBaseDecodeInfo)

    /** BaseDecodeInfo token. */
    public token: string

    /** BaseDecodeInfo confidence. */
    public confidence: number

    /** BaseDecodeInfo beginMs. */
    public beginMs: number

    /** BaseDecodeInfo endMs. */
    public endMs: number

    /**
     * Creates a new BaseDecodeInfo instance using the specified properties.
     * @param [properties] Properties to set
     * @returns BaseDecodeInfo instance
     */
    public static create(
      properties?: speech2nlp.IBaseDecodeInfo,
    ): speech2nlp.BaseDecodeInfo

    /**
     * Encodes the specified BaseDecodeInfo message. Does not implicitly {@link speech2nlp.BaseDecodeInfo.verify|verify} messages.
     * @param message BaseDecodeInfo message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encode(
      message: speech2nlp.IBaseDecodeInfo,
      writer?: $protobuf.Writer,
    ): $protobuf.Writer

    /**
     * Encodes the specified BaseDecodeInfo message, length delimited. Does not implicitly {@link speech2nlp.BaseDecodeInfo.verify|verify} messages.
     * @param message BaseDecodeInfo message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encodeDelimited(
      message: speech2nlp.IBaseDecodeInfo,
      writer?: $protobuf.Writer,
    ): $protobuf.Writer

    /**
     * Decodes a BaseDecodeInfo message from the specified reader or buffer.
     * @param reader Reader or buffer to decode from
     * @param [length] Message length if known beforehand
     * @returns BaseDecodeInfo
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decode(
      reader: $protobuf.Reader | Uint8Array,
      length?: number,
    ): speech2nlp.BaseDecodeInfo

    /**
     * Decodes a BaseDecodeInfo message from the specified reader or buffer, length delimited.
     * @param reader Reader or buffer to decode from
     * @returns BaseDecodeInfo
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decodeDelimited(
      reader: $protobuf.Reader | Uint8Array,
    ): speech2nlp.BaseDecodeInfo

    /**
     * Verifies a BaseDecodeInfo message.
     * @param message Plain object to verify
     * @returns `null` if valid, otherwise the reason why it is not
     */
    public static verify(message: { [k: string]: any }): string | null

    /**
     * Creates a BaseDecodeInfo message from a plain object. Also converts values to their respective internal types.
     * @param object Plain object
     * @returns BaseDecodeInfo
     */
    public static fromObject(object: {
      [k: string]: any
    }): speech2nlp.BaseDecodeInfo

    /**
     * Creates a plain object from a BaseDecodeInfo message. Also converts values to other types if specified.
     * @param message BaseDecodeInfo
     * @param [options] Conversion options
     * @returns Plain object
     */
    public static toObject(
      message: speech2nlp.BaseDecodeInfo,
      options?: $protobuf.IConversionOptions,
    ): { [k: string]: any }

    /**
     * Converts this BaseDecodeInfo to JSON.
     * @returns JSON object
     */
    public toJSON(): { [k: string]: any }
  }

  /** Properties of a BaseAlignInfo. */
  interface IBaseAlignInfo {
    /** BaseAlignInfo token */
    token?: string | null

    /** BaseAlignInfo faScore */
    faScore?: number | null

    /** BaseAlignInfo beginMs */
    beginMs?: number | null

    /** BaseAlignInfo endMs */
    endMs?: number | null
  }

  /** Represents a BaseAlignInfo. */
  class BaseAlignInfo implements IBaseAlignInfo {
    /**
     * Constructs a new BaseAlignInfo.
     * @param [properties] Properties to set
     */
    constructor(properties?: speech2nlp.IBaseAlignInfo)

    /** BaseAlignInfo token. */
    public token: string

    /** BaseAlignInfo faScore. */
    public faScore: number

    /** BaseAlignInfo beginMs. */
    public beginMs: number

    /** BaseAlignInfo endMs. */
    public endMs: number

    /**
     * Creates a new BaseAlignInfo instance using the specified properties.
     * @param [properties] Properties to set
     * @returns BaseAlignInfo instance
     */
    public static create(
      properties?: speech2nlp.IBaseAlignInfo,
    ): speech2nlp.BaseAlignInfo

    /**
     * Encodes the specified BaseAlignInfo message. Does not implicitly {@link speech2nlp.BaseAlignInfo.verify|verify} messages.
     * @param message BaseAlignInfo message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encode(
      message: speech2nlp.IBaseAlignInfo,
      writer?: $protobuf.Writer,
    ): $protobuf.Writer

    /**
     * Encodes the specified BaseAlignInfo message, length delimited. Does not implicitly {@link speech2nlp.BaseAlignInfo.verify|verify} messages.
     * @param message BaseAlignInfo message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encodeDelimited(
      message: speech2nlp.IBaseAlignInfo,
      writer?: $protobuf.Writer,
    ): $protobuf.Writer

    /**
     * Decodes a BaseAlignInfo message from the specified reader or buffer.
     * @param reader Reader or buffer to decode from
     * @param [length] Message length if known beforehand
     * @returns BaseAlignInfo
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decode(
      reader: $protobuf.Reader | Uint8Array,
      length?: number,
    ): speech2nlp.BaseAlignInfo

    /**
     * Decodes a BaseAlignInfo message from the specified reader or buffer, length delimited.
     * @param reader Reader or buffer to decode from
     * @returns BaseAlignInfo
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decodeDelimited(
      reader: $protobuf.Reader | Uint8Array,
    ): speech2nlp.BaseAlignInfo

    /**
     * Verifies a BaseAlignInfo message.
     * @param message Plain object to verify
     * @returns `null` if valid, otherwise the reason why it is not
     */
    public static verify(message: { [k: string]: any }): string | null

    /**
     * Creates a BaseAlignInfo message from a plain object. Also converts values to their respective internal types.
     * @param object Plain object
     * @returns BaseAlignInfo
     */
    public static fromObject(object: {
      [k: string]: any
    }): speech2nlp.BaseAlignInfo

    /**
     * Creates a plain object from a BaseAlignInfo message. Also converts values to other types if specified.
     * @param message BaseAlignInfo
     * @param [options] Conversion options
     * @returns Plain object
     */
    public static toObject(
      message: speech2nlp.BaseAlignInfo,
      options?: $protobuf.IConversionOptions,
    ): { [k: string]: any }

    /**
     * Converts this BaseAlignInfo to JSON.
     * @returns JSON object
     */
    public toJSON(): { [k: string]: any }
  }

  /** Properties of a BaseSpeechWordAssessInfo. */
  interface IBaseSpeechWordAssessInfo {
    /** BaseSpeechWordAssessInfo pronunciation */
    pronunciation?: number | null

    /** BaseSpeechWordAssessInfo gwpp */
    gwpp?: number | null

    /** BaseSpeechWordAssessInfo rawgop */
    rawgop?: number | null

    /** BaseSpeechWordAssessInfo logDur */
    logDur?: number | null

    /** BaseSpeechWordAssessInfo pause */
    pause?: number | null

    /** BaseSpeechWordAssessInfo stress */
    stress?: number | null

    /** BaseSpeechWordAssessInfo liason */
    liason?: readaloud.ILiaison | null

    /** BaseSpeechWordAssessInfo baseWordDecodeInfo */
    baseWordDecodeInfo?: speech2nlp.IBaseDecodeInfo | null

    /** BaseSpeechWordAssessInfo baseWordAlignInfo */
    baseWordAlignInfo?: speech2nlp.IBaseAlignInfo | null

    /** BaseSpeechWordAssessInfo basePhoneDecodeInfo */
    basePhoneDecodeInfo?: speech2nlp.IBaseDecodeInfo[] | null

    /** BaseSpeechWordAssessInfo mispronInfo */
    mispronInfo?: speech2nlp.IMispronInfo[] | null
  }

  /** Represents a BaseSpeechWordAssessInfo. */
  class BaseSpeechWordAssessInfo implements IBaseSpeechWordAssessInfo {
    /**
     * Constructs a new BaseSpeechWordAssessInfo.
     * @param [properties] Properties to set
     */
    constructor(properties?: speech2nlp.IBaseSpeechWordAssessInfo)

    /** BaseSpeechWordAssessInfo pronunciation. */
    public pronunciation: number

    /** BaseSpeechWordAssessInfo gwpp. */
    public gwpp: number

    /** BaseSpeechWordAssessInfo rawgop. */
    public rawgop: number

    /** BaseSpeechWordAssessInfo logDur. */
    public logDur: number

    /** BaseSpeechWordAssessInfo pause. */
    public pause: number

    /** BaseSpeechWordAssessInfo stress. */
    public stress: number

    /** BaseSpeechWordAssessInfo liason. */
    public liason?: readaloud.ILiaison | null

    /** BaseSpeechWordAssessInfo baseWordDecodeInfo. */
    public baseWordDecodeInfo?: speech2nlp.IBaseDecodeInfo | null

    /** BaseSpeechWordAssessInfo baseWordAlignInfo. */
    public baseWordAlignInfo?: speech2nlp.IBaseAlignInfo | null

    /** BaseSpeechWordAssessInfo basePhoneDecodeInfo. */
    public basePhoneDecodeInfo: speech2nlp.IBaseDecodeInfo[]

    /** BaseSpeechWordAssessInfo mispronInfo. */
    public mispronInfo: speech2nlp.IMispronInfo[]

    /**
     * Creates a new BaseSpeechWordAssessInfo instance using the specified properties.
     * @param [properties] Properties to set
     * @returns BaseSpeechWordAssessInfo instance
     */
    public static create(
      properties?: speech2nlp.IBaseSpeechWordAssessInfo,
    ): speech2nlp.BaseSpeechWordAssessInfo

    /**
     * Encodes the specified BaseSpeechWordAssessInfo message. Does not implicitly {@link speech2nlp.BaseSpeechWordAssessInfo.verify|verify} messages.
     * @param message BaseSpeechWordAssessInfo message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encode(
      message: speech2nlp.IBaseSpeechWordAssessInfo,
      writer?: $protobuf.Writer,
    ): $protobuf.Writer

    /**
     * Encodes the specified BaseSpeechWordAssessInfo message, length delimited. Does not implicitly {@link speech2nlp.BaseSpeechWordAssessInfo.verify|verify} messages.
     * @param message BaseSpeechWordAssessInfo message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encodeDelimited(
      message: speech2nlp.IBaseSpeechWordAssessInfo,
      writer?: $protobuf.Writer,
    ): $protobuf.Writer

    /**
     * Decodes a BaseSpeechWordAssessInfo message from the specified reader or buffer.
     * @param reader Reader or buffer to decode from
     * @param [length] Message length if known beforehand
     * @returns BaseSpeechWordAssessInfo
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decode(
      reader: $protobuf.Reader | Uint8Array,
      length?: number,
    ): speech2nlp.BaseSpeechWordAssessInfo

    /**
     * Decodes a BaseSpeechWordAssessInfo message from the specified reader or buffer, length delimited.
     * @param reader Reader or buffer to decode from
     * @returns BaseSpeechWordAssessInfo
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decodeDelimited(
      reader: $protobuf.Reader | Uint8Array,
    ): speech2nlp.BaseSpeechWordAssessInfo

    /**
     * Verifies a BaseSpeechWordAssessInfo message.
     * @param message Plain object to verify
     * @returns `null` if valid, otherwise the reason why it is not
     */
    public static verify(message: { [k: string]: any }): string | null

    /**
     * Creates a BaseSpeechWordAssessInfo message from a plain object. Also converts values to their respective internal types.
     * @param object Plain object
     * @returns BaseSpeechWordAssessInfo
     */
    public static fromObject(object: {
      [k: string]: any
    }): speech2nlp.BaseSpeechWordAssessInfo

    /**
     * Creates a plain object from a BaseSpeechWordAssessInfo message. Also converts values to other types if specified.
     * @param message BaseSpeechWordAssessInfo
     * @param [options] Conversion options
     * @returns Plain object
     */
    public static toObject(
      message: speech2nlp.BaseSpeechWordAssessInfo,
      options?: $protobuf.IConversionOptions,
    ): { [k: string]: any }

    /**
     * Converts this BaseSpeechWordAssessInfo to JSON.
     * @returns JSON object
     */
    public toJSON(): { [k: string]: any }
  }

  /** Properties of a BaseSpeechAssessInfo. */
  interface IBaseSpeechAssessInfo {
    /** BaseSpeechAssessInfo decodedText */
    decodedText?: string | null

    /** BaseSpeechAssessInfo averageWordsConfidence */
    averageWordsConfidence?: number | null

    /** BaseSpeechAssessInfo highConfidenceWordsRatio */
    highConfidenceWordsRatio?: number | null

    /** BaseSpeechAssessInfo normalizedNumUniqWords */
    normalizedNumUniqWords?: number | null

    /** BaseSpeechAssessInfo averageAcousticScore */
    averageAcousticScore?: number | null

    /** BaseSpeechAssessInfo selfRepetition */
    selfRepetition?: number | null

    /** BaseSpeechAssessInfo normalizedSelfRepetition */
    normalizedSelfRepetition?: number | null

    /** BaseSpeechAssessInfo pauseCount */
    pauseCount?: speech2nlp.INormalizedPauseCount | null

    /** BaseSpeechAssessInfo meanSilDurationSec */
    meanSilDurationSec?: number | null

    /** BaseSpeechAssessInfo phoneErrorRate */
    phoneErrorRate?: speech2nlp.IErrorRate | null

    /** BaseSpeechAssessInfo baseSpeechWordAssessInfo */
    baseSpeechWordAssessInfo?: speech2nlp.IBaseSpeechWordAssessInfo[] | null
  }

  /** Represents a BaseSpeechAssessInfo. */
  class BaseSpeechAssessInfo implements IBaseSpeechAssessInfo {
    /**
     * Constructs a new BaseSpeechAssessInfo.
     * @param [properties] Properties to set
     */
    constructor(properties?: speech2nlp.IBaseSpeechAssessInfo)

    /** BaseSpeechAssessInfo decodedText. */
    public decodedText: string

    /** BaseSpeechAssessInfo averageWordsConfidence. */
    public averageWordsConfidence: number

    /** BaseSpeechAssessInfo highConfidenceWordsRatio. */
    public highConfidenceWordsRatio: number

    /** BaseSpeechAssessInfo normalizedNumUniqWords. */
    public normalizedNumUniqWords: number

    /** BaseSpeechAssessInfo averageAcousticScore. */
    public averageAcousticScore: number

    /** BaseSpeechAssessInfo selfRepetition. */
    public selfRepetition: number

    /** BaseSpeechAssessInfo normalizedSelfRepetition. */
    public normalizedSelfRepetition: number

    /** BaseSpeechAssessInfo pauseCount. */
    public pauseCount?: speech2nlp.INormalizedPauseCount | null

    /** BaseSpeechAssessInfo meanSilDurationSec. */
    public meanSilDurationSec: number

    /** BaseSpeechAssessInfo phoneErrorRate. */
    public phoneErrorRate?: speech2nlp.IErrorRate | null

    /** BaseSpeechAssessInfo baseSpeechWordAssessInfo. */
    public baseSpeechWordAssessInfo: speech2nlp.IBaseSpeechWordAssessInfo[]

    /**
     * Creates a new BaseSpeechAssessInfo instance using the specified properties.
     * @param [properties] Properties to set
     * @returns BaseSpeechAssessInfo instance
     */
    public static create(
      properties?: speech2nlp.IBaseSpeechAssessInfo,
    ): speech2nlp.BaseSpeechAssessInfo

    /**
     * Encodes the specified BaseSpeechAssessInfo message. Does not implicitly {@link speech2nlp.BaseSpeechAssessInfo.verify|verify} messages.
     * @param message BaseSpeechAssessInfo message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encode(
      message: speech2nlp.IBaseSpeechAssessInfo,
      writer?: $protobuf.Writer,
    ): $protobuf.Writer

    /**
     * Encodes the specified BaseSpeechAssessInfo message, length delimited. Does not implicitly {@link speech2nlp.BaseSpeechAssessInfo.verify|verify} messages.
     * @param message BaseSpeechAssessInfo message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encodeDelimited(
      message: speech2nlp.IBaseSpeechAssessInfo,
      writer?: $protobuf.Writer,
    ): $protobuf.Writer

    /**
     * Decodes a BaseSpeechAssessInfo message from the specified reader or buffer.
     * @param reader Reader or buffer to decode from
     * @param [length] Message length if known beforehand
     * @returns BaseSpeechAssessInfo
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decode(
      reader: $protobuf.Reader | Uint8Array,
      length?: number,
    ): speech2nlp.BaseSpeechAssessInfo

    /**
     * Decodes a BaseSpeechAssessInfo message from the specified reader or buffer, length delimited.
     * @param reader Reader or buffer to decode from
     * @returns BaseSpeechAssessInfo
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decodeDelimited(
      reader: $protobuf.Reader | Uint8Array,
    ): speech2nlp.BaseSpeechAssessInfo

    /**
     * Verifies a BaseSpeechAssessInfo message.
     * @param message Plain object to verify
     * @returns `null` if valid, otherwise the reason why it is not
     */
    public static verify(message: { [k: string]: any }): string | null

    /**
     * Creates a BaseSpeechAssessInfo message from a plain object. Also converts values to their respective internal types.
     * @param object Plain object
     * @returns BaseSpeechAssessInfo
     */
    public static fromObject(object: {
      [k: string]: any
    }): speech2nlp.BaseSpeechAssessInfo

    /**
     * Creates a plain object from a BaseSpeechAssessInfo message. Also converts values to other types if specified.
     * @param message BaseSpeechAssessInfo
     * @param [options] Conversion options
     * @returns Plain object
     */
    public static toObject(
      message: speech2nlp.BaseSpeechAssessInfo,
      options?: $protobuf.IConversionOptions,
    ): { [k: string]: any }

    /**
     * Converts this BaseSpeechAssessInfo to JSON.
     * @returns JSON object
     */
    public toJSON(): { [k: string]: any }
  }
}

/** Namespace darwincourse. */
export namespace darwincourse {
  /** Properties of a Choice. */
  interface IChoice {
    /** Choice type */
    type?: darwincourse.Choice.TypeEnum | null

    /** Choice text */
    text?: string | null

    /** Choice pictureId */
    pictureId?: string | null

    /** Choice audioId */
    audioId?: string | null

    /** Choice checked */
    checked?: boolean | null
  }

  /** Represents a Choice. */
  class Choice implements IChoice {
    /**
     * Constructs a new Choice.
     * @param [properties] Properties to set
     */
    constructor(properties?: darwincourse.IChoice)

    /** Choice type. */
    public type: darwincourse.Choice.TypeEnum

    /** Choice text. */
    public text: string

    /** Choice pictureId. */
    public pictureId: string

    /** Choice audioId. */
    public audioId: string

    /** Choice checked. */
    public checked: boolean

    /** Choice choice. */
    public choice?: 'text' | 'pictureId' | 'audioId'

    /**
     * Creates a new Choice instance using the specified properties.
     * @param [properties] Properties to set
     * @returns Choice instance
     */
    public static create(properties?: darwincourse.IChoice): darwincourse.Choice

    /**
     * Encodes the specified Choice message. Does not implicitly {@link darwincourse.Choice.verify|verify} messages.
     * @param message Choice message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encode(
      message: darwincourse.IChoice,
      writer?: $protobuf.Writer,
    ): $protobuf.Writer

    /**
     * Encodes the specified Choice message, length delimited. Does not implicitly {@link darwincourse.Choice.verify|verify} messages.
     * @param message Choice message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encodeDelimited(
      message: darwincourse.IChoice,
      writer?: $protobuf.Writer,
    ): $protobuf.Writer

    /**
     * Decodes a Choice message from the specified reader or buffer.
     * @param reader Reader or buffer to decode from
     * @param [length] Message length if known beforehand
     * @returns Choice
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decode(
      reader: $protobuf.Reader | Uint8Array,
      length?: number,
    ): darwincourse.Choice

    /**
     * Decodes a Choice message from the specified reader or buffer, length delimited.
     * @param reader Reader or buffer to decode from
     * @returns Choice
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decodeDelimited(
      reader: $protobuf.Reader | Uint8Array,
    ): darwincourse.Choice

    /**
     * Verifies a Choice message.
     * @param message Plain object to verify
     * @returns `null` if valid, otherwise the reason why it is not
     */
    public static verify(message: { [k: string]: any }): string | null

    /**
     * Creates a Choice message from a plain object. Also converts values to their respective internal types.
     * @param object Plain object
     * @returns Choice
     */
    public static fromObject(object: { [k: string]: any }): darwincourse.Choice

    /**
     * Creates a plain object from a Choice message. Also converts values to other types if specified.
     * @param message Choice
     * @param [options] Conversion options
     * @returns Plain object
     */
    public static toObject(
      message: darwincourse.Choice,
      options?: $protobuf.IConversionOptions,
    ): { [k: string]: any }

    /**
     * Converts this Choice to JSON.
     * @returns JSON object
     */
    public toJSON(): { [k: string]: any }
  }

  namespace Choice {
    /** TypeEnum enum. */
    enum TypeEnum {
      UNKNOWN = 0,
      TEXT = 1,
      PICTURE = 2,
      AUDIO = 3,
    }
  }

  /** Properties of a MultiChoicePicture. */
  interface IMultiChoicePicture {
    /** MultiChoicePicture audioId */
    audioId?: string | null

    /** MultiChoicePicture choice */
    choice?: { [k: string]: darwincourse.IChoice } | null

    /** MultiChoicePicture text */
    text?: string | null
  }

  /** Represents a MultiChoicePicture. */
  class MultiChoicePicture implements IMultiChoicePicture {
    /**
     * Constructs a new MultiChoicePicture.
     * @param [properties] Properties to set
     */
    constructor(properties?: darwincourse.IMultiChoicePicture)

    /** MultiChoicePicture audioId. */
    public audioId: string

    /** MultiChoicePicture choice. */
    public choice: { [k: string]: darwincourse.IChoice }

    /** MultiChoicePicture text. */
    public text: string

    /**
     * Creates a new MultiChoicePicture instance using the specified properties.
     * @param [properties] Properties to set
     * @returns MultiChoicePicture instance
     */
    public static create(
      properties?: darwincourse.IMultiChoicePicture,
    ): darwincourse.MultiChoicePicture

    /**
     * Encodes the specified MultiChoicePicture message. Does not implicitly {@link darwincourse.MultiChoicePicture.verify|verify} messages.
     * @param message MultiChoicePicture message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encode(
      message: darwincourse.IMultiChoicePicture,
      writer?: $protobuf.Writer,
    ): $protobuf.Writer

    /**
     * Encodes the specified MultiChoicePicture message, length delimited. Does not implicitly {@link darwincourse.MultiChoicePicture.verify|verify} messages.
     * @param message MultiChoicePicture message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encodeDelimited(
      message: darwincourse.IMultiChoicePicture,
      writer?: $protobuf.Writer,
    ): $protobuf.Writer

    /**
     * Decodes a MultiChoicePicture message from the specified reader or buffer.
     * @param reader Reader or buffer to decode from
     * @param [length] Message length if known beforehand
     * @returns MultiChoicePicture
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decode(
      reader: $protobuf.Reader | Uint8Array,
      length?: number,
    ): darwincourse.MultiChoicePicture

    /**
     * Decodes a MultiChoicePicture message from the specified reader or buffer, length delimited.
     * @param reader Reader or buffer to decode from
     * @returns MultiChoicePicture
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decodeDelimited(
      reader: $protobuf.Reader | Uint8Array,
    ): darwincourse.MultiChoicePicture

    /**
     * Verifies a MultiChoicePicture message.
     * @param message Plain object to verify
     * @returns `null` if valid, otherwise the reason why it is not
     */
    public static verify(message: { [k: string]: any }): string | null

    /**
     * Creates a MultiChoicePicture message from a plain object. Also converts values to their respective internal types.
     * @param object Plain object
     * @returns MultiChoicePicture
     */
    public static fromObject(object: {
      [k: string]: any
    }): darwincourse.MultiChoicePicture

    /**
     * Creates a plain object from a MultiChoicePicture message. Also converts values to other types if specified.
     * @param message MultiChoicePicture
     * @param [options] Conversion options
     * @returns Plain object
     */
    public static toObject(
      message: darwincourse.MultiChoicePicture,
      options?: $protobuf.IConversionOptions,
    ): { [k: string]: any }

    /**
     * Converts this MultiChoicePicture to JSON.
     * @returns JSON object
     */
    public toJSON(): { [k: string]: any }
  }

  /** Properties of a MultiChoicePicture1. */
  interface IMultiChoicePicture1 {
    /** MultiChoicePicture1 audioId */
    audioId?: string | null

    /** MultiChoicePicture1 choice */
    choice?: { [k: string]: darwincourse.IChoice } | null
  }

  /** Represents a MultiChoicePicture1. */
  class MultiChoicePicture1 implements IMultiChoicePicture1 {
    /**
     * Constructs a new MultiChoicePicture1.
     * @param [properties] Properties to set
     */
    constructor(properties?: darwincourse.IMultiChoicePicture1)

    /** MultiChoicePicture1 audioId. */
    public audioId: string

    /** MultiChoicePicture1 choice. */
    public choice: { [k: string]: darwincourse.IChoice }

    /**
     * Creates a new MultiChoicePicture1 instance using the specified properties.
     * @param [properties] Properties to set
     * @returns MultiChoicePicture1 instance
     */
    public static create(
      properties?: darwincourse.IMultiChoicePicture1,
    ): darwincourse.MultiChoicePicture1

    /**
     * Encodes the specified MultiChoicePicture1 message. Does not implicitly {@link darwincourse.MultiChoicePicture1.verify|verify} messages.
     * @param message MultiChoicePicture1 message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encode(
      message: darwincourse.IMultiChoicePicture1,
      writer?: $protobuf.Writer,
    ): $protobuf.Writer

    /**
     * Encodes the specified MultiChoicePicture1 message, length delimited. Does not implicitly {@link darwincourse.MultiChoicePicture1.verify|verify} messages.
     * @param message MultiChoicePicture1 message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encodeDelimited(
      message: darwincourse.IMultiChoicePicture1,
      writer?: $protobuf.Writer,
    ): $protobuf.Writer

    /**
     * Decodes a MultiChoicePicture1 message from the specified reader or buffer.
     * @param reader Reader or buffer to decode from
     * @param [length] Message length if known beforehand
     * @returns MultiChoicePicture1
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decode(
      reader: $protobuf.Reader | Uint8Array,
      length?: number,
    ): darwincourse.MultiChoicePicture1

    /**
     * Decodes a MultiChoicePicture1 message from the specified reader or buffer, length delimited.
     * @param reader Reader or buffer to decode from
     * @returns MultiChoicePicture1
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decodeDelimited(
      reader: $protobuf.Reader | Uint8Array,
    ): darwincourse.MultiChoicePicture1

    /**
     * Verifies a MultiChoicePicture1 message.
     * @param message Plain object to verify
     * @returns `null` if valid, otherwise the reason why it is not
     */
    public static verify(message: { [k: string]: any }): string | null

    /**
     * Creates a MultiChoicePicture1 message from a plain object. Also converts values to their respective internal types.
     * @param object Plain object
     * @returns MultiChoicePicture1
     */
    public static fromObject(object: {
      [k: string]: any
    }): darwincourse.MultiChoicePicture1

    /**
     * Creates a plain object from a MultiChoicePicture1 message. Also converts values to other types if specified.
     * @param message MultiChoicePicture1
     * @param [options] Conversion options
     * @returns Plain object
     */
    public static toObject(
      message: darwincourse.MultiChoicePicture1,
      options?: $protobuf.IConversionOptions,
    ): { [k: string]: any }

    /**
     * Converts this MultiChoicePicture1 to JSON.
     * @returns JSON object
     */
    public toJSON(): { [k: string]: any }
  }

  /** Properties of a MultiChoicePicture2. */
  interface IMultiChoicePicture2 {
    /** MultiChoicePicture2 audioId */
    audioId?: string | null

    /** MultiChoicePicture2 choice */
    choice?: { [k: string]: darwincourse.IChoice } | null
  }

  /** Represents a MultiChoicePicture2. */
  class MultiChoicePicture2 implements IMultiChoicePicture2 {
    /**
     * Constructs a new MultiChoicePicture2.
     * @param [properties] Properties to set
     */
    constructor(properties?: darwincourse.IMultiChoicePicture2)

    /** MultiChoicePicture2 audioId. */
    public audioId: string

    /** MultiChoicePicture2 choice. */
    public choice: { [k: string]: darwincourse.IChoice }

    /**
     * Creates a new MultiChoicePicture2 instance using the specified properties.
     * @param [properties] Properties to set
     * @returns MultiChoicePicture2 instance
     */
    public static create(
      properties?: darwincourse.IMultiChoicePicture2,
    ): darwincourse.MultiChoicePicture2

    /**
     * Encodes the specified MultiChoicePicture2 message. Does not implicitly {@link darwincourse.MultiChoicePicture2.verify|verify} messages.
     * @param message MultiChoicePicture2 message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encode(
      message: darwincourse.IMultiChoicePicture2,
      writer?: $protobuf.Writer,
    ): $protobuf.Writer

    /**
     * Encodes the specified MultiChoicePicture2 message, length delimited. Does not implicitly {@link darwincourse.MultiChoicePicture2.verify|verify} messages.
     * @param message MultiChoicePicture2 message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encodeDelimited(
      message: darwincourse.IMultiChoicePicture2,
      writer?: $protobuf.Writer,
    ): $protobuf.Writer

    /**
     * Decodes a MultiChoicePicture2 message from the specified reader or buffer.
     * @param reader Reader or buffer to decode from
     * @param [length] Message length if known beforehand
     * @returns MultiChoicePicture2
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decode(
      reader: $protobuf.Reader | Uint8Array,
      length?: number,
    ): darwincourse.MultiChoicePicture2

    /**
     * Decodes a MultiChoicePicture2 message from the specified reader or buffer, length delimited.
     * @param reader Reader or buffer to decode from
     * @returns MultiChoicePicture2
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decodeDelimited(
      reader: $protobuf.Reader | Uint8Array,
    ): darwincourse.MultiChoicePicture2

    /**
     * Verifies a MultiChoicePicture2 message.
     * @param message Plain object to verify
     * @returns `null` if valid, otherwise the reason why it is not
     */
    public static verify(message: { [k: string]: any }): string | null

    /**
     * Creates a MultiChoicePicture2 message from a plain object. Also converts values to their respective internal types.
     * @param object Plain object
     * @returns MultiChoicePicture2
     */
    public static fromObject(object: {
      [k: string]: any
    }): darwincourse.MultiChoicePicture2

    /**
     * Creates a plain object from a MultiChoicePicture2 message. Also converts values to other types if specified.
     * @param message MultiChoicePicture2
     * @param [options] Conversion options
     * @returns Plain object
     */
    public static toObject(
      message: darwincourse.MultiChoicePicture2,
      options?: $protobuf.IConversionOptions,
    ): { [k: string]: any }

    /**
     * Converts this MultiChoicePicture2 to JSON.
     * @returns JSON object
     */
    public toJSON(): { [k: string]: any }
  }

  /** Properties of a MultiChoiceText. */
  interface IMultiChoiceText {
    /** MultiChoiceText audioId */
    audioId?: string | null

    /** MultiChoiceText text */
    text?: string | null

    /** MultiChoiceText pictureId */
    pictureId?: string | null

    /** MultiChoiceText choice */
    choice?: { [k: string]: darwincourse.IChoice } | null

    /** MultiChoiceText trText */
    trText?: string | null

    /** MultiChoiceText passage */
    passage?: string | null

    /** MultiChoiceText instruction */
    instruction?: string | null

    /** MultiChoiceText stemTexts */
    stemTexts?: string[] | null
  }

  /** Represents a MultiChoiceText. */
  class MultiChoiceText implements IMultiChoiceText {
    /**
     * Constructs a new MultiChoiceText.
     * @param [properties] Properties to set
     */
    constructor(properties?: darwincourse.IMultiChoiceText)

    /** MultiChoiceText audioId. */
    public audioId: string

    /** MultiChoiceText text. */
    public text: string

    /** MultiChoiceText pictureId. */
    public pictureId: string

    /** MultiChoiceText choice. */
    public choice: { [k: string]: darwincourse.IChoice }

    /** MultiChoiceText trText. */
    public trText: string

    /** MultiChoiceText passage. */
    public passage: string

    /** MultiChoiceText instruction. */
    public instruction: string

    /** MultiChoiceText stemTexts. */
    public stemTexts: string[]

    /**
     * Creates a new MultiChoiceText instance using the specified properties.
     * @param [properties] Properties to set
     * @returns MultiChoiceText instance
     */
    public static create(
      properties?: darwincourse.IMultiChoiceText,
    ): darwincourse.MultiChoiceText

    /**
     * Encodes the specified MultiChoiceText message. Does not implicitly {@link darwincourse.MultiChoiceText.verify|verify} messages.
     * @param message MultiChoiceText message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encode(
      message: darwincourse.IMultiChoiceText,
      writer?: $protobuf.Writer,
    ): $protobuf.Writer

    /**
     * Encodes the specified MultiChoiceText message, length delimited. Does not implicitly {@link darwincourse.MultiChoiceText.verify|verify} messages.
     * @param message MultiChoiceText message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encodeDelimited(
      message: darwincourse.IMultiChoiceText,
      writer?: $protobuf.Writer,
    ): $protobuf.Writer

    /**
     * Decodes a MultiChoiceText message from the specified reader or buffer.
     * @param reader Reader or buffer to decode from
     * @param [length] Message length if known beforehand
     * @returns MultiChoiceText
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decode(
      reader: $protobuf.Reader | Uint8Array,
      length?: number,
    ): darwincourse.MultiChoiceText

    /**
     * Decodes a MultiChoiceText message from the specified reader or buffer, length delimited.
     * @param reader Reader or buffer to decode from
     * @returns MultiChoiceText
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decodeDelimited(
      reader: $protobuf.Reader | Uint8Array,
    ): darwincourse.MultiChoiceText

    /**
     * Verifies a MultiChoiceText message.
     * @param message Plain object to verify
     * @returns `null` if valid, otherwise the reason why it is not
     */
    public static verify(message: { [k: string]: any }): string | null

    /**
     * Creates a MultiChoiceText message from a plain object. Also converts values to their respective internal types.
     * @param object Plain object
     * @returns MultiChoiceText
     */
    public static fromObject(object: {
      [k: string]: any
    }): darwincourse.MultiChoiceText

    /**
     * Creates a plain object from a MultiChoiceText message. Also converts values to other types if specified.
     * @param message MultiChoiceText
     * @param [options] Conversion options
     * @returns Plain object
     */
    public static toObject(
      message: darwincourse.MultiChoiceText,
      options?: $protobuf.IConversionOptions,
    ): { [k: string]: any }

    /**
     * Converts this MultiChoiceText to JSON.
     * @returns JSON object
     */
    public toJSON(): { [k: string]: any }
  }

  /** Properties of a MultiChoiceAudio. */
  interface IMultiChoiceAudio {
    /** MultiChoiceAudio audioId */
    audioId?: string | null

    /** MultiChoiceAudio text */
    text?: string | null

    /** MultiChoiceAudio pictureId */
    pictureId?: string | null

    /** MultiChoiceAudio choice */
    choice?: { [k: string]: darwincourse.IChoice } | null

    /** MultiChoiceAudio trText */
    trText?: string | null

    /** MultiChoiceAudio passage */
    passage?: string | null
  }

  /** Represents a MultiChoiceAudio. */
  class MultiChoiceAudio implements IMultiChoiceAudio {
    /**
     * Constructs a new MultiChoiceAudio.
     * @param [properties] Properties to set
     */
    constructor(properties?: darwincourse.IMultiChoiceAudio)

    /** MultiChoiceAudio audioId. */
    public audioId: string

    /** MultiChoiceAudio text. */
    public text: string

    /** MultiChoiceAudio pictureId. */
    public pictureId: string

    /** MultiChoiceAudio choice. */
    public choice: { [k: string]: darwincourse.IChoice }

    /** MultiChoiceAudio trText. */
    public trText: string

    /** MultiChoiceAudio passage. */
    public passage: string

    /**
     * Creates a new MultiChoiceAudio instance using the specified properties.
     * @param [properties] Properties to set
     * @returns MultiChoiceAudio instance
     */
    public static create(
      properties?: darwincourse.IMultiChoiceAudio,
    ): darwincourse.MultiChoiceAudio

    /**
     * Encodes the specified MultiChoiceAudio message. Does not implicitly {@link darwincourse.MultiChoiceAudio.verify|verify} messages.
     * @param message MultiChoiceAudio message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encode(
      message: darwincourse.IMultiChoiceAudio,
      writer?: $protobuf.Writer,
    ): $protobuf.Writer

    /**
     * Encodes the specified MultiChoiceAudio message, length delimited. Does not implicitly {@link darwincourse.MultiChoiceAudio.verify|verify} messages.
     * @param message MultiChoiceAudio message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encodeDelimited(
      message: darwincourse.IMultiChoiceAudio,
      writer?: $protobuf.Writer,
    ): $protobuf.Writer

    /**
     * Decodes a MultiChoiceAudio message from the specified reader or buffer.
     * @param reader Reader or buffer to decode from
     * @param [length] Message length if known beforehand
     * @returns MultiChoiceAudio
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decode(
      reader: $protobuf.Reader | Uint8Array,
      length?: number,
    ): darwincourse.MultiChoiceAudio

    /**
     * Decodes a MultiChoiceAudio message from the specified reader or buffer, length delimited.
     * @param reader Reader or buffer to decode from
     * @returns MultiChoiceAudio
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decodeDelimited(
      reader: $protobuf.Reader | Uint8Array,
    ): darwincourse.MultiChoiceAudio

    /**
     * Verifies a MultiChoiceAudio message.
     * @param message Plain object to verify
     * @returns `null` if valid, otherwise the reason why it is not
     */
    public static verify(message: { [k: string]: any }): string | null

    /**
     * Creates a MultiChoiceAudio message from a plain object. Also converts values to their respective internal types.
     * @param object Plain object
     * @returns MultiChoiceAudio
     */
    public static fromObject(object: {
      [k: string]: any
    }): darwincourse.MultiChoiceAudio

    /**
     * Creates a plain object from a MultiChoiceAudio message. Also converts values to other types if specified.
     * @param message MultiChoiceAudio
     * @param [options] Conversion options
     * @returns Plain object
     */
    public static toObject(
      message: darwincourse.MultiChoiceAudio,
      options?: $protobuf.IConversionOptions,
    ): { [k: string]: any }

    /**
     * Converts this MultiChoiceAudio to JSON.
     * @returns JSON object
     */
    public toJSON(): { [k: string]: any }
  }

  /** Properties of a MultiChoiceQuestion1. */
  interface IMultiChoiceQuestion1 {
    /** MultiChoiceQuestion1 audioId */
    audioId?: string | null

    /** MultiChoiceQuestion1 pictureId */
    pictureId?: string[] | null

    /** MultiChoiceQuestion1 choice */
    choice?: { [k: string]: darwincourse.IChoice } | null
  }

  /** Represents a MultiChoiceQuestion1. */
  class MultiChoiceQuestion1 implements IMultiChoiceQuestion1 {
    /**
     * Constructs a new MultiChoiceQuestion1.
     * @param [properties] Properties to set
     */
    constructor(properties?: darwincourse.IMultiChoiceQuestion1)

    /** MultiChoiceQuestion1 audioId. */
    public audioId: string

    /** MultiChoiceQuestion1 pictureId. */
    public pictureId: string[]

    /** MultiChoiceQuestion1 choice. */
    public choice: { [k: string]: darwincourse.IChoice }

    /**
     * Creates a new MultiChoiceQuestion1 instance using the specified properties.
     * @param [properties] Properties to set
     * @returns MultiChoiceQuestion1 instance
     */
    public static create(
      properties?: darwincourse.IMultiChoiceQuestion1,
    ): darwincourse.MultiChoiceQuestion1

    /**
     * Encodes the specified MultiChoiceQuestion1 message. Does not implicitly {@link darwincourse.MultiChoiceQuestion1.verify|verify} messages.
     * @param message MultiChoiceQuestion1 message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encode(
      message: darwincourse.IMultiChoiceQuestion1,
      writer?: $protobuf.Writer,
    ): $protobuf.Writer

    /**
     * Encodes the specified MultiChoiceQuestion1 message, length delimited. Does not implicitly {@link darwincourse.MultiChoiceQuestion1.verify|verify} messages.
     * @param message MultiChoiceQuestion1 message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encodeDelimited(
      message: darwincourse.IMultiChoiceQuestion1,
      writer?: $protobuf.Writer,
    ): $protobuf.Writer

    /**
     * Decodes a MultiChoiceQuestion1 message from the specified reader or buffer.
     * @param reader Reader or buffer to decode from
     * @param [length] Message length if known beforehand
     * @returns MultiChoiceQuestion1
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decode(
      reader: $protobuf.Reader | Uint8Array,
      length?: number,
    ): darwincourse.MultiChoiceQuestion1

    /**
     * Decodes a MultiChoiceQuestion1 message from the specified reader or buffer, length delimited.
     * @param reader Reader or buffer to decode from
     * @returns MultiChoiceQuestion1
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decodeDelimited(
      reader: $protobuf.Reader | Uint8Array,
    ): darwincourse.MultiChoiceQuestion1

    /**
     * Verifies a MultiChoiceQuestion1 message.
     * @param message Plain object to verify
     * @returns `null` if valid, otherwise the reason why it is not
     */
    public static verify(message: { [k: string]: any }): string | null

    /**
     * Creates a MultiChoiceQuestion1 message from a plain object. Also converts values to their respective internal types.
     * @param object Plain object
     * @returns MultiChoiceQuestion1
     */
    public static fromObject(object: {
      [k: string]: any
    }): darwincourse.MultiChoiceQuestion1

    /**
     * Creates a plain object from a MultiChoiceQuestion1 message. Also converts values to other types if specified.
     * @param message MultiChoiceQuestion1
     * @param [options] Conversion options
     * @returns Plain object
     */
    public static toObject(
      message: darwincourse.MultiChoiceQuestion1,
      options?: $protobuf.IConversionOptions,
    ): { [k: string]: any }

    /**
     * Converts this MultiChoiceQuestion1 to JSON.
     * @returns JSON object
     */
    public toJSON(): { [k: string]: any }
  }

  /** Properties of a MultiChoiceQuestion2. */
  interface IMultiChoiceQuestion2 {
    /** MultiChoiceQuestion2 text */
    text?: string | null

    /** MultiChoiceQuestion2 pictureId */
    pictureId?: string | null

    /** MultiChoiceQuestion2 choice */
    choice?: { [k: string]: darwincourse.IChoice } | null

    /** MultiChoiceQuestion2 trText */
    trText?: string | null

    /** MultiChoiceQuestion2 audioId */
    audioId?: string | null
  }

  /** Represents a MultiChoiceQuestion2. */
  class MultiChoiceQuestion2 implements IMultiChoiceQuestion2 {
    /**
     * Constructs a new MultiChoiceQuestion2.
     * @param [properties] Properties to set
     */
    constructor(properties?: darwincourse.IMultiChoiceQuestion2)

    /** MultiChoiceQuestion2 text. */
    public text: string

    /** MultiChoiceQuestion2 pictureId. */
    public pictureId: string

    /** MultiChoiceQuestion2 choice. */
    public choice: { [k: string]: darwincourse.IChoice }

    /** MultiChoiceQuestion2 trText. */
    public trText: string

    /** MultiChoiceQuestion2 audioId. */
    public audioId: string

    /**
     * Creates a new MultiChoiceQuestion2 instance using the specified properties.
     * @param [properties] Properties to set
     * @returns MultiChoiceQuestion2 instance
     */
    public static create(
      properties?: darwincourse.IMultiChoiceQuestion2,
    ): darwincourse.MultiChoiceQuestion2

    /**
     * Encodes the specified MultiChoiceQuestion2 message. Does not implicitly {@link darwincourse.MultiChoiceQuestion2.verify|verify} messages.
     * @param message MultiChoiceQuestion2 message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encode(
      message: darwincourse.IMultiChoiceQuestion2,
      writer?: $protobuf.Writer,
    ): $protobuf.Writer

    /**
     * Encodes the specified MultiChoiceQuestion2 message, length delimited. Does not implicitly {@link darwincourse.MultiChoiceQuestion2.verify|verify} messages.
     * @param message MultiChoiceQuestion2 message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encodeDelimited(
      message: darwincourse.IMultiChoiceQuestion2,
      writer?: $protobuf.Writer,
    ): $protobuf.Writer

    /**
     * Decodes a MultiChoiceQuestion2 message from the specified reader or buffer.
     * @param reader Reader or buffer to decode from
     * @param [length] Message length if known beforehand
     * @returns MultiChoiceQuestion2
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decode(
      reader: $protobuf.Reader | Uint8Array,
      length?: number,
    ): darwincourse.MultiChoiceQuestion2

    /**
     * Decodes a MultiChoiceQuestion2 message from the specified reader or buffer, length delimited.
     * @param reader Reader or buffer to decode from
     * @returns MultiChoiceQuestion2
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decodeDelimited(
      reader: $protobuf.Reader | Uint8Array,
    ): darwincourse.MultiChoiceQuestion2

    /**
     * Verifies a MultiChoiceQuestion2 message.
     * @param message Plain object to verify
     * @returns `null` if valid, otherwise the reason why it is not
     */
    public static verify(message: { [k: string]: any }): string | null

    /**
     * Creates a MultiChoiceQuestion2 message from a plain object. Also converts values to their respective internal types.
     * @param object Plain object
     * @returns MultiChoiceQuestion2
     */
    public static fromObject(object: {
      [k: string]: any
    }): darwincourse.MultiChoiceQuestion2

    /**
     * Creates a plain object from a MultiChoiceQuestion2 message. Also converts values to other types if specified.
     * @param message MultiChoiceQuestion2
     * @param [options] Conversion options
     * @returns Plain object
     */
    public static toObject(
      message: darwincourse.MultiChoiceQuestion2,
      options?: $protobuf.IConversionOptions,
    ): { [k: string]: any }

    /**
     * Converts this MultiChoiceQuestion2 to JSON.
     * @returns JSON object
     */
    public toJSON(): { [k: string]: any }
  }

  /** Properties of a MultiChoiceQuestion6. */
  interface IMultiChoiceQuestion6 {
    /** MultiChoiceQuestion6 audioId */
    audioId?: string | null

    /** MultiChoiceQuestion6 pictureId */
    pictureId?: string[] | null

    /** MultiChoiceQuestion6 choice */
    choice?: { [k: string]: darwincourse.IChoice } | null
  }

  /** Represents a MultiChoiceQuestion6. */
  class MultiChoiceQuestion6 implements IMultiChoiceQuestion6 {
    /**
     * Constructs a new MultiChoiceQuestion6.
     * @param [properties] Properties to set
     */
    constructor(properties?: darwincourse.IMultiChoiceQuestion6)

    /** MultiChoiceQuestion6 audioId. */
    public audioId: string

    /** MultiChoiceQuestion6 pictureId. */
    public pictureId: string[]

    /** MultiChoiceQuestion6 choice. */
    public choice: { [k: string]: darwincourse.IChoice }

    /**
     * Creates a new MultiChoiceQuestion6 instance using the specified properties.
     * @param [properties] Properties to set
     * @returns MultiChoiceQuestion6 instance
     */
    public static create(
      properties?: darwincourse.IMultiChoiceQuestion6,
    ): darwincourse.MultiChoiceQuestion6

    /**
     * Encodes the specified MultiChoiceQuestion6 message. Does not implicitly {@link darwincourse.MultiChoiceQuestion6.verify|verify} messages.
     * @param message MultiChoiceQuestion6 message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encode(
      message: darwincourse.IMultiChoiceQuestion6,
      writer?: $protobuf.Writer,
    ): $protobuf.Writer

    /**
     * Encodes the specified MultiChoiceQuestion6 message, length delimited. Does not implicitly {@link darwincourse.MultiChoiceQuestion6.verify|verify} messages.
     * @param message MultiChoiceQuestion6 message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encodeDelimited(
      message: darwincourse.IMultiChoiceQuestion6,
      writer?: $protobuf.Writer,
    ): $protobuf.Writer

    /**
     * Decodes a MultiChoiceQuestion6 message from the specified reader or buffer.
     * @param reader Reader or buffer to decode from
     * @param [length] Message length if known beforehand
     * @returns MultiChoiceQuestion6
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decode(
      reader: $protobuf.Reader | Uint8Array,
      length?: number,
    ): darwincourse.MultiChoiceQuestion6

    /**
     * Decodes a MultiChoiceQuestion6 message from the specified reader or buffer, length delimited.
     * @param reader Reader or buffer to decode from
     * @returns MultiChoiceQuestion6
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decodeDelimited(
      reader: $protobuf.Reader | Uint8Array,
    ): darwincourse.MultiChoiceQuestion6

    /**
     * Verifies a MultiChoiceQuestion6 message.
     * @param message Plain object to verify
     * @returns `null` if valid, otherwise the reason why it is not
     */
    public static verify(message: { [k: string]: any }): string | null

    /**
     * Creates a MultiChoiceQuestion6 message from a plain object. Also converts values to their respective internal types.
     * @param object Plain object
     * @returns MultiChoiceQuestion6
     */
    public static fromObject(object: {
      [k: string]: any
    }): darwincourse.MultiChoiceQuestion6

    /**
     * Creates a plain object from a MultiChoiceQuestion6 message. Also converts values to other types if specified.
     * @param message MultiChoiceQuestion6
     * @param [options] Conversion options
     * @returns Plain object
     */
    public static toObject(
      message: darwincourse.MultiChoiceQuestion6,
      options?: $protobuf.IConversionOptions,
    ): { [k: string]: any }

    /**
     * Converts this MultiChoiceQuestion6 to JSON.
     * @returns JSON object
     */
    public toJSON(): { [k: string]: any }
  }

  /** Properties of a MultiChoiceQuestion4A. */
  interface IMultiChoiceQuestion4A {
    /** MultiChoiceQuestion4A audioId */
    audioId?: string | null

    /** MultiChoiceQuestion4A text */
    text?: string | null

    /** MultiChoiceQuestion4A pictureId */
    pictureId?: string[] | null

    /** MultiChoiceQuestion4A choice */
    choice?: { [k: string]: darwincourse.IChoice } | null

    /** MultiChoiceQuestion4A trText */
    trText?: string | null
  }

  /** Represents a MultiChoiceQuestion4A. */
  class MultiChoiceQuestion4A implements IMultiChoiceQuestion4A {
    /**
     * Constructs a new MultiChoiceQuestion4A.
     * @param [properties] Properties to set
     */
    constructor(properties?: darwincourse.IMultiChoiceQuestion4A)

    /** MultiChoiceQuestion4A audioId. */
    public audioId: string

    /** MultiChoiceQuestion4A text. */
    public text: string

    /** MultiChoiceQuestion4A pictureId. */
    public pictureId: string[]

    /** MultiChoiceQuestion4A choice. */
    public choice: { [k: string]: darwincourse.IChoice }

    /** MultiChoiceQuestion4A trText. */
    public trText: string

    /**
     * Creates a new MultiChoiceQuestion4A instance using the specified properties.
     * @param [properties] Properties to set
     * @returns MultiChoiceQuestion4A instance
     */
    public static create(
      properties?: darwincourse.IMultiChoiceQuestion4A,
    ): darwincourse.MultiChoiceQuestion4A

    /**
     * Encodes the specified MultiChoiceQuestion4A message. Does not implicitly {@link darwincourse.MultiChoiceQuestion4A.verify|verify} messages.
     * @param message MultiChoiceQuestion4A message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encode(
      message: darwincourse.IMultiChoiceQuestion4A,
      writer?: $protobuf.Writer,
    ): $protobuf.Writer

    /**
     * Encodes the specified MultiChoiceQuestion4A message, length delimited. Does not implicitly {@link darwincourse.MultiChoiceQuestion4A.verify|verify} messages.
     * @param message MultiChoiceQuestion4A message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encodeDelimited(
      message: darwincourse.IMultiChoiceQuestion4A,
      writer?: $protobuf.Writer,
    ): $protobuf.Writer

    /**
     * Decodes a MultiChoiceQuestion4A message from the specified reader or buffer.
     * @param reader Reader or buffer to decode from
     * @param [length] Message length if known beforehand
     * @returns MultiChoiceQuestion4A
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decode(
      reader: $protobuf.Reader | Uint8Array,
      length?: number,
    ): darwincourse.MultiChoiceQuestion4A

    /**
     * Decodes a MultiChoiceQuestion4A message from the specified reader or buffer, length delimited.
     * @param reader Reader or buffer to decode from
     * @returns MultiChoiceQuestion4A
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decodeDelimited(
      reader: $protobuf.Reader | Uint8Array,
    ): darwincourse.MultiChoiceQuestion4A

    /**
     * Verifies a MultiChoiceQuestion4A message.
     * @param message Plain object to verify
     * @returns `null` if valid, otherwise the reason why it is not
     */
    public static verify(message: { [k: string]: any }): string | null

    /**
     * Creates a MultiChoiceQuestion4A message from a plain object. Also converts values to their respective internal types.
     * @param object Plain object
     * @returns MultiChoiceQuestion4A
     */
    public static fromObject(object: {
      [k: string]: any
    }): darwincourse.MultiChoiceQuestion4A

    /**
     * Creates a plain object from a MultiChoiceQuestion4A message. Also converts values to other types if specified.
     * @param message MultiChoiceQuestion4A
     * @param [options] Conversion options
     * @returns Plain object
     */
    public static toObject(
      message: darwincourse.MultiChoiceQuestion4A,
      options?: $protobuf.IConversionOptions,
    ): { [k: string]: any }

    /**
     * Converts this MultiChoiceQuestion4A to JSON.
     * @returns JSON object
     */
    public toJSON(): { [k: string]: any }
  }

  /** Properties of a MultiChoiceQuestion4B. */
  interface IMultiChoiceQuestion4B {
    /** MultiChoiceQuestion4B audioId */
    audioId?: string | null

    /** MultiChoiceQuestion4B text */
    text?: string | null

    /** MultiChoiceQuestion4B choice */
    choice?: { [k: string]: darwincourse.IChoice } | null
  }

  /** Represents a MultiChoiceQuestion4B. */
  class MultiChoiceQuestion4B implements IMultiChoiceQuestion4B {
    /**
     * Constructs a new MultiChoiceQuestion4B.
     * @param [properties] Properties to set
     */
    constructor(properties?: darwincourse.IMultiChoiceQuestion4B)

    /** MultiChoiceQuestion4B audioId. */
    public audioId: string

    /** MultiChoiceQuestion4B text. */
    public text: string

    /** MultiChoiceQuestion4B choice. */
    public choice: { [k: string]: darwincourse.IChoice }

    /**
     * Creates a new MultiChoiceQuestion4B instance using the specified properties.
     * @param [properties] Properties to set
     * @returns MultiChoiceQuestion4B instance
     */
    public static create(
      properties?: darwincourse.IMultiChoiceQuestion4B,
    ): darwincourse.MultiChoiceQuestion4B

    /**
     * Encodes the specified MultiChoiceQuestion4B message. Does not implicitly {@link darwincourse.MultiChoiceQuestion4B.verify|verify} messages.
     * @param message MultiChoiceQuestion4B message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encode(
      message: darwincourse.IMultiChoiceQuestion4B,
      writer?: $protobuf.Writer,
    ): $protobuf.Writer

    /**
     * Encodes the specified MultiChoiceQuestion4B message, length delimited. Does not implicitly {@link darwincourse.MultiChoiceQuestion4B.verify|verify} messages.
     * @param message MultiChoiceQuestion4B message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encodeDelimited(
      message: darwincourse.IMultiChoiceQuestion4B,
      writer?: $protobuf.Writer,
    ): $protobuf.Writer

    /**
     * Decodes a MultiChoiceQuestion4B message from the specified reader or buffer.
     * @param reader Reader or buffer to decode from
     * @param [length] Message length if known beforehand
     * @returns MultiChoiceQuestion4B
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decode(
      reader: $protobuf.Reader | Uint8Array,
      length?: number,
    ): darwincourse.MultiChoiceQuestion4B

    /**
     * Decodes a MultiChoiceQuestion4B message from the specified reader or buffer, length delimited.
     * @param reader Reader or buffer to decode from
     * @returns MultiChoiceQuestion4B
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decodeDelimited(
      reader: $protobuf.Reader | Uint8Array,
    ): darwincourse.MultiChoiceQuestion4B

    /**
     * Verifies a MultiChoiceQuestion4B message.
     * @param message Plain object to verify
     * @returns `null` if valid, otherwise the reason why it is not
     */
    public static verify(message: { [k: string]: any }): string | null

    /**
     * Creates a MultiChoiceQuestion4B message from a plain object. Also converts values to their respective internal types.
     * @param object Plain object
     * @returns MultiChoiceQuestion4B
     */
    public static fromObject(object: {
      [k: string]: any
    }): darwincourse.MultiChoiceQuestion4B

    /**
     * Creates a plain object from a MultiChoiceQuestion4B message. Also converts values to other types if specified.
     * @param message MultiChoiceQuestion4B
     * @param [options] Conversion options
     * @returns Plain object
     */
    public static toObject(
      message: darwincourse.MultiChoiceQuestion4B,
      options?: $protobuf.IConversionOptions,
    ): { [k: string]: any }

    /**
     * Converts this MultiChoiceQuestion4B to JSON.
     * @returns JSON object
     */
    public toJSON(): { [k: string]: any }
  }

  /** Properties of a MultiChoiceQuestion5. */
  interface IMultiChoiceQuestion5 {
    /** MultiChoiceQuestion5 audioId */
    audioId?: string | null

    /** MultiChoiceQuestion5 text */
    text?: string | null

    /** MultiChoiceQuestion5 pictureId */
    pictureId?: string | null

    /** MultiChoiceQuestion5 choice */
    choice?: { [k: string]: darwincourse.IChoice } | null
  }

  /** Represents a MultiChoiceQuestion5. */
  class MultiChoiceQuestion5 implements IMultiChoiceQuestion5 {
    /**
     * Constructs a new MultiChoiceQuestion5.
     * @param [properties] Properties to set
     */
    constructor(properties?: darwincourse.IMultiChoiceQuestion5)

    /** MultiChoiceQuestion5 audioId. */
    public audioId: string

    /** MultiChoiceQuestion5 text. */
    public text: string

    /** MultiChoiceQuestion5 pictureId. */
    public pictureId: string

    /** MultiChoiceQuestion5 choice. */
    public choice: { [k: string]: darwincourse.IChoice }

    /**
     * Creates a new MultiChoiceQuestion5 instance using the specified properties.
     * @param [properties] Properties to set
     * @returns MultiChoiceQuestion5 instance
     */
    public static create(
      properties?: darwincourse.IMultiChoiceQuestion5,
    ): darwincourse.MultiChoiceQuestion5

    /**
     * Encodes the specified MultiChoiceQuestion5 message. Does not implicitly {@link darwincourse.MultiChoiceQuestion5.verify|verify} messages.
     * @param message MultiChoiceQuestion5 message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encode(
      message: darwincourse.IMultiChoiceQuestion5,
      writer?: $protobuf.Writer,
    ): $protobuf.Writer

    /**
     * Encodes the specified MultiChoiceQuestion5 message, length delimited. Does not implicitly {@link darwincourse.MultiChoiceQuestion5.verify|verify} messages.
     * @param message MultiChoiceQuestion5 message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encodeDelimited(
      message: darwincourse.IMultiChoiceQuestion5,
      writer?: $protobuf.Writer,
    ): $protobuf.Writer

    /**
     * Decodes a MultiChoiceQuestion5 message from the specified reader or buffer.
     * @param reader Reader or buffer to decode from
     * @param [length] Message length if known beforehand
     * @returns MultiChoiceQuestion5
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decode(
      reader: $protobuf.Reader | Uint8Array,
      length?: number,
    ): darwincourse.MultiChoiceQuestion5

    /**
     * Decodes a MultiChoiceQuestion5 message from the specified reader or buffer, length delimited.
     * @param reader Reader or buffer to decode from
     * @returns MultiChoiceQuestion5
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decodeDelimited(
      reader: $protobuf.Reader | Uint8Array,
    ): darwincourse.MultiChoiceQuestion5

    /**
     * Verifies a MultiChoiceQuestion5 message.
     * @param message Plain object to verify
     * @returns `null` if valid, otherwise the reason why it is not
     */
    public static verify(message: { [k: string]: any }): string | null

    /**
     * Creates a MultiChoiceQuestion5 message from a plain object. Also converts values to their respective internal types.
     * @param object Plain object
     * @returns MultiChoiceQuestion5
     */
    public static fromObject(object: {
      [k: string]: any
    }): darwincourse.MultiChoiceQuestion5

    /**
     * Creates a plain object from a MultiChoiceQuestion5 message. Also converts values to other types if specified.
     * @param message MultiChoiceQuestion5
     * @param [options] Conversion options
     * @returns Plain object
     */
    public static toObject(
      message: darwincourse.MultiChoiceQuestion5,
      options?: $protobuf.IConversionOptions,
    ): { [k: string]: any }

    /**
     * Converts this MultiChoiceQuestion5 to JSON.
     * @returns JSON object
     */
    public toJSON(): { [k: string]: any }
  }

  /** Properties of a ClickAndDrag. */
  interface IClickAndDrag {
    /** ClickAndDrag stem */
    stem?: darwincourse.ClickAndDrag.IStem[] | null

    /** ClickAndDrag answer */
    answer?: string[] | null

    /** ClickAndDrag pictureId */
    pictureId?: string[] | null
  }

  /** Represents a ClickAndDrag. */
  class ClickAndDrag implements IClickAndDrag {
    /**
     * Constructs a new ClickAndDrag.
     * @param [properties] Properties to set
     */
    constructor(properties?: darwincourse.IClickAndDrag)

    /** ClickAndDrag stem. */
    public stem: darwincourse.ClickAndDrag.IStem[]

    /** ClickAndDrag answer. */
    public answer: string[]

    /** ClickAndDrag pictureId. */
    public pictureId: string[]

    /**
     * Creates a new ClickAndDrag instance using the specified properties.
     * @param [properties] Properties to set
     * @returns ClickAndDrag instance
     */
    public static create(
      properties?: darwincourse.IClickAndDrag,
    ): darwincourse.ClickAndDrag

    /**
     * Encodes the specified ClickAndDrag message. Does not implicitly {@link darwincourse.ClickAndDrag.verify|verify} messages.
     * @param message ClickAndDrag message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encode(
      message: darwincourse.IClickAndDrag,
      writer?: $protobuf.Writer,
    ): $protobuf.Writer

    /**
     * Encodes the specified ClickAndDrag message, length delimited. Does not implicitly {@link darwincourse.ClickAndDrag.verify|verify} messages.
     * @param message ClickAndDrag message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encodeDelimited(
      message: darwincourse.IClickAndDrag,
      writer?: $protobuf.Writer,
    ): $protobuf.Writer

    /**
     * Decodes a ClickAndDrag message from the specified reader or buffer.
     * @param reader Reader or buffer to decode from
     * @param [length] Message length if known beforehand
     * @returns ClickAndDrag
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decode(
      reader: $protobuf.Reader | Uint8Array,
      length?: number,
    ): darwincourse.ClickAndDrag

    /**
     * Decodes a ClickAndDrag message from the specified reader or buffer, length delimited.
     * @param reader Reader or buffer to decode from
     * @returns ClickAndDrag
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decodeDelimited(
      reader: $protobuf.Reader | Uint8Array,
    ): darwincourse.ClickAndDrag

    /**
     * Verifies a ClickAndDrag message.
     * @param message Plain object to verify
     * @returns `null` if valid, otherwise the reason why it is not
     */
    public static verify(message: { [k: string]: any }): string | null

    /**
     * Creates a ClickAndDrag message from a plain object. Also converts values to their respective internal types.
     * @param object Plain object
     * @returns ClickAndDrag
     */
    public static fromObject(object: {
      [k: string]: any
    }): darwincourse.ClickAndDrag

    /**
     * Creates a plain object from a ClickAndDrag message. Also converts values to other types if specified.
     * @param message ClickAndDrag
     * @param [options] Conversion options
     * @returns Plain object
     */
    public static toObject(
      message: darwincourse.ClickAndDrag,
      options?: $protobuf.IConversionOptions,
    ): { [k: string]: any }

    /**
     * Converts this ClickAndDrag to JSON.
     * @returns JSON object
     */
    public toJSON(): { [k: string]: any }
  }

  namespace ClickAndDrag {
    /** Properties of a Stem. */
    interface IStem {
      /** Stem text */
      text?: string | null

      /** Stem checked */
      checked?: boolean | null
    }

    /** Represents a Stem. */
    class Stem implements IStem {
      /**
       * Constructs a new Stem.
       * @param [properties] Properties to set
       */
      constructor(properties?: darwincourse.ClickAndDrag.IStem)

      /** Stem text. */
      public text: string

      /** Stem checked. */
      public checked: boolean

      /**
       * Creates a new Stem instance using the specified properties.
       * @param [properties] Properties to set
       * @returns Stem instance
       */
      public static create(
        properties?: darwincourse.ClickAndDrag.IStem,
      ): darwincourse.ClickAndDrag.Stem

      /**
       * Encodes the specified Stem message. Does not implicitly {@link darwincourse.ClickAndDrag.Stem.verify|verify} messages.
       * @param message Stem message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encode(
        message: darwincourse.ClickAndDrag.IStem,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Encodes the specified Stem message, length delimited. Does not implicitly {@link darwincourse.ClickAndDrag.Stem.verify|verify} messages.
       * @param message Stem message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encodeDelimited(
        message: darwincourse.ClickAndDrag.IStem,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Decodes a Stem message from the specified reader or buffer.
       * @param reader Reader or buffer to decode from
       * @param [length] Message length if known beforehand
       * @returns Stem
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decode(
        reader: $protobuf.Reader | Uint8Array,
        length?: number,
      ): darwincourse.ClickAndDrag.Stem

      /**
       * Decodes a Stem message from the specified reader or buffer, length delimited.
       * @param reader Reader or buffer to decode from
       * @returns Stem
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decodeDelimited(
        reader: $protobuf.Reader | Uint8Array,
      ): darwincourse.ClickAndDrag.Stem

      /**
       * Verifies a Stem message.
       * @param message Plain object to verify
       * @returns `null` if valid, otherwise the reason why it is not
       */
      public static verify(message: { [k: string]: any }): string | null

      /**
       * Creates a Stem message from a plain object. Also converts values to their respective internal types.
       * @param object Plain object
       * @returns Stem
       */
      public static fromObject(object: {
        [k: string]: any
      }): darwincourse.ClickAndDrag.Stem

      /**
       * Creates a plain object from a Stem message. Also converts values to other types if specified.
       * @param message Stem
       * @param [options] Conversion options
       * @returns Plain object
       */
      public static toObject(
        message: darwincourse.ClickAndDrag.Stem,
        options?: $protobuf.IConversionOptions,
      ): { [k: string]: any }

      /**
       * Converts this Stem to JSON.
       * @returns JSON object
       */
      public toJSON(): { [k: string]: any }
    }
  }

  /** Properties of a SentenceRepetition. */
  interface ISentenceRepetition {
    /** SentenceRepetition audioId */
    audioId?: string | null

    /** SentenceRepetition pictureId */
    pictureId?: string | null

    /** SentenceRepetition spokenText */
    spokenText?: string | null

    /** SentenceRepetition text */
    text?: string | null
  }

  /** Represents a SentenceRepetition. */
  class SentenceRepetition implements ISentenceRepetition {
    /**
     * Constructs a new SentenceRepetition.
     * @param [properties] Properties to set
     */
    constructor(properties?: darwincourse.ISentenceRepetition)

    /** SentenceRepetition audioId. */
    public audioId: string

    /** SentenceRepetition pictureId. */
    public pictureId: string

    /** SentenceRepetition spokenText. */
    public spokenText: string

    /** SentenceRepetition text. */
    public text: string

    /**
     * Creates a new SentenceRepetition instance using the specified properties.
     * @param [properties] Properties to set
     * @returns SentenceRepetition instance
     */
    public static create(
      properties?: darwincourse.ISentenceRepetition,
    ): darwincourse.SentenceRepetition

    /**
     * Encodes the specified SentenceRepetition message. Does not implicitly {@link darwincourse.SentenceRepetition.verify|verify} messages.
     * @param message SentenceRepetition message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encode(
      message: darwincourse.ISentenceRepetition,
      writer?: $protobuf.Writer,
    ): $protobuf.Writer

    /**
     * Encodes the specified SentenceRepetition message, length delimited. Does not implicitly {@link darwincourse.SentenceRepetition.verify|verify} messages.
     * @param message SentenceRepetition message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encodeDelimited(
      message: darwincourse.ISentenceRepetition,
      writer?: $protobuf.Writer,
    ): $protobuf.Writer

    /**
     * Decodes a SentenceRepetition message from the specified reader or buffer.
     * @param reader Reader or buffer to decode from
     * @param [length] Message length if known beforehand
     * @returns SentenceRepetition
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decode(
      reader: $protobuf.Reader | Uint8Array,
      length?: number,
    ): darwincourse.SentenceRepetition

    /**
     * Decodes a SentenceRepetition message from the specified reader or buffer, length delimited.
     * @param reader Reader or buffer to decode from
     * @returns SentenceRepetition
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decodeDelimited(
      reader: $protobuf.Reader | Uint8Array,
    ): darwincourse.SentenceRepetition

    /**
     * Verifies a SentenceRepetition message.
     * @param message Plain object to verify
     * @returns `null` if valid, otherwise the reason why it is not
     */
    public static verify(message: { [k: string]: any }): string | null

    /**
     * Creates a SentenceRepetition message from a plain object. Also converts values to their respective internal types.
     * @param object Plain object
     * @returns SentenceRepetition
     */
    public static fromObject(object: {
      [k: string]: any
    }): darwincourse.SentenceRepetition

    /**
     * Creates a plain object from a SentenceRepetition message. Also converts values to other types if specified.
     * @param message SentenceRepetition
     * @param [options] Conversion options
     * @returns Plain object
     */
    public static toObject(
      message: darwincourse.SentenceRepetition,
      options?: $protobuf.IConversionOptions,
    ): { [k: string]: any }

    /**
     * Converts this SentenceRepetition to JSON.
     * @returns JSON object
     */
    public toJSON(): { [k: string]: any }
  }

  /** Properties of an OralReading. */
  interface IOralReading {
    /** OralReading audioId */
    audioId?: string | null

    /** OralReading text */
    text?: string | null

    /** OralReading pictureId */
    pictureId?: string | null

    /** OralReading spokenText */
    spokenText?: string | null
  }

  /** Represents an OralReading. */
  class OralReading implements IOralReading {
    /**
     * Constructs a new OralReading.
     * @param [properties] Properties to set
     */
    constructor(properties?: darwincourse.IOralReading)

    /** OralReading audioId. */
    public audioId: string

    /** OralReading text. */
    public text: string

    /** OralReading pictureId. */
    public pictureId: string

    /** OralReading spokenText. */
    public spokenText: string

    /**
     * Creates a new OralReading instance using the specified properties.
     * @param [properties] Properties to set
     * @returns OralReading instance
     */
    public static create(
      properties?: darwincourse.IOralReading,
    ): darwincourse.OralReading

    /**
     * Encodes the specified OralReading message. Does not implicitly {@link darwincourse.OralReading.verify|verify} messages.
     * @param message OralReading message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encode(
      message: darwincourse.IOralReading,
      writer?: $protobuf.Writer,
    ): $protobuf.Writer

    /**
     * Encodes the specified OralReading message, length delimited. Does not implicitly {@link darwincourse.OralReading.verify|verify} messages.
     * @param message OralReading message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encodeDelimited(
      message: darwincourse.IOralReading,
      writer?: $protobuf.Writer,
    ): $protobuf.Writer

    /**
     * Decodes an OralReading message from the specified reader or buffer.
     * @param reader Reader or buffer to decode from
     * @param [length] Message length if known beforehand
     * @returns OralReading
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decode(
      reader: $protobuf.Reader | Uint8Array,
      length?: number,
    ): darwincourse.OralReading

    /**
     * Decodes an OralReading message from the specified reader or buffer, length delimited.
     * @param reader Reader or buffer to decode from
     * @returns OralReading
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decodeDelimited(
      reader: $protobuf.Reader | Uint8Array,
    ): darwincourse.OralReading

    /**
     * Verifies an OralReading message.
     * @param message Plain object to verify
     * @returns `null` if valid, otherwise the reason why it is not
     */
    public static verify(message: { [k: string]: any }): string | null

    /**
     * Creates an OralReading message from a plain object. Also converts values to their respective internal types.
     * @param object Plain object
     * @returns OralReading
     */
    public static fromObject(object: {
      [k: string]: any
    }): darwincourse.OralReading

    /**
     * Creates a plain object from an OralReading message. Also converts values to other types if specified.
     * @param message OralReading
     * @param [options] Conversion options
     * @returns Plain object
     */
    public static toObject(
      message: darwincourse.OralReading,
      options?: $protobuf.IConversionOptions,
    ): { [k: string]: any }

    /**
     * Converts this OralReading to JSON.
     * @returns JSON object
     */
    public toJSON(): { [k: string]: any }
  }

  /** Properties of a RolePlay. */
  interface IRolePlay {
    /** RolePlay speaker */
    speaker?: darwincourse.RolePlay.ISpeaker[] | null

    /** RolePlay practiceRoleId */
    practiceRoleId?: number | null
  }

  /** Represents a RolePlay. */
  class RolePlay implements IRolePlay {
    /**
     * Constructs a new RolePlay.
     * @param [properties] Properties to set
     */
    constructor(properties?: darwincourse.IRolePlay)

    /** RolePlay speaker. */
    public speaker: darwincourse.RolePlay.ISpeaker[]

    /** RolePlay practiceRoleId. */
    public practiceRoleId: number

    /**
     * Creates a new RolePlay instance using the specified properties.
     * @param [properties] Properties to set
     * @returns RolePlay instance
     */
    public static create(
      properties?: darwincourse.IRolePlay,
    ): darwincourse.RolePlay

    /**
     * Encodes the specified RolePlay message. Does not implicitly {@link darwincourse.RolePlay.verify|verify} messages.
     * @param message RolePlay message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encode(
      message: darwincourse.IRolePlay,
      writer?: $protobuf.Writer,
    ): $protobuf.Writer

    /**
     * Encodes the specified RolePlay message, length delimited. Does not implicitly {@link darwincourse.RolePlay.verify|verify} messages.
     * @param message RolePlay message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encodeDelimited(
      message: darwincourse.IRolePlay,
      writer?: $protobuf.Writer,
    ): $protobuf.Writer

    /**
     * Decodes a RolePlay message from the specified reader or buffer.
     * @param reader Reader or buffer to decode from
     * @param [length] Message length if known beforehand
     * @returns RolePlay
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decode(
      reader: $protobuf.Reader | Uint8Array,
      length?: number,
    ): darwincourse.RolePlay

    /**
     * Decodes a RolePlay message from the specified reader or buffer, length delimited.
     * @param reader Reader or buffer to decode from
     * @returns RolePlay
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decodeDelimited(
      reader: $protobuf.Reader | Uint8Array,
    ): darwincourse.RolePlay

    /**
     * Verifies a RolePlay message.
     * @param message Plain object to verify
     * @returns `null` if valid, otherwise the reason why it is not
     */
    public static verify(message: { [k: string]: any }): string | null

    /**
     * Creates a RolePlay message from a plain object. Also converts values to their respective internal types.
     * @param object Plain object
     * @returns RolePlay
     */
    public static fromObject(object: {
      [k: string]: any
    }): darwincourse.RolePlay

    /**
     * Creates a plain object from a RolePlay message. Also converts values to other types if specified.
     * @param message RolePlay
     * @param [options] Conversion options
     * @returns Plain object
     */
    public static toObject(
      message: darwincourse.RolePlay,
      options?: $protobuf.IConversionOptions,
    ): { [k: string]: any }

    /**
     * Converts this RolePlay to JSON.
     * @returns JSON object
     */
    public toJSON(): { [k: string]: any }
  }

  namespace RolePlay {
    /** Properties of a Speaker. */
    interface ISpeaker {
      /** Speaker audioId */
      audioId?: string | null

      /** Speaker speakerPictureId */
      speakerPictureId?: string | null

      /** Speaker speakerRole */
      speakerRole?: number | null

      /** Speaker spokenText */
      spokenText?: string | null

      /** Speaker text */
      text?: string | null
    }

    /** Represents a Speaker. */
    class Speaker implements ISpeaker {
      /**
       * Constructs a new Speaker.
       * @param [properties] Properties to set
       */
      constructor(properties?: darwincourse.RolePlay.ISpeaker)

      /** Speaker audioId. */
      public audioId: string

      /** Speaker speakerPictureId. */
      public speakerPictureId: string

      /** Speaker speakerRole. */
      public speakerRole: number

      /** Speaker spokenText. */
      public spokenText: string

      /** Speaker text. */
      public text: string

      /**
       * Creates a new Speaker instance using the specified properties.
       * @param [properties] Properties to set
       * @returns Speaker instance
       */
      public static create(
        properties?: darwincourse.RolePlay.ISpeaker,
      ): darwincourse.RolePlay.Speaker

      /**
       * Encodes the specified Speaker message. Does not implicitly {@link darwincourse.RolePlay.Speaker.verify|verify} messages.
       * @param message Speaker message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encode(
        message: darwincourse.RolePlay.ISpeaker,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Encodes the specified Speaker message, length delimited. Does not implicitly {@link darwincourse.RolePlay.Speaker.verify|verify} messages.
       * @param message Speaker message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encodeDelimited(
        message: darwincourse.RolePlay.ISpeaker,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Decodes a Speaker message from the specified reader or buffer.
       * @param reader Reader or buffer to decode from
       * @param [length] Message length if known beforehand
       * @returns Speaker
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decode(
        reader: $protobuf.Reader | Uint8Array,
        length?: number,
      ): darwincourse.RolePlay.Speaker

      /**
       * Decodes a Speaker message from the specified reader or buffer, length delimited.
       * @param reader Reader or buffer to decode from
       * @returns Speaker
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decodeDelimited(
        reader: $protobuf.Reader | Uint8Array,
      ): darwincourse.RolePlay.Speaker

      /**
       * Verifies a Speaker message.
       * @param message Plain object to verify
       * @returns `null` if valid, otherwise the reason why it is not
       */
      public static verify(message: { [k: string]: any }): string | null

      /**
       * Creates a Speaker message from a plain object. Also converts values to their respective internal types.
       * @param object Plain object
       * @returns Speaker
       */
      public static fromObject(object: {
        [k: string]: any
      }): darwincourse.RolePlay.Speaker

      /**
       * Creates a plain object from a Speaker message. Also converts values to other types if specified.
       * @param message Speaker
       * @param [options] Conversion options
       * @returns Plain object
       */
      public static toObject(
        message: darwincourse.RolePlay.Speaker,
        options?: $protobuf.IConversionOptions,
      ): { [k: string]: any }

      /**
       * Converts this Speaker to JSON.
       * @returns JSON object
       */
      public toJSON(): { [k: string]: any }
    }
  }

  /** Properties of a DialoguePractice. */
  interface IDialoguePractice {
    /** DialoguePractice text */
    text?: string | null

    /** DialoguePractice actions */
    actions?: darwincourse.DialoguePractice.IAction[] | null

    /** DialoguePractice practiceRoleId */
    practiceRoleId?: number | null
  }

  /** Represents a DialoguePractice. */
  class DialoguePractice implements IDialoguePractice {
    /**
     * Constructs a new DialoguePractice.
     * @param [properties] Properties to set
     */
    constructor(properties?: darwincourse.IDialoguePractice)

    /** DialoguePractice text. */
    public text: string

    /** DialoguePractice actions. */
    public actions: darwincourse.DialoguePractice.IAction[]

    /** DialoguePractice practiceRoleId. */
    public practiceRoleId: number

    /**
     * Creates a new DialoguePractice instance using the specified properties.
     * @param [properties] Properties to set
     * @returns DialoguePractice instance
     */
    public static create(
      properties?: darwincourse.IDialoguePractice,
    ): darwincourse.DialoguePractice

    /**
     * Encodes the specified DialoguePractice message. Does not implicitly {@link darwincourse.DialoguePractice.verify|verify} messages.
     * @param message DialoguePractice message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encode(
      message: darwincourse.IDialoguePractice,
      writer?: $protobuf.Writer,
    ): $protobuf.Writer

    /**
     * Encodes the specified DialoguePractice message, length delimited. Does not implicitly {@link darwincourse.DialoguePractice.verify|verify} messages.
     * @param message DialoguePractice message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encodeDelimited(
      message: darwincourse.IDialoguePractice,
      writer?: $protobuf.Writer,
    ): $protobuf.Writer

    /**
     * Decodes a DialoguePractice message from the specified reader or buffer.
     * @param reader Reader or buffer to decode from
     * @param [length] Message length if known beforehand
     * @returns DialoguePractice
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decode(
      reader: $protobuf.Reader | Uint8Array,
      length?: number,
    ): darwincourse.DialoguePractice

    /**
     * Decodes a DialoguePractice message from the specified reader or buffer, length delimited.
     * @param reader Reader or buffer to decode from
     * @returns DialoguePractice
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decodeDelimited(
      reader: $protobuf.Reader | Uint8Array,
    ): darwincourse.DialoguePractice

    /**
     * Verifies a DialoguePractice message.
     * @param message Plain object to verify
     * @returns `null` if valid, otherwise the reason why it is not
     */
    public static verify(message: { [k: string]: any }): string | null

    /**
     * Creates a DialoguePractice message from a plain object. Also converts values to their respective internal types.
     * @param object Plain object
     * @returns DialoguePractice
     */
    public static fromObject(object: {
      [k: string]: any
    }): darwincourse.DialoguePractice

    /**
     * Creates a plain object from a DialoguePractice message. Also converts values to other types if specified.
     * @param message DialoguePractice
     * @param [options] Conversion options
     * @returns Plain object
     */
    public static toObject(
      message: darwincourse.DialoguePractice,
      options?: $protobuf.IConversionOptions,
    ): { [k: string]: any }

    /**
     * Converts this DialoguePractice to JSON.
     * @returns JSON object
     */
    public toJSON(): { [k: string]: any }
  }

  namespace DialoguePractice {
    /** Properties of an ActionType. */
    interface IActionType {}

    /** Represents an ActionType. */
    class ActionType implements IActionType {
      /**
       * Constructs a new ActionType.
       * @param [properties] Properties to set
       */
      constructor(properties?: darwincourse.DialoguePractice.IActionType)

      /**
       * Creates a new ActionType instance using the specified properties.
       * @param [properties] Properties to set
       * @returns ActionType instance
       */
      public static create(
        properties?: darwincourse.DialoguePractice.IActionType,
      ): darwincourse.DialoguePractice.ActionType

      /**
       * Encodes the specified ActionType message. Does not implicitly {@link darwincourse.DialoguePractice.ActionType.verify|verify} messages.
       * @param message ActionType message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encode(
        message: darwincourse.DialoguePractice.IActionType,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Encodes the specified ActionType message, length delimited. Does not implicitly {@link darwincourse.DialoguePractice.ActionType.verify|verify} messages.
       * @param message ActionType message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encodeDelimited(
        message: darwincourse.DialoguePractice.IActionType,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Decodes an ActionType message from the specified reader or buffer.
       * @param reader Reader or buffer to decode from
       * @param [length] Message length if known beforehand
       * @returns ActionType
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decode(
        reader: $protobuf.Reader | Uint8Array,
        length?: number,
      ): darwincourse.DialoguePractice.ActionType

      /**
       * Decodes an ActionType message from the specified reader or buffer, length delimited.
       * @param reader Reader or buffer to decode from
       * @returns ActionType
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decodeDelimited(
        reader: $protobuf.Reader | Uint8Array,
      ): darwincourse.DialoguePractice.ActionType

      /**
       * Verifies an ActionType message.
       * @param message Plain object to verify
       * @returns `null` if valid, otherwise the reason why it is not
       */
      public static verify(message: { [k: string]: any }): string | null

      /**
       * Creates an ActionType message from a plain object. Also converts values to their respective internal types.
       * @param object Plain object
       * @returns ActionType
       */
      public static fromObject(object: {
        [k: string]: any
      }): darwincourse.DialoguePractice.ActionType

      /**
       * Creates a plain object from an ActionType message. Also converts values to other types if specified.
       * @param message ActionType
       * @param [options] Conversion options
       * @returns Plain object
       */
      public static toObject(
        message: darwincourse.DialoguePractice.ActionType,
        options?: $protobuf.IConversionOptions,
      ): { [k: string]: any }

      /**
       * Converts this ActionType to JSON.
       * @returns JSON object
       */
      public toJSON(): { [k: string]: any }
    }

    namespace ActionType {
      /** Enum enum. */
      enum Enum {
        UNKNOWN = 0,
        PIC = 1,
        AUDIO = 2,
        SCORER = 3,
        HINT = 4,
      }
    }

    /** Properties of an ActionContent. */
    interface IActionContent {
      /** ActionContent speakerRole */
      speakerRole?: number | null

      /** ActionContent audioId */
      audioId?: string | null

      /** ActionContent text */
      text?: string | null

      /** ActionContent picId */
      picId?: string | null

      /** ActionContent hint */
      hint?: string | null
    }

    /** Represents an ActionContent. */
    class ActionContent implements IActionContent {
      /**
       * Constructs a new ActionContent.
       * @param [properties] Properties to set
       */
      constructor(properties?: darwincourse.DialoguePractice.IActionContent)

      /** ActionContent speakerRole. */
      public speakerRole: number

      /** ActionContent audioId. */
      public audioId: string

      /** ActionContent text. */
      public text: string

      /** ActionContent picId. */
      public picId: string

      /** ActionContent hint. */
      public hint: string

      /**
       * Creates a new ActionContent instance using the specified properties.
       * @param [properties] Properties to set
       * @returns ActionContent instance
       */
      public static create(
        properties?: darwincourse.DialoguePractice.IActionContent,
      ): darwincourse.DialoguePractice.ActionContent

      /**
       * Encodes the specified ActionContent message. Does not implicitly {@link darwincourse.DialoguePractice.ActionContent.verify|verify} messages.
       * @param message ActionContent message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encode(
        message: darwincourse.DialoguePractice.IActionContent,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Encodes the specified ActionContent message, length delimited. Does not implicitly {@link darwincourse.DialoguePractice.ActionContent.verify|verify} messages.
       * @param message ActionContent message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encodeDelimited(
        message: darwincourse.DialoguePractice.IActionContent,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Decodes an ActionContent message from the specified reader or buffer.
       * @param reader Reader or buffer to decode from
       * @param [length] Message length if known beforehand
       * @returns ActionContent
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decode(
        reader: $protobuf.Reader | Uint8Array,
        length?: number,
      ): darwincourse.DialoguePractice.ActionContent

      /**
       * Decodes an ActionContent message from the specified reader or buffer, length delimited.
       * @param reader Reader or buffer to decode from
       * @returns ActionContent
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decodeDelimited(
        reader: $protobuf.Reader | Uint8Array,
      ): darwincourse.DialoguePractice.ActionContent

      /**
       * Verifies an ActionContent message.
       * @param message Plain object to verify
       * @returns `null` if valid, otherwise the reason why it is not
       */
      public static verify(message: { [k: string]: any }): string | null

      /**
       * Creates an ActionContent message from a plain object. Also converts values to their respective internal types.
       * @param object Plain object
       * @returns ActionContent
       */
      public static fromObject(object: {
        [k: string]: any
      }): darwincourse.DialoguePractice.ActionContent

      /**
       * Creates a plain object from an ActionContent message. Also converts values to other types if specified.
       * @param message ActionContent
       * @param [options] Conversion options
       * @returns Plain object
       */
      public static toObject(
        message: darwincourse.DialoguePractice.ActionContent,
        options?: $protobuf.IConversionOptions,
      ): { [k: string]: any }

      /**
       * Converts this ActionContent to JSON.
       * @returns JSON object
       */
      public toJSON(): { [k: string]: any }
    }

    /** Properties of an Action. */
    interface IAction {
      /** Action type */
      type?: darwincourse.DialoguePractice.ActionType.Enum | null

      /** Action content */
      content?: darwincourse.DialoguePractice.IActionContent | null
    }

    /** Represents an Action. */
    class Action implements IAction {
      /**
       * Constructs a new Action.
       * @param [properties] Properties to set
       */
      constructor(properties?: darwincourse.DialoguePractice.IAction)

      /** Action type. */
      public type: darwincourse.DialoguePractice.ActionType.Enum

      /** Action content. */
      public content?: darwincourse.DialoguePractice.IActionContent | null

      /**
       * Creates a new Action instance using the specified properties.
       * @param [properties] Properties to set
       * @returns Action instance
       */
      public static create(
        properties?: darwincourse.DialoguePractice.IAction,
      ): darwincourse.DialoguePractice.Action

      /**
       * Encodes the specified Action message. Does not implicitly {@link darwincourse.DialoguePractice.Action.verify|verify} messages.
       * @param message Action message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encode(
        message: darwincourse.DialoguePractice.IAction,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Encodes the specified Action message, length delimited. Does not implicitly {@link darwincourse.DialoguePractice.Action.verify|verify} messages.
       * @param message Action message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encodeDelimited(
        message: darwincourse.DialoguePractice.IAction,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Decodes an Action message from the specified reader or buffer.
       * @param reader Reader or buffer to decode from
       * @param [length] Message length if known beforehand
       * @returns Action
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decode(
        reader: $protobuf.Reader | Uint8Array,
        length?: number,
      ): darwincourse.DialoguePractice.Action

      /**
       * Decodes an Action message from the specified reader or buffer, length delimited.
       * @param reader Reader or buffer to decode from
       * @returns Action
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decodeDelimited(
        reader: $protobuf.Reader | Uint8Array,
      ): darwincourse.DialoguePractice.Action

      /**
       * Verifies an Action message.
       * @param message Plain object to verify
       * @returns `null` if valid, otherwise the reason why it is not
       */
      public static verify(message: { [k: string]: any }): string | null

      /**
       * Creates an Action message from a plain object. Also converts values to their respective internal types.
       * @param object Plain object
       * @returns Action
       */
      public static fromObject(object: {
        [k: string]: any
      }): darwincourse.DialoguePractice.Action

      /**
       * Creates a plain object from an Action message. Also converts values to other types if specified.
       * @param message Action
       * @param [options] Conversion options
       * @returns Plain object
       */
      public static toObject(
        message: darwincourse.DialoguePractice.Action,
        options?: $protobuf.IConversionOptions,
      ): { [k: string]: any }

      /**
       * Converts this Action to JSON.
       * @returns JSON object
       */
      public toJSON(): { [k: string]: any }
    }
  }

  /** Properties of an AudioMatching. */
  interface IAudioMatching {
    /** AudioMatching audioId */
    audioId?: string | null

    /** AudioMatching matchingAudioId */
    matchingAudioId?: string | null

    /** AudioMatching matched */
    matched?: boolean | null
  }

  /** Represents an AudioMatching. */
  class AudioMatching implements IAudioMatching {
    /**
     * Constructs a new AudioMatching.
     * @param [properties] Properties to set
     */
    constructor(properties?: darwincourse.IAudioMatching)

    /** AudioMatching audioId. */
    public audioId: string

    /** AudioMatching matchingAudioId. */
    public matchingAudioId: string

    /** AudioMatching matched. */
    public matched: boolean

    /**
     * Creates a new AudioMatching instance using the specified properties.
     * @param [properties] Properties to set
     * @returns AudioMatching instance
     */
    public static create(
      properties?: darwincourse.IAudioMatching,
    ): darwincourse.AudioMatching

    /**
     * Encodes the specified AudioMatching message. Does not implicitly {@link darwincourse.AudioMatching.verify|verify} messages.
     * @param message AudioMatching message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encode(
      message: darwincourse.IAudioMatching,
      writer?: $protobuf.Writer,
    ): $protobuf.Writer

    /**
     * Encodes the specified AudioMatching message, length delimited. Does not implicitly {@link darwincourse.AudioMatching.verify|verify} messages.
     * @param message AudioMatching message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encodeDelimited(
      message: darwincourse.IAudioMatching,
      writer?: $protobuf.Writer,
    ): $protobuf.Writer

    /**
     * Decodes an AudioMatching message from the specified reader or buffer.
     * @param reader Reader or buffer to decode from
     * @param [length] Message length if known beforehand
     * @returns AudioMatching
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decode(
      reader: $protobuf.Reader | Uint8Array,
      length?: number,
    ): darwincourse.AudioMatching

    /**
     * Decodes an AudioMatching message from the specified reader or buffer, length delimited.
     * @param reader Reader or buffer to decode from
     * @returns AudioMatching
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decodeDelimited(
      reader: $protobuf.Reader | Uint8Array,
    ): darwincourse.AudioMatching

    /**
     * Verifies an AudioMatching message.
     * @param message Plain object to verify
     * @returns `null` if valid, otherwise the reason why it is not
     */
    public static verify(message: { [k: string]: any }): string | null

    /**
     * Creates an AudioMatching message from a plain object. Also converts values to their respective internal types.
     * @param object Plain object
     * @returns AudioMatching
     */
    public static fromObject(object: {
      [k: string]: any
    }): darwincourse.AudioMatching

    /**
     * Creates a plain object from an AudioMatching message. Also converts values to other types if specified.
     * @param message AudioMatching
     * @param [options] Conversion options
     * @returns Plain object
     */
    public static toObject(
      message: darwincourse.AudioMatching,
      options?: $protobuf.IConversionOptions,
    ): { [k: string]: any }

    /**
     * Converts this AudioMatching to JSON.
     * @returns JSON object
     */
    public toJSON(): { [k: string]: any }
  }

  /** Properties of a TextSequence. */
  interface ITextSequence {
    /** TextSequence text */
    text?: string[] | null
  }

  /** Represents a TextSequence. */
  class TextSequence implements ITextSequence {
    /**
     * Constructs a new TextSequence.
     * @param [properties] Properties to set
     */
    constructor(properties?: darwincourse.ITextSequence)

    /** TextSequence text. */
    public text: string[]

    /**
     * Creates a new TextSequence instance using the specified properties.
     * @param [properties] Properties to set
     * @returns TextSequence instance
     */
    public static create(
      properties?: darwincourse.ITextSequence,
    ): darwincourse.TextSequence

    /**
     * Encodes the specified TextSequence message. Does not implicitly {@link darwincourse.TextSequence.verify|verify} messages.
     * @param message TextSequence message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encode(
      message: darwincourse.ITextSequence,
      writer?: $protobuf.Writer,
    ): $protobuf.Writer

    /**
     * Encodes the specified TextSequence message, length delimited. Does not implicitly {@link darwincourse.TextSequence.verify|verify} messages.
     * @param message TextSequence message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encodeDelimited(
      message: darwincourse.ITextSequence,
      writer?: $protobuf.Writer,
    ): $protobuf.Writer

    /**
     * Decodes a TextSequence message from the specified reader or buffer.
     * @param reader Reader or buffer to decode from
     * @param [length] Message length if known beforehand
     * @returns TextSequence
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decode(
      reader: $protobuf.Reader | Uint8Array,
      length?: number,
    ): darwincourse.TextSequence

    /**
     * Decodes a TextSequence message from the specified reader or buffer, length delimited.
     * @param reader Reader or buffer to decode from
     * @returns TextSequence
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decodeDelimited(
      reader: $protobuf.Reader | Uint8Array,
    ): darwincourse.TextSequence

    /**
     * Verifies a TextSequence message.
     * @param message Plain object to verify
     * @returns `null` if valid, otherwise the reason why it is not
     */
    public static verify(message: { [k: string]: any }): string | null

    /**
     * Creates a TextSequence message from a plain object. Also converts values to their respective internal types.
     * @param object Plain object
     * @returns TextSequence
     */
    public static fromObject(object: {
      [k: string]: any
    }): darwincourse.TextSequence

    /**
     * Creates a plain object from a TextSequence message. Also converts values to other types if specified.
     * @param message TextSequence
     * @param [options] Conversion options
     * @returns Plain object
     */
    public static toObject(
      message: darwincourse.TextSequence,
      options?: $protobuf.IConversionOptions,
    ): { [k: string]: any }

    /**
     * Converts this TextSequence to JSON.
     * @returns JSON object
     */
    public toJSON(): { [k: string]: any }
  }

  /** Properties of a Dictation. */
  interface IDictation {
    /** Dictation dictSentences */
    dictSentences?: darwincourse.Dictation.IDictSentence[] | null

    /** Dictation pictureId */
    pictureId?: string | null

    /** Dictation audioId */
    audioId?: string | null
  }

  /** Represents a Dictation. */
  class Dictation implements IDictation {
    /**
     * Constructs a new Dictation.
     * @param [properties] Properties to set
     */
    constructor(properties?: darwincourse.IDictation)

    /** Dictation dictSentences. */
    public dictSentences: darwincourse.Dictation.IDictSentence[]

    /** Dictation pictureId. */
    public pictureId: string

    /** Dictation audioId. */
    public audioId: string

    /**
     * Creates a new Dictation instance using the specified properties.
     * @param [properties] Properties to set
     * @returns Dictation instance
     */
    public static create(
      properties?: darwincourse.IDictation,
    ): darwincourse.Dictation

    /**
     * Encodes the specified Dictation message. Does not implicitly {@link darwincourse.Dictation.verify|verify} messages.
     * @param message Dictation message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encode(
      message: darwincourse.IDictation,
      writer?: $protobuf.Writer,
    ): $protobuf.Writer

    /**
     * Encodes the specified Dictation message, length delimited. Does not implicitly {@link darwincourse.Dictation.verify|verify} messages.
     * @param message Dictation message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encodeDelimited(
      message: darwincourse.IDictation,
      writer?: $protobuf.Writer,
    ): $protobuf.Writer

    /**
     * Decodes a Dictation message from the specified reader or buffer.
     * @param reader Reader or buffer to decode from
     * @param [length] Message length if known beforehand
     * @returns Dictation
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decode(
      reader: $protobuf.Reader | Uint8Array,
      length?: number,
    ): darwincourse.Dictation

    /**
     * Decodes a Dictation message from the specified reader or buffer, length delimited.
     * @param reader Reader or buffer to decode from
     * @returns Dictation
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decodeDelimited(
      reader: $protobuf.Reader | Uint8Array,
    ): darwincourse.Dictation

    /**
     * Verifies a Dictation message.
     * @param message Plain object to verify
     * @returns `null` if valid, otherwise the reason why it is not
     */
    public static verify(message: { [k: string]: any }): string | null

    /**
     * Creates a Dictation message from a plain object. Also converts values to their respective internal types.
     * @param object Plain object
     * @returns Dictation
     */
    public static fromObject(object: {
      [k: string]: any
    }): darwincourse.Dictation

    /**
     * Creates a plain object from a Dictation message. Also converts values to other types if specified.
     * @param message Dictation
     * @param [options] Conversion options
     * @returns Plain object
     */
    public static toObject(
      message: darwincourse.Dictation,
      options?: $protobuf.IConversionOptions,
    ): { [k: string]: any }

    /**
     * Converts this Dictation to JSON.
     * @returns JSON object
     */
    public toJSON(): { [k: string]: any }
  }

  namespace Dictation {
    /** Properties of a Stem. */
    interface IStem {
      /** Stem text */
      text?: string | null

      /** Stem checked */
      checked?: boolean | null
    }

    /** Represents a Stem. */
    class Stem implements IStem {
      /**
       * Constructs a new Stem.
       * @param [properties] Properties to set
       */
      constructor(properties?: darwincourse.Dictation.IStem)

      /** Stem text. */
      public text: string

      /** Stem checked. */
      public checked: boolean

      /**
       * Creates a new Stem instance using the specified properties.
       * @param [properties] Properties to set
       * @returns Stem instance
       */
      public static create(
        properties?: darwincourse.Dictation.IStem,
      ): darwincourse.Dictation.Stem

      /**
       * Encodes the specified Stem message. Does not implicitly {@link darwincourse.Dictation.Stem.verify|verify} messages.
       * @param message Stem message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encode(
        message: darwincourse.Dictation.IStem,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Encodes the specified Stem message, length delimited. Does not implicitly {@link darwincourse.Dictation.Stem.verify|verify} messages.
       * @param message Stem message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encodeDelimited(
        message: darwincourse.Dictation.IStem,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Decodes a Stem message from the specified reader or buffer.
       * @param reader Reader or buffer to decode from
       * @param [length] Message length if known beforehand
       * @returns Stem
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decode(
        reader: $protobuf.Reader | Uint8Array,
        length?: number,
      ): darwincourse.Dictation.Stem

      /**
       * Decodes a Stem message from the specified reader or buffer, length delimited.
       * @param reader Reader or buffer to decode from
       * @returns Stem
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decodeDelimited(
        reader: $protobuf.Reader | Uint8Array,
      ): darwincourse.Dictation.Stem

      /**
       * Verifies a Stem message.
       * @param message Plain object to verify
       * @returns `null` if valid, otherwise the reason why it is not
       */
      public static verify(message: { [k: string]: any }): string | null

      /**
       * Creates a Stem message from a plain object. Also converts values to their respective internal types.
       * @param object Plain object
       * @returns Stem
       */
      public static fromObject(object: {
        [k: string]: any
      }): darwincourse.Dictation.Stem

      /**
       * Creates a plain object from a Stem message. Also converts values to other types if specified.
       * @param message Stem
       * @param [options] Conversion options
       * @returns Plain object
       */
      public static toObject(
        message: darwincourse.Dictation.Stem,
        options?: $protobuf.IConversionOptions,
      ): { [k: string]: any }

      /**
       * Converts this Stem to JSON.
       * @returns JSON object
       */
      public toJSON(): { [k: string]: any }
    }

    /** Properties of a DictSentence. */
    interface IDictSentence {
      /** DictSentence audioId */
      audioId?: string | null

      /** DictSentence stems */
      stems?: darwincourse.Dictation.IStem[] | null
    }

    /** Represents a DictSentence. */
    class DictSentence implements IDictSentence {
      /**
       * Constructs a new DictSentence.
       * @param [properties] Properties to set
       */
      constructor(properties?: darwincourse.Dictation.IDictSentence)

      /** DictSentence audioId. */
      public audioId: string

      /** DictSentence stems. */
      public stems: darwincourse.Dictation.IStem[]

      /**
       * Creates a new DictSentence instance using the specified properties.
       * @param [properties] Properties to set
       * @returns DictSentence instance
       */
      public static create(
        properties?: darwincourse.Dictation.IDictSentence,
      ): darwincourse.Dictation.DictSentence

      /**
       * Encodes the specified DictSentence message. Does not implicitly {@link darwincourse.Dictation.DictSentence.verify|verify} messages.
       * @param message DictSentence message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encode(
        message: darwincourse.Dictation.IDictSentence,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Encodes the specified DictSentence message, length delimited. Does not implicitly {@link darwincourse.Dictation.DictSentence.verify|verify} messages.
       * @param message DictSentence message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encodeDelimited(
        message: darwincourse.Dictation.IDictSentence,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Decodes a DictSentence message from the specified reader or buffer.
       * @param reader Reader or buffer to decode from
       * @param [length] Message length if known beforehand
       * @returns DictSentence
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decode(
        reader: $protobuf.Reader | Uint8Array,
        length?: number,
      ): darwincourse.Dictation.DictSentence

      /**
       * Decodes a DictSentence message from the specified reader or buffer, length delimited.
       * @param reader Reader or buffer to decode from
       * @returns DictSentence
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decodeDelimited(
        reader: $protobuf.Reader | Uint8Array,
      ): darwincourse.Dictation.DictSentence

      /**
       * Verifies a DictSentence message.
       * @param message Plain object to verify
       * @returns `null` if valid, otherwise the reason why it is not
       */
      public static verify(message: { [k: string]: any }): string | null

      /**
       * Creates a DictSentence message from a plain object. Also converts values to their respective internal types.
       * @param object Plain object
       * @returns DictSentence
       */
      public static fromObject(object: {
        [k: string]: any
      }): darwincourse.Dictation.DictSentence

      /**
       * Creates a plain object from a DictSentence message. Also converts values to other types if specified.
       * @param message DictSentence
       * @param [options] Conversion options
       * @returns Plain object
       */
      public static toObject(
        message: darwincourse.Dictation.DictSentence,
        options?: $protobuf.IConversionOptions,
      ): { [k: string]: any }

      /**
       * Converts this DictSentence to JSON.
       * @returns JSON object
       */
      public toJSON(): { [k: string]: any }
    }
  }

  /** Properties of an OpenQuestion. */
  interface IOpenQuestion {
    /** OpenQuestion audioId */
    audioId?: string | null

    /** OpenQuestion pictureId */
    pictureId?: string[] | null
  }

  /** Represents an OpenQuestion. */
  class OpenQuestion implements IOpenQuestion {
    /**
     * Constructs a new OpenQuestion.
     * @param [properties] Properties to set
     */
    constructor(properties?: darwincourse.IOpenQuestion)

    /** OpenQuestion audioId. */
    public audioId: string

    /** OpenQuestion pictureId. */
    public pictureId: string[]

    /**
     * Creates a new OpenQuestion instance using the specified properties.
     * @param [properties] Properties to set
     * @returns OpenQuestion instance
     */
    public static create(
      properties?: darwincourse.IOpenQuestion,
    ): darwincourse.OpenQuestion

    /**
     * Encodes the specified OpenQuestion message. Does not implicitly {@link darwincourse.OpenQuestion.verify|verify} messages.
     * @param message OpenQuestion message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encode(
      message: darwincourse.IOpenQuestion,
      writer?: $protobuf.Writer,
    ): $protobuf.Writer

    /**
     * Encodes the specified OpenQuestion message, length delimited. Does not implicitly {@link darwincourse.OpenQuestion.verify|verify} messages.
     * @param message OpenQuestion message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encodeDelimited(
      message: darwincourse.IOpenQuestion,
      writer?: $protobuf.Writer,
    ): $protobuf.Writer

    /**
     * Decodes an OpenQuestion message from the specified reader or buffer.
     * @param reader Reader or buffer to decode from
     * @param [length] Message length if known beforehand
     * @returns OpenQuestion
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decode(
      reader: $protobuf.Reader | Uint8Array,
      length?: number,
    ): darwincourse.OpenQuestion

    /**
     * Decodes an OpenQuestion message from the specified reader or buffer, length delimited.
     * @param reader Reader or buffer to decode from
     * @returns OpenQuestion
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decodeDelimited(
      reader: $protobuf.Reader | Uint8Array,
    ): darwincourse.OpenQuestion

    /**
     * Verifies an OpenQuestion message.
     * @param message Plain object to verify
     * @returns `null` if valid, otherwise the reason why it is not
     */
    public static verify(message: { [k: string]: any }): string | null

    /**
     * Creates an OpenQuestion message from a plain object. Also converts values to their respective internal types.
     * @param object Plain object
     * @returns OpenQuestion
     */
    public static fromObject(object: {
      [k: string]: any
    }): darwincourse.OpenQuestion

    /**
     * Creates a plain object from an OpenQuestion message. Also converts values to other types if specified.
     * @param message OpenQuestion
     * @param [options] Conversion options
     * @returns Plain object
     */
    public static toObject(
      message: darwincourse.OpenQuestion,
      options?: $protobuf.IConversionOptions,
    ): { [k: string]: any }

    /**
     * Converts this OpenQuestion to JSON.
     * @returns JSON object
     */
    public toJSON(): { [k: string]: any }
  }

  /** Properties of a Cloze. */
  interface ICloze {
    /** Cloze paragraphs */
    paragraphs?: darwincourse.Cloze.IParagraph[] | null
  }

  /** Represents a Cloze. */
  class Cloze implements ICloze {
    /**
     * Constructs a new Cloze.
     * @param [properties] Properties to set
     */
    constructor(properties?: darwincourse.ICloze)

    /** Cloze paragraphs. */
    public paragraphs: darwincourse.Cloze.IParagraph[]

    /**
     * Creates a new Cloze instance using the specified properties.
     * @param [properties] Properties to set
     * @returns Cloze instance
     */
    public static create(properties?: darwincourse.ICloze): darwincourse.Cloze

    /**
     * Encodes the specified Cloze message. Does not implicitly {@link darwincourse.Cloze.verify|verify} messages.
     * @param message Cloze message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encode(
      message: darwincourse.ICloze,
      writer?: $protobuf.Writer,
    ): $protobuf.Writer

    /**
     * Encodes the specified Cloze message, length delimited. Does not implicitly {@link darwincourse.Cloze.verify|verify} messages.
     * @param message Cloze message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encodeDelimited(
      message: darwincourse.ICloze,
      writer?: $protobuf.Writer,
    ): $protobuf.Writer

    /**
     * Decodes a Cloze message from the specified reader or buffer.
     * @param reader Reader or buffer to decode from
     * @param [length] Message length if known beforehand
     * @returns Cloze
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decode(
      reader: $protobuf.Reader | Uint8Array,
      length?: number,
    ): darwincourse.Cloze

    /**
     * Decodes a Cloze message from the specified reader or buffer, length delimited.
     * @param reader Reader or buffer to decode from
     * @returns Cloze
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decodeDelimited(
      reader: $protobuf.Reader | Uint8Array,
    ): darwincourse.Cloze

    /**
     * Verifies a Cloze message.
     * @param message Plain object to verify
     * @returns `null` if valid, otherwise the reason why it is not
     */
    public static verify(message: { [k: string]: any }): string | null

    /**
     * Creates a Cloze message from a plain object. Also converts values to their respective internal types.
     * @param object Plain object
     * @returns Cloze
     */
    public static fromObject(object: { [k: string]: any }): darwincourse.Cloze

    /**
     * Creates a plain object from a Cloze message. Also converts values to other types if specified.
     * @param message Cloze
     * @param [options] Conversion options
     * @returns Plain object
     */
    public static toObject(
      message: darwincourse.Cloze,
      options?: $protobuf.IConversionOptions,
    ): { [k: string]: any }

    /**
     * Converts this Cloze to JSON.
     * @returns JSON object
     */
    public toJSON(): { [k: string]: any }
  }

  namespace Cloze {
    /** Properties of a Stem. */
    interface IStem {
      /** Stem text */
      text?: string | null

      /** Stem checked */
      checked?: boolean | null

      /** Stem answers */
      answers?: string[] | null
    }

    /** Represents a Stem. */
    class Stem implements IStem {
      /**
       * Constructs a new Stem.
       * @param [properties] Properties to set
       */
      constructor(properties?: darwincourse.Cloze.IStem)

      /** Stem text. */
      public text: string

      /** Stem checked. */
      public checked: boolean

      /** Stem answers. */
      public answers: string[]

      /**
       * Creates a new Stem instance using the specified properties.
       * @param [properties] Properties to set
       * @returns Stem instance
       */
      public static create(
        properties?: darwincourse.Cloze.IStem,
      ): darwincourse.Cloze.Stem

      /**
       * Encodes the specified Stem message. Does not implicitly {@link darwincourse.Cloze.Stem.verify|verify} messages.
       * @param message Stem message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encode(
        message: darwincourse.Cloze.IStem,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Encodes the specified Stem message, length delimited. Does not implicitly {@link darwincourse.Cloze.Stem.verify|verify} messages.
       * @param message Stem message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encodeDelimited(
        message: darwincourse.Cloze.IStem,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Decodes a Stem message from the specified reader or buffer.
       * @param reader Reader or buffer to decode from
       * @param [length] Message length if known beforehand
       * @returns Stem
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decode(
        reader: $protobuf.Reader | Uint8Array,
        length?: number,
      ): darwincourse.Cloze.Stem

      /**
       * Decodes a Stem message from the specified reader or buffer, length delimited.
       * @param reader Reader or buffer to decode from
       * @returns Stem
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decodeDelimited(
        reader: $protobuf.Reader | Uint8Array,
      ): darwincourse.Cloze.Stem

      /**
       * Verifies a Stem message.
       * @param message Plain object to verify
       * @returns `null` if valid, otherwise the reason why it is not
       */
      public static verify(message: { [k: string]: any }): string | null

      /**
       * Creates a Stem message from a plain object. Also converts values to their respective internal types.
       * @param object Plain object
       * @returns Stem
       */
      public static fromObject(object: {
        [k: string]: any
      }): darwincourse.Cloze.Stem

      /**
       * Creates a plain object from a Stem message. Also converts values to other types if specified.
       * @param message Stem
       * @param [options] Conversion options
       * @returns Plain object
       */
      public static toObject(
        message: darwincourse.Cloze.Stem,
        options?: $protobuf.IConversionOptions,
      ): { [k: string]: any }

      /**
       * Converts this Stem to JSON.
       * @returns JSON object
       */
      public toJSON(): { [k: string]: any }
    }

    /** Properties of a Paragraph. */
    interface IParagraph {
      /** Paragraph stems */
      stems?: darwincourse.Cloze.IStem[] | null
    }

    /** Represents a Paragraph. */
    class Paragraph implements IParagraph {
      /**
       * Constructs a new Paragraph.
       * @param [properties] Properties to set
       */
      constructor(properties?: darwincourse.Cloze.IParagraph)

      /** Paragraph stems. */
      public stems: darwincourse.Cloze.IStem[]

      /**
       * Creates a new Paragraph instance using the specified properties.
       * @param [properties] Properties to set
       * @returns Paragraph instance
       */
      public static create(
        properties?: darwincourse.Cloze.IParagraph,
      ): darwincourse.Cloze.Paragraph

      /**
       * Encodes the specified Paragraph message. Does not implicitly {@link darwincourse.Cloze.Paragraph.verify|verify} messages.
       * @param message Paragraph message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encode(
        message: darwincourse.Cloze.IParagraph,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Encodes the specified Paragraph message, length delimited. Does not implicitly {@link darwincourse.Cloze.Paragraph.verify|verify} messages.
       * @param message Paragraph message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encodeDelimited(
        message: darwincourse.Cloze.IParagraph,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Decodes a Paragraph message from the specified reader or buffer.
       * @param reader Reader or buffer to decode from
       * @param [length] Message length if known beforehand
       * @returns Paragraph
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decode(
        reader: $protobuf.Reader | Uint8Array,
        length?: number,
      ): darwincourse.Cloze.Paragraph

      /**
       * Decodes a Paragraph message from the specified reader or buffer, length delimited.
       * @param reader Reader or buffer to decode from
       * @returns Paragraph
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decodeDelimited(
        reader: $protobuf.Reader | Uint8Array,
      ): darwincourse.Cloze.Paragraph

      /**
       * Verifies a Paragraph message.
       * @param message Plain object to verify
       * @returns `null` if valid, otherwise the reason why it is not
       */
      public static verify(message: { [k: string]: any }): string | null

      /**
       * Creates a Paragraph message from a plain object. Also converts values to their respective internal types.
       * @param object Plain object
       * @returns Paragraph
       */
      public static fromObject(object: {
        [k: string]: any
      }): darwincourse.Cloze.Paragraph

      /**
       * Creates a plain object from a Paragraph message. Also converts values to other types if specified.
       * @param message Paragraph
       * @param [options] Conversion options
       * @returns Plain object
       */
      public static toObject(
        message: darwincourse.Cloze.Paragraph,
        options?: $protobuf.IConversionOptions,
      ): { [k: string]: any }

      /**
       * Converts this Paragraph to JSON.
       * @returns JSON object
       */
      public toJSON(): { [k: string]: any }
    }
  }

  /** Properties of a MultiChoiceQuestion7. */
  interface IMultiChoiceQuestion7 {
    /** MultiChoiceQuestion7 audioId */
    audioId?: string | null

    /** MultiChoiceQuestion7 text */
    text?: string | null

    /** MultiChoiceQuestion7 choice */
    choice?: { [k: string]: darwincourse.IChoice } | null
  }

  /** Represents a MultiChoiceQuestion7. */
  class MultiChoiceQuestion7 implements IMultiChoiceQuestion7 {
    /**
     * Constructs a new MultiChoiceQuestion7.
     * @param [properties] Properties to set
     */
    constructor(properties?: darwincourse.IMultiChoiceQuestion7)

    /** MultiChoiceQuestion7 audioId. */
    public audioId: string

    /** MultiChoiceQuestion7 text. */
    public text: string

    /** MultiChoiceQuestion7 choice. */
    public choice: { [k: string]: darwincourse.IChoice }

    /**
     * Creates a new MultiChoiceQuestion7 instance using the specified properties.
     * @param [properties] Properties to set
     * @returns MultiChoiceQuestion7 instance
     */
    public static create(
      properties?: darwincourse.IMultiChoiceQuestion7,
    ): darwincourse.MultiChoiceQuestion7

    /**
     * Encodes the specified MultiChoiceQuestion7 message. Does not implicitly {@link darwincourse.MultiChoiceQuestion7.verify|verify} messages.
     * @param message MultiChoiceQuestion7 message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encode(
      message: darwincourse.IMultiChoiceQuestion7,
      writer?: $protobuf.Writer,
    ): $protobuf.Writer

    /**
     * Encodes the specified MultiChoiceQuestion7 message, length delimited. Does not implicitly {@link darwincourse.MultiChoiceQuestion7.verify|verify} messages.
     * @param message MultiChoiceQuestion7 message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encodeDelimited(
      message: darwincourse.IMultiChoiceQuestion7,
      writer?: $protobuf.Writer,
    ): $protobuf.Writer

    /**
     * Decodes a MultiChoiceQuestion7 message from the specified reader or buffer.
     * @param reader Reader or buffer to decode from
     * @param [length] Message length if known beforehand
     * @returns MultiChoiceQuestion7
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decode(
      reader: $protobuf.Reader | Uint8Array,
      length?: number,
    ): darwincourse.MultiChoiceQuestion7

    /**
     * Decodes a MultiChoiceQuestion7 message from the specified reader or buffer, length delimited.
     * @param reader Reader or buffer to decode from
     * @returns MultiChoiceQuestion7
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decodeDelimited(
      reader: $protobuf.Reader | Uint8Array,
    ): darwincourse.MultiChoiceQuestion7

    /**
     * Verifies a MultiChoiceQuestion7 message.
     * @param message Plain object to verify
     * @returns `null` if valid, otherwise the reason why it is not
     */
    public static verify(message: { [k: string]: any }): string | null

    /**
     * Creates a MultiChoiceQuestion7 message from a plain object. Also converts values to their respective internal types.
     * @param object Plain object
     * @returns MultiChoiceQuestion7
     */
    public static fromObject(object: {
      [k: string]: any
    }): darwincourse.MultiChoiceQuestion7

    /**
     * Creates a plain object from a MultiChoiceQuestion7 message. Also converts values to other types if specified.
     * @param message MultiChoiceQuestion7
     * @param [options] Conversion options
     * @returns Plain object
     */
    public static toObject(
      message: darwincourse.MultiChoiceQuestion7,
      options?: $protobuf.IConversionOptions,
    ): { [k: string]: any }

    /**
     * Converts this MultiChoiceQuestion7 to JSON.
     * @returns JSON object
     */
    public toJSON(): { [k: string]: any }
  }

  /** Properties of a MultiChoiceQuestion3. */
  interface IMultiChoiceQuestion3 {
    /** MultiChoiceQuestion3 audioId */
    audioId?: string | null

    /** MultiChoiceQuestion3 text */
    text?: string | null

    /** MultiChoiceQuestion3 choice */
    choice?: { [k: string]: darwincourse.IChoice } | null

    /** MultiChoiceQuestion3 trText */
    trText?: string | null
  }

  /** Represents a MultiChoiceQuestion3. */
  class MultiChoiceQuestion3 implements IMultiChoiceQuestion3 {
    /**
     * Constructs a new MultiChoiceQuestion3.
     * @param [properties] Properties to set
     */
    constructor(properties?: darwincourse.IMultiChoiceQuestion3)

    /** MultiChoiceQuestion3 audioId. */
    public audioId: string

    /** MultiChoiceQuestion3 text. */
    public text: string

    /** MultiChoiceQuestion3 choice. */
    public choice: { [k: string]: darwincourse.IChoice }

    /** MultiChoiceQuestion3 trText. */
    public trText: string

    /**
     * Creates a new MultiChoiceQuestion3 instance using the specified properties.
     * @param [properties] Properties to set
     * @returns MultiChoiceQuestion3 instance
     */
    public static create(
      properties?: darwincourse.IMultiChoiceQuestion3,
    ): darwincourse.MultiChoiceQuestion3

    /**
     * Encodes the specified MultiChoiceQuestion3 message. Does not implicitly {@link darwincourse.MultiChoiceQuestion3.verify|verify} messages.
     * @param message MultiChoiceQuestion3 message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encode(
      message: darwincourse.IMultiChoiceQuestion3,
      writer?: $protobuf.Writer,
    ): $protobuf.Writer

    /**
     * Encodes the specified MultiChoiceQuestion3 message, length delimited. Does not implicitly {@link darwincourse.MultiChoiceQuestion3.verify|verify} messages.
     * @param message MultiChoiceQuestion3 message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encodeDelimited(
      message: darwincourse.IMultiChoiceQuestion3,
      writer?: $protobuf.Writer,
    ): $protobuf.Writer

    /**
     * Decodes a MultiChoiceQuestion3 message from the specified reader or buffer.
     * @param reader Reader or buffer to decode from
     * @param [length] Message length if known beforehand
     * @returns MultiChoiceQuestion3
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decode(
      reader: $protobuf.Reader | Uint8Array,
      length?: number,
    ): darwincourse.MultiChoiceQuestion3

    /**
     * Decodes a MultiChoiceQuestion3 message from the specified reader or buffer, length delimited.
     * @param reader Reader or buffer to decode from
     * @returns MultiChoiceQuestion3
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decodeDelimited(
      reader: $protobuf.Reader | Uint8Array,
    ): darwincourse.MultiChoiceQuestion3

    /**
     * Verifies a MultiChoiceQuestion3 message.
     * @param message Plain object to verify
     * @returns `null` if valid, otherwise the reason why it is not
     */
    public static verify(message: { [k: string]: any }): string | null

    /**
     * Creates a MultiChoiceQuestion3 message from a plain object. Also converts values to their respective internal types.
     * @param object Plain object
     * @returns MultiChoiceQuestion3
     */
    public static fromObject(object: {
      [k: string]: any
    }): darwincourse.MultiChoiceQuestion3

    /**
     * Creates a plain object from a MultiChoiceQuestion3 message. Also converts values to other types if specified.
     * @param message MultiChoiceQuestion3
     * @param [options] Conversion options
     * @returns Plain object
     */
    public static toObject(
      message: darwincourse.MultiChoiceQuestion3,
      options?: $protobuf.IConversionOptions,
    ): { [k: string]: any }

    /**
     * Converts this MultiChoiceQuestion3 to JSON.
     * @returns JSON object
     */
    public toJSON(): { [k: string]: any }
  }

  /** Properties of a MultiChoicePicture3. */
  interface IMultiChoicePicture3 {
    /** MultiChoicePicture3 audioId */
    audioId?: string | null

    /** MultiChoicePicture3 choice */
    choice?: { [k: string]: darwincourse.IChoice } | null
  }

  /** Represents a MultiChoicePicture3. */
  class MultiChoicePicture3 implements IMultiChoicePicture3 {
    /**
     * Constructs a new MultiChoicePicture3.
     * @param [properties] Properties to set
     */
    constructor(properties?: darwincourse.IMultiChoicePicture3)

    /** MultiChoicePicture3 audioId. */
    public audioId: string

    /** MultiChoicePicture3 choice. */
    public choice: { [k: string]: darwincourse.IChoice }

    /**
     * Creates a new MultiChoicePicture3 instance using the specified properties.
     * @param [properties] Properties to set
     * @returns MultiChoicePicture3 instance
     */
    public static create(
      properties?: darwincourse.IMultiChoicePicture3,
    ): darwincourse.MultiChoicePicture3

    /**
     * Encodes the specified MultiChoicePicture3 message. Does not implicitly {@link darwincourse.MultiChoicePicture3.verify|verify} messages.
     * @param message MultiChoicePicture3 message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encode(
      message: darwincourse.IMultiChoicePicture3,
      writer?: $protobuf.Writer,
    ): $protobuf.Writer

    /**
     * Encodes the specified MultiChoicePicture3 message, length delimited. Does not implicitly {@link darwincourse.MultiChoicePicture3.verify|verify} messages.
     * @param message MultiChoicePicture3 message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encodeDelimited(
      message: darwincourse.IMultiChoicePicture3,
      writer?: $protobuf.Writer,
    ): $protobuf.Writer

    /**
     * Decodes a MultiChoicePicture3 message from the specified reader or buffer.
     * @param reader Reader or buffer to decode from
     * @param [length] Message length if known beforehand
     * @returns MultiChoicePicture3
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decode(
      reader: $protobuf.Reader | Uint8Array,
      length?: number,
    ): darwincourse.MultiChoicePicture3

    /**
     * Decodes a MultiChoicePicture3 message from the specified reader or buffer, length delimited.
     * @param reader Reader or buffer to decode from
     * @returns MultiChoicePicture3
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decodeDelimited(
      reader: $protobuf.Reader | Uint8Array,
    ): darwincourse.MultiChoicePicture3

    /**
     * Verifies a MultiChoicePicture3 message.
     * @param message Plain object to verify
     * @returns `null` if valid, otherwise the reason why it is not
     */
    public static verify(message: { [k: string]: any }): string | null

    /**
     * Creates a MultiChoicePicture3 message from a plain object. Also converts values to their respective internal types.
     * @param object Plain object
     * @returns MultiChoicePicture3
     */
    public static fromObject(object: {
      [k: string]: any
    }): darwincourse.MultiChoicePicture3

    /**
     * Creates a plain object from a MultiChoicePicture3 message. Also converts values to other types if specified.
     * @param message MultiChoicePicture3
     * @param [options] Conversion options
     * @returns Plain object
     */
    public static toObject(
      message: darwincourse.MultiChoicePicture3,
      options?: $protobuf.IConversionOptions,
    ): { [k: string]: any }

    /**
     * Converts this MultiChoicePicture3 to JSON.
     * @returns JSON object
     */
    public toJSON(): { [k: string]: any }
  }

  /** Properties of a MultiChoiceQuestion1A. */
  interface IMultiChoiceQuestion1A {
    /** MultiChoiceQuestion1A audioId */
    audioId?: string | null

    /** MultiChoiceQuestion1A text */
    text?: string | null

    /** MultiChoiceQuestion1A pictureId */
    pictureId?: string[] | null

    /** MultiChoiceQuestion1A choice */
    choice?: { [k: string]: darwincourse.IChoice } | null

    /** MultiChoiceQuestion1A passage */
    passage?: string | null
  }

  /** Represents a MultiChoiceQuestion1A. */
  class MultiChoiceQuestion1A implements IMultiChoiceQuestion1A {
    /**
     * Constructs a new MultiChoiceQuestion1A.
     * @param [properties] Properties to set
     */
    constructor(properties?: darwincourse.IMultiChoiceQuestion1A)

    /** MultiChoiceQuestion1A audioId. */
    public audioId: string

    /** MultiChoiceQuestion1A text. */
    public text: string

    /** MultiChoiceQuestion1A pictureId. */
    public pictureId: string[]

    /** MultiChoiceQuestion1A choice. */
    public choice: { [k: string]: darwincourse.IChoice }

    /** MultiChoiceQuestion1A passage. */
    public passage: string

    /**
     * Creates a new MultiChoiceQuestion1A instance using the specified properties.
     * @param [properties] Properties to set
     * @returns MultiChoiceQuestion1A instance
     */
    public static create(
      properties?: darwincourse.IMultiChoiceQuestion1A,
    ): darwincourse.MultiChoiceQuestion1A

    /**
     * Encodes the specified MultiChoiceQuestion1A message. Does not implicitly {@link darwincourse.MultiChoiceQuestion1A.verify|verify} messages.
     * @param message MultiChoiceQuestion1A message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encode(
      message: darwincourse.IMultiChoiceQuestion1A,
      writer?: $protobuf.Writer,
    ): $protobuf.Writer

    /**
     * Encodes the specified MultiChoiceQuestion1A message, length delimited. Does not implicitly {@link darwincourse.MultiChoiceQuestion1A.verify|verify} messages.
     * @param message MultiChoiceQuestion1A message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encodeDelimited(
      message: darwincourse.IMultiChoiceQuestion1A,
      writer?: $protobuf.Writer,
    ): $protobuf.Writer

    /**
     * Decodes a MultiChoiceQuestion1A message from the specified reader or buffer.
     * @param reader Reader or buffer to decode from
     * @param [length] Message length if known beforehand
     * @returns MultiChoiceQuestion1A
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decode(
      reader: $protobuf.Reader | Uint8Array,
      length?: number,
    ): darwincourse.MultiChoiceQuestion1A

    /**
     * Decodes a MultiChoiceQuestion1A message from the specified reader or buffer, length delimited.
     * @param reader Reader or buffer to decode from
     * @returns MultiChoiceQuestion1A
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decodeDelimited(
      reader: $protobuf.Reader | Uint8Array,
    ): darwincourse.MultiChoiceQuestion1A

    /**
     * Verifies a MultiChoiceQuestion1A message.
     * @param message Plain object to verify
     * @returns `null` if valid, otherwise the reason why it is not
     */
    public static verify(message: { [k: string]: any }): string | null

    /**
     * Creates a MultiChoiceQuestion1A message from a plain object. Also converts values to their respective internal types.
     * @param object Plain object
     * @returns MultiChoiceQuestion1A
     */
    public static fromObject(object: {
      [k: string]: any
    }): darwincourse.MultiChoiceQuestion1A

    /**
     * Creates a plain object from a MultiChoiceQuestion1A message. Also converts values to other types if specified.
     * @param message MultiChoiceQuestion1A
     * @param [options] Conversion options
     * @returns Plain object
     */
    public static toObject(
      message: darwincourse.MultiChoiceQuestion1A,
      options?: $protobuf.IConversionOptions,
    ): { [k: string]: any }

    /**
     * Converts this MultiChoiceQuestion1A to JSON.
     * @returns JSON object
     */
    public toJSON(): { [k: string]: any }
  }

  /** Properties of a MultiChoiceQuestion2A. */
  interface IMultiChoiceQuestion2A {
    /** MultiChoiceQuestion2A audioId */
    audioId?: string | null

    /** MultiChoiceQuestion2A text */
    text?: string | null

    /** MultiChoiceQuestion2A pictureId */
    pictureId?: string | null

    /** MultiChoiceQuestion2A choice */
    choice?: { [k: string]: darwincourse.IChoice } | null

    /** MultiChoiceQuestion2A trText */
    trText?: string | null

    /** MultiChoiceQuestion2A passage */
    passage?: string | null
  }

  /** Represents a MultiChoiceQuestion2A. */
  class MultiChoiceQuestion2A implements IMultiChoiceQuestion2A {
    /**
     * Constructs a new MultiChoiceQuestion2A.
     * @param [properties] Properties to set
     */
    constructor(properties?: darwincourse.IMultiChoiceQuestion2A)

    /** MultiChoiceQuestion2A audioId. */
    public audioId: string

    /** MultiChoiceQuestion2A text. */
    public text: string

    /** MultiChoiceQuestion2A pictureId. */
    public pictureId: string

    /** MultiChoiceQuestion2A choice. */
    public choice: { [k: string]: darwincourse.IChoice }

    /** MultiChoiceQuestion2A trText. */
    public trText: string

    /** MultiChoiceQuestion2A passage. */
    public passage: string

    /**
     * Creates a new MultiChoiceQuestion2A instance using the specified properties.
     * @param [properties] Properties to set
     * @returns MultiChoiceQuestion2A instance
     */
    public static create(
      properties?: darwincourse.IMultiChoiceQuestion2A,
    ): darwincourse.MultiChoiceQuestion2A

    /**
     * Encodes the specified MultiChoiceQuestion2A message. Does not implicitly {@link darwincourse.MultiChoiceQuestion2A.verify|verify} messages.
     * @param message MultiChoiceQuestion2A message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encode(
      message: darwincourse.IMultiChoiceQuestion2A,
      writer?: $protobuf.Writer,
    ): $protobuf.Writer

    /**
     * Encodes the specified MultiChoiceQuestion2A message, length delimited. Does not implicitly {@link darwincourse.MultiChoiceQuestion2A.verify|verify} messages.
     * @param message MultiChoiceQuestion2A message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encodeDelimited(
      message: darwincourse.IMultiChoiceQuestion2A,
      writer?: $protobuf.Writer,
    ): $protobuf.Writer

    /**
     * Decodes a MultiChoiceQuestion2A message from the specified reader or buffer.
     * @param reader Reader or buffer to decode from
     * @param [length] Message length if known beforehand
     * @returns MultiChoiceQuestion2A
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decode(
      reader: $protobuf.Reader | Uint8Array,
      length?: number,
    ): darwincourse.MultiChoiceQuestion2A

    /**
     * Decodes a MultiChoiceQuestion2A message from the specified reader or buffer, length delimited.
     * @param reader Reader or buffer to decode from
     * @returns MultiChoiceQuestion2A
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decodeDelimited(
      reader: $protobuf.Reader | Uint8Array,
    ): darwincourse.MultiChoiceQuestion2A

    /**
     * Verifies a MultiChoiceQuestion2A message.
     * @param message Plain object to verify
     * @returns `null` if valid, otherwise the reason why it is not
     */
    public static verify(message: { [k: string]: any }): string | null

    /**
     * Creates a MultiChoiceQuestion2A message from a plain object. Also converts values to their respective internal types.
     * @param object Plain object
     * @returns MultiChoiceQuestion2A
     */
    public static fromObject(object: {
      [k: string]: any
    }): darwincourse.MultiChoiceQuestion2A

    /**
     * Creates a plain object from a MultiChoiceQuestion2A message. Also converts values to other types if specified.
     * @param message MultiChoiceQuestion2A
     * @param [options] Conversion options
     * @returns Plain object
     */
    public static toObject(
      message: darwincourse.MultiChoiceQuestion2A,
      options?: $protobuf.IConversionOptions,
    ): { [k: string]: any }

    /**
     * Converts this MultiChoiceQuestion2A to JSON.
     * @returns JSON object
     */
    public toJSON(): { [k: string]: any }
  }

  /** Properties of a MultiChoiceQuestion6A. */
  interface IMultiChoiceQuestion6A {
    /** MultiChoiceQuestion6A audioId */
    audioId?: string | null

    /** MultiChoiceQuestion6A pictureId */
    pictureId?: string[] | null

    /** MultiChoiceQuestion6A choice */
    choice?: { [k: string]: darwincourse.IChoice } | null

    /** MultiChoiceQuestion6A passage */
    passage?: string | null
  }

  /** Represents a MultiChoiceQuestion6A. */
  class MultiChoiceQuestion6A implements IMultiChoiceQuestion6A {
    /**
     * Constructs a new MultiChoiceQuestion6A.
     * @param [properties] Properties to set
     */
    constructor(properties?: darwincourse.IMultiChoiceQuestion6A)

    /** MultiChoiceQuestion6A audioId. */
    public audioId: string

    /** MultiChoiceQuestion6A pictureId. */
    public pictureId: string[]

    /** MultiChoiceQuestion6A choice. */
    public choice: { [k: string]: darwincourse.IChoice }

    /** MultiChoiceQuestion6A passage. */
    public passage: string

    /**
     * Creates a new MultiChoiceQuestion6A instance using the specified properties.
     * @param [properties] Properties to set
     * @returns MultiChoiceQuestion6A instance
     */
    public static create(
      properties?: darwincourse.IMultiChoiceQuestion6A,
    ): darwincourse.MultiChoiceQuestion6A

    /**
     * Encodes the specified MultiChoiceQuestion6A message. Does not implicitly {@link darwincourse.MultiChoiceQuestion6A.verify|verify} messages.
     * @param message MultiChoiceQuestion6A message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encode(
      message: darwincourse.IMultiChoiceQuestion6A,
      writer?: $protobuf.Writer,
    ): $protobuf.Writer

    /**
     * Encodes the specified MultiChoiceQuestion6A message, length delimited. Does not implicitly {@link darwincourse.MultiChoiceQuestion6A.verify|verify} messages.
     * @param message MultiChoiceQuestion6A message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encodeDelimited(
      message: darwincourse.IMultiChoiceQuestion6A,
      writer?: $protobuf.Writer,
    ): $protobuf.Writer

    /**
     * Decodes a MultiChoiceQuestion6A message from the specified reader or buffer.
     * @param reader Reader or buffer to decode from
     * @param [length] Message length if known beforehand
     * @returns MultiChoiceQuestion6A
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decode(
      reader: $protobuf.Reader | Uint8Array,
      length?: number,
    ): darwincourse.MultiChoiceQuestion6A

    /**
     * Decodes a MultiChoiceQuestion6A message from the specified reader or buffer, length delimited.
     * @param reader Reader or buffer to decode from
     * @returns MultiChoiceQuestion6A
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decodeDelimited(
      reader: $protobuf.Reader | Uint8Array,
    ): darwincourse.MultiChoiceQuestion6A

    /**
     * Verifies a MultiChoiceQuestion6A message.
     * @param message Plain object to verify
     * @returns `null` if valid, otherwise the reason why it is not
     */
    public static verify(message: { [k: string]: any }): string | null

    /**
     * Creates a MultiChoiceQuestion6A message from a plain object. Also converts values to their respective internal types.
     * @param object Plain object
     * @returns MultiChoiceQuestion6A
     */
    public static fromObject(object: {
      [k: string]: any
    }): darwincourse.MultiChoiceQuestion6A

    /**
     * Creates a plain object from a MultiChoiceQuestion6A message. Also converts values to other types if specified.
     * @param message MultiChoiceQuestion6A
     * @param [options] Conversion options
     * @returns Plain object
     */
    public static toObject(
      message: darwincourse.MultiChoiceQuestion6A,
      options?: $protobuf.IConversionOptions,
    ): { [k: string]: any }

    /**
     * Converts this MultiChoiceQuestion6A to JSON.
     * @returns JSON object
     */
    public toJSON(): { [k: string]: any }
  }

  /** Properties of a Locating. */
  interface ILocating {
    /** Locating audioId */
    audioId?: string | null

    /** Locating passage */
    passage?: core_course.IPBPassage | null
  }

  /** Represents a Locating. */
  class Locating implements ILocating {
    /**
     * Constructs a new Locating.
     * @param [properties] Properties to set
     */
    constructor(properties?: darwincourse.ILocating)

    /** Locating audioId. */
    public audioId: string

    /** Locating passage. */
    public passage?: core_course.IPBPassage | null

    /**
     * Creates a new Locating instance using the specified properties.
     * @param [properties] Properties to set
     * @returns Locating instance
     */
    public static create(
      properties?: darwincourse.ILocating,
    ): darwincourse.Locating

    /**
     * Encodes the specified Locating message. Does not implicitly {@link darwincourse.Locating.verify|verify} messages.
     * @param message Locating message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encode(
      message: darwincourse.ILocating,
      writer?: $protobuf.Writer,
    ): $protobuf.Writer

    /**
     * Encodes the specified Locating message, length delimited. Does not implicitly {@link darwincourse.Locating.verify|verify} messages.
     * @param message Locating message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encodeDelimited(
      message: darwincourse.ILocating,
      writer?: $protobuf.Writer,
    ): $protobuf.Writer

    /**
     * Decodes a Locating message from the specified reader or buffer.
     * @param reader Reader or buffer to decode from
     * @param [length] Message length if known beforehand
     * @returns Locating
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decode(
      reader: $protobuf.Reader | Uint8Array,
      length?: number,
    ): darwincourse.Locating

    /**
     * Decodes a Locating message from the specified reader or buffer, length delimited.
     * @param reader Reader or buffer to decode from
     * @returns Locating
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decodeDelimited(
      reader: $protobuf.Reader | Uint8Array,
    ): darwincourse.Locating

    /**
     * Verifies a Locating message.
     * @param message Plain object to verify
     * @returns `null` if valid, otherwise the reason why it is not
     */
    public static verify(message: { [k: string]: any }): string | null

    /**
     * Creates a Locating message from a plain object. Also converts values to their respective internal types.
     * @param object Plain object
     * @returns Locating
     */
    public static fromObject(object: {
      [k: string]: any
    }): darwincourse.Locating

    /**
     * Creates a plain object from a Locating message. Also converts values to other types if specified.
     * @param message Locating
     * @param [options] Conversion options
     * @returns Plain object
     */
    public static toObject(
      message: darwincourse.Locating,
      options?: $protobuf.IConversionOptions,
    ): { [k: string]: any }

    /**
     * Converts this Locating to JSON.
     * @returns JSON object
     */
    public toJSON(): { [k: string]: any }
  }

  /** Properties of a SpotErrors. */
  interface ISpotErrors {
    /** SpotErrors paragraphs */
    paragraphs?: darwincourse.SpotErrors.IParagraph[] | null
  }

  /** Represents a SpotErrors. */
  class SpotErrors implements ISpotErrors {
    /**
     * Constructs a new SpotErrors.
     * @param [properties] Properties to set
     */
    constructor(properties?: darwincourse.ISpotErrors)

    /** SpotErrors paragraphs. */
    public paragraphs: darwincourse.SpotErrors.IParagraph[]

    /**
     * Creates a new SpotErrors instance using the specified properties.
     * @param [properties] Properties to set
     * @returns SpotErrors instance
     */
    public static create(
      properties?: darwincourse.ISpotErrors,
    ): darwincourse.SpotErrors

    /**
     * Encodes the specified SpotErrors message. Does not implicitly {@link darwincourse.SpotErrors.verify|verify} messages.
     * @param message SpotErrors message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encode(
      message: darwincourse.ISpotErrors,
      writer?: $protobuf.Writer,
    ): $protobuf.Writer

    /**
     * Encodes the specified SpotErrors message, length delimited. Does not implicitly {@link darwincourse.SpotErrors.verify|verify} messages.
     * @param message SpotErrors message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encodeDelimited(
      message: darwincourse.ISpotErrors,
      writer?: $protobuf.Writer,
    ): $protobuf.Writer

    /**
     * Decodes a SpotErrors message from the specified reader or buffer.
     * @param reader Reader or buffer to decode from
     * @param [length] Message length if known beforehand
     * @returns SpotErrors
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decode(
      reader: $protobuf.Reader | Uint8Array,
      length?: number,
    ): darwincourse.SpotErrors

    /**
     * Decodes a SpotErrors message from the specified reader or buffer, length delimited.
     * @param reader Reader or buffer to decode from
     * @returns SpotErrors
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decodeDelimited(
      reader: $protobuf.Reader | Uint8Array,
    ): darwincourse.SpotErrors

    /**
     * Verifies a SpotErrors message.
     * @param message Plain object to verify
     * @returns `null` if valid, otherwise the reason why it is not
     */
    public static verify(message: { [k: string]: any }): string | null

    /**
     * Creates a SpotErrors message from a plain object. Also converts values to their respective internal types.
     * @param object Plain object
     * @returns SpotErrors
     */
    public static fromObject(object: {
      [k: string]: any
    }): darwincourse.SpotErrors

    /**
     * Creates a plain object from a SpotErrors message. Also converts values to other types if specified.
     * @param message SpotErrors
     * @param [options] Conversion options
     * @returns Plain object
     */
    public static toObject(
      message: darwincourse.SpotErrors,
      options?: $protobuf.IConversionOptions,
    ): { [k: string]: any }

    /**
     * Converts this SpotErrors to JSON.
     * @returns JSON object
     */
    public toJSON(): { [k: string]: any }
  }

  namespace SpotErrors {
    /** Properties of a Stem. */
    interface IStem {
      /** Stem text */
      text?: string | null

      /** Stem error */
      error?: string | null
    }

    /** Represents a Stem. */
    class Stem implements IStem {
      /**
       * Constructs a new Stem.
       * @param [properties] Properties to set
       */
      constructor(properties?: darwincourse.SpotErrors.IStem)

      /** Stem text. */
      public text: string

      /** Stem error. */
      public error: string

      /**
       * Creates a new Stem instance using the specified properties.
       * @param [properties] Properties to set
       * @returns Stem instance
       */
      public static create(
        properties?: darwincourse.SpotErrors.IStem,
      ): darwincourse.SpotErrors.Stem

      /**
       * Encodes the specified Stem message. Does not implicitly {@link darwincourse.SpotErrors.Stem.verify|verify} messages.
       * @param message Stem message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encode(
        message: darwincourse.SpotErrors.IStem,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Encodes the specified Stem message, length delimited. Does not implicitly {@link darwincourse.SpotErrors.Stem.verify|verify} messages.
       * @param message Stem message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encodeDelimited(
        message: darwincourse.SpotErrors.IStem,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Decodes a Stem message from the specified reader or buffer.
       * @param reader Reader or buffer to decode from
       * @param [length] Message length if known beforehand
       * @returns Stem
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decode(
        reader: $protobuf.Reader | Uint8Array,
        length?: number,
      ): darwincourse.SpotErrors.Stem

      /**
       * Decodes a Stem message from the specified reader or buffer, length delimited.
       * @param reader Reader or buffer to decode from
       * @returns Stem
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decodeDelimited(
        reader: $protobuf.Reader | Uint8Array,
      ): darwincourse.SpotErrors.Stem

      /**
       * Verifies a Stem message.
       * @param message Plain object to verify
       * @returns `null` if valid, otherwise the reason why it is not
       */
      public static verify(message: { [k: string]: any }): string | null

      /**
       * Creates a Stem message from a plain object. Also converts values to their respective internal types.
       * @param object Plain object
       * @returns Stem
       */
      public static fromObject(object: {
        [k: string]: any
      }): darwincourse.SpotErrors.Stem

      /**
       * Creates a plain object from a Stem message. Also converts values to other types if specified.
       * @param message Stem
       * @param [options] Conversion options
       * @returns Plain object
       */
      public static toObject(
        message: darwincourse.SpotErrors.Stem,
        options?: $protobuf.IConversionOptions,
      ): { [k: string]: any }

      /**
       * Converts this Stem to JSON.
       * @returns JSON object
       */
      public toJSON(): { [k: string]: any }
    }

    /** Properties of a Paragraph. */
    interface IParagraph {
      /** Paragraph stems */
      stems?: darwincourse.SpotErrors.IStem[] | null
    }

    /** Represents a Paragraph. */
    class Paragraph implements IParagraph {
      /**
       * Constructs a new Paragraph.
       * @param [properties] Properties to set
       */
      constructor(properties?: darwincourse.SpotErrors.IParagraph)

      /** Paragraph stems. */
      public stems: darwincourse.SpotErrors.IStem[]

      /**
       * Creates a new Paragraph instance using the specified properties.
       * @param [properties] Properties to set
       * @returns Paragraph instance
       */
      public static create(
        properties?: darwincourse.SpotErrors.IParagraph,
      ): darwincourse.SpotErrors.Paragraph

      /**
       * Encodes the specified Paragraph message. Does not implicitly {@link darwincourse.SpotErrors.Paragraph.verify|verify} messages.
       * @param message Paragraph message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encode(
        message: darwincourse.SpotErrors.IParagraph,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Encodes the specified Paragraph message, length delimited. Does not implicitly {@link darwincourse.SpotErrors.Paragraph.verify|verify} messages.
       * @param message Paragraph message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encodeDelimited(
        message: darwincourse.SpotErrors.IParagraph,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Decodes a Paragraph message from the specified reader or buffer.
       * @param reader Reader or buffer to decode from
       * @param [length] Message length if known beforehand
       * @returns Paragraph
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decode(
        reader: $protobuf.Reader | Uint8Array,
        length?: number,
      ): darwincourse.SpotErrors.Paragraph

      /**
       * Decodes a Paragraph message from the specified reader or buffer, length delimited.
       * @param reader Reader or buffer to decode from
       * @returns Paragraph
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decodeDelimited(
        reader: $protobuf.Reader | Uint8Array,
      ): darwincourse.SpotErrors.Paragraph

      /**
       * Verifies a Paragraph message.
       * @param message Plain object to verify
       * @returns `null` if valid, otherwise the reason why it is not
       */
      public static verify(message: { [k: string]: any }): string | null

      /**
       * Creates a Paragraph message from a plain object. Also converts values to their respective internal types.
       * @param object Plain object
       * @returns Paragraph
       */
      public static fromObject(object: {
        [k: string]: any
      }): darwincourse.SpotErrors.Paragraph

      /**
       * Creates a plain object from a Paragraph message. Also converts values to other types if specified.
       * @param message Paragraph
       * @param [options] Conversion options
       * @returns Plain object
       */
      public static toObject(
        message: darwincourse.SpotErrors.Paragraph,
        options?: $protobuf.IConversionOptions,
      ): { [k: string]: any }

      /**
       * Converts this Paragraph to JSON.
       * @returns JSON object
       */
      public toJSON(): { [k: string]: any }
    }
  }

  /** Properties of a SentenceFragments. */
  interface ISentenceFragments {
    /** SentenceFragments answer */
    answer?: string | null

    /** SentenceFragments fragments */
    fragments?: darwincourse.SentenceFragments.IFragment[] | null
  }

  /** Represents a SentenceFragments. */
  class SentenceFragments implements ISentenceFragments {
    /**
     * Constructs a new SentenceFragments.
     * @param [properties] Properties to set
     */
    constructor(properties?: darwincourse.ISentenceFragments)

    /** SentenceFragments answer. */
    public answer: string

    /** SentenceFragments fragments. */
    public fragments: darwincourse.SentenceFragments.IFragment[]

    /**
     * Creates a new SentenceFragments instance using the specified properties.
     * @param [properties] Properties to set
     * @returns SentenceFragments instance
     */
    public static create(
      properties?: darwincourse.ISentenceFragments,
    ): darwincourse.SentenceFragments

    /**
     * Encodes the specified SentenceFragments message. Does not implicitly {@link darwincourse.SentenceFragments.verify|verify} messages.
     * @param message SentenceFragments message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encode(
      message: darwincourse.ISentenceFragments,
      writer?: $protobuf.Writer,
    ): $protobuf.Writer

    /**
     * Encodes the specified SentenceFragments message, length delimited. Does not implicitly {@link darwincourse.SentenceFragments.verify|verify} messages.
     * @param message SentenceFragments message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encodeDelimited(
      message: darwincourse.ISentenceFragments,
      writer?: $protobuf.Writer,
    ): $protobuf.Writer

    /**
     * Decodes a SentenceFragments message from the specified reader or buffer.
     * @param reader Reader or buffer to decode from
     * @param [length] Message length if known beforehand
     * @returns SentenceFragments
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decode(
      reader: $protobuf.Reader | Uint8Array,
      length?: number,
    ): darwincourse.SentenceFragments

    /**
     * Decodes a SentenceFragments message from the specified reader or buffer, length delimited.
     * @param reader Reader or buffer to decode from
     * @returns SentenceFragments
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decodeDelimited(
      reader: $protobuf.Reader | Uint8Array,
    ): darwincourse.SentenceFragments

    /**
     * Verifies a SentenceFragments message.
     * @param message Plain object to verify
     * @returns `null` if valid, otherwise the reason why it is not
     */
    public static verify(message: { [k: string]: any }): string | null

    /**
     * Creates a SentenceFragments message from a plain object. Also converts values to their respective internal types.
     * @param object Plain object
     * @returns SentenceFragments
     */
    public static fromObject(object: {
      [k: string]: any
    }): darwincourse.SentenceFragments

    /**
     * Creates a plain object from a SentenceFragments message. Also converts values to other types if specified.
     * @param message SentenceFragments
     * @param [options] Conversion options
     * @returns Plain object
     */
    public static toObject(
      message: darwincourse.SentenceFragments,
      options?: $protobuf.IConversionOptions,
    ): { [k: string]: any }

    /**
     * Converts this SentenceFragments to JSON.
     * @returns JSON object
     */
    public toJSON(): { [k: string]: any }
  }

  namespace SentenceFragments {
    /** Properties of a Fragment. */
    interface IFragment {
      /** Fragment text */
      text?: string | null

      /** Fragment index */
      index?: number | null
    }

    /** Represents a Fragment. */
    class Fragment implements IFragment {
      /**
       * Constructs a new Fragment.
       * @param [properties] Properties to set
       */
      constructor(properties?: darwincourse.SentenceFragments.IFragment)

      /** Fragment text. */
      public text: string

      /** Fragment index. */
      public index: number

      /**
       * Creates a new Fragment instance using the specified properties.
       * @param [properties] Properties to set
       * @returns Fragment instance
       */
      public static create(
        properties?: darwincourse.SentenceFragments.IFragment,
      ): darwincourse.SentenceFragments.Fragment

      /**
       * Encodes the specified Fragment message. Does not implicitly {@link darwincourse.SentenceFragments.Fragment.verify|verify} messages.
       * @param message Fragment message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encode(
        message: darwincourse.SentenceFragments.IFragment,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Encodes the specified Fragment message, length delimited. Does not implicitly {@link darwincourse.SentenceFragments.Fragment.verify|verify} messages.
       * @param message Fragment message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encodeDelimited(
        message: darwincourse.SentenceFragments.IFragment,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Decodes a Fragment message from the specified reader or buffer.
       * @param reader Reader or buffer to decode from
       * @param [length] Message length if known beforehand
       * @returns Fragment
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decode(
        reader: $protobuf.Reader | Uint8Array,
        length?: number,
      ): darwincourse.SentenceFragments.Fragment

      /**
       * Decodes a Fragment message from the specified reader or buffer, length delimited.
       * @param reader Reader or buffer to decode from
       * @returns Fragment
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decodeDelimited(
        reader: $protobuf.Reader | Uint8Array,
      ): darwincourse.SentenceFragments.Fragment

      /**
       * Verifies a Fragment message.
       * @param message Plain object to verify
       * @returns `null` if valid, otherwise the reason why it is not
       */
      public static verify(message: { [k: string]: any }): string | null

      /**
       * Creates a Fragment message from a plain object. Also converts values to their respective internal types.
       * @param object Plain object
       * @returns Fragment
       */
      public static fromObject(object: {
        [k: string]: any
      }): darwincourse.SentenceFragments.Fragment

      /**
       * Creates a plain object from a Fragment message. Also converts values to other types if specified.
       * @param message Fragment
       * @param [options] Conversion options
       * @returns Plain object
       */
      public static toObject(
        message: darwincourse.SentenceFragments.Fragment,
        options?: $protobuf.IConversionOptions,
      ): { [k: string]: any }

      /**
       * Converts this Fragment to JSON.
       * @returns JSON object
       */
      public toJSON(): { [k: string]: any }
    }
  }

  /** Properties of a WordFragments. */
  interface IWordFragments {
    /** WordFragments audioId */
    audioId?: string | null

    /** WordFragments pictureId */
    pictureId?: string | null

    /** WordFragments fragment */
    fragment?: string[] | null
  }

  /** Represents a WordFragments. */
  class WordFragments implements IWordFragments {
    /**
     * Constructs a new WordFragments.
     * @param [properties] Properties to set
     */
    constructor(properties?: darwincourse.IWordFragments)

    /** WordFragments audioId. */
    public audioId: string

    /** WordFragments pictureId. */
    public pictureId: string

    /** WordFragments fragment. */
    public fragment: string[]

    /**
     * Creates a new WordFragments instance using the specified properties.
     * @param [properties] Properties to set
     * @returns WordFragments instance
     */
    public static create(
      properties?: darwincourse.IWordFragments,
    ): darwincourse.WordFragments

    /**
     * Encodes the specified WordFragments message. Does not implicitly {@link darwincourse.WordFragments.verify|verify} messages.
     * @param message WordFragments message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encode(
      message: darwincourse.IWordFragments,
      writer?: $protobuf.Writer,
    ): $protobuf.Writer

    /**
     * Encodes the specified WordFragments message, length delimited. Does not implicitly {@link darwincourse.WordFragments.verify|verify} messages.
     * @param message WordFragments message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encodeDelimited(
      message: darwincourse.IWordFragments,
      writer?: $protobuf.Writer,
    ): $protobuf.Writer

    /**
     * Decodes a WordFragments message from the specified reader or buffer.
     * @param reader Reader or buffer to decode from
     * @param [length] Message length if known beforehand
     * @returns WordFragments
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decode(
      reader: $protobuf.Reader | Uint8Array,
      length?: number,
    ): darwincourse.WordFragments

    /**
     * Decodes a WordFragments message from the specified reader or buffer, length delimited.
     * @param reader Reader or buffer to decode from
     * @returns WordFragments
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decodeDelimited(
      reader: $protobuf.Reader | Uint8Array,
    ): darwincourse.WordFragments

    /**
     * Verifies a WordFragments message.
     * @param message Plain object to verify
     * @returns `null` if valid, otherwise the reason why it is not
     */
    public static verify(message: { [k: string]: any }): string | null

    /**
     * Creates a WordFragments message from a plain object. Also converts values to their respective internal types.
     * @param object Plain object
     * @returns WordFragments
     */
    public static fromObject(object: {
      [k: string]: any
    }): darwincourse.WordFragments

    /**
     * Creates a plain object from a WordFragments message. Also converts values to other types if specified.
     * @param message WordFragments
     * @param [options] Conversion options
     * @returns Plain object
     */
    public static toObject(
      message: darwincourse.WordFragments,
      options?: $protobuf.IConversionOptions,
    ): { [k: string]: any }

    /**
     * Converts this WordFragments to JSON.
     * @returns JSON object
     */
    public toJSON(): { [k: string]: any }
  }

  /** Properties of an ErrorHunting. */
  interface IErrorHunting {
    /** ErrorHunting stem */
    stem?: darwincourse.ErrorHunting.IStem[] | null
  }

  /** Represents an ErrorHunting. */
  class ErrorHunting implements IErrorHunting {
    /**
     * Constructs a new ErrorHunting.
     * @param [properties] Properties to set
     */
    constructor(properties?: darwincourse.IErrorHunting)

    /** ErrorHunting stem. */
    public stem: darwincourse.ErrorHunting.IStem[]

    /**
     * Creates a new ErrorHunting instance using the specified properties.
     * @param [properties] Properties to set
     * @returns ErrorHunting instance
     */
    public static create(
      properties?: darwincourse.IErrorHunting,
    ): darwincourse.ErrorHunting

    /**
     * Encodes the specified ErrorHunting message. Does not implicitly {@link darwincourse.ErrorHunting.verify|verify} messages.
     * @param message ErrorHunting message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encode(
      message: darwincourse.IErrorHunting,
      writer?: $protobuf.Writer,
    ): $protobuf.Writer

    /**
     * Encodes the specified ErrorHunting message, length delimited. Does not implicitly {@link darwincourse.ErrorHunting.verify|verify} messages.
     * @param message ErrorHunting message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encodeDelimited(
      message: darwincourse.IErrorHunting,
      writer?: $protobuf.Writer,
    ): $protobuf.Writer

    /**
     * Decodes an ErrorHunting message from the specified reader or buffer.
     * @param reader Reader or buffer to decode from
     * @param [length] Message length if known beforehand
     * @returns ErrorHunting
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decode(
      reader: $protobuf.Reader | Uint8Array,
      length?: number,
    ): darwincourse.ErrorHunting

    /**
     * Decodes an ErrorHunting message from the specified reader or buffer, length delimited.
     * @param reader Reader or buffer to decode from
     * @returns ErrorHunting
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decodeDelimited(
      reader: $protobuf.Reader | Uint8Array,
    ): darwincourse.ErrorHunting

    /**
     * Verifies an ErrorHunting message.
     * @param message Plain object to verify
     * @returns `null` if valid, otherwise the reason why it is not
     */
    public static verify(message: { [k: string]: any }): string | null

    /**
     * Creates an ErrorHunting message from a plain object. Also converts values to their respective internal types.
     * @param object Plain object
     * @returns ErrorHunting
     */
    public static fromObject(object: {
      [k: string]: any
    }): darwincourse.ErrorHunting

    /**
     * Creates a plain object from an ErrorHunting message. Also converts values to other types if specified.
     * @param message ErrorHunting
     * @param [options] Conversion options
     * @returns Plain object
     */
    public static toObject(
      message: darwincourse.ErrorHunting,
      options?: $protobuf.IConversionOptions,
    ): { [k: string]: any }

    /**
     * Converts this ErrorHunting to JSON.
     * @returns JSON object
     */
    public toJSON(): { [k: string]: any }
  }

  namespace ErrorHunting {
    /** Properties of a Stem. */
    interface IStem {
      /** Stem text */
      text?: string | null

      /** Stem checked */
      checked?: boolean | null

      /** Stem correct */
      correct?: string | null
    }

    /** Represents a Stem. */
    class Stem implements IStem {
      /**
       * Constructs a new Stem.
       * @param [properties] Properties to set
       */
      constructor(properties?: darwincourse.ErrorHunting.IStem)

      /** Stem text. */
      public text: string

      /** Stem checked. */
      public checked: boolean

      /** Stem correct. */
      public correct: string

      /**
       * Creates a new Stem instance using the specified properties.
       * @param [properties] Properties to set
       * @returns Stem instance
       */
      public static create(
        properties?: darwincourse.ErrorHunting.IStem,
      ): darwincourse.ErrorHunting.Stem

      /**
       * Encodes the specified Stem message. Does not implicitly {@link darwincourse.ErrorHunting.Stem.verify|verify} messages.
       * @param message Stem message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encode(
        message: darwincourse.ErrorHunting.IStem,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Encodes the specified Stem message, length delimited. Does not implicitly {@link darwincourse.ErrorHunting.Stem.verify|verify} messages.
       * @param message Stem message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encodeDelimited(
        message: darwincourse.ErrorHunting.IStem,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Decodes a Stem message from the specified reader or buffer.
       * @param reader Reader or buffer to decode from
       * @param [length] Message length if known beforehand
       * @returns Stem
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decode(
        reader: $protobuf.Reader | Uint8Array,
        length?: number,
      ): darwincourse.ErrorHunting.Stem

      /**
       * Decodes a Stem message from the specified reader or buffer, length delimited.
       * @param reader Reader or buffer to decode from
       * @returns Stem
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decodeDelimited(
        reader: $protobuf.Reader | Uint8Array,
      ): darwincourse.ErrorHunting.Stem

      /**
       * Verifies a Stem message.
       * @param message Plain object to verify
       * @returns `null` if valid, otherwise the reason why it is not
       */
      public static verify(message: { [k: string]: any }): string | null

      /**
       * Creates a Stem message from a plain object. Also converts values to their respective internal types.
       * @param object Plain object
       * @returns Stem
       */
      public static fromObject(object: {
        [k: string]: any
      }): darwincourse.ErrorHunting.Stem

      /**
       * Creates a plain object from a Stem message. Also converts values to other types if specified.
       * @param message Stem
       * @param [options] Conversion options
       * @returns Plain object
       */
      public static toObject(
        message: darwincourse.ErrorHunting.Stem,
        options?: $protobuf.IConversionOptions,
      ): { [k: string]: any }

      /**
       * Converts this Stem to JSON.
       * @returns JSON object
       */
      public toJSON(): { [k: string]: any }
    }
  }

  /** Properties of a WordGuess. */
  interface IWordGuess {
    /** WordGuess pictureId */
    pictureId?: string | null

    /** WordGuess word */
    word?: string | null

    /** WordGuess audioId */
    audioId?: string | null

    /** WordGuess scorerId */
    scorerId?: string | null
  }

  /** Represents a WordGuess. */
  class WordGuess implements IWordGuess {
    /**
     * Constructs a new WordGuess.
     * @param [properties] Properties to set
     */
    constructor(properties?: darwincourse.IWordGuess)

    /** WordGuess pictureId. */
    public pictureId: string

    /** WordGuess word. */
    public word: string

    /** WordGuess audioId. */
    public audioId: string

    /** WordGuess scorerId. */
    public scorerId: string

    /**
     * Creates a new WordGuess instance using the specified properties.
     * @param [properties] Properties to set
     * @returns WordGuess instance
     */
    public static create(
      properties?: darwincourse.IWordGuess,
    ): darwincourse.WordGuess

    /**
     * Encodes the specified WordGuess message. Does not implicitly {@link darwincourse.WordGuess.verify|verify} messages.
     * @param message WordGuess message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encode(
      message: darwincourse.IWordGuess,
      writer?: $protobuf.Writer,
    ): $protobuf.Writer

    /**
     * Encodes the specified WordGuess message, length delimited. Does not implicitly {@link darwincourse.WordGuess.verify|verify} messages.
     * @param message WordGuess message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encodeDelimited(
      message: darwincourse.IWordGuess,
      writer?: $protobuf.Writer,
    ): $protobuf.Writer

    /**
     * Decodes a WordGuess message from the specified reader or buffer.
     * @param reader Reader or buffer to decode from
     * @param [length] Message length if known beforehand
     * @returns WordGuess
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decode(
      reader: $protobuf.Reader | Uint8Array,
      length?: number,
    ): darwincourse.WordGuess

    /**
     * Decodes a WordGuess message from the specified reader or buffer, length delimited.
     * @param reader Reader or buffer to decode from
     * @returns WordGuess
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decodeDelimited(
      reader: $protobuf.Reader | Uint8Array,
    ): darwincourse.WordGuess

    /**
     * Verifies a WordGuess message.
     * @param message Plain object to verify
     * @returns `null` if valid, otherwise the reason why it is not
     */
    public static verify(message: { [k: string]: any }): string | null

    /**
     * Creates a WordGuess message from a plain object. Also converts values to their respective internal types.
     * @param object Plain object
     * @returns WordGuess
     */
    public static fromObject(object: {
      [k: string]: any
    }): darwincourse.WordGuess

    /**
     * Creates a plain object from a WordGuess message. Also converts values to other types if specified.
     * @param message WordGuess
     * @param [options] Conversion options
     * @returns Plain object
     */
    public static toObject(
      message: darwincourse.WordGuess,
      options?: $protobuf.IConversionOptions,
    ): { [k: string]: any }

    /**
     * Converts this WordGuess to JSON.
     * @returns JSON object
     */
    public toJSON(): { [k: string]: any }
  }

  /** Properties of a ChooseAllWords. */
  interface IChooseAllWords {
    /** ChooseAllWords audioId */
    audioId?: string | null

    /** ChooseAllWords text */
    text?: string | null

    /** ChooseAllWords stem */
    stem?: darwincourse.ChooseAllWords.IStem[] | null
  }

  /** Represents a ChooseAllWords. */
  class ChooseAllWords implements IChooseAllWords {
    /**
     * Constructs a new ChooseAllWords.
     * @param [properties] Properties to set
     */
    constructor(properties?: darwincourse.IChooseAllWords)

    /** ChooseAllWords audioId. */
    public audioId: string

    /** ChooseAllWords text. */
    public text: string

    /** ChooseAllWords stem. */
    public stem: darwincourse.ChooseAllWords.IStem[]

    /**
     * Creates a new ChooseAllWords instance using the specified properties.
     * @param [properties] Properties to set
     * @returns ChooseAllWords instance
     */
    public static create(
      properties?: darwincourse.IChooseAllWords,
    ): darwincourse.ChooseAllWords

    /**
     * Encodes the specified ChooseAllWords message. Does not implicitly {@link darwincourse.ChooseAllWords.verify|verify} messages.
     * @param message ChooseAllWords message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encode(
      message: darwincourse.IChooseAllWords,
      writer?: $protobuf.Writer,
    ): $protobuf.Writer

    /**
     * Encodes the specified ChooseAllWords message, length delimited. Does not implicitly {@link darwincourse.ChooseAllWords.verify|verify} messages.
     * @param message ChooseAllWords message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encodeDelimited(
      message: darwincourse.IChooseAllWords,
      writer?: $protobuf.Writer,
    ): $protobuf.Writer

    /**
     * Decodes a ChooseAllWords message from the specified reader or buffer.
     * @param reader Reader or buffer to decode from
     * @param [length] Message length if known beforehand
     * @returns ChooseAllWords
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decode(
      reader: $protobuf.Reader | Uint8Array,
      length?: number,
    ): darwincourse.ChooseAllWords

    /**
     * Decodes a ChooseAllWords message from the specified reader or buffer, length delimited.
     * @param reader Reader or buffer to decode from
     * @returns ChooseAllWords
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decodeDelimited(
      reader: $protobuf.Reader | Uint8Array,
    ): darwincourse.ChooseAllWords

    /**
     * Verifies a ChooseAllWords message.
     * @param message Plain object to verify
     * @returns `null` if valid, otherwise the reason why it is not
     */
    public static verify(message: { [k: string]: any }): string | null

    /**
     * Creates a ChooseAllWords message from a plain object. Also converts values to their respective internal types.
     * @param object Plain object
     * @returns ChooseAllWords
     */
    public static fromObject(object: {
      [k: string]: any
    }): darwincourse.ChooseAllWords

    /**
     * Creates a plain object from a ChooseAllWords message. Also converts values to other types if specified.
     * @param message ChooseAllWords
     * @param [options] Conversion options
     * @returns Plain object
     */
    public static toObject(
      message: darwincourse.ChooseAllWords,
      options?: $protobuf.IConversionOptions,
    ): { [k: string]: any }

    /**
     * Converts this ChooseAllWords to JSON.
     * @returns JSON object
     */
    public toJSON(): { [k: string]: any }
  }

  namespace ChooseAllWords {
    /** Properties of a Stem. */
    interface IStem {
      /** Stem text */
      text?: string | null

      /** Stem checked */
      checked?: boolean | null
    }

    /** Represents a Stem. */
    class Stem implements IStem {
      /**
       * Constructs a new Stem.
       * @param [properties] Properties to set
       */
      constructor(properties?: darwincourse.ChooseAllWords.IStem)

      /** Stem text. */
      public text: string

      /** Stem checked. */
      public checked: boolean

      /**
       * Creates a new Stem instance using the specified properties.
       * @param [properties] Properties to set
       * @returns Stem instance
       */
      public static create(
        properties?: darwincourse.ChooseAllWords.IStem,
      ): darwincourse.ChooseAllWords.Stem

      /**
       * Encodes the specified Stem message. Does not implicitly {@link darwincourse.ChooseAllWords.Stem.verify|verify} messages.
       * @param message Stem message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encode(
        message: darwincourse.ChooseAllWords.IStem,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Encodes the specified Stem message, length delimited. Does not implicitly {@link darwincourse.ChooseAllWords.Stem.verify|verify} messages.
       * @param message Stem message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encodeDelimited(
        message: darwincourse.ChooseAllWords.IStem,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Decodes a Stem message from the specified reader or buffer.
       * @param reader Reader or buffer to decode from
       * @param [length] Message length if known beforehand
       * @returns Stem
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decode(
        reader: $protobuf.Reader | Uint8Array,
        length?: number,
      ): darwincourse.ChooseAllWords.Stem

      /**
       * Decodes a Stem message from the specified reader or buffer, length delimited.
       * @param reader Reader or buffer to decode from
       * @returns Stem
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decodeDelimited(
        reader: $protobuf.Reader | Uint8Array,
      ): darwincourse.ChooseAllWords.Stem

      /**
       * Verifies a Stem message.
       * @param message Plain object to verify
       * @returns `null` if valid, otherwise the reason why it is not
       */
      public static verify(message: { [k: string]: any }): string | null

      /**
       * Creates a Stem message from a plain object. Also converts values to their respective internal types.
       * @param object Plain object
       * @returns Stem
       */
      public static fromObject(object: {
        [k: string]: any
      }): darwincourse.ChooseAllWords.Stem

      /**
       * Creates a plain object from a Stem message. Also converts values to other types if specified.
       * @param message Stem
       * @param [options] Conversion options
       * @returns Plain object
       */
      public static toObject(
        message: darwincourse.ChooseAllWords.Stem,
        options?: $protobuf.IConversionOptions,
      ): { [k: string]: any }

      /**
       * Converts this Stem to JSON.
       * @returns JSON object
       */
      public toJSON(): { [k: string]: any }
    }
  }

  /** Properties of a SentenceCompletion. */
  interface ISentenceCompletion {
    /** SentenceCompletion audioId */
    audioId?: string | null

    /** SentenceCompletion pictureId */
    pictureId?: string | null

    /** SentenceCompletion text */
    text?: string | null

    /** SentenceCompletion refText */
    refText?: string | null

    /** SentenceCompletion hint */
    hint?: string | null

    /** SentenceCompletion deliteScorerId */
    deliteScorerId?: string | null
  }

  /** Represents a SentenceCompletion. */
  class SentenceCompletion implements ISentenceCompletion {
    /**
     * Constructs a new SentenceCompletion.
     * @param [properties] Properties to set
     */
    constructor(properties?: darwincourse.ISentenceCompletion)

    /** SentenceCompletion audioId. */
    public audioId: string

    /** SentenceCompletion pictureId. */
    public pictureId: string

    /** SentenceCompletion text. */
    public text: string

    /** SentenceCompletion refText. */
    public refText: string

    /** SentenceCompletion hint. */
    public hint: string

    /** SentenceCompletion deliteScorerId. */
    public deliteScorerId: string

    /**
     * Creates a new SentenceCompletion instance using the specified properties.
     * @param [properties] Properties to set
     * @returns SentenceCompletion instance
     */
    public static create(
      properties?: darwincourse.ISentenceCompletion,
    ): darwincourse.SentenceCompletion

    /**
     * Encodes the specified SentenceCompletion message. Does not implicitly {@link darwincourse.SentenceCompletion.verify|verify} messages.
     * @param message SentenceCompletion message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encode(
      message: darwincourse.ISentenceCompletion,
      writer?: $protobuf.Writer,
    ): $protobuf.Writer

    /**
     * Encodes the specified SentenceCompletion message, length delimited. Does not implicitly {@link darwincourse.SentenceCompletion.verify|verify} messages.
     * @param message SentenceCompletion message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encodeDelimited(
      message: darwincourse.ISentenceCompletion,
      writer?: $protobuf.Writer,
    ): $protobuf.Writer

    /**
     * Decodes a SentenceCompletion message from the specified reader or buffer.
     * @param reader Reader or buffer to decode from
     * @param [length] Message length if known beforehand
     * @returns SentenceCompletion
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decode(
      reader: $protobuf.Reader | Uint8Array,
      length?: number,
    ): darwincourse.SentenceCompletion

    /**
     * Decodes a SentenceCompletion message from the specified reader or buffer, length delimited.
     * @param reader Reader or buffer to decode from
     * @returns SentenceCompletion
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decodeDelimited(
      reader: $protobuf.Reader | Uint8Array,
    ): darwincourse.SentenceCompletion

    /**
     * Verifies a SentenceCompletion message.
     * @param message Plain object to verify
     * @returns `null` if valid, otherwise the reason why it is not
     */
    public static verify(message: { [k: string]: any }): string | null

    /**
     * Creates a SentenceCompletion message from a plain object. Also converts values to their respective internal types.
     * @param object Plain object
     * @returns SentenceCompletion
     */
    public static fromObject(object: {
      [k: string]: any
    }): darwincourse.SentenceCompletion

    /**
     * Creates a plain object from a SentenceCompletion message. Also converts values to other types if specified.
     * @param message SentenceCompletion
     * @param [options] Conversion options
     * @returns Plain object
     */
    public static toObject(
      message: darwincourse.SentenceCompletion,
      options?: $protobuf.IConversionOptions,
    ): { [k: string]: any }

    /**
     * Converts this SentenceCompletion to JSON.
     * @returns JSON object
     */
    public toJSON(): { [k: string]: any }
  }

  /** Properties of a Spelling. */
  interface ISpelling {
    /** Spelling audioId */
    audioId?: string | null

    /** Spelling text */
    text?: string | null

    /** Spelling stems */
    stems?: darwincourse.Spelling.IStem[] | null
  }

  /** Represents a Spelling. */
  class Spelling implements ISpelling {
    /**
     * Constructs a new Spelling.
     * @param [properties] Properties to set
     */
    constructor(properties?: darwincourse.ISpelling)

    /** Spelling audioId. */
    public audioId: string

    /** Spelling text. */
    public text: string

    /** Spelling stems. */
    public stems: darwincourse.Spelling.IStem[]

    /**
     * Creates a new Spelling instance using the specified properties.
     * @param [properties] Properties to set
     * @returns Spelling instance
     */
    public static create(
      properties?: darwincourse.ISpelling,
    ): darwincourse.Spelling

    /**
     * Encodes the specified Spelling message. Does not implicitly {@link darwincourse.Spelling.verify|verify} messages.
     * @param message Spelling message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encode(
      message: darwincourse.ISpelling,
      writer?: $protobuf.Writer,
    ): $protobuf.Writer

    /**
     * Encodes the specified Spelling message, length delimited. Does not implicitly {@link darwincourse.Spelling.verify|verify} messages.
     * @param message Spelling message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encodeDelimited(
      message: darwincourse.ISpelling,
      writer?: $protobuf.Writer,
    ): $protobuf.Writer

    /**
     * Decodes a Spelling message from the specified reader or buffer.
     * @param reader Reader or buffer to decode from
     * @param [length] Message length if known beforehand
     * @returns Spelling
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decode(
      reader: $protobuf.Reader | Uint8Array,
      length?: number,
    ): darwincourse.Spelling

    /**
     * Decodes a Spelling message from the specified reader or buffer, length delimited.
     * @param reader Reader or buffer to decode from
     * @returns Spelling
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decodeDelimited(
      reader: $protobuf.Reader | Uint8Array,
    ): darwincourse.Spelling

    /**
     * Verifies a Spelling message.
     * @param message Plain object to verify
     * @returns `null` if valid, otherwise the reason why it is not
     */
    public static verify(message: { [k: string]: any }): string | null

    /**
     * Creates a Spelling message from a plain object. Also converts values to their respective internal types.
     * @param object Plain object
     * @returns Spelling
     */
    public static fromObject(object: {
      [k: string]: any
    }): darwincourse.Spelling

    /**
     * Creates a plain object from a Spelling message. Also converts values to other types if specified.
     * @param message Spelling
     * @param [options] Conversion options
     * @returns Plain object
     */
    public static toObject(
      message: darwincourse.Spelling,
      options?: $protobuf.IConversionOptions,
    ): { [k: string]: any }

    /**
     * Converts this Spelling to JSON.
     * @returns JSON object
     */
    public toJSON(): { [k: string]: any }
  }

  namespace Spelling {
    /** Properties of a Stem. */
    interface IStem {
      /** Stem text */
      text?: string | null

      /** Stem checked */
      checked?: boolean | null
    }

    /** Represents a Stem. */
    class Stem implements IStem {
      /**
       * Constructs a new Stem.
       * @param [properties] Properties to set
       */
      constructor(properties?: darwincourse.Spelling.IStem)

      /** Stem text. */
      public text: string

      /** Stem checked. */
      public checked: boolean

      /**
       * Creates a new Stem instance using the specified properties.
       * @param [properties] Properties to set
       * @returns Stem instance
       */
      public static create(
        properties?: darwincourse.Spelling.IStem,
      ): darwincourse.Spelling.Stem

      /**
       * Encodes the specified Stem message. Does not implicitly {@link darwincourse.Spelling.Stem.verify|verify} messages.
       * @param message Stem message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encode(
        message: darwincourse.Spelling.IStem,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Encodes the specified Stem message, length delimited. Does not implicitly {@link darwincourse.Spelling.Stem.verify|verify} messages.
       * @param message Stem message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encodeDelimited(
        message: darwincourse.Spelling.IStem,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Decodes a Stem message from the specified reader or buffer.
       * @param reader Reader or buffer to decode from
       * @param [length] Message length if known beforehand
       * @returns Stem
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decode(
        reader: $protobuf.Reader | Uint8Array,
        length?: number,
      ): darwincourse.Spelling.Stem

      /**
       * Decodes a Stem message from the specified reader or buffer, length delimited.
       * @param reader Reader or buffer to decode from
       * @returns Stem
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decodeDelimited(
        reader: $protobuf.Reader | Uint8Array,
      ): darwincourse.Spelling.Stem

      /**
       * Verifies a Stem message.
       * @param message Plain object to verify
       * @returns `null` if valid, otherwise the reason why it is not
       */
      public static verify(message: { [k: string]: any }): string | null

      /**
       * Creates a Stem message from a plain object. Also converts values to their respective internal types.
       * @param object Plain object
       * @returns Stem
       */
      public static fromObject(object: {
        [k: string]: any
      }): darwincourse.Spelling.Stem

      /**
       * Creates a plain object from a Stem message. Also converts values to other types if specified.
       * @param message Stem
       * @param [options] Conversion options
       * @returns Plain object
       */
      public static toObject(
        message: darwincourse.Spelling.Stem,
        options?: $protobuf.IConversionOptions,
      ): { [k: string]: any }

      /**
       * Converts this Stem to JSON.
       * @returns JSON object
       */
      public toJSON(): { [k: string]: any }
    }
  }

  /** Properties of a ReadAfter. */
  interface IReadAfter {
    /** ReadAfter audioId */
    audioId?: string | null

    /** ReadAfter text */
    text?: string | null

    /** ReadAfter pictureId */
    pictureId?: string | null

    /** ReadAfter spokenText */
    spokenText?: string | null
  }

  /** Represents a ReadAfter. */
  class ReadAfter implements IReadAfter {
    /**
     * Constructs a new ReadAfter.
     * @param [properties] Properties to set
     */
    constructor(properties?: darwincourse.IReadAfter)

    /** ReadAfter audioId. */
    public audioId: string

    /** ReadAfter text. */
    public text: string

    /** ReadAfter pictureId. */
    public pictureId: string

    /** ReadAfter spokenText. */
    public spokenText: string

    /**
     * Creates a new ReadAfter instance using the specified properties.
     * @param [properties] Properties to set
     * @returns ReadAfter instance
     */
    public static create(
      properties?: darwincourse.IReadAfter,
    ): darwincourse.ReadAfter

    /**
     * Encodes the specified ReadAfter message. Does not implicitly {@link darwincourse.ReadAfter.verify|verify} messages.
     * @param message ReadAfter message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encode(
      message: darwincourse.IReadAfter,
      writer?: $protobuf.Writer,
    ): $protobuf.Writer

    /**
     * Encodes the specified ReadAfter message, length delimited. Does not implicitly {@link darwincourse.ReadAfter.verify|verify} messages.
     * @param message ReadAfter message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encodeDelimited(
      message: darwincourse.IReadAfter,
      writer?: $protobuf.Writer,
    ): $protobuf.Writer

    /**
     * Decodes a ReadAfter message from the specified reader or buffer.
     * @param reader Reader or buffer to decode from
     * @param [length] Message length if known beforehand
     * @returns ReadAfter
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decode(
      reader: $protobuf.Reader | Uint8Array,
      length?: number,
    ): darwincourse.ReadAfter

    /**
     * Decodes a ReadAfter message from the specified reader or buffer, length delimited.
     * @param reader Reader or buffer to decode from
     * @returns ReadAfter
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decodeDelimited(
      reader: $protobuf.Reader | Uint8Array,
    ): darwincourse.ReadAfter

    /**
     * Verifies a ReadAfter message.
     * @param message Plain object to verify
     * @returns `null` if valid, otherwise the reason why it is not
     */
    public static verify(message: { [k: string]: any }): string | null

    /**
     * Creates a ReadAfter message from a plain object. Also converts values to their respective internal types.
     * @param object Plain object
     * @returns ReadAfter
     */
    public static fromObject(object: {
      [k: string]: any
    }): darwincourse.ReadAfter

    /**
     * Creates a plain object from a ReadAfter message. Also converts values to other types if specified.
     * @param message ReadAfter
     * @param [options] Conversion options
     * @returns Plain object
     */
    public static toObject(
      message: darwincourse.ReadAfter,
      options?: $protobuf.IConversionOptions,
    ): { [k: string]: any }

    /**
     * Converts this ReadAfter to JSON.
     * @returns JSON object
     */
    public toJSON(): { [k: string]: any }
  }

  /** Properties of a SpeakingLink. */
  interface ISpeakingLink {
    /** SpeakingLink audioId */
    audioId?: string | null

    /** SpeakingLink pictureId */
    pictureId?: string | null

    /** SpeakingLink text */
    text?: string | null

    /** SpeakingLink stems */
    stems?: string[] | null

    /** SpeakingLink deliteScorerId */
    deliteScorerId?: string | null

    /** SpeakingLink answers */
    answers?: darwincourse.SpeakingLink.IAnswer[] | null
  }

  /** Represents a SpeakingLink. */
  class SpeakingLink implements ISpeakingLink {
    /**
     * Constructs a new SpeakingLink.
     * @param [properties] Properties to set
     */
    constructor(properties?: darwincourse.ISpeakingLink)

    /** SpeakingLink audioId. */
    public audioId: string

    /** SpeakingLink pictureId. */
    public pictureId: string

    /** SpeakingLink text. */
    public text: string

    /** SpeakingLink stems. */
    public stems: string[]

    /** SpeakingLink deliteScorerId. */
    public deliteScorerId: string

    /** SpeakingLink answers. */
    public answers: darwincourse.SpeakingLink.IAnswer[]

    /**
     * Creates a new SpeakingLink instance using the specified properties.
     * @param [properties] Properties to set
     * @returns SpeakingLink instance
     */
    public static create(
      properties?: darwincourse.ISpeakingLink,
    ): darwincourse.SpeakingLink

    /**
     * Encodes the specified SpeakingLink message. Does not implicitly {@link darwincourse.SpeakingLink.verify|verify} messages.
     * @param message SpeakingLink message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encode(
      message: darwincourse.ISpeakingLink,
      writer?: $protobuf.Writer,
    ): $protobuf.Writer

    /**
     * Encodes the specified SpeakingLink message, length delimited. Does not implicitly {@link darwincourse.SpeakingLink.verify|verify} messages.
     * @param message SpeakingLink message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encodeDelimited(
      message: darwincourse.ISpeakingLink,
      writer?: $protobuf.Writer,
    ): $protobuf.Writer

    /**
     * Decodes a SpeakingLink message from the specified reader or buffer.
     * @param reader Reader or buffer to decode from
     * @param [length] Message length if known beforehand
     * @returns SpeakingLink
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decode(
      reader: $protobuf.Reader | Uint8Array,
      length?: number,
    ): darwincourse.SpeakingLink

    /**
     * Decodes a SpeakingLink message from the specified reader or buffer, length delimited.
     * @param reader Reader or buffer to decode from
     * @returns SpeakingLink
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decodeDelimited(
      reader: $protobuf.Reader | Uint8Array,
    ): darwincourse.SpeakingLink

    /**
     * Verifies a SpeakingLink message.
     * @param message Plain object to verify
     * @returns `null` if valid, otherwise the reason why it is not
     */
    public static verify(message: { [k: string]: any }): string | null

    /**
     * Creates a SpeakingLink message from a plain object. Also converts values to their respective internal types.
     * @param object Plain object
     * @returns SpeakingLink
     */
    public static fromObject(object: {
      [k: string]: any
    }): darwincourse.SpeakingLink

    /**
     * Creates a plain object from a SpeakingLink message. Also converts values to other types if specified.
     * @param message SpeakingLink
     * @param [options] Conversion options
     * @returns Plain object
     */
    public static toObject(
      message: darwincourse.SpeakingLink,
      options?: $protobuf.IConversionOptions,
    ): { [k: string]: any }

    /**
     * Converts this SpeakingLink to JSON.
     * @returns JSON object
     */
    public toJSON(): { [k: string]: any }
  }

  namespace SpeakingLink {
    /** Properties of an Answer. */
    interface IAnswer {
      /** Answer stems */
      stems?: string[] | null

      /** Answer trText */
      trText?: string | null

      /** Answer trAudioId */
      trAudioId?: string | null
    }

    /** Represents an Answer. */
    class Answer implements IAnswer {
      /**
       * Constructs a new Answer.
       * @param [properties] Properties to set
       */
      constructor(properties?: darwincourse.SpeakingLink.IAnswer)

      /** Answer stems. */
      public stems: string[]

      /** Answer trText. */
      public trText: string

      /** Answer trAudioId. */
      public trAudioId: string

      /**
       * Creates a new Answer instance using the specified properties.
       * @param [properties] Properties to set
       * @returns Answer instance
       */
      public static create(
        properties?: darwincourse.SpeakingLink.IAnswer,
      ): darwincourse.SpeakingLink.Answer

      /**
       * Encodes the specified Answer message. Does not implicitly {@link darwincourse.SpeakingLink.Answer.verify|verify} messages.
       * @param message Answer message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encode(
        message: darwincourse.SpeakingLink.IAnswer,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Encodes the specified Answer message, length delimited. Does not implicitly {@link darwincourse.SpeakingLink.Answer.verify|verify} messages.
       * @param message Answer message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encodeDelimited(
        message: darwincourse.SpeakingLink.IAnswer,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Decodes an Answer message from the specified reader or buffer.
       * @param reader Reader or buffer to decode from
       * @param [length] Message length if known beforehand
       * @returns Answer
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decode(
        reader: $protobuf.Reader | Uint8Array,
        length?: number,
      ): darwincourse.SpeakingLink.Answer

      /**
       * Decodes an Answer message from the specified reader or buffer, length delimited.
       * @param reader Reader or buffer to decode from
       * @returns Answer
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decodeDelimited(
        reader: $protobuf.Reader | Uint8Array,
      ): darwincourse.SpeakingLink.Answer

      /**
       * Verifies an Answer message.
       * @param message Plain object to verify
       * @returns `null` if valid, otherwise the reason why it is not
       */
      public static verify(message: { [k: string]: any }): string | null

      /**
       * Creates an Answer message from a plain object. Also converts values to their respective internal types.
       * @param object Plain object
       * @returns Answer
       */
      public static fromObject(object: {
        [k: string]: any
      }): darwincourse.SpeakingLink.Answer

      /**
       * Creates a plain object from an Answer message. Also converts values to other types if specified.
       * @param message Answer
       * @param [options] Conversion options
       * @returns Plain object
       */
      public static toObject(
        message: darwincourse.SpeakingLink.Answer,
        options?: $protobuf.IConversionOptions,
      ): { [k: string]: any }

      /**
       * Converts this Answer to JSON.
       * @returns JSON object
       */
      public toJSON(): { [k: string]: any }
    }
  }

  /** Properties of a SpeakingQA. */
  interface ISpeakingQA {
    /** SpeakingQA audioId */
    audioId?: string | null

    /** SpeakingQA pictureId */
    pictureId?: string | null

    /** SpeakingQA hint */
    hint?: string | null

    /** SpeakingQA refText */
    refText?: string | null

    /** SpeakingQA deliteScorerId */
    deliteScorerId?: string | null
  }

  /** Represents a SpeakingQA. */
  class SpeakingQA implements ISpeakingQA {
    /**
     * Constructs a new SpeakingQA.
     * @param [properties] Properties to set
     */
    constructor(properties?: darwincourse.ISpeakingQA)

    /** SpeakingQA audioId. */
    public audioId: string

    /** SpeakingQA pictureId. */
    public pictureId: string

    /** SpeakingQA hint. */
    public hint: string

    /** SpeakingQA refText. */
    public refText: string

    /** SpeakingQA deliteScorerId. */
    public deliteScorerId: string

    /**
     * Creates a new SpeakingQA instance using the specified properties.
     * @param [properties] Properties to set
     * @returns SpeakingQA instance
     */
    public static create(
      properties?: darwincourse.ISpeakingQA,
    ): darwincourse.SpeakingQA

    /**
     * Encodes the specified SpeakingQA message. Does not implicitly {@link darwincourse.SpeakingQA.verify|verify} messages.
     * @param message SpeakingQA message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encode(
      message: darwincourse.ISpeakingQA,
      writer?: $protobuf.Writer,
    ): $protobuf.Writer

    /**
     * Encodes the specified SpeakingQA message, length delimited. Does not implicitly {@link darwincourse.SpeakingQA.verify|verify} messages.
     * @param message SpeakingQA message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encodeDelimited(
      message: darwincourse.ISpeakingQA,
      writer?: $protobuf.Writer,
    ): $protobuf.Writer

    /**
     * Decodes a SpeakingQA message from the specified reader or buffer.
     * @param reader Reader or buffer to decode from
     * @param [length] Message length if known beforehand
     * @returns SpeakingQA
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decode(
      reader: $protobuf.Reader | Uint8Array,
      length?: number,
    ): darwincourse.SpeakingQA

    /**
     * Decodes a SpeakingQA message from the specified reader or buffer, length delimited.
     * @param reader Reader or buffer to decode from
     * @returns SpeakingQA
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decodeDelimited(
      reader: $protobuf.Reader | Uint8Array,
    ): darwincourse.SpeakingQA

    /**
     * Verifies a SpeakingQA message.
     * @param message Plain object to verify
     * @returns `null` if valid, otherwise the reason why it is not
     */
    public static verify(message: { [k: string]: any }): string | null

    /**
     * Creates a SpeakingQA message from a plain object. Also converts values to their respective internal types.
     * @param object Plain object
     * @returns SpeakingQA
     */
    public static fromObject(object: {
      [k: string]: any
    }): darwincourse.SpeakingQA

    /**
     * Creates a plain object from a SpeakingQA message. Also converts values to other types if specified.
     * @param message SpeakingQA
     * @param [options] Conversion options
     * @returns Plain object
     */
    public static toObject(
      message: darwincourse.SpeakingQA,
      options?: $protobuf.IConversionOptions,
    ): { [k: string]: any }

    /**
     * Converts this SpeakingQA to JSON.
     * @returns JSON object
     */
    public toJSON(): { [k: string]: any }
  }

  /** Properties of a SpeakingMCQ. */
  interface ISpeakingMCQ {
    /** SpeakingMCQ audioId */
    audioId?: string | null

    /** SpeakingMCQ text */
    text?: string | null

    /** SpeakingMCQ pictureId */
    pictureId?: string | null

    /** SpeakingMCQ refText */
    refText?: string | null

    /** SpeakingMCQ answer */
    answer?: darwincourse.SpeakingMCQ.IAnswer[] | null

    /** SpeakingMCQ scorerId */
    scorerId?: string | null
  }

  /** Represents a SpeakingMCQ. */
  class SpeakingMCQ implements ISpeakingMCQ {
    /**
     * Constructs a new SpeakingMCQ.
     * @param [properties] Properties to set
     */
    constructor(properties?: darwincourse.ISpeakingMCQ)

    /** SpeakingMCQ audioId. */
    public audioId: string

    /** SpeakingMCQ text. */
    public text: string

    /** SpeakingMCQ pictureId. */
    public pictureId: string

    /** SpeakingMCQ refText. */
    public refText: string

    /** SpeakingMCQ answer. */
    public answer: darwincourse.SpeakingMCQ.IAnswer[]

    /** SpeakingMCQ scorerId. */
    public scorerId: string

    /**
     * Creates a new SpeakingMCQ instance using the specified properties.
     * @param [properties] Properties to set
     * @returns SpeakingMCQ instance
     */
    public static create(
      properties?: darwincourse.ISpeakingMCQ,
    ): darwincourse.SpeakingMCQ

    /**
     * Encodes the specified SpeakingMCQ message. Does not implicitly {@link darwincourse.SpeakingMCQ.verify|verify} messages.
     * @param message SpeakingMCQ message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encode(
      message: darwincourse.ISpeakingMCQ,
      writer?: $protobuf.Writer,
    ): $protobuf.Writer

    /**
     * Encodes the specified SpeakingMCQ message, length delimited. Does not implicitly {@link darwincourse.SpeakingMCQ.verify|verify} messages.
     * @param message SpeakingMCQ message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encodeDelimited(
      message: darwincourse.ISpeakingMCQ,
      writer?: $protobuf.Writer,
    ): $protobuf.Writer

    /**
     * Decodes a SpeakingMCQ message from the specified reader or buffer.
     * @param reader Reader or buffer to decode from
     * @param [length] Message length if known beforehand
     * @returns SpeakingMCQ
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decode(
      reader: $protobuf.Reader | Uint8Array,
      length?: number,
    ): darwincourse.SpeakingMCQ

    /**
     * Decodes a SpeakingMCQ message from the specified reader or buffer, length delimited.
     * @param reader Reader or buffer to decode from
     * @returns SpeakingMCQ
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decodeDelimited(
      reader: $protobuf.Reader | Uint8Array,
    ): darwincourse.SpeakingMCQ

    /**
     * Verifies a SpeakingMCQ message.
     * @param message Plain object to verify
     * @returns `null` if valid, otherwise the reason why it is not
     */
    public static verify(message: { [k: string]: any }): string | null

    /**
     * Creates a SpeakingMCQ message from a plain object. Also converts values to their respective internal types.
     * @param object Plain object
     * @returns SpeakingMCQ
     */
    public static fromObject(object: {
      [k: string]: any
    }): darwincourse.SpeakingMCQ

    /**
     * Creates a plain object from a SpeakingMCQ message. Also converts values to other types if specified.
     * @param message SpeakingMCQ
     * @param [options] Conversion options
     * @returns Plain object
     */
    public static toObject(
      message: darwincourse.SpeakingMCQ,
      options?: $protobuf.IConversionOptions,
    ): { [k: string]: any }

    /**
     * Converts this SpeakingMCQ to JSON.
     * @returns JSON object
     */
    public toJSON(): { [k: string]: any }
  }

  namespace SpeakingMCQ {
    /** Properties of an Answer. */
    interface IAnswer {
      /** Answer text */
      text?: string | null

      /** Answer checked */
      checked?: boolean | null
    }

    /** Represents an Answer. */
    class Answer implements IAnswer {
      /**
       * Constructs a new Answer.
       * @param [properties] Properties to set
       */
      constructor(properties?: darwincourse.SpeakingMCQ.IAnswer)

      /** Answer text. */
      public text: string

      /** Answer checked. */
      public checked: boolean

      /**
       * Creates a new Answer instance using the specified properties.
       * @param [properties] Properties to set
       * @returns Answer instance
       */
      public static create(
        properties?: darwincourse.SpeakingMCQ.IAnswer,
      ): darwincourse.SpeakingMCQ.Answer

      /**
       * Encodes the specified Answer message. Does not implicitly {@link darwincourse.SpeakingMCQ.Answer.verify|verify} messages.
       * @param message Answer message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encode(
        message: darwincourse.SpeakingMCQ.IAnswer,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Encodes the specified Answer message, length delimited. Does not implicitly {@link darwincourse.SpeakingMCQ.Answer.verify|verify} messages.
       * @param message Answer message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encodeDelimited(
        message: darwincourse.SpeakingMCQ.IAnswer,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Decodes an Answer message from the specified reader or buffer.
       * @param reader Reader or buffer to decode from
       * @param [length] Message length if known beforehand
       * @returns Answer
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decode(
        reader: $protobuf.Reader | Uint8Array,
        length?: number,
      ): darwincourse.SpeakingMCQ.Answer

      /**
       * Decodes an Answer message from the specified reader or buffer, length delimited.
       * @param reader Reader or buffer to decode from
       * @returns Answer
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decodeDelimited(
        reader: $protobuf.Reader | Uint8Array,
      ): darwincourse.SpeakingMCQ.Answer

      /**
       * Verifies an Answer message.
       * @param message Plain object to verify
       * @returns `null` if valid, otherwise the reason why it is not
       */
      public static verify(message: { [k: string]: any }): string | null

      /**
       * Creates an Answer message from a plain object. Also converts values to their respective internal types.
       * @param object Plain object
       * @returns Answer
       */
      public static fromObject(object: {
        [k: string]: any
      }): darwincourse.SpeakingMCQ.Answer

      /**
       * Creates a plain object from an Answer message. Also converts values to other types if specified.
       * @param message Answer
       * @param [options] Conversion options
       * @returns Plain object
       */
      public static toObject(
        message: darwincourse.SpeakingMCQ.Answer,
        options?: $protobuf.IConversionOptions,
      ): { [k: string]: any }

      /**
       * Converts this Answer to JSON.
       * @returns JSON object
       */
      public toJSON(): { [k: string]: any }
    }
  }

  /** Properties of a VocabularyFlashCard. */
  interface IVocabularyFlashCard {
    /** VocabularyFlashCard word */
    word?: string | null

    /** VocabularyFlashCard phonetic */
    phonetic?: core_course.IPhonetic[] | null

    /** VocabularyFlashCard wordBrief */
    wordBrief?: core_course.IWordBrief[] | null
  }

  /** Represents a VocabularyFlashCard. */
  class VocabularyFlashCard implements IVocabularyFlashCard {
    /**
     * Constructs a new VocabularyFlashCard.
     * @param [properties] Properties to set
     */
    constructor(properties?: darwincourse.IVocabularyFlashCard)

    /** VocabularyFlashCard word. */
    public word: string

    /** VocabularyFlashCard phonetic. */
    public phonetic: core_course.IPhonetic[]

    /** VocabularyFlashCard wordBrief. */
    public wordBrief: core_course.IWordBrief[]

    /**
     * Creates a new VocabularyFlashCard instance using the specified properties.
     * @param [properties] Properties to set
     * @returns VocabularyFlashCard instance
     */
    public static create(
      properties?: darwincourse.IVocabularyFlashCard,
    ): darwincourse.VocabularyFlashCard

    /**
     * Encodes the specified VocabularyFlashCard message. Does not implicitly {@link darwincourse.VocabularyFlashCard.verify|verify} messages.
     * @param message VocabularyFlashCard message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encode(
      message: darwincourse.IVocabularyFlashCard,
      writer?: $protobuf.Writer,
    ): $protobuf.Writer

    /**
     * Encodes the specified VocabularyFlashCard message, length delimited. Does not implicitly {@link darwincourse.VocabularyFlashCard.verify|verify} messages.
     * @param message VocabularyFlashCard message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encodeDelimited(
      message: darwincourse.IVocabularyFlashCard,
      writer?: $protobuf.Writer,
    ): $protobuf.Writer

    /**
     * Decodes a VocabularyFlashCard message from the specified reader or buffer.
     * @param reader Reader or buffer to decode from
     * @param [length] Message length if known beforehand
     * @returns VocabularyFlashCard
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decode(
      reader: $protobuf.Reader | Uint8Array,
      length?: number,
    ): darwincourse.VocabularyFlashCard

    /**
     * Decodes a VocabularyFlashCard message from the specified reader or buffer, length delimited.
     * @param reader Reader or buffer to decode from
     * @returns VocabularyFlashCard
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decodeDelimited(
      reader: $protobuf.Reader | Uint8Array,
    ): darwincourse.VocabularyFlashCard

    /**
     * Verifies a VocabularyFlashCard message.
     * @param message Plain object to verify
     * @returns `null` if valid, otherwise the reason why it is not
     */
    public static verify(message: { [k: string]: any }): string | null

    /**
     * Creates a VocabularyFlashCard message from a plain object. Also converts values to their respective internal types.
     * @param object Plain object
     * @returns VocabularyFlashCard
     */
    public static fromObject(object: {
      [k: string]: any
    }): darwincourse.VocabularyFlashCard

    /**
     * Creates a plain object from a VocabularyFlashCard message. Also converts values to other types if specified.
     * @param message VocabularyFlashCard
     * @param [options] Conversion options
     * @returns Plain object
     */
    public static toObject(
      message: darwincourse.VocabularyFlashCard,
      options?: $protobuf.IConversionOptions,
    ): { [k: string]: any }

    /**
     * Converts this VocabularyFlashCard to JSON.
     * @returns JSON object
     */
    public toJSON(): { [k: string]: any }
  }

  /** Properties of a MultiChoiceQuestionX. */
  interface IMultiChoiceQuestionX {
    /** MultiChoiceQuestionX audioId */
    audioId?: string | null

    /** MultiChoiceQuestionX introText */
    introText?: string | null

    /** MultiChoiceQuestionX text */
    text?: string | null

    /** MultiChoiceQuestionX choice */
    choice?: { [k: string]: darwincourse.IChoice } | null
  }

  /** Represents a MultiChoiceQuestionX. */
  class MultiChoiceQuestionX implements IMultiChoiceQuestionX {
    /**
     * Constructs a new MultiChoiceQuestionX.
     * @param [properties] Properties to set
     */
    constructor(properties?: darwincourse.IMultiChoiceQuestionX)

    /** MultiChoiceQuestionX audioId. */
    public audioId: string

    /** MultiChoiceQuestionX introText. */
    public introText: string

    /** MultiChoiceQuestionX text. */
    public text: string

    /** MultiChoiceQuestionX choice. */
    public choice: { [k: string]: darwincourse.IChoice }

    /**
     * Creates a new MultiChoiceQuestionX instance using the specified properties.
     * @param [properties] Properties to set
     * @returns MultiChoiceQuestionX instance
     */
    public static create(
      properties?: darwincourse.IMultiChoiceQuestionX,
    ): darwincourse.MultiChoiceQuestionX

    /**
     * Encodes the specified MultiChoiceQuestionX message. Does not implicitly {@link darwincourse.MultiChoiceQuestionX.verify|verify} messages.
     * @param message MultiChoiceQuestionX message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encode(
      message: darwincourse.IMultiChoiceQuestionX,
      writer?: $protobuf.Writer,
    ): $protobuf.Writer

    /**
     * Encodes the specified MultiChoiceQuestionX message, length delimited. Does not implicitly {@link darwincourse.MultiChoiceQuestionX.verify|verify} messages.
     * @param message MultiChoiceQuestionX message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encodeDelimited(
      message: darwincourse.IMultiChoiceQuestionX,
      writer?: $protobuf.Writer,
    ): $protobuf.Writer

    /**
     * Decodes a MultiChoiceQuestionX message from the specified reader or buffer.
     * @param reader Reader or buffer to decode from
     * @param [length] Message length if known beforehand
     * @returns MultiChoiceQuestionX
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decode(
      reader: $protobuf.Reader | Uint8Array,
      length?: number,
    ): darwincourse.MultiChoiceQuestionX

    /**
     * Decodes a MultiChoiceQuestionX message from the specified reader or buffer, length delimited.
     * @param reader Reader or buffer to decode from
     * @returns MultiChoiceQuestionX
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decodeDelimited(
      reader: $protobuf.Reader | Uint8Array,
    ): darwincourse.MultiChoiceQuestionX

    /**
     * Verifies a MultiChoiceQuestionX message.
     * @param message Plain object to verify
     * @returns `null` if valid, otherwise the reason why it is not
     */
    public static verify(message: { [k: string]: any }): string | null

    /**
     * Creates a MultiChoiceQuestionX message from a plain object. Also converts values to their respective internal types.
     * @param object Plain object
     * @returns MultiChoiceQuestionX
     */
    public static fromObject(object: {
      [k: string]: any
    }): darwincourse.MultiChoiceQuestionX

    /**
     * Creates a plain object from a MultiChoiceQuestionX message. Also converts values to other types if specified.
     * @param message MultiChoiceQuestionX
     * @param [options] Conversion options
     * @returns Plain object
     */
    public static toObject(
      message: darwincourse.MultiChoiceQuestionX,
      options?: $protobuf.IConversionOptions,
    ): { [k: string]: any }

    /**
     * Converts this MultiChoiceQuestionX to JSON.
     * @returns JSON object
     */
    public toJSON(): { [k: string]: any }
  }

  /** Properties of a C2ETranslate. */
  interface IC2ETranslate {
    /** C2ETranslate text */
    text?: string | null

    /** C2ETranslate hint */
    hint?: string[] | null

    /** C2ETranslate answers */
    answers?: string[] | null

    /** C2ETranslate scorePoints */
    scorePoints?: string[] | null
  }

  /** Represents a C2ETranslate. */
  class C2ETranslate implements IC2ETranslate {
    /**
     * Constructs a new C2ETranslate.
     * @param [properties] Properties to set
     */
    constructor(properties?: darwincourse.IC2ETranslate)

    /** C2ETranslate text. */
    public text: string

    /** C2ETranslate hint. */
    public hint: string[]

    /** C2ETranslate answers. */
    public answers: string[]

    /** C2ETranslate scorePoints. */
    public scorePoints: string[]

    /**
     * Creates a new C2ETranslate instance using the specified properties.
     * @param [properties] Properties to set
     * @returns C2ETranslate instance
     */
    public static create(
      properties?: darwincourse.IC2ETranslate,
    ): darwincourse.C2ETranslate

    /**
     * Encodes the specified C2ETranslate message. Does not implicitly {@link darwincourse.C2ETranslate.verify|verify} messages.
     * @param message C2ETranslate message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encode(
      message: darwincourse.IC2ETranslate,
      writer?: $protobuf.Writer,
    ): $protobuf.Writer

    /**
     * Encodes the specified C2ETranslate message, length delimited. Does not implicitly {@link darwincourse.C2ETranslate.verify|verify} messages.
     * @param message C2ETranslate message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encodeDelimited(
      message: darwincourse.IC2ETranslate,
      writer?: $protobuf.Writer,
    ): $protobuf.Writer

    /**
     * Decodes a C2ETranslate message from the specified reader or buffer.
     * @param reader Reader or buffer to decode from
     * @param [length] Message length if known beforehand
     * @returns C2ETranslate
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decode(
      reader: $protobuf.Reader | Uint8Array,
      length?: number,
    ): darwincourse.C2ETranslate

    /**
     * Decodes a C2ETranslate message from the specified reader or buffer, length delimited.
     * @param reader Reader or buffer to decode from
     * @returns C2ETranslate
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decodeDelimited(
      reader: $protobuf.Reader | Uint8Array,
    ): darwincourse.C2ETranslate

    /**
     * Verifies a C2ETranslate message.
     * @param message Plain object to verify
     * @returns `null` if valid, otherwise the reason why it is not
     */
    public static verify(message: { [k: string]: any }): string | null

    /**
     * Creates a C2ETranslate message from a plain object. Also converts values to their respective internal types.
     * @param object Plain object
     * @returns C2ETranslate
     */
    public static fromObject(object: {
      [k: string]: any
    }): darwincourse.C2ETranslate

    /**
     * Creates a plain object from a C2ETranslate message. Also converts values to other types if specified.
     * @param message C2ETranslate
     * @param [options] Conversion options
     * @returns Plain object
     */
    public static toObject(
      message: darwincourse.C2ETranslate,
      options?: $protobuf.IConversionOptions,
    ): { [k: string]: any }

    /**
     * Converts this C2ETranslate to JSON.
     * @returns JSON object
     */
    public toJSON(): { [k: string]: any }
  }

  /** Properties of a SemiSentConstruct. */
  interface ISemiSentConstruct {
    /** SemiSentConstruct vocabs */
    vocabs?: string[] | null

    /** SemiSentConstruct knowledgePoints */
    knowledgePoints?: darwincourse.SemiSentConstruct.IKnowledgePoint[] | null

    /** SemiSentConstruct answers */
    answers?: string[] | null
  }

  /** Represents a SemiSentConstruct. */
  class SemiSentConstruct implements ISemiSentConstruct {
    /**
     * Constructs a new SemiSentConstruct.
     * @param [properties] Properties to set
     */
    constructor(properties?: darwincourse.ISemiSentConstruct)

    /** SemiSentConstruct vocabs. */
    public vocabs: string[]

    /** SemiSentConstruct knowledgePoints. */
    public knowledgePoints: darwincourse.SemiSentConstruct.IKnowledgePoint[]

    /** SemiSentConstruct answers. */
    public answers: string[]

    /**
     * Creates a new SemiSentConstruct instance using the specified properties.
     * @param [properties] Properties to set
     * @returns SemiSentConstruct instance
     */
    public static create(
      properties?: darwincourse.ISemiSentConstruct,
    ): darwincourse.SemiSentConstruct

    /**
     * Encodes the specified SemiSentConstruct message. Does not implicitly {@link darwincourse.SemiSentConstruct.verify|verify} messages.
     * @param message SemiSentConstruct message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encode(
      message: darwincourse.ISemiSentConstruct,
      writer?: $protobuf.Writer,
    ): $protobuf.Writer

    /**
     * Encodes the specified SemiSentConstruct message, length delimited. Does not implicitly {@link darwincourse.SemiSentConstruct.verify|verify} messages.
     * @param message SemiSentConstruct message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encodeDelimited(
      message: darwincourse.ISemiSentConstruct,
      writer?: $protobuf.Writer,
    ): $protobuf.Writer

    /**
     * Decodes a SemiSentConstruct message from the specified reader or buffer.
     * @param reader Reader or buffer to decode from
     * @param [length] Message length if known beforehand
     * @returns SemiSentConstruct
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decode(
      reader: $protobuf.Reader | Uint8Array,
      length?: number,
    ): darwincourse.SemiSentConstruct

    /**
     * Decodes a SemiSentConstruct message from the specified reader or buffer, length delimited.
     * @param reader Reader or buffer to decode from
     * @returns SemiSentConstruct
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decodeDelimited(
      reader: $protobuf.Reader | Uint8Array,
    ): darwincourse.SemiSentConstruct

    /**
     * Verifies a SemiSentConstruct message.
     * @param message Plain object to verify
     * @returns `null` if valid, otherwise the reason why it is not
     */
    public static verify(message: { [k: string]: any }): string | null

    /**
     * Creates a SemiSentConstruct message from a plain object. Also converts values to their respective internal types.
     * @param object Plain object
     * @returns SemiSentConstruct
     */
    public static fromObject(object: {
      [k: string]: any
    }): darwincourse.SemiSentConstruct

    /**
     * Creates a plain object from a SemiSentConstruct message. Also converts values to other types if specified.
     * @param message SemiSentConstruct
     * @param [options] Conversion options
     * @returns Plain object
     */
    public static toObject(
      message: darwincourse.SemiSentConstruct,
      options?: $protobuf.IConversionOptions,
    ): { [k: string]: any }

    /**
     * Converts this SemiSentConstruct to JSON.
     * @returns JSON object
     */
    public toJSON(): { [k: string]: any }
  }

  namespace SemiSentConstruct {
    /** Properties of a KnowledgePoint. */
    interface IKnowledgePoint {
      /** KnowledgePoint label */
      label?: string | null

      /** KnowledgePoint title */
      title?: string | null
    }

    /** Represents a KnowledgePoint. */
    class KnowledgePoint implements IKnowledgePoint {
      /**
       * Constructs a new KnowledgePoint.
       * @param [properties] Properties to set
       */
      constructor(properties?: darwincourse.SemiSentConstruct.IKnowledgePoint)

      /** KnowledgePoint label. */
      public label: string

      /** KnowledgePoint title. */
      public title: string

      /**
       * Creates a new KnowledgePoint instance using the specified properties.
       * @param [properties] Properties to set
       * @returns KnowledgePoint instance
       */
      public static create(
        properties?: darwincourse.SemiSentConstruct.IKnowledgePoint,
      ): darwincourse.SemiSentConstruct.KnowledgePoint

      /**
       * Encodes the specified KnowledgePoint message. Does not implicitly {@link darwincourse.SemiSentConstruct.KnowledgePoint.verify|verify} messages.
       * @param message KnowledgePoint message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encode(
        message: darwincourse.SemiSentConstruct.IKnowledgePoint,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Encodes the specified KnowledgePoint message, length delimited. Does not implicitly {@link darwincourse.SemiSentConstruct.KnowledgePoint.verify|verify} messages.
       * @param message KnowledgePoint message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encodeDelimited(
        message: darwincourse.SemiSentConstruct.IKnowledgePoint,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Decodes a KnowledgePoint message from the specified reader or buffer.
       * @param reader Reader or buffer to decode from
       * @param [length] Message length if known beforehand
       * @returns KnowledgePoint
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decode(
        reader: $protobuf.Reader | Uint8Array,
        length?: number,
      ): darwincourse.SemiSentConstruct.KnowledgePoint

      /**
       * Decodes a KnowledgePoint message from the specified reader or buffer, length delimited.
       * @param reader Reader or buffer to decode from
       * @returns KnowledgePoint
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decodeDelimited(
        reader: $protobuf.Reader | Uint8Array,
      ): darwincourse.SemiSentConstruct.KnowledgePoint

      /**
       * Verifies a KnowledgePoint message.
       * @param message Plain object to verify
       * @returns `null` if valid, otherwise the reason why it is not
       */
      public static verify(message: { [k: string]: any }): string | null

      /**
       * Creates a KnowledgePoint message from a plain object. Also converts values to their respective internal types.
       * @param object Plain object
       * @returns KnowledgePoint
       */
      public static fromObject(object: {
        [k: string]: any
      }): darwincourse.SemiSentConstruct.KnowledgePoint

      /**
       * Creates a plain object from a KnowledgePoint message. Also converts values to other types if specified.
       * @param message KnowledgePoint
       * @param [options] Conversion options
       * @returns Plain object
       */
      public static toObject(
        message: darwincourse.SemiSentConstruct.KnowledgePoint,
        options?: $protobuf.IConversionOptions,
      ): { [k: string]: any }

      /**
       * Converts this KnowledgePoint to JSON.
       * @returns JSON object
       */
      public toJSON(): { [k: string]: any }
    }
  }

  /** Properties of a Matching. */
  interface IMatching {
    /** Matching options */
    options?: darwincourse.Matching.IOption[] | null

    /** Matching instruction */
    instruction?: string | null
  }

  /** Represents a Matching. */
  class Matching implements IMatching {
    /**
     * Constructs a new Matching.
     * @param [properties] Properties to set
     */
    constructor(properties?: darwincourse.IMatching)

    /** Matching options. */
    public options: darwincourse.Matching.IOption[]

    /** Matching instruction. */
    public instruction: string

    /**
     * Creates a new Matching instance using the specified properties.
     * @param [properties] Properties to set
     * @returns Matching instance
     */
    public static create(
      properties?: darwincourse.IMatching,
    ): darwincourse.Matching

    /**
     * Encodes the specified Matching message. Does not implicitly {@link darwincourse.Matching.verify|verify} messages.
     * @param message Matching message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encode(
      message: darwincourse.IMatching,
      writer?: $protobuf.Writer,
    ): $protobuf.Writer

    /**
     * Encodes the specified Matching message, length delimited. Does not implicitly {@link darwincourse.Matching.verify|verify} messages.
     * @param message Matching message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encodeDelimited(
      message: darwincourse.IMatching,
      writer?: $protobuf.Writer,
    ): $protobuf.Writer

    /**
     * Decodes a Matching message from the specified reader or buffer.
     * @param reader Reader or buffer to decode from
     * @param [length] Message length if known beforehand
     * @returns Matching
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decode(
      reader: $protobuf.Reader | Uint8Array,
      length?: number,
    ): darwincourse.Matching

    /**
     * Decodes a Matching message from the specified reader or buffer, length delimited.
     * @param reader Reader or buffer to decode from
     * @returns Matching
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decodeDelimited(
      reader: $protobuf.Reader | Uint8Array,
    ): darwincourse.Matching

    /**
     * Verifies a Matching message.
     * @param message Plain object to verify
     * @returns `null` if valid, otherwise the reason why it is not
     */
    public static verify(message: { [k: string]: any }): string | null

    /**
     * Creates a Matching message from a plain object. Also converts values to their respective internal types.
     * @param object Plain object
     * @returns Matching
     */
    public static fromObject(object: {
      [k: string]: any
    }): darwincourse.Matching

    /**
     * Creates a plain object from a Matching message. Also converts values to other types if specified.
     * @param message Matching
     * @param [options] Conversion options
     * @returns Plain object
     */
    public static toObject(
      message: darwincourse.Matching,
      options?: $protobuf.IConversionOptions,
    ): { [k: string]: any }

    /**
     * Converts this Matching to JSON.
     * @returns JSON object
     */
    public toJSON(): { [k: string]: any }
  }

  namespace Matching {
    /** Properties of an Option. */
    interface IOption {
      /** Option text */
      text?: string | null

      /** Option plainText */
      plainText?: string | null

      /** Option audioId */
      audioId?: string | null
    }

    /** Represents an Option. */
    class Option implements IOption {
      /**
       * Constructs a new Option.
       * @param [properties] Properties to set
       */
      constructor(properties?: darwincourse.Matching.IOption)

      /** Option text. */
      public text: string

      /** Option plainText. */
      public plainText: string

      /** Option audioId. */
      public audioId: string

      /** Option pair. */
      public pair?: 'plainText' | 'audioId'

      /**
       * Creates a new Option instance using the specified properties.
       * @param [properties] Properties to set
       * @returns Option instance
       */
      public static create(
        properties?: darwincourse.Matching.IOption,
      ): darwincourse.Matching.Option

      /**
       * Encodes the specified Option message. Does not implicitly {@link darwincourse.Matching.Option.verify|verify} messages.
       * @param message Option message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encode(
        message: darwincourse.Matching.IOption,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Encodes the specified Option message, length delimited. Does not implicitly {@link darwincourse.Matching.Option.verify|verify} messages.
       * @param message Option message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encodeDelimited(
        message: darwincourse.Matching.IOption,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Decodes an Option message from the specified reader or buffer.
       * @param reader Reader or buffer to decode from
       * @param [length] Message length if known beforehand
       * @returns Option
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decode(
        reader: $protobuf.Reader | Uint8Array,
        length?: number,
      ): darwincourse.Matching.Option

      /**
       * Decodes an Option message from the specified reader or buffer, length delimited.
       * @param reader Reader or buffer to decode from
       * @returns Option
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decodeDelimited(
        reader: $protobuf.Reader | Uint8Array,
      ): darwincourse.Matching.Option

      /**
       * Verifies an Option message.
       * @param message Plain object to verify
       * @returns `null` if valid, otherwise the reason why it is not
       */
      public static verify(message: { [k: string]: any }): string | null

      /**
       * Creates an Option message from a plain object. Also converts values to their respective internal types.
       * @param object Plain object
       * @returns Option
       */
      public static fromObject(object: {
        [k: string]: any
      }): darwincourse.Matching.Option

      /**
       * Creates a plain object from an Option message. Also converts values to other types if specified.
       * @param message Option
       * @param [options] Conversion options
       * @returns Plain object
       */
      public static toObject(
        message: darwincourse.Matching.Option,
        options?: $protobuf.IConversionOptions,
      ): { [k: string]: any }

      /**
       * Converts this Option to JSON.
       * @returns JSON object
       */
      public toJSON(): { [k: string]: any }
    }
  }

  /** Properties of an OpenSpeaking. */
  interface IOpenSpeaking {
    /** OpenSpeaking instruction */
    instruction?: string | null

    /** OpenSpeaking texts */
    texts?: string[] | null

    /** OpenSpeaking hints */
    hints?: string[] | null

    /** OpenSpeaking answers */
    answers?: darwincourse.OpenSpeaking.IAnswer[] | null
  }

  /** Represents an OpenSpeaking. */
  class OpenSpeaking implements IOpenSpeaking {
    /**
     * Constructs a new OpenSpeaking.
     * @param [properties] Properties to set
     */
    constructor(properties?: darwincourse.IOpenSpeaking)

    /** OpenSpeaking instruction. */
    public instruction: string

    /** OpenSpeaking texts. */
    public texts: string[]

    /** OpenSpeaking hints. */
    public hints: string[]

    /** OpenSpeaking answers. */
    public answers: darwincourse.OpenSpeaking.IAnswer[]

    /**
     * Creates a new OpenSpeaking instance using the specified properties.
     * @param [properties] Properties to set
     * @returns OpenSpeaking instance
     */
    public static create(
      properties?: darwincourse.IOpenSpeaking,
    ): darwincourse.OpenSpeaking

    /**
     * Encodes the specified OpenSpeaking message. Does not implicitly {@link darwincourse.OpenSpeaking.verify|verify} messages.
     * @param message OpenSpeaking message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encode(
      message: darwincourse.IOpenSpeaking,
      writer?: $protobuf.Writer,
    ): $protobuf.Writer

    /**
     * Encodes the specified OpenSpeaking message, length delimited. Does not implicitly {@link darwincourse.OpenSpeaking.verify|verify} messages.
     * @param message OpenSpeaking message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encodeDelimited(
      message: darwincourse.IOpenSpeaking,
      writer?: $protobuf.Writer,
    ): $protobuf.Writer

    /**
     * Decodes an OpenSpeaking message from the specified reader or buffer.
     * @param reader Reader or buffer to decode from
     * @param [length] Message length if known beforehand
     * @returns OpenSpeaking
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decode(
      reader: $protobuf.Reader | Uint8Array,
      length?: number,
    ): darwincourse.OpenSpeaking

    /**
     * Decodes an OpenSpeaking message from the specified reader or buffer, length delimited.
     * @param reader Reader or buffer to decode from
     * @returns OpenSpeaking
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decodeDelimited(
      reader: $protobuf.Reader | Uint8Array,
    ): darwincourse.OpenSpeaking

    /**
     * Verifies an OpenSpeaking message.
     * @param message Plain object to verify
     * @returns `null` if valid, otherwise the reason why it is not
     */
    public static verify(message: { [k: string]: any }): string | null

    /**
     * Creates an OpenSpeaking message from a plain object. Also converts values to their respective internal types.
     * @param object Plain object
     * @returns OpenSpeaking
     */
    public static fromObject(object: {
      [k: string]: any
    }): darwincourse.OpenSpeaking

    /**
     * Creates a plain object from an OpenSpeaking message. Also converts values to other types if specified.
     * @param message OpenSpeaking
     * @param [options] Conversion options
     * @returns Plain object
     */
    public static toObject(
      message: darwincourse.OpenSpeaking,
      options?: $protobuf.IConversionOptions,
    ): { [k: string]: any }

    /**
     * Converts this OpenSpeaking to JSON.
     * @returns JSON object
     */
    public toJSON(): { [k: string]: any }
  }

  namespace OpenSpeaking {
    /** Properties of an Answer. */
    interface IAnswer {
      /** Answer richText */
      richText?: string | null

      /** Answer refAnswer */
      refAnswer?: kion.IReferenceAnswerWithScorePoints | null
    }

    /** Represents an Answer. */
    class Answer implements IAnswer {
      /**
       * Constructs a new Answer.
       * @param [properties] Properties to set
       */
      constructor(properties?: darwincourse.OpenSpeaking.IAnswer)

      /** Answer richText. */
      public richText: string

      /** Answer refAnswer. */
      public refAnswer?: kion.IReferenceAnswerWithScorePoints | null

      /**
       * Creates a new Answer instance using the specified properties.
       * @param [properties] Properties to set
       * @returns Answer instance
       */
      public static create(
        properties?: darwincourse.OpenSpeaking.IAnswer,
      ): darwincourse.OpenSpeaking.Answer

      /**
       * Encodes the specified Answer message. Does not implicitly {@link darwincourse.OpenSpeaking.Answer.verify|verify} messages.
       * @param message Answer message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encode(
        message: darwincourse.OpenSpeaking.IAnswer,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Encodes the specified Answer message, length delimited. Does not implicitly {@link darwincourse.OpenSpeaking.Answer.verify|verify} messages.
       * @param message Answer message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encodeDelimited(
        message: darwincourse.OpenSpeaking.IAnswer,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Decodes an Answer message from the specified reader or buffer.
       * @param reader Reader or buffer to decode from
       * @param [length] Message length if known beforehand
       * @returns Answer
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decode(
        reader: $protobuf.Reader | Uint8Array,
        length?: number,
      ): darwincourse.OpenSpeaking.Answer

      /**
       * Decodes an Answer message from the specified reader or buffer, length delimited.
       * @param reader Reader or buffer to decode from
       * @returns Answer
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decodeDelimited(
        reader: $protobuf.Reader | Uint8Array,
      ): darwincourse.OpenSpeaking.Answer

      /**
       * Verifies an Answer message.
       * @param message Plain object to verify
       * @returns `null` if valid, otherwise the reason why it is not
       */
      public static verify(message: { [k: string]: any }): string | null

      /**
       * Creates an Answer message from a plain object. Also converts values to their respective internal types.
       * @param object Plain object
       * @returns Answer
       */
      public static fromObject(object: {
        [k: string]: any
      }): darwincourse.OpenSpeaking.Answer

      /**
       * Creates a plain object from an Answer message. Also converts values to other types if specified.
       * @param message Answer
       * @param [options] Conversion options
       * @returns Plain object
       */
      public static toObject(
        message: darwincourse.OpenSpeaking.Answer,
        options?: $protobuf.IConversionOptions,
      ): { [k: string]: any }

      /**
       * Converts this Answer to JSON.
       * @returns JSON object
       */
      public toJSON(): { [k: string]: any }
    }
  }

  /** Properties of a C2CWarmUp. */
  interface IC2CWarmUp {
    /** C2CWarmUp words */
    words?: darwincourse.C2CWarmUp.IContent[] | null

    /** C2CWarmUp sentences */
    sentences?: darwincourse.C2CWarmUp.IContent[] | null

    /** C2CWarmUp role */
    role?: number | null
  }

  /** Represents a C2CWarmUp. */
  class C2CWarmUp implements IC2CWarmUp {
    /**
     * Constructs a new C2CWarmUp.
     * @param [properties] Properties to set
     */
    constructor(properties?: darwincourse.IC2CWarmUp)

    /** C2CWarmUp words. */
    public words: darwincourse.C2CWarmUp.IContent[]

    /** C2CWarmUp sentences. */
    public sentences: darwincourse.C2CWarmUp.IContent[]

    /** C2CWarmUp role. */
    public role: number

    /**
     * Creates a new C2CWarmUp instance using the specified properties.
     * @param [properties] Properties to set
     * @returns C2CWarmUp instance
     */
    public static create(
      properties?: darwincourse.IC2CWarmUp,
    ): darwincourse.C2CWarmUp

    /**
     * Encodes the specified C2CWarmUp message. Does not implicitly {@link darwincourse.C2CWarmUp.verify|verify} messages.
     * @param message C2CWarmUp message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encode(
      message: darwincourse.IC2CWarmUp,
      writer?: $protobuf.Writer,
    ): $protobuf.Writer

    /**
     * Encodes the specified C2CWarmUp message, length delimited. Does not implicitly {@link darwincourse.C2CWarmUp.verify|verify} messages.
     * @param message C2CWarmUp message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encodeDelimited(
      message: darwincourse.IC2CWarmUp,
      writer?: $protobuf.Writer,
    ): $protobuf.Writer

    /**
     * Decodes a C2CWarmUp message from the specified reader or buffer.
     * @param reader Reader or buffer to decode from
     * @param [length] Message length if known beforehand
     * @returns C2CWarmUp
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decode(
      reader: $protobuf.Reader | Uint8Array,
      length?: number,
    ): darwincourse.C2CWarmUp

    /**
     * Decodes a C2CWarmUp message from the specified reader or buffer, length delimited.
     * @param reader Reader or buffer to decode from
     * @returns C2CWarmUp
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decodeDelimited(
      reader: $protobuf.Reader | Uint8Array,
    ): darwincourse.C2CWarmUp

    /**
     * Verifies a C2CWarmUp message.
     * @param message Plain object to verify
     * @returns `null` if valid, otherwise the reason why it is not
     */
    public static verify(message: { [k: string]: any }): string | null

    /**
     * Creates a C2CWarmUp message from a plain object. Also converts values to their respective internal types.
     * @param object Plain object
     * @returns C2CWarmUp
     */
    public static fromObject(object: {
      [k: string]: any
    }): darwincourse.C2CWarmUp

    /**
     * Creates a plain object from a C2CWarmUp message. Also converts values to other types if specified.
     * @param message C2CWarmUp
     * @param [options] Conversion options
     * @returns Plain object
     */
    public static toObject(
      message: darwincourse.C2CWarmUp,
      options?: $protobuf.IConversionOptions,
    ): { [k: string]: any }

    /**
     * Converts this C2CWarmUp to JSON.
     * @returns JSON object
     */
    public toJSON(): { [k: string]: any }
  }

  namespace C2CWarmUp {
    /** Properties of a Content. */
    interface IContent {
      /** Content audioId */
      audioId?: string | null

      /** Content translation */
      translation?: string | null
    }

    /** Represents a Content. */
    class Content implements IContent {
      /**
       * Constructs a new Content.
       * @param [properties] Properties to set
       */
      constructor(properties?: darwincourse.C2CWarmUp.IContent)

      /** Content audioId. */
      public audioId: string

      /** Content translation. */
      public translation: string

      /**
       * Creates a new Content instance using the specified properties.
       * @param [properties] Properties to set
       * @returns Content instance
       */
      public static create(
        properties?: darwincourse.C2CWarmUp.IContent,
      ): darwincourse.C2CWarmUp.Content

      /**
       * Encodes the specified Content message. Does not implicitly {@link darwincourse.C2CWarmUp.Content.verify|verify} messages.
       * @param message Content message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encode(
        message: darwincourse.C2CWarmUp.IContent,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Encodes the specified Content message, length delimited. Does not implicitly {@link darwincourse.C2CWarmUp.Content.verify|verify} messages.
       * @param message Content message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encodeDelimited(
        message: darwincourse.C2CWarmUp.IContent,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Decodes a Content message from the specified reader or buffer.
       * @param reader Reader or buffer to decode from
       * @param [length] Message length if known beforehand
       * @returns Content
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decode(
        reader: $protobuf.Reader | Uint8Array,
        length?: number,
      ): darwincourse.C2CWarmUp.Content

      /**
       * Decodes a Content message from the specified reader or buffer, length delimited.
       * @param reader Reader or buffer to decode from
       * @returns Content
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decodeDelimited(
        reader: $protobuf.Reader | Uint8Array,
      ): darwincourse.C2CWarmUp.Content

      /**
       * Verifies a Content message.
       * @param message Plain object to verify
       * @returns `null` if valid, otherwise the reason why it is not
       */
      public static verify(message: { [k: string]: any }): string | null

      /**
       * Creates a Content message from a plain object. Also converts values to their respective internal types.
       * @param object Plain object
       * @returns Content
       */
      public static fromObject(object: {
        [k: string]: any
      }): darwincourse.C2CWarmUp.Content

      /**
       * Creates a plain object from a Content message. Also converts values to other types if specified.
       * @param message Content
       * @param [options] Conversion options
       * @returns Plain object
       */
      public static toObject(
        message: darwincourse.C2CWarmUp.Content,
        options?: $protobuf.IConversionOptions,
      ): { [k: string]: any }

      /**
       * Converts this Content to JSON.
       * @returns JSON object
       */
      public toJSON(): { [k: string]: any }
    }
  }

  /** Properties of a C2CChoose. */
  interface IC2CChoose {
    /** C2CChoose taskType */
    taskType?: string | null

    /** C2CChoose taskTitle */
    taskTitle?: string | null

    /** C2CChoose infoInstruction */
    infoInstruction?: string | null

    /** C2CChoose picId */
    picId?: string | null

    /** C2CChoose taskRef */
    taskRef?: string | null

    /** C2CChoose stemText */
    stemText?: string | null

    /** C2CChoose answers */
    answers?: darwincourse.C2CChoose.IAnswer[] | null

    /** C2CChoose role */
    role?: number | null

    /** C2CChoose hint */
    hint?: string | null
  }

  /** Represents a C2CChoose. */
  class C2CChoose implements IC2CChoose {
    /**
     * Constructs a new C2CChoose.
     * @param [properties] Properties to set
     */
    constructor(properties?: darwincourse.IC2CChoose)

    /** C2CChoose taskType. */
    public taskType: string

    /** C2CChoose taskTitle. */
    public taskTitle: string

    /** C2CChoose infoInstruction. */
    public infoInstruction: string

    /** C2CChoose picId. */
    public picId: string

    /** C2CChoose taskRef. */
    public taskRef: string

    /** C2CChoose stemText. */
    public stemText: string

    /** C2CChoose answers. */
    public answers: darwincourse.C2CChoose.IAnswer[]

    /** C2CChoose role. */
    public role: number

    /** C2CChoose hint. */
    public hint: string

    /**
     * Creates a new C2CChoose instance using the specified properties.
     * @param [properties] Properties to set
     * @returns C2CChoose instance
     */
    public static create(
      properties?: darwincourse.IC2CChoose,
    ): darwincourse.C2CChoose

    /**
     * Encodes the specified C2CChoose message. Does not implicitly {@link darwincourse.C2CChoose.verify|verify} messages.
     * @param message C2CChoose message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encode(
      message: darwincourse.IC2CChoose,
      writer?: $protobuf.Writer,
    ): $protobuf.Writer

    /**
     * Encodes the specified C2CChoose message, length delimited. Does not implicitly {@link darwincourse.C2CChoose.verify|verify} messages.
     * @param message C2CChoose message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encodeDelimited(
      message: darwincourse.IC2CChoose,
      writer?: $protobuf.Writer,
    ): $protobuf.Writer

    /**
     * Decodes a C2CChoose message from the specified reader or buffer.
     * @param reader Reader or buffer to decode from
     * @param [length] Message length if known beforehand
     * @returns C2CChoose
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decode(
      reader: $protobuf.Reader | Uint8Array,
      length?: number,
    ): darwincourse.C2CChoose

    /**
     * Decodes a C2CChoose message from the specified reader or buffer, length delimited.
     * @param reader Reader or buffer to decode from
     * @returns C2CChoose
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decodeDelimited(
      reader: $protobuf.Reader | Uint8Array,
    ): darwincourse.C2CChoose

    /**
     * Verifies a C2CChoose message.
     * @param message Plain object to verify
     * @returns `null` if valid, otherwise the reason why it is not
     */
    public static verify(message: { [k: string]: any }): string | null

    /**
     * Creates a C2CChoose message from a plain object. Also converts values to their respective internal types.
     * @param object Plain object
     * @returns C2CChoose
     */
    public static fromObject(object: {
      [k: string]: any
    }): darwincourse.C2CChoose

    /**
     * Creates a plain object from a C2CChoose message. Also converts values to other types if specified.
     * @param message C2CChoose
     * @param [options] Conversion options
     * @returns Plain object
     */
    public static toObject(
      message: darwincourse.C2CChoose,
      options?: $protobuf.IConversionOptions,
    ): { [k: string]: any }

    /**
     * Converts this C2CChoose to JSON.
     * @returns JSON object
     */
    public toJSON(): { [k: string]: any }
  }

  namespace C2CChoose {
    /** Properties of an Answer. */
    interface IAnswer {
      /** Answer text */
      text?: string | null

      /** Answer checked */
      checked?: boolean | null
    }

    /** Represents an Answer. */
    class Answer implements IAnswer {
      /**
       * Constructs a new Answer.
       * @param [properties] Properties to set
       */
      constructor(properties?: darwincourse.C2CChoose.IAnswer)

      /** Answer text. */
      public text: string

      /** Answer checked. */
      public checked: boolean

      /**
       * Creates a new Answer instance using the specified properties.
       * @param [properties] Properties to set
       * @returns Answer instance
       */
      public static create(
        properties?: darwincourse.C2CChoose.IAnswer,
      ): darwincourse.C2CChoose.Answer

      /**
       * Encodes the specified Answer message. Does not implicitly {@link darwincourse.C2CChoose.Answer.verify|verify} messages.
       * @param message Answer message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encode(
        message: darwincourse.C2CChoose.IAnswer,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Encodes the specified Answer message, length delimited. Does not implicitly {@link darwincourse.C2CChoose.Answer.verify|verify} messages.
       * @param message Answer message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encodeDelimited(
        message: darwincourse.C2CChoose.IAnswer,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Decodes an Answer message from the specified reader or buffer.
       * @param reader Reader or buffer to decode from
       * @param [length] Message length if known beforehand
       * @returns Answer
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decode(
        reader: $protobuf.Reader | Uint8Array,
        length?: number,
      ): darwincourse.C2CChoose.Answer

      /**
       * Decodes an Answer message from the specified reader or buffer, length delimited.
       * @param reader Reader or buffer to decode from
       * @returns Answer
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decodeDelimited(
        reader: $protobuf.Reader | Uint8Array,
      ): darwincourse.C2CChoose.Answer

      /**
       * Verifies an Answer message.
       * @param message Plain object to verify
       * @returns `null` if valid, otherwise the reason why it is not
       */
      public static verify(message: { [k: string]: any }): string | null

      /**
       * Creates an Answer message from a plain object. Also converts values to their respective internal types.
       * @param object Plain object
       * @returns Answer
       */
      public static fromObject(object: {
        [k: string]: any
      }): darwincourse.C2CChoose.Answer

      /**
       * Creates a plain object from an Answer message. Also converts values to other types if specified.
       * @param message Answer
       * @param [options] Conversion options
       * @returns Plain object
       */
      public static toObject(
        message: darwincourse.C2CChoose.Answer,
        options?: $protobuf.IConversionOptions,
      ): { [k: string]: any }

      /**
       * Converts this Answer to JSON.
       * @returns JSON object
       */
      public toJSON(): { [k: string]: any }
    }
  }

  /** Properties of a PresAudio. */
  interface IPresAudio {
    /** PresAudio displayFormat */
    displayFormat?: core_course.IPBDisplayFormat | null

    /** PresAudio displayFormatItems */
    displayFormatItems?: core_course.IPBDisplayFormatItem[] | null

    /** PresAudio audioElements */
    audioElements?: core_course.IPBAudioElement[] | null
  }

  /** Represents a PresAudio. */
  class PresAudio implements IPresAudio {
    /**
     * Constructs a new PresAudio.
     * @param [properties] Properties to set
     */
    constructor(properties?: darwincourse.IPresAudio)

    /** PresAudio displayFormat. */
    public displayFormat?: core_course.IPBDisplayFormat | null

    /** PresAudio displayFormatItems. */
    public displayFormatItems: core_course.IPBDisplayFormatItem[]

    /** PresAudio audioElements. */
    public audioElements: core_course.IPBAudioElement[]

    /**
     * Creates a new PresAudio instance using the specified properties.
     * @param [properties] Properties to set
     * @returns PresAudio instance
     */
    public static create(
      properties?: darwincourse.IPresAudio,
    ): darwincourse.PresAudio

    /**
     * Encodes the specified PresAudio message. Does not implicitly {@link darwincourse.PresAudio.verify|verify} messages.
     * @param message PresAudio message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encode(
      message: darwincourse.IPresAudio,
      writer?: $protobuf.Writer,
    ): $protobuf.Writer

    /**
     * Encodes the specified PresAudio message, length delimited. Does not implicitly {@link darwincourse.PresAudio.verify|verify} messages.
     * @param message PresAudio message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encodeDelimited(
      message: darwincourse.IPresAudio,
      writer?: $protobuf.Writer,
    ): $protobuf.Writer

    /**
     * Decodes a PresAudio message from the specified reader or buffer.
     * @param reader Reader or buffer to decode from
     * @param [length] Message length if known beforehand
     * @returns PresAudio
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decode(
      reader: $protobuf.Reader | Uint8Array,
      length?: number,
    ): darwincourse.PresAudio

    /**
     * Decodes a PresAudio message from the specified reader or buffer, length delimited.
     * @param reader Reader or buffer to decode from
     * @returns PresAudio
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decodeDelimited(
      reader: $protobuf.Reader | Uint8Array,
    ): darwincourse.PresAudio

    /**
     * Verifies a PresAudio message.
     * @param message Plain object to verify
     * @returns `null` if valid, otherwise the reason why it is not
     */
    public static verify(message: { [k: string]: any }): string | null

    /**
     * Creates a PresAudio message from a plain object. Also converts values to their respective internal types.
     * @param object Plain object
     * @returns PresAudio
     */
    public static fromObject(object: {
      [k: string]: any
    }): darwincourse.PresAudio

    /**
     * Creates a plain object from a PresAudio message. Also converts values to other types if specified.
     * @param message PresAudio
     * @param [options] Conversion options
     * @returns Plain object
     */
    public static toObject(
      message: darwincourse.PresAudio,
      options?: $protobuf.IConversionOptions,
    ): { [k: string]: any }

    /**
     * Converts this PresAudio to JSON.
     * @returns JSON object
     */
    public toJSON(): { [k: string]: any }
  }

  /** Properties of a PresVideo. */
  interface IPresVideo {
    /** PresVideo videoElement */
    videoElement?: core_course.IPBVideoElement | null
  }

  /** Represents a PresVideo. */
  class PresVideo implements IPresVideo {
    /**
     * Constructs a new PresVideo.
     * @param [properties] Properties to set
     */
    constructor(properties?: darwincourse.IPresVideo)

    /** PresVideo videoElement. */
    public videoElement?: core_course.IPBVideoElement | null

    /**
     * Creates a new PresVideo instance using the specified properties.
     * @param [properties] Properties to set
     * @returns PresVideo instance
     */
    public static create(
      properties?: darwincourse.IPresVideo,
    ): darwincourse.PresVideo

    /**
     * Encodes the specified PresVideo message. Does not implicitly {@link darwincourse.PresVideo.verify|verify} messages.
     * @param message PresVideo message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encode(
      message: darwincourse.IPresVideo,
      writer?: $protobuf.Writer,
    ): $protobuf.Writer

    /**
     * Encodes the specified PresVideo message, length delimited. Does not implicitly {@link darwincourse.PresVideo.verify|verify} messages.
     * @param message PresVideo message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encodeDelimited(
      message: darwincourse.IPresVideo,
      writer?: $protobuf.Writer,
    ): $protobuf.Writer

    /**
     * Decodes a PresVideo message from the specified reader or buffer.
     * @param reader Reader or buffer to decode from
     * @param [length] Message length if known beforehand
     * @returns PresVideo
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decode(
      reader: $protobuf.Reader | Uint8Array,
      length?: number,
    ): darwincourse.PresVideo

    /**
     * Decodes a PresVideo message from the specified reader or buffer, length delimited.
     * @param reader Reader or buffer to decode from
     * @returns PresVideo
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decodeDelimited(
      reader: $protobuf.Reader | Uint8Array,
    ): darwincourse.PresVideo

    /**
     * Verifies a PresVideo message.
     * @param message Plain object to verify
     * @returns `null` if valid, otherwise the reason why it is not
     */
    public static verify(message: { [k: string]: any }): string | null

    /**
     * Creates a PresVideo message from a plain object. Also converts values to their respective internal types.
     * @param object Plain object
     * @returns PresVideo
     */
    public static fromObject(object: {
      [k: string]: any
    }): darwincourse.PresVideo

    /**
     * Creates a plain object from a PresVideo message. Also converts values to other types if specified.
     * @param message PresVideo
     * @param [options] Conversion options
     * @returns Plain object
     */
    public static toObject(
      message: darwincourse.PresVideo,
      options?: $protobuf.IConversionOptions,
    ): { [k: string]: any }

    /**
     * Converts this PresVideo to JSON.
     * @returns JSON object
     */
    public toJSON(): { [k: string]: any }
  }

  /** Properties of a PresReading. */
  interface IPresReading {
    /** PresReading passage */
    passage?: core_course.IPBPassage | null
  }

  /** Represents a PresReading. */
  class PresReading implements IPresReading {
    /**
     * Constructs a new PresReading.
     * @param [properties] Properties to set
     */
    constructor(properties?: darwincourse.IPresReading)

    /** PresReading passage. */
    public passage?: core_course.IPBPassage | null

    /**
     * Creates a new PresReading instance using the specified properties.
     * @param [properties] Properties to set
     * @returns PresReading instance
     */
    public static create(
      properties?: darwincourse.IPresReading,
    ): darwincourse.PresReading

    /**
     * Encodes the specified PresReading message. Does not implicitly {@link darwincourse.PresReading.verify|verify} messages.
     * @param message PresReading message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encode(
      message: darwincourse.IPresReading,
      writer?: $protobuf.Writer,
    ): $protobuf.Writer

    /**
     * Encodes the specified PresReading message, length delimited. Does not implicitly {@link darwincourse.PresReading.verify|verify} messages.
     * @param message PresReading message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encodeDelimited(
      message: darwincourse.IPresReading,
      writer?: $protobuf.Writer,
    ): $protobuf.Writer

    /**
     * Decodes a PresReading message from the specified reader or buffer.
     * @param reader Reader or buffer to decode from
     * @param [length] Message length if known beforehand
     * @returns PresReading
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decode(
      reader: $protobuf.Reader | Uint8Array,
      length?: number,
    ): darwincourse.PresReading

    /**
     * Decodes a PresReading message from the specified reader or buffer, length delimited.
     * @param reader Reader or buffer to decode from
     * @returns PresReading
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decodeDelimited(
      reader: $protobuf.Reader | Uint8Array,
    ): darwincourse.PresReading

    /**
     * Verifies a PresReading message.
     * @param message Plain object to verify
     * @returns `null` if valid, otherwise the reason why it is not
     */
    public static verify(message: { [k: string]: any }): string | null

    /**
     * Creates a PresReading message from a plain object. Also converts values to their respective internal types.
     * @param object Plain object
     * @returns PresReading
     */
    public static fromObject(object: {
      [k: string]: any
    }): darwincourse.PresReading

    /**
     * Creates a plain object from a PresReading message. Also converts values to other types if specified.
     * @param message PresReading
     * @param [options] Conversion options
     * @returns Plain object
     */
    public static toObject(
      message: darwincourse.PresReading,
      options?: $protobuf.IConversionOptions,
    ): { [k: string]: any }

    /**
     * Converts this PresReading to JSON.
     * @returns JSON object
     */
    public toJSON(): { [k: string]: any }
  }

  /** Properties of a PresDialoguePlay. */
  interface IPresDialoguePlay {
    /** PresDialoguePlay dialoguePlay */
    dialoguePlay?: core_course.IPBDialoguePlay | null
  }

  /** Represents a PresDialoguePlay. */
  class PresDialoguePlay implements IPresDialoguePlay {
    /**
     * Constructs a new PresDialoguePlay.
     * @param [properties] Properties to set
     */
    constructor(properties?: darwincourse.IPresDialoguePlay)

    /** PresDialoguePlay dialoguePlay. */
    public dialoguePlay?: core_course.IPBDialoguePlay | null

    /**
     * Creates a new PresDialoguePlay instance using the specified properties.
     * @param [properties] Properties to set
     * @returns PresDialoguePlay instance
     */
    public static create(
      properties?: darwincourse.IPresDialoguePlay,
    ): darwincourse.PresDialoguePlay

    /**
     * Encodes the specified PresDialoguePlay message. Does not implicitly {@link darwincourse.PresDialoguePlay.verify|verify} messages.
     * @param message PresDialoguePlay message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encode(
      message: darwincourse.IPresDialoguePlay,
      writer?: $protobuf.Writer,
    ): $protobuf.Writer

    /**
     * Encodes the specified PresDialoguePlay message, length delimited. Does not implicitly {@link darwincourse.PresDialoguePlay.verify|verify} messages.
     * @param message PresDialoguePlay message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encodeDelimited(
      message: darwincourse.IPresDialoguePlay,
      writer?: $protobuf.Writer,
    ): $protobuf.Writer

    /**
     * Decodes a PresDialoguePlay message from the specified reader or buffer.
     * @param reader Reader or buffer to decode from
     * @param [length] Message length if known beforehand
     * @returns PresDialoguePlay
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decode(
      reader: $protobuf.Reader | Uint8Array,
      length?: number,
    ): darwincourse.PresDialoguePlay

    /**
     * Decodes a PresDialoguePlay message from the specified reader or buffer, length delimited.
     * @param reader Reader or buffer to decode from
     * @returns PresDialoguePlay
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decodeDelimited(
      reader: $protobuf.Reader | Uint8Array,
    ): darwincourse.PresDialoguePlay

    /**
     * Verifies a PresDialoguePlay message.
     * @param message Plain object to verify
     * @returns `null` if valid, otherwise the reason why it is not
     */
    public static verify(message: { [k: string]: any }): string | null

    /**
     * Creates a PresDialoguePlay message from a plain object. Also converts values to their respective internal types.
     * @param object Plain object
     * @returns PresDialoguePlay
     */
    public static fromObject(object: {
      [k: string]: any
    }): darwincourse.PresDialoguePlay

    /**
     * Creates a plain object from a PresDialoguePlay message. Also converts values to other types if specified.
     * @param message PresDialoguePlay
     * @param [options] Conversion options
     * @returns Plain object
     */
    public static toObject(
      message: darwincourse.PresDialoguePlay,
      options?: $protobuf.IConversionOptions,
    ): { [k: string]: any }

    /**
     * Converts this PresDialoguePlay to JSON.
     * @returns JSON object
     */
    public toJSON(): { [k: string]: any }
  }

  /** Properties of a PresTextTeaching. */
  interface IPresTextTeaching {
    /** PresTextTeaching textTeaching */
    textTeaching?: core_course.IPBTextTeaching | null
  }

  /** Represents a PresTextTeaching. */
  class PresTextTeaching implements IPresTextTeaching {
    /**
     * Constructs a new PresTextTeaching.
     * @param [properties] Properties to set
     */
    constructor(properties?: darwincourse.IPresTextTeaching)

    /** PresTextTeaching textTeaching. */
    public textTeaching?: core_course.IPBTextTeaching | null

    /**
     * Creates a new PresTextTeaching instance using the specified properties.
     * @param [properties] Properties to set
     * @returns PresTextTeaching instance
     */
    public static create(
      properties?: darwincourse.IPresTextTeaching,
    ): darwincourse.PresTextTeaching

    /**
     * Encodes the specified PresTextTeaching message. Does not implicitly {@link darwincourse.PresTextTeaching.verify|verify} messages.
     * @param message PresTextTeaching message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encode(
      message: darwincourse.IPresTextTeaching,
      writer?: $protobuf.Writer,
    ): $protobuf.Writer

    /**
     * Encodes the specified PresTextTeaching message, length delimited. Does not implicitly {@link darwincourse.PresTextTeaching.verify|verify} messages.
     * @param message PresTextTeaching message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encodeDelimited(
      message: darwincourse.IPresTextTeaching,
      writer?: $protobuf.Writer,
    ): $protobuf.Writer

    /**
     * Decodes a PresTextTeaching message from the specified reader or buffer.
     * @param reader Reader or buffer to decode from
     * @param [length] Message length if known beforehand
     * @returns PresTextTeaching
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decode(
      reader: $protobuf.Reader | Uint8Array,
      length?: number,
    ): darwincourse.PresTextTeaching

    /**
     * Decodes a PresTextTeaching message from the specified reader or buffer, length delimited.
     * @param reader Reader or buffer to decode from
     * @returns PresTextTeaching
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decodeDelimited(
      reader: $protobuf.Reader | Uint8Array,
    ): darwincourse.PresTextTeaching

    /**
     * Verifies a PresTextTeaching message.
     * @param message Plain object to verify
     * @returns `null` if valid, otherwise the reason why it is not
     */
    public static verify(message: { [k: string]: any }): string | null

    /**
     * Creates a PresTextTeaching message from a plain object. Also converts values to their respective internal types.
     * @param object Plain object
     * @returns PresTextTeaching
     */
    public static fromObject(object: {
      [k: string]: any
    }): darwincourse.PresTextTeaching

    /**
     * Creates a plain object from a PresTextTeaching message. Also converts values to other types if specified.
     * @param message PresTextTeaching
     * @param [options] Conversion options
     * @returns Plain object
     */
    public static toObject(
      message: darwincourse.PresTextTeaching,
      options?: $protobuf.IConversionOptions,
    ): { [k: string]: any }

    /**
     * Converts this PresTextTeaching to JSON.
     * @returns JSON object
     */
    public toJSON(): { [k: string]: any }
  }
}

/** Namespace dolemgo. */
export namespace dolemgo {
  /** Namespace scorer. */
  namespace scorer {
    /** Properties of a DeliteScore. */
    interface IDeliteScore {
      /** DeliteScore delemgoScore */
      delemgoScore?: dolemgo.scorer.IScore | null

      /** DeliteScore telisScore */
      telisScore?: telis.IScore | null

      /** DeliteScore readaloudScore */
      readaloudScore?: readaloud.IScore | null

      /** DeliteScore kind */
      kind?: dolemgo.scorer.Score.StorageKind | null

      /** DeliteScore uri */
      uri?: string | null
    }

    /** Represents a DeliteScore. */
    class DeliteScore implements IDeliteScore {
      /**
       * Constructs a new DeliteScore.
       * @param [properties] Properties to set
       */
      constructor(properties?: dolemgo.scorer.IDeliteScore)

      /** DeliteScore delemgoScore. */
      public delemgoScore?: dolemgo.scorer.IScore | null

      /** DeliteScore telisScore. */
      public telisScore?: telis.IScore | null

      /** DeliteScore readaloudScore. */
      public readaloudScore?: readaloud.IScore | null

      /** DeliteScore kind. */
      public kind: dolemgo.scorer.Score.StorageKind

      /** DeliteScore uri. */
      public uri: string

      /** DeliteScore score. */
      public score?: 'delemgoScore' | 'telisScore' | 'readaloudScore'

      /**
       * Creates a new DeliteScore instance using the specified properties.
       * @param [properties] Properties to set
       * @returns DeliteScore instance
       */
      public static create(
        properties?: dolemgo.scorer.IDeliteScore,
      ): dolemgo.scorer.DeliteScore

      /**
       * Encodes the specified DeliteScore message. Does not implicitly {@link dolemgo.scorer.DeliteScore.verify|verify} messages.
       * @param message DeliteScore message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encode(
        message: dolemgo.scorer.IDeliteScore,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Encodes the specified DeliteScore message, length delimited. Does not implicitly {@link dolemgo.scorer.DeliteScore.verify|verify} messages.
       * @param message DeliteScore message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encodeDelimited(
        message: dolemgo.scorer.IDeliteScore,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Decodes a DeliteScore message from the specified reader or buffer.
       * @param reader Reader or buffer to decode from
       * @param [length] Message length if known beforehand
       * @returns DeliteScore
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decode(
        reader: $protobuf.Reader | Uint8Array,
        length?: number,
      ): dolemgo.scorer.DeliteScore

      /**
       * Decodes a DeliteScore message from the specified reader or buffer, length delimited.
       * @param reader Reader or buffer to decode from
       * @returns DeliteScore
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decodeDelimited(
        reader: $protobuf.Reader | Uint8Array,
      ): dolemgo.scorer.DeliteScore

      /**
       * Verifies a DeliteScore message.
       * @param message Plain object to verify
       * @returns `null` if valid, otherwise the reason why it is not
       */
      public static verify(message: { [k: string]: any }): string | null

      /**
       * Creates a DeliteScore message from a plain object. Also converts values to their respective internal types.
       * @param object Plain object
       * @returns DeliteScore
       */
      public static fromObject(object: {
        [k: string]: any
      }): dolemgo.scorer.DeliteScore

      /**
       * Creates a plain object from a DeliteScore message. Also converts values to other types if specified.
       * @param message DeliteScore
       * @param [options] Conversion options
       * @returns Plain object
       */
      public static toObject(
        message: dolemgo.scorer.DeliteScore,
        options?: $protobuf.IConversionOptions,
      ): { [k: string]: any }

      /**
       * Converts this DeliteScore to JSON.
       * @returns JSON object
       */
      public toJSON(): { [k: string]: any }
    }

    /** Properties of a Score. */
    interface IScore {
      /** Score version */
      version?: string | null

      /** Score locale */
      locale?: string | null

      /** Score amVersion */
      amVersion?: string | null

      /** Score smVersion */
      smVersion?: string | null

      /** Score snr */
      snr?: string | null

      /** Score silProb */
      silProb?: string | null

      /** Score overall */
      overall?: number | null

      /** Score pronunciation */
      pronunciation?: number | null

      /** Score avgkws */
      avgkws?: number | null

      /** Score tempo */
      tempo?: number | null

      /** Score stress */
      stress?: number | null

      /** Score intonation */
      intonation?: number | null

      /** Score accuracy */
      accuracy?: number | null

      /** Score integrity */
      integrity?: number | null

      /** Score confidence */
      confidence?: number | null

      /** Score fluency */
      fluency?: number | null

      /** Score words */
      words?: dolemgo.scorer.Score.IWordScore[] | null

      /** Score serviceType */
      serviceType?: string | null

      /** Score storageKind */
      storageKind?: dolemgo.scorer.Score.StorageKind | null

      /** Score userAudioUri */
      userAudioUri?: string | null
    }

    /** Represents a Score. */
    class Score implements IScore {
      /**
       * Constructs a new Score.
       * @param [properties] Properties to set
       */
      constructor(properties?: dolemgo.scorer.IScore)

      /** Score version. */
      public version: string

      /** Score locale. */
      public locale: string

      /** Score amVersion. */
      public amVersion: string

      /** Score smVersion. */
      public smVersion: string

      /** Score snr. */
      public snr: string

      /** Score silProb. */
      public silProb: string

      /** Score overall. */
      public overall: number

      /** Score pronunciation. */
      public pronunciation: number

      /** Score avgkws. */
      public avgkws: number

      /** Score tempo. */
      public tempo: number

      /** Score stress. */
      public stress: number

      /** Score intonation. */
      public intonation: number

      /** Score accuracy. */
      public accuracy: number

      /** Score integrity. */
      public integrity: number

      /** Score confidence. */
      public confidence: number

      /** Score fluency. */
      public fluency: number

      /** Score words. */
      public words: dolemgo.scorer.Score.IWordScore[]

      /** Score serviceType. */
      public serviceType: string

      /** Score storageKind. */
      public storageKind: dolemgo.scorer.Score.StorageKind

      /** Score userAudioUri. */
      public userAudioUri: string

      /**
       * Creates a new Score instance using the specified properties.
       * @param [properties] Properties to set
       * @returns Score instance
       */
      public static create(
        properties?: dolemgo.scorer.IScore,
      ): dolemgo.scorer.Score

      /**
       * Encodes the specified Score message. Does not implicitly {@link dolemgo.scorer.Score.verify|verify} messages.
       * @param message Score message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encode(
        message: dolemgo.scorer.IScore,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Encodes the specified Score message, length delimited. Does not implicitly {@link dolemgo.scorer.Score.verify|verify} messages.
       * @param message Score message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encodeDelimited(
        message: dolemgo.scorer.IScore,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Decodes a Score message from the specified reader or buffer.
       * @param reader Reader or buffer to decode from
       * @param [length] Message length if known beforehand
       * @returns Score
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decode(
        reader: $protobuf.Reader | Uint8Array,
        length?: number,
      ): dolemgo.scorer.Score

      /**
       * Decodes a Score message from the specified reader or buffer, length delimited.
       * @param reader Reader or buffer to decode from
       * @returns Score
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decodeDelimited(
        reader: $protobuf.Reader | Uint8Array,
      ): dolemgo.scorer.Score

      /**
       * Verifies a Score message.
       * @param message Plain object to verify
       * @returns `null` if valid, otherwise the reason why it is not
       */
      public static verify(message: { [k: string]: any }): string | null

      /**
       * Creates a Score message from a plain object. Also converts values to their respective internal types.
       * @param object Plain object
       * @returns Score
       */
      public static fromObject(object: {
        [k: string]: any
      }): dolemgo.scorer.Score

      /**
       * Creates a plain object from a Score message. Also converts values to other types if specified.
       * @param message Score
       * @param [options] Conversion options
       * @returns Plain object
       */
      public static toObject(
        message: dolemgo.scorer.Score,
        options?: $protobuf.IConversionOptions,
      ): { [k: string]: any }

      /**
       * Converts this Score to JSON.
       * @returns JSON object
       */
      public toJSON(): { [k: string]: any }
    }

    namespace Score {
      /** Properties of a WordScoreDetail. */
      interface IWordScoreDetail {
        /** WordScoreDetail overall */
        overall?: number | null

        /** WordScoreDetail pronunciation */
        pronunciation?: number | null

        /** WordScoreDetail rawscore */
        rawscore?: number | null

        /** WordScoreDetail stress */
        stress?: number | null

        /** WordScoreDetail tempo */
        tempo?: number | null

        /** WordScoreDetail intonation */
        intonation?: number | null

        /** WordScoreDetail tone */
        tone?: number | null
      }

      /** Represents a WordScoreDetail. */
      class WordScoreDetail implements IWordScoreDetail {
        /**
         * Constructs a new WordScoreDetail.
         * @param [properties] Properties to set
         */
        constructor(properties?: dolemgo.scorer.Score.IWordScoreDetail)

        /** WordScoreDetail overall. */
        public overall: number

        /** WordScoreDetail pronunciation. */
        public pronunciation: number

        /** WordScoreDetail rawscore. */
        public rawscore: number

        /** WordScoreDetail stress. */
        public stress: number

        /** WordScoreDetail tempo. */
        public tempo: number

        /** WordScoreDetail intonation. */
        public intonation: number

        /** WordScoreDetail tone. */
        public tone: number

        /**
         * Creates a new WordScoreDetail instance using the specified properties.
         * @param [properties] Properties to set
         * @returns WordScoreDetail instance
         */
        public static create(
          properties?: dolemgo.scorer.Score.IWordScoreDetail,
        ): dolemgo.scorer.Score.WordScoreDetail

        /**
         * Encodes the specified WordScoreDetail message. Does not implicitly {@link dolemgo.scorer.Score.WordScoreDetail.verify|verify} messages.
         * @param message WordScoreDetail message or plain object to encode
         * @param [writer] Writer to encode to
         * @returns Writer
         */
        public static encode(
          message: dolemgo.scorer.Score.IWordScoreDetail,
          writer?: $protobuf.Writer,
        ): $protobuf.Writer

        /**
         * Encodes the specified WordScoreDetail message, length delimited. Does not implicitly {@link dolemgo.scorer.Score.WordScoreDetail.verify|verify} messages.
         * @param message WordScoreDetail message or plain object to encode
         * @param [writer] Writer to encode to
         * @returns Writer
         */
        public static encodeDelimited(
          message: dolemgo.scorer.Score.IWordScoreDetail,
          writer?: $protobuf.Writer,
        ): $protobuf.Writer

        /**
         * Decodes a WordScoreDetail message from the specified reader or buffer.
         * @param reader Reader or buffer to decode from
         * @param [length] Message length if known beforehand
         * @returns WordScoreDetail
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        public static decode(
          reader: $protobuf.Reader | Uint8Array,
          length?: number,
        ): dolemgo.scorer.Score.WordScoreDetail

        /**
         * Decodes a WordScoreDetail message from the specified reader or buffer, length delimited.
         * @param reader Reader or buffer to decode from
         * @returns WordScoreDetail
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        public static decodeDelimited(
          reader: $protobuf.Reader | Uint8Array,
        ): dolemgo.scorer.Score.WordScoreDetail

        /**
         * Verifies a WordScoreDetail message.
         * @param message Plain object to verify
         * @returns `null` if valid, otherwise the reason why it is not
         */
        public static verify(message: { [k: string]: any }): string | null

        /**
         * Creates a WordScoreDetail message from a plain object. Also converts values to their respective internal types.
         * @param object Plain object
         * @returns WordScoreDetail
         */
        public static fromObject(object: {
          [k: string]: any
        }): dolemgo.scorer.Score.WordScoreDetail

        /**
         * Creates a plain object from a WordScoreDetail message. Also converts values to other types if specified.
         * @param message WordScoreDetail
         * @param [options] Conversion options
         * @returns Plain object
         */
        public static toObject(
          message: dolemgo.scorer.Score.WordScoreDetail,
          options?: $protobuf.IConversionOptions,
        ): { [k: string]: any }

        /**
         * Converts this WordScoreDetail to JSON.
         * @returns JSON object
         */
        public toJSON(): { [k: string]: any }
      }

      /** Properties of a WordScoreStats. */
      interface IWordScoreStats {
        /** WordScoreStats keyword */
        keyword?: number | null

        /** WordScoreStats start */
        start?: number | Long | null

        /** WordScoreStats end */
        end?: number | Long | null

        /** WordScoreStats post */
        post?: number | Long | null

        /** WordScoreStats duration */
        duration?: number | null

        /** WordScoreStats energy */
        energy?: number | null

        /** WordScoreStats stressPattern */
        stressPattern?: number | null

        /** WordScoreStats conf */
        conf?: number | null
      }

      /** Represents a WordScoreStats. */
      class WordScoreStats implements IWordScoreStats {
        /**
         * Constructs a new WordScoreStats.
         * @param [properties] Properties to set
         */
        constructor(properties?: dolemgo.scorer.Score.IWordScoreStats)

        /** WordScoreStats keyword. */
        public keyword: number

        /** WordScoreStats start. */
        public start: number | Long

        /** WordScoreStats end. */
        public end: number | Long

        /** WordScoreStats post. */
        public post: number | Long

        /** WordScoreStats duration. */
        public duration: number

        /** WordScoreStats energy. */
        public energy: number

        /** WordScoreStats stressPattern. */
        public stressPattern: number

        /** WordScoreStats conf. */
        public conf: number

        /**
         * Creates a new WordScoreStats instance using the specified properties.
         * @param [properties] Properties to set
         * @returns WordScoreStats instance
         */
        public static create(
          properties?: dolemgo.scorer.Score.IWordScoreStats,
        ): dolemgo.scorer.Score.WordScoreStats

        /**
         * Encodes the specified WordScoreStats message. Does not implicitly {@link dolemgo.scorer.Score.WordScoreStats.verify|verify} messages.
         * @param message WordScoreStats message or plain object to encode
         * @param [writer] Writer to encode to
         * @returns Writer
         */
        public static encode(
          message: dolemgo.scorer.Score.IWordScoreStats,
          writer?: $protobuf.Writer,
        ): $protobuf.Writer

        /**
         * Encodes the specified WordScoreStats message, length delimited. Does not implicitly {@link dolemgo.scorer.Score.WordScoreStats.verify|verify} messages.
         * @param message WordScoreStats message or plain object to encode
         * @param [writer] Writer to encode to
         * @returns Writer
         */
        public static encodeDelimited(
          message: dolemgo.scorer.Score.IWordScoreStats,
          writer?: $protobuf.Writer,
        ): $protobuf.Writer

        /**
         * Decodes a WordScoreStats message from the specified reader or buffer.
         * @param reader Reader or buffer to decode from
         * @param [length] Message length if known beforehand
         * @returns WordScoreStats
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        public static decode(
          reader: $protobuf.Reader | Uint8Array,
          length?: number,
        ): dolemgo.scorer.Score.WordScoreStats

        /**
         * Decodes a WordScoreStats message from the specified reader or buffer, length delimited.
         * @param reader Reader or buffer to decode from
         * @returns WordScoreStats
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        public static decodeDelimited(
          reader: $protobuf.Reader | Uint8Array,
        ): dolemgo.scorer.Score.WordScoreStats

        /**
         * Verifies a WordScoreStats message.
         * @param message Plain object to verify
         * @returns `null` if valid, otherwise the reason why it is not
         */
        public static verify(message: { [k: string]: any }): string | null

        /**
         * Creates a WordScoreStats message from a plain object. Also converts values to their respective internal types.
         * @param object Plain object
         * @returns WordScoreStats
         */
        public static fromObject(object: {
          [k: string]: any
        }): dolemgo.scorer.Score.WordScoreStats

        /**
         * Creates a plain object from a WordScoreStats message. Also converts values to other types if specified.
         * @param message WordScoreStats
         * @param [options] Conversion options
         * @returns Plain object
         */
        public static toObject(
          message: dolemgo.scorer.Score.WordScoreStats,
          options?: $protobuf.IConversionOptions,
        ): { [k: string]: any }

        /**
         * Converts this WordScoreStats to JSON.
         * @returns JSON object
         */
        public toJSON(): { [k: string]: any }
      }

      /** Properties of a WordScore. */
      interface IWordScore {
        /** WordScore word */
        word?: string | null

        /** WordScore scores */
        scores?: dolemgo.scorer.Score.IWordScoreDetail | null

        /** WordScore stats */
        stats?: dolemgo.scorer.Score.IWordScoreStats | null
      }

      /** Represents a WordScore. */
      class WordScore implements IWordScore {
        /**
         * Constructs a new WordScore.
         * @param [properties] Properties to set
         */
        constructor(properties?: dolemgo.scorer.Score.IWordScore)

        /** WordScore word. */
        public word: string

        /** WordScore scores. */
        public scores?: dolemgo.scorer.Score.IWordScoreDetail | null

        /** WordScore stats. */
        public stats?: dolemgo.scorer.Score.IWordScoreStats | null

        /**
         * Creates a new WordScore instance using the specified properties.
         * @param [properties] Properties to set
         * @returns WordScore instance
         */
        public static create(
          properties?: dolemgo.scorer.Score.IWordScore,
        ): dolemgo.scorer.Score.WordScore

        /**
         * Encodes the specified WordScore message. Does not implicitly {@link dolemgo.scorer.Score.WordScore.verify|verify} messages.
         * @param message WordScore message or plain object to encode
         * @param [writer] Writer to encode to
         * @returns Writer
         */
        public static encode(
          message: dolemgo.scorer.Score.IWordScore,
          writer?: $protobuf.Writer,
        ): $protobuf.Writer

        /**
         * Encodes the specified WordScore message, length delimited. Does not implicitly {@link dolemgo.scorer.Score.WordScore.verify|verify} messages.
         * @param message WordScore message or plain object to encode
         * @param [writer] Writer to encode to
         * @returns Writer
         */
        public static encodeDelimited(
          message: dolemgo.scorer.Score.IWordScore,
          writer?: $protobuf.Writer,
        ): $protobuf.Writer

        /**
         * Decodes a WordScore message from the specified reader or buffer.
         * @param reader Reader or buffer to decode from
         * @param [length] Message length if known beforehand
         * @returns WordScore
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        public static decode(
          reader: $protobuf.Reader | Uint8Array,
          length?: number,
        ): dolemgo.scorer.Score.WordScore

        /**
         * Decodes a WordScore message from the specified reader or buffer, length delimited.
         * @param reader Reader or buffer to decode from
         * @returns WordScore
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        public static decodeDelimited(
          reader: $protobuf.Reader | Uint8Array,
        ): dolemgo.scorer.Score.WordScore

        /**
         * Verifies a WordScore message.
         * @param message Plain object to verify
         * @returns `null` if valid, otherwise the reason why it is not
         */
        public static verify(message: { [k: string]: any }): string | null

        /**
         * Creates a WordScore message from a plain object. Also converts values to their respective internal types.
         * @param object Plain object
         * @returns WordScore
         */
        public static fromObject(object: {
          [k: string]: any
        }): dolemgo.scorer.Score.WordScore

        /**
         * Creates a plain object from a WordScore message. Also converts values to other types if specified.
         * @param message WordScore
         * @param [options] Conversion options
         * @returns Plain object
         */
        public static toObject(
          message: dolemgo.scorer.Score.WordScore,
          options?: $protobuf.IConversionOptions,
        ): { [k: string]: any }

        /**
         * Converts this WordScore to JSON.
         * @returns JSON object
         */
        public toJSON(): { [k: string]: any }
      }

      /** StorageKind enum. */
      enum StorageKind {
        INVALID = 0,
        S3 = 1,
        QINIU = 2,
        OSS = 3,
      }
    }
  }
}

/** Namespace google. */
export namespace google {
  /** Namespace protobuf. */
  namespace protobuf {
    /** Properties of an Any. */
    interface IAny {
      /** Any type_url */
      type_url?: string | null

      /** Any value */
      value?: Uint8Array | null
    }

    /** Represents an Any. */
    class Any implements IAny {
      /**
       * Constructs a new Any.
       * @param [properties] Properties to set
       */
      constructor(properties?: google.protobuf.IAny)

      /** Any type_url. */
      public type_url: string

      /** Any value. */
      public value: Uint8Array

      /**
       * Creates a new Any instance using the specified properties.
       * @param [properties] Properties to set
       * @returns Any instance
       */
      public static create(
        properties?: google.protobuf.IAny,
      ): google.protobuf.Any

      /**
       * Encodes the specified Any message. Does not implicitly {@link google.protobuf.Any.verify|verify} messages.
       * @param message Any message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encode(
        message: google.protobuf.IAny,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Encodes the specified Any message, length delimited. Does not implicitly {@link google.protobuf.Any.verify|verify} messages.
       * @param message Any message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encodeDelimited(
        message: google.protobuf.IAny,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Decodes an Any message from the specified reader or buffer.
       * @param reader Reader or buffer to decode from
       * @param [length] Message length if known beforehand
       * @returns Any
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decode(
        reader: $protobuf.Reader | Uint8Array,
        length?: number,
      ): google.protobuf.Any

      /**
       * Decodes an Any message from the specified reader or buffer, length delimited.
       * @param reader Reader or buffer to decode from
       * @returns Any
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decodeDelimited(
        reader: $protobuf.Reader | Uint8Array,
      ): google.protobuf.Any

      /**
       * Verifies an Any message.
       * @param message Plain object to verify
       * @returns `null` if valid, otherwise the reason why it is not
       */
      public static verify(message: { [k: string]: any }): string | null

      /**
       * Creates an Any message from a plain object. Also converts values to their respective internal types.
       * @param object Plain object
       * @returns Any
       */
      public static fromObject(object: {
        [k: string]: any
      }): google.protobuf.Any

      /**
       * Creates a plain object from an Any message. Also converts values to other types if specified.
       * @param message Any
       * @param [options] Conversion options
       * @returns Plain object
       */
      public static toObject(
        message: google.protobuf.Any,
        options?: $protobuf.IConversionOptions,
      ): { [k: string]: any }

      /**
       * Converts this Any to JSON.
       * @returns JSON object
       */
      public toJSON(): { [k: string]: any }
    }
  }

  /** Namespace rpc. */
  namespace rpc {
    /** Properties of a Status. */
    interface IStatus {
      /** Status code */
      code?: number | null

      /** Status message */
      message?: string | null

      /** Status details */
      details?: google.protobuf.IAny[] | null
    }

    /** Represents a Status. */
    class Status implements IStatus {
      /**
       * Constructs a new Status.
       * @param [properties] Properties to set
       */
      constructor(properties?: google.rpc.IStatus)

      /** Status code. */
      public code: number

      /** Status message. */
      public message: string

      /** Status details. */
      public details: google.protobuf.IAny[]

      /**
       * Creates a new Status instance using the specified properties.
       * @param [properties] Properties to set
       * @returns Status instance
       */
      public static create(properties?: google.rpc.IStatus): google.rpc.Status

      /**
       * Encodes the specified Status message. Does not implicitly {@link google.rpc.Status.verify|verify} messages.
       * @param message Status message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encode(
        message: google.rpc.IStatus,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Encodes the specified Status message, length delimited. Does not implicitly {@link google.rpc.Status.verify|verify} messages.
       * @param message Status message or plain object to encode
       * @param [writer] Writer to encode to
       * @returns Writer
       */
      public static encodeDelimited(
        message: google.rpc.IStatus,
        writer?: $protobuf.Writer,
      ): $protobuf.Writer

      /**
       * Decodes a Status message from the specified reader or buffer.
       * @param reader Reader or buffer to decode from
       * @param [length] Message length if known beforehand
       * @returns Status
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decode(
        reader: $protobuf.Reader | Uint8Array,
        length?: number,
      ): google.rpc.Status

      /**
       * Decodes a Status message from the specified reader or buffer, length delimited.
       * @param reader Reader or buffer to decode from
       * @returns Status
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */
      public static decodeDelimited(
        reader: $protobuf.Reader | Uint8Array,
      ): google.rpc.Status

      /**
       * Verifies a Status message.
       * @param message Plain object to verify
       * @returns `null` if valid, otherwise the reason why it is not
       */
      public static verify(message: { [k: string]: any }): string | null

      /**
       * Creates a Status message from a plain object. Also converts values to their respective internal types.
       * @param object Plain object
       * @returns Status
       */
      public static fromObject(object: { [k: string]: any }): google.rpc.Status

      /**
       * Creates a plain object from a Status message. Also converts values to other types if specified.
       * @param message Status
       * @param [options] Conversion options
       * @returns Plain object
       */
      public static toObject(
        message: google.rpc.Status,
        options?: $protobuf.IConversionOptions,
      ): { [k: string]: any }

      /**
       * Converts this Status to JSON.
       * @returns JSON object
       */
      public toJSON(): { [k: string]: any }
    }
  }
}
